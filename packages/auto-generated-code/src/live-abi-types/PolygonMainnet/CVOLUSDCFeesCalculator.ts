/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IFeesCalculator {
  export type CVIValueStruct = { period: BigNumberish; cviValue: BigNumberish };

  export type CVIValueStructOutput = [BigNumber, number] & {
    period: BigNumber;
    cviValue: number;
  };

  export type SnapshotUpdateStruct = {
    latestSnapshot: BigNumberish;
    singleUnitFundingFee: BigNumberish;
    totalTime: BigNumberish;
    totalRounds: BigNumberish;
    cviValueTimestamp: BigNumberish;
    newLatestRoundId: BigNumberish;
    cviValue: BigNumberish;
    updatedSnapshot: boolean;
    updatedLatestRoundId: boolean;
    updatedLatestTimestamp: boolean;
    updatedTurbulenceData: boolean;
  };

  export type SnapshotUpdateStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    boolean,
    boolean,
    boolean,
    boolean
  ] & {
    latestSnapshot: BigNumber;
    singleUnitFundingFee: BigNumber;
    totalTime: BigNumber;
    totalRounds: BigNumber;
    cviValueTimestamp: BigNumber;
    newLatestRoundId: BigNumber;
    cviValue: number;
    updatedSnapshot: boolean;
    updatedLatestRoundId: boolean;
    updatedLatestTimestamp: boolean;
    updatedTurbulenceData: boolean;
  };
}

export interface CVOLUSDCFeesCalculatorInterface extends utils.Interface {
  contractName: "CVOLUSDCFeesCalculator";
  functions: {
    "adjustedVolumeTimestamp()": FunctionFragment;
    "buyingPremiumFeeMaxPercent()": FunctionFragment;
    "buyingPremiumThreshold()": FunctionFragment;
    "calculateBuyingPremiumFee(uint168,uint8,uint256,uint256,bool)": FunctionFragment;
    "calculateBuyingPremiumFeeWithAddendum(uint168,uint8,uint256,uint256,bool,uint16)": FunctionFragment;
    "calculateClosePositionFeePercent(uint256,bool)": FunctionFragment;
    "calculateClosingPremiumFee(uint256,uint256,uint256,bool)": FunctionFragment;
    "calculateClosingPremiumFeeWithAddendum(uint256,uint256,bool)": FunctionFragment;
    "calculateSingleUnitFundingFee((uint256,uint16)[])": FunctionFragment;
    "calculateTurbulenceIndicatorPercent(uint256,uint256,uint16,uint16)": FunctionFragment;
    "calculateWithdrawFeePercent(uint256)": FunctionFragment;
    "closeAdjustedVolumeTimestamp()": FunctionFragment;
    "closeMaxVolumeFee()": FunctionFragment;
    "closeMaxVolumeFeeDeltaCollateral()": FunctionFragment;
    "closeMidVolumeFee()": FunctionFragment;
    "closePositionFeeDecayPeriod()": FunctionFragment;
    "closePositionFeePercent()": FunctionFragment;
    "closePositionLPFeePercent()": FunctionFragment;
    "closePositionMaxFeePercent()": FunctionFragment;
    "closeVolumeFeeTimeWindow()": FunctionFragment;
    "closeVolumeTimeWindow()": FunctionFragment;
    "closingPremiumFeeMaxPercent()": FunctionFragment;
    "collateralToBuyingPremiumMapping(uint256)": FunctionFragment;
    "cviOracle()": FunctionFragment;
    "depositFeePercent()": FunctionFragment;
    "fundingFeeConstantRate()": FunctionFragment;
    "maxCVIValue()": FunctionFragment;
    "maxTurbulenceFeePercentToTrim()": FunctionFragment;
    "maxVolumeFee()": FunctionFragment;
    "maxVolumeFeeDeltaCollateral()": FunctionFragment;
    "midVolumeFee()": FunctionFragment;
    "openPositionFeePercent()": FunctionFragment;
    "openPositionFees()": FunctionFragment;
    "openPositionLPFeePercent()": FunctionFragment;
    "oracleHeartbeatPeriod()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBuyingPremiumFeeMax(uint16)": FunctionFragment;
    "setBuyingPremiumThreshold(uint16)": FunctionFragment;
    "setCloseMaxVolumeFee(uint16)": FunctionFragment;
    "setCloseMaxVolumeFeeDeltaCollateral(uint16)": FunctionFragment;
    "setCloseMidVolumeFee(uint16)": FunctionFragment;
    "setClosePositionFee(uint16)": FunctionFragment;
    "setClosePositionFeeDecay(uint256)": FunctionFragment;
    "setClosePositionLPFee(uint16)": FunctionFragment;
    "setClosePositionMaxFee(uint16)": FunctionFragment;
    "setCloseVolumeFeeTimeWindow(uint16)": FunctionFragment;
    "setCloseVolumeTimeWindow(uint16)": FunctionFragment;
    "setClosingPremiumFeeMax(uint16)": FunctionFragment;
    "setCollateralToBuyingPremiumMapping(uint16[])": FunctionFragment;
    "setDepositFee(uint16)": FunctionFragment;
    "setFundingFeeConstantRate(uint16)": FunctionFragment;
    "setMaxTurbulenceFeePercentToTrim(uint16)": FunctionFragment;
    "setMaxVolumeFee(uint16)": FunctionFragment;
    "setMaxVolumeFeeDeltaCollateral(uint16)": FunctionFragment;
    "setMidVolumeFee(uint16)": FunctionFragment;
    "setOpenPositionFee(uint16)": FunctionFragment;
    "setOpenPositionLPFee(uint16)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "setOracleHeartbeatPeriod(uint256)": FunctionFragment;
    "setStateUpdator(address)": FunctionFragment;
    "setTurbulenceDeviationPercent(uint16)": FunctionFragment;
    "setTurbulenceDeviationThresholdPercent(uint16)": FunctionFragment;
    "setTurbulenceStep(uint16)": FunctionFragment;
    "setVolumeFeeTimeWindow(uint16)": FunctionFragment;
    "setVolumeTimeWindow(uint16)": FunctionFragment;
    "setWithdrawFee(uint16)": FunctionFragment;
    "stateUpdator()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "turbulenceDeviationPercentage()": FunctionFragment;
    "turbulenceDeviationThresholdPercent()": FunctionFragment;
    "turbulenceIndicatorPercent()": FunctionFragment;
    "turbulenceStepPercent()": FunctionFragment;
    "updateAdjustedTimestamp(uint256,uint256)": FunctionFragment;
    "updateCloseAdjustedTimestamp(uint256,uint256)": FunctionFragment;
    "updateSnapshots(uint256,uint256,uint256,uint80)": FunctionFragment;
    "updateTurbulenceIndicatorPercent(uint256,uint256,uint16,uint16)": FunctionFragment;
    "volumeFeeTimeWindow()": FunctionFragment;
    "volumeTimeWindow()": FunctionFragment;
    "withdrawFeePercent()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "adjustedVolumeTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyingPremiumFeeMaxPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyingPremiumThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBuyingPremiumFee",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBuyingPremiumFeeWithAddendum",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateClosePositionFeePercent",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateClosingPremiumFee",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateClosingPremiumFeeWithAddendum",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSingleUnitFundingFee",
    values: [IFeesCalculator.CVIValueStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTurbulenceIndicatorPercent",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateWithdrawFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeAdjustedVolumeTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeMaxVolumeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeMaxVolumeFeeDeltaCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeMidVolumeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionFeeDecayPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionLPFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionMaxFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeVolumeFeeTimeWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeVolumeTimeWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closingPremiumFeeMaxPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToBuyingPremiumMapping",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cviOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingFeeConstantRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxCVIValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTurbulenceFeePercentToTrim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxVolumeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxVolumeFeeDeltaCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "midVolumeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionLPFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleHeartbeatPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyingPremiumFeeMax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyingPremiumThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCloseMaxVolumeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCloseMaxVolumeFeeDeltaCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCloseMidVolumeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClosePositionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClosePositionFeeDecay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClosePositionLPFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClosePositionMaxFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCloseVolumeFeeTimeWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCloseVolumeTimeWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClosingPremiumFeeMax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralToBuyingPremiumMapping",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingFeeConstantRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTurbulenceFeePercentToTrim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxVolumeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxVolumeFeeDeltaCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMidVolumeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpenPositionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpenPositionLPFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOracleHeartbeatPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStateUpdator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTurbulenceDeviationPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTurbulenceDeviationThresholdPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTurbulenceStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVolumeFeeTimeWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVolumeTimeWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateUpdator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "turbulenceDeviationPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "turbulenceDeviationThresholdPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "turbulenceIndicatorPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "turbulenceStepPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAdjustedTimestamp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCloseAdjustedTimestamp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSnapshots",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTurbulenceIndicatorPercent",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "volumeFeeTimeWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "volumeTimeWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeePercent",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustedVolumeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyingPremiumFeeMaxPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyingPremiumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateBuyingPremiumFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateBuyingPremiumFeeWithAddendum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateClosePositionFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateClosingPremiumFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateClosingPremiumFeeWithAddendum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSingleUnitFundingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTurbulenceIndicatorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateWithdrawFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeAdjustedVolumeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeMaxVolumeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeMaxVolumeFeeDeltaCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeMidVolumeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionFeeDecayPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionLPFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionMaxFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeVolumeFeeTimeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeVolumeTimeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closingPremiumFeeMaxPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToBuyingPremiumMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cviOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingFeeConstantRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCVIValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTurbulenceFeePercentToTrim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxVolumeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxVolumeFeeDeltaCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "midVolumeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionLPFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleHeartbeatPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyingPremiumFeeMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyingPremiumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCloseMaxVolumeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCloseMaxVolumeFeeDeltaCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCloseMidVolumeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClosePositionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClosePositionFeeDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClosePositionLPFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClosePositionMaxFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCloseVolumeFeeTimeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCloseVolumeTimeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClosingPremiumFeeMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralToBuyingPremiumMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingFeeConstantRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTurbulenceFeePercentToTrim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxVolumeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxVolumeFeeDeltaCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMidVolumeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOpenPositionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOpenPositionLPFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOracleHeartbeatPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStateUpdator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTurbulenceDeviationPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTurbulenceDeviationThresholdPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTurbulenceStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVolumeFeeTimeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVolumeTimeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateUpdator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turbulenceDeviationPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turbulenceDeviationThresholdPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turbulenceIndicatorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turbulenceStepPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAdjustedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCloseAdjustedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTurbulenceIndicatorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "volumeFeeTimeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "volumeTimeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeePercent",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CVOLUSDCFeesCalculator extends BaseContract {
  contractName: "CVOLUSDCFeesCalculator";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CVOLUSDCFeesCalculatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjustedVolumeTimestamp(overrides?: CallOverrides): Promise<[number]>;

    buyingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<[number]>;

    buyingPremiumThreshold(overrides?: CallOverrides): Promise<[number]>;

    calculateBuyingPremiumFee(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      _withVolumeFee: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        buyingPremiumFee: BigNumber;
        combinedPremiumFeePercentage: number;
      }
    >;

    calculateBuyingPremiumFeeWithAddendum(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      _withVolumeFee: boolean,
      _turbulenceIndicatorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        buyingPremiumFee: BigNumber;
        combinedPremiumFeePercentage: number;
      }
    >;

    calculateClosePositionFeePercent(
      _creationTimestamp: BigNumberish,
      _isNoLockPositionAddress: boolean,
      overrides?: CallOverrides
    ): Promise<[number]>;

    calculateClosingPremiumFee(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      _withVolumeFee: boolean,
      overrides?: CallOverrides
    ): Promise<[number] & { combinedPremiumFeePercentage: number }>;

    calculateClosingPremiumFeeWithAddendum(
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      _withVolumeFee: boolean,
      overrides?: CallOverrides
    ): Promise<[number] & { combinedPremiumFeePercentage: number }>;

    calculateSingleUnitFundingFee(
      _cviValues: IFeesCalculator.CVIValueStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fundingFee: BigNumber }>;

    calculateTurbulenceIndicatorPercent(
      totalTime: BigNumberish,
      newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    calculateWithdrawFeePercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    closeAdjustedVolumeTimestamp(overrides?: CallOverrides): Promise<[number]>;

    closeMaxVolumeFee(overrides?: CallOverrides): Promise<[number]>;

    closeMaxVolumeFeeDeltaCollateral(
      overrides?: CallOverrides
    ): Promise<[number]>;

    closeMidVolumeFee(overrides?: CallOverrides): Promise<[number]>;

    closePositionFeeDecayPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    closePositionFeePercent(overrides?: CallOverrides): Promise<[number]>;

    closePositionLPFeePercent(overrides?: CallOverrides): Promise<[number]>;

    closePositionMaxFeePercent(overrides?: CallOverrides): Promise<[number]>;

    closeVolumeFeeTimeWindow(overrides?: CallOverrides): Promise<[number]>;

    closeVolumeTimeWindow(overrides?: CallOverrides): Promise<[number]>;

    closingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<[number]>;

    collateralToBuyingPremiumMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    cviOracle(overrides?: CallOverrides): Promise<[string]>;

    depositFeePercent(overrides?: CallOverrides): Promise<[number]>;

    fundingFeeConstantRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxCVIValue(overrides?: CallOverrides): Promise<[number]>;

    maxTurbulenceFeePercentToTrim(overrides?: CallOverrides): Promise<[number]>;

    maxVolumeFee(overrides?: CallOverrides): Promise<[number]>;

    maxVolumeFeeDeltaCollateral(overrides?: CallOverrides): Promise<[number]>;

    midVolumeFee(overrides?: CallOverrides): Promise<[number]>;

    openPositionFeePercent(overrides?: CallOverrides): Promise<[number]>;

    openPositionFees(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & {
        openPositionFeePercentResult: number;
        buyingPremiumFeeMaxPercentResult: number;
      }
    >;

    openPositionLPFeePercent(overrides?: CallOverrides): Promise<[number]>;

    oracleHeartbeatPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuyingPremiumFeeMax(
      _newBuyingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuyingPremiumThreshold(
      _newBuyingPremiumThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCloseMaxVolumeFee(
      _newCloseMaxVolumeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCloseMaxVolumeFeeDeltaCollateral(
      _newCloseMaxVolumeFeeDeltaCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCloseMidVolumeFee(
      _newCloseMidVolumeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClosePositionFee(
      _newClosePositionFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClosePositionFeeDecay(
      _newClosePositionFeeDecayPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClosePositionLPFee(
      _newClosePositionLPFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClosePositionMaxFee(
      _newClosePositionMaxFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCloseVolumeFeeTimeWindow(
      _newCloseVolumeFeeTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCloseVolumeTimeWindow(
      _newCloseVolumeTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClosingPremiumFeeMax(
      _newClosingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollateralToBuyingPremiumMapping(
      _newCollateralToBuyingPremiumMapping: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositFee(
      _newDepositFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundingFeeConstantRate(
      _newfundingFeeConstantRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTurbulenceFeePercentToTrim(
      _newMaxTurbulenceFeePercentToTrim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxVolumeFee(
      _newMaxVolumeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxVolumeFeeDeltaCollateral(
      _newMaxVolumeFeeDeltaCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMidVolumeFee(
      _newMidVolumeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOpenPositionFee(
      _newOpenPositionFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOpenPositionLPFee(
      _newOpenPositionLPFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      _cviOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracleHeartbeatPeriod(
      _newOracleHeartbeatPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStateUpdator(
      _newUpdator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTurbulenceDeviationPercent(
      _newTurbulenceDeviationPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTurbulenceDeviationThresholdPercent(
      _newTurbulenceDeviationThresholdPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTurbulenceStep(
      _newTurbulenceStepPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVolumeFeeTimeWindow(
      _newVolumeFeeTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVolumeTimeWindow(
      _newVolumeTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawFee(
      _newWithdrawFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stateUpdator(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    turbulenceDeviationPercentage(overrides?: CallOverrides): Promise<[number]>;

    turbulenceDeviationThresholdPercent(
      overrides?: CallOverrides
    ): Promise<[number]>;

    turbulenceIndicatorPercent(overrides?: CallOverrides): Promise<[number]>;

    turbulenceStepPercent(overrides?: CallOverrides): Promise<[number]>;

    updateAdjustedTimestamp(
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCloseAdjustedTimestamp(
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSnapshots(
      _latestTimestamp: BigNumberish,
      _blockTimestampSnapshot: BigNumberish,
      _latestTimestampSnapshot: BigNumberish,
      latestOracleRoundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IFeesCalculator.SnapshotUpdateStructOutput] & {
        snapshotUpdate: IFeesCalculator.SnapshotUpdateStructOutput;
      }
    >;

    updateTurbulenceIndicatorPercent(
      _totalTime: BigNumberish,
      _newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    volumeFeeTimeWindow(overrides?: CallOverrides): Promise<[number]>;

    volumeTimeWindow(overrides?: CallOverrides): Promise<[number]>;

    withdrawFeePercent(overrides?: CallOverrides): Promise<[number]>;
  };

  adjustedVolumeTimestamp(overrides?: CallOverrides): Promise<number>;

  buyingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<number>;

  buyingPremiumThreshold(overrides?: CallOverrides): Promise<number>;

  calculateBuyingPremiumFee(
    _tokenAmount: BigNumberish,
    _leverage: BigNumberish,
    _collateralRatio: BigNumberish,
    _lastCollateralRatio: BigNumberish,
    _withVolumeFee: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & {
      buyingPremiumFee: BigNumber;
      combinedPremiumFeePercentage: number;
    }
  >;

  calculateBuyingPremiumFeeWithAddendum(
    _tokenAmount: BigNumberish,
    _leverage: BigNumberish,
    _collateralRatio: BigNumberish,
    _lastCollateralRatio: BigNumberish,
    _withVolumeFee: boolean,
    _turbulenceIndicatorPercent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & {
      buyingPremiumFee: BigNumber;
      combinedPremiumFeePercentage: number;
    }
  >;

  calculateClosePositionFeePercent(
    _creationTimestamp: BigNumberish,
    _isNoLockPositionAddress: boolean,
    overrides?: CallOverrides
  ): Promise<number>;

  calculateClosingPremiumFee(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    _withVolumeFee: boolean,
    overrides?: CallOverrides
  ): Promise<number>;

  calculateClosingPremiumFeeWithAddendum(
    _collateralRatio: BigNumberish,
    _lastCollateralRatio: BigNumberish,
    _withVolumeFee: boolean,
    overrides?: CallOverrides
  ): Promise<number>;

  calculateSingleUnitFundingFee(
    _cviValues: IFeesCalculator.CVIValueStruct[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTurbulenceIndicatorPercent(
    totalTime: BigNumberish,
    newRounds: BigNumberish,
    _lastCVIValue: BigNumberish,
    _currCVIValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  calculateWithdrawFeePercent(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  closeAdjustedVolumeTimestamp(overrides?: CallOverrides): Promise<number>;

  closeMaxVolumeFee(overrides?: CallOverrides): Promise<number>;

  closeMaxVolumeFeeDeltaCollateral(overrides?: CallOverrides): Promise<number>;

  closeMidVolumeFee(overrides?: CallOverrides): Promise<number>;

  closePositionFeeDecayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  closePositionFeePercent(overrides?: CallOverrides): Promise<number>;

  closePositionLPFeePercent(overrides?: CallOverrides): Promise<number>;

  closePositionMaxFeePercent(overrides?: CallOverrides): Promise<number>;

  closeVolumeFeeTimeWindow(overrides?: CallOverrides): Promise<number>;

  closeVolumeTimeWindow(overrides?: CallOverrides): Promise<number>;

  closingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<number>;

  collateralToBuyingPremiumMapping(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  cviOracle(overrides?: CallOverrides): Promise<string>;

  depositFeePercent(overrides?: CallOverrides): Promise<number>;

  fundingFeeConstantRate(overrides?: CallOverrides): Promise<BigNumber>;

  maxCVIValue(overrides?: CallOverrides): Promise<number>;

  maxTurbulenceFeePercentToTrim(overrides?: CallOverrides): Promise<number>;

  maxVolumeFee(overrides?: CallOverrides): Promise<number>;

  maxVolumeFeeDeltaCollateral(overrides?: CallOverrides): Promise<number>;

  midVolumeFee(overrides?: CallOverrides): Promise<number>;

  openPositionFeePercent(overrides?: CallOverrides): Promise<number>;

  openPositionFees(
    overrides?: CallOverrides
  ): Promise<
    [number, number] & {
      openPositionFeePercentResult: number;
      buyingPremiumFeeMaxPercentResult: number;
    }
  >;

  openPositionLPFeePercent(overrides?: CallOverrides): Promise<number>;

  oracleHeartbeatPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuyingPremiumFeeMax(
    _newBuyingPremiumFeeMaxPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuyingPremiumThreshold(
    _newBuyingPremiumThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCloseMaxVolumeFee(
    _newCloseMaxVolumeFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCloseMaxVolumeFeeDeltaCollateral(
    _newCloseMaxVolumeFeeDeltaCollateral: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCloseMidVolumeFee(
    _newCloseMidVolumeFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClosePositionFee(
    _newClosePositionFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClosePositionFeeDecay(
    _newClosePositionFeeDecayPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClosePositionLPFee(
    _newClosePositionLPFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClosePositionMaxFee(
    _newClosePositionMaxFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCloseVolumeFeeTimeWindow(
    _newCloseVolumeFeeTimeWindow: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCloseVolumeTimeWindow(
    _newCloseVolumeTimeWindow: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClosingPremiumFeeMax(
    _newClosingPremiumFeeMaxPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollateralToBuyingPremiumMapping(
    _newCollateralToBuyingPremiumMapping: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositFee(
    _newDepositFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundingFeeConstantRate(
    _newfundingFeeConstantRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTurbulenceFeePercentToTrim(
    _newMaxTurbulenceFeePercentToTrim: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxVolumeFee(
    _newMaxVolumeFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxVolumeFeeDeltaCollateral(
    _newMaxVolumeFeeDeltaCollateral: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMidVolumeFee(
    _newMidVolumeFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOpenPositionFee(
    _newOpenPositionFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOpenPositionLPFee(
    _newOpenPositionLPFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    _cviOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracleHeartbeatPeriod(
    _newOracleHeartbeatPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStateUpdator(
    _newUpdator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTurbulenceDeviationPercent(
    _newTurbulenceDeviationPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTurbulenceDeviationThresholdPercent(
    _newTurbulenceDeviationThresholdPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTurbulenceStep(
    _newTurbulenceStepPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVolumeFeeTimeWindow(
    _newVolumeFeeTimeWindow: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVolumeTimeWindow(
    _newVolumeTimeWindow: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawFee(
    _newWithdrawFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stateUpdator(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  turbulenceDeviationPercentage(overrides?: CallOverrides): Promise<number>;

  turbulenceDeviationThresholdPercent(
    overrides?: CallOverrides
  ): Promise<number>;

  turbulenceIndicatorPercent(overrides?: CallOverrides): Promise<number>;

  turbulenceStepPercent(overrides?: CallOverrides): Promise<number>;

  updateAdjustedTimestamp(
    _collateralRatio: BigNumberish,
    _lastCollateralRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCloseAdjustedTimestamp(
    _collateralRatio: BigNumberish,
    _lastCollateralRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSnapshots(
    _latestTimestamp: BigNumberish,
    _blockTimestampSnapshot: BigNumberish,
    _latestTimestampSnapshot: BigNumberish,
    latestOracleRoundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IFeesCalculator.SnapshotUpdateStructOutput>;

  updateTurbulenceIndicatorPercent(
    _totalTime: BigNumberish,
    _newRounds: BigNumberish,
    _lastCVIValue: BigNumberish,
    _currCVIValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  volumeFeeTimeWindow(overrides?: CallOverrides): Promise<number>;

  volumeTimeWindow(overrides?: CallOverrides): Promise<number>;

  withdrawFeePercent(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    adjustedVolumeTimestamp(overrides?: CallOverrides): Promise<number>;

    buyingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<number>;

    buyingPremiumThreshold(overrides?: CallOverrides): Promise<number>;

    calculateBuyingPremiumFee(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      _withVolumeFee: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        buyingPremiumFee: BigNumber;
        combinedPremiumFeePercentage: number;
      }
    >;

    calculateBuyingPremiumFeeWithAddendum(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      _withVolumeFee: boolean,
      _turbulenceIndicatorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        buyingPremiumFee: BigNumber;
        combinedPremiumFeePercentage: number;
      }
    >;

    calculateClosePositionFeePercent(
      _creationTimestamp: BigNumberish,
      _isNoLockPositionAddress: boolean,
      overrides?: CallOverrides
    ): Promise<number>;

    calculateClosingPremiumFee(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      _withVolumeFee: boolean,
      overrides?: CallOverrides
    ): Promise<number>;

    calculateClosingPremiumFeeWithAddendum(
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      _withVolumeFee: boolean,
      overrides?: CallOverrides
    ): Promise<number>;

    calculateSingleUnitFundingFee(
      _cviValues: IFeesCalculator.CVIValueStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTurbulenceIndicatorPercent(
      totalTime: BigNumberish,
      newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    calculateWithdrawFeePercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    closeAdjustedVolumeTimestamp(overrides?: CallOverrides): Promise<number>;

    closeMaxVolumeFee(overrides?: CallOverrides): Promise<number>;

    closeMaxVolumeFeeDeltaCollateral(
      overrides?: CallOverrides
    ): Promise<number>;

    closeMidVolumeFee(overrides?: CallOverrides): Promise<number>;

    closePositionFeeDecayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    closePositionFeePercent(overrides?: CallOverrides): Promise<number>;

    closePositionLPFeePercent(overrides?: CallOverrides): Promise<number>;

    closePositionMaxFeePercent(overrides?: CallOverrides): Promise<number>;

    closeVolumeFeeTimeWindow(overrides?: CallOverrides): Promise<number>;

    closeVolumeTimeWindow(overrides?: CallOverrides): Promise<number>;

    closingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<number>;

    collateralToBuyingPremiumMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    cviOracle(overrides?: CallOverrides): Promise<string>;

    depositFeePercent(overrides?: CallOverrides): Promise<number>;

    fundingFeeConstantRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxCVIValue(overrides?: CallOverrides): Promise<number>;

    maxTurbulenceFeePercentToTrim(overrides?: CallOverrides): Promise<number>;

    maxVolumeFee(overrides?: CallOverrides): Promise<number>;

    maxVolumeFeeDeltaCollateral(overrides?: CallOverrides): Promise<number>;

    midVolumeFee(overrides?: CallOverrides): Promise<number>;

    openPositionFeePercent(overrides?: CallOverrides): Promise<number>;

    openPositionFees(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & {
        openPositionFeePercentResult: number;
        buyingPremiumFeeMaxPercentResult: number;
      }
    >;

    openPositionLPFeePercent(overrides?: CallOverrides): Promise<number>;

    oracleHeartbeatPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBuyingPremiumFeeMax(
      _newBuyingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyingPremiumThreshold(
      _newBuyingPremiumThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCloseMaxVolumeFee(
      _newCloseMaxVolumeFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCloseMaxVolumeFeeDeltaCollateral(
      _newCloseMaxVolumeFeeDeltaCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCloseMidVolumeFee(
      _newCloseMidVolumeFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClosePositionFee(
      _newClosePositionFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClosePositionFeeDecay(
      _newClosePositionFeeDecayPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClosePositionLPFee(
      _newClosePositionLPFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClosePositionMaxFee(
      _newClosePositionMaxFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCloseVolumeFeeTimeWindow(
      _newCloseVolumeFeeTimeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCloseVolumeTimeWindow(
      _newCloseVolumeTimeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClosingPremiumFeeMax(
      _newClosingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralToBuyingPremiumMapping(
      _newCollateralToBuyingPremiumMapping: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositFee(
      _newDepositFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingFeeConstantRate(
      _newfundingFeeConstantRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTurbulenceFeePercentToTrim(
      _newMaxTurbulenceFeePercentToTrim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxVolumeFee(
      _newMaxVolumeFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxVolumeFeeDeltaCollateral(
      _newMaxVolumeFeeDeltaCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMidVolumeFee(
      _newMidVolumeFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOpenPositionFee(
      _newOpenPositionFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOpenPositionLPFee(
      _newOpenPositionLPFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(_cviOracle: string, overrides?: CallOverrides): Promise<void>;

    setOracleHeartbeatPeriod(
      _newOracleHeartbeatPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStateUpdator(
      _newUpdator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTurbulenceDeviationPercent(
      _newTurbulenceDeviationPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTurbulenceDeviationThresholdPercent(
      _newTurbulenceDeviationThresholdPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTurbulenceStep(
      _newTurbulenceStepPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVolumeFeeTimeWindow(
      _newVolumeFeeTimeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVolumeTimeWindow(
      _newVolumeTimeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawFee(
      _newWithdrawFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stateUpdator(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    turbulenceDeviationPercentage(overrides?: CallOverrides): Promise<number>;

    turbulenceDeviationThresholdPercent(
      overrides?: CallOverrides
    ): Promise<number>;

    turbulenceIndicatorPercent(overrides?: CallOverrides): Promise<number>;

    turbulenceStepPercent(overrides?: CallOverrides): Promise<number>;

    updateAdjustedTimestamp(
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCloseAdjustedTimestamp(
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSnapshots(
      _latestTimestamp: BigNumberish,
      _blockTimestampSnapshot: BigNumberish,
      _latestTimestampSnapshot: BigNumberish,
      latestOracleRoundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IFeesCalculator.SnapshotUpdateStructOutput>;

    updateTurbulenceIndicatorPercent(
      _totalTime: BigNumberish,
      _newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    volumeFeeTimeWindow(overrides?: CallOverrides): Promise<number>;

    volumeTimeWindow(overrides?: CallOverrides): Promise<number>;

    withdrawFeePercent(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    adjustedVolumeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    buyingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

    buyingPremiumThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    calculateBuyingPremiumFee(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      _withVolumeFee: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateBuyingPremiumFeeWithAddendum(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      _withVolumeFee: boolean,
      _turbulenceIndicatorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateClosePositionFeePercent(
      _creationTimestamp: BigNumberish,
      _isNoLockPositionAddress: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateClosingPremiumFee(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      _withVolumeFee: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateClosingPremiumFeeWithAddendum(
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      _withVolumeFee: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSingleUnitFundingFee(
      _cviValues: IFeesCalculator.CVIValueStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTurbulenceIndicatorPercent(
      totalTime: BigNumberish,
      newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateWithdrawFeePercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeAdjustedVolumeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    closeMaxVolumeFee(overrides?: CallOverrides): Promise<BigNumber>;

    closeMaxVolumeFeeDeltaCollateral(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeMidVolumeFee(overrides?: CallOverrides): Promise<BigNumber>;

    closePositionFeeDecayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    closePositionFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    closePositionLPFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    closePositionMaxFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    closeVolumeFeeTimeWindow(overrides?: CallOverrides): Promise<BigNumber>;

    closeVolumeTimeWindow(overrides?: CallOverrides): Promise<BigNumber>;

    closingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToBuyingPremiumMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cviOracle(overrides?: CallOverrides): Promise<BigNumber>;

    depositFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    fundingFeeConstantRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxCVIValue(overrides?: CallOverrides): Promise<BigNumber>;

    maxTurbulenceFeePercentToTrim(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxVolumeFee(overrides?: CallOverrides): Promise<BigNumber>;

    maxVolumeFeeDeltaCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    midVolumeFee(overrides?: CallOverrides): Promise<BigNumber>;

    openPositionFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    openPositionFees(overrides?: CallOverrides): Promise<BigNumber>;

    openPositionLPFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    oracleHeartbeatPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuyingPremiumFeeMax(
      _newBuyingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuyingPremiumThreshold(
      _newBuyingPremiumThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCloseMaxVolumeFee(
      _newCloseMaxVolumeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCloseMaxVolumeFeeDeltaCollateral(
      _newCloseMaxVolumeFeeDeltaCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCloseMidVolumeFee(
      _newCloseMidVolumeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClosePositionFee(
      _newClosePositionFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClosePositionFeeDecay(
      _newClosePositionFeeDecayPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClosePositionLPFee(
      _newClosePositionLPFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClosePositionMaxFee(
      _newClosePositionMaxFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCloseVolumeFeeTimeWindow(
      _newCloseVolumeFeeTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCloseVolumeTimeWindow(
      _newCloseVolumeTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClosingPremiumFeeMax(
      _newClosingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollateralToBuyingPremiumMapping(
      _newCollateralToBuyingPremiumMapping: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositFee(
      _newDepositFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundingFeeConstantRate(
      _newfundingFeeConstantRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTurbulenceFeePercentToTrim(
      _newMaxTurbulenceFeePercentToTrim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxVolumeFee(
      _newMaxVolumeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxVolumeFeeDeltaCollateral(
      _newMaxVolumeFeeDeltaCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMidVolumeFee(
      _newMidVolumeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOpenPositionFee(
      _newOpenPositionFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOpenPositionLPFee(
      _newOpenPositionLPFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracle(
      _cviOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracleHeartbeatPeriod(
      _newOracleHeartbeatPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStateUpdator(
      _newUpdator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTurbulenceDeviationPercent(
      _newTurbulenceDeviationPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTurbulenceDeviationThresholdPercent(
      _newTurbulenceDeviationThresholdPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTurbulenceStep(
      _newTurbulenceStepPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVolumeFeeTimeWindow(
      _newVolumeFeeTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVolumeTimeWindow(
      _newVolumeTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawFee(
      _newWithdrawFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stateUpdator(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    turbulenceDeviationPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    turbulenceDeviationThresholdPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    turbulenceIndicatorPercent(overrides?: CallOverrides): Promise<BigNumber>;

    turbulenceStepPercent(overrides?: CallOverrides): Promise<BigNumber>;

    updateAdjustedTimestamp(
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCloseAdjustedTimestamp(
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSnapshots(
      _latestTimestamp: BigNumberish,
      _blockTimestampSnapshot: BigNumberish,
      _latestTimestampSnapshot: BigNumberish,
      latestOracleRoundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateTurbulenceIndicatorPercent(
      _totalTime: BigNumberish,
      _newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    volumeFeeTimeWindow(overrides?: CallOverrides): Promise<BigNumber>;

    volumeTimeWindow(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeePercent(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustedVolumeTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyingPremiumFeeMaxPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyingPremiumThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateBuyingPremiumFee(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      _withVolumeFee: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateBuyingPremiumFeeWithAddendum(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      _withVolumeFee: boolean,
      _turbulenceIndicatorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateClosePositionFeePercent(
      _creationTimestamp: BigNumberish,
      _isNoLockPositionAddress: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateClosingPremiumFee(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      _withVolumeFee: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateClosingPremiumFeeWithAddendum(
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      _withVolumeFee: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSingleUnitFundingFee(
      _cviValues: IFeesCalculator.CVIValueStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTurbulenceIndicatorPercent(
      totalTime: BigNumberish,
      newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateWithdrawFeePercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeAdjustedVolumeTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeMaxVolumeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeMaxVolumeFeeDeltaCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeMidVolumeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closePositionFeeDecayPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePositionFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePositionLPFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePositionMaxFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeVolumeFeeTimeWindow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeVolumeTimeWindow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closingPremiumFeeMaxPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralToBuyingPremiumMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cviOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingFeeConstantRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxCVIValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTurbulenceFeePercentToTrim(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxVolumeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxVolumeFeeDeltaCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    midVolumeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openPositionFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPositionFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openPositionLPFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleHeartbeatPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuyingPremiumFeeMax(
      _newBuyingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuyingPremiumThreshold(
      _newBuyingPremiumThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCloseMaxVolumeFee(
      _newCloseMaxVolumeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCloseMaxVolumeFeeDeltaCollateral(
      _newCloseMaxVolumeFeeDeltaCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCloseMidVolumeFee(
      _newCloseMidVolumeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClosePositionFee(
      _newClosePositionFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClosePositionFeeDecay(
      _newClosePositionFeeDecayPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClosePositionLPFee(
      _newClosePositionLPFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClosePositionMaxFee(
      _newClosePositionMaxFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCloseVolumeFeeTimeWindow(
      _newCloseVolumeFeeTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCloseVolumeTimeWindow(
      _newCloseVolumeTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClosingPremiumFeeMax(
      _newClosingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralToBuyingPremiumMapping(
      _newCollateralToBuyingPremiumMapping: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositFee(
      _newDepositFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundingFeeConstantRate(
      _newfundingFeeConstantRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTurbulenceFeePercentToTrim(
      _newMaxTurbulenceFeePercentToTrim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxVolumeFee(
      _newMaxVolumeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxVolumeFeeDeltaCollateral(
      _newMaxVolumeFeeDeltaCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMidVolumeFee(
      _newMidVolumeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOpenPositionFee(
      _newOpenPositionFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOpenPositionLPFee(
      _newOpenPositionLPFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      _cviOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracleHeartbeatPeriod(
      _newOracleHeartbeatPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStateUpdator(
      _newUpdator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTurbulenceDeviationPercent(
      _newTurbulenceDeviationPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTurbulenceDeviationThresholdPercent(
      _newTurbulenceDeviationThresholdPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTurbulenceStep(
      _newTurbulenceStepPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVolumeFeeTimeWindow(
      _newVolumeFeeTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVolumeTimeWindow(
      _newVolumeTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawFee(
      _newWithdrawFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stateUpdator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    turbulenceDeviationPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    turbulenceDeviationThresholdPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    turbulenceIndicatorPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    turbulenceStepPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateAdjustedTimestamp(
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCloseAdjustedTimestamp(
      _collateralRatio: BigNumberish,
      _lastCollateralRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSnapshots(
      _latestTimestamp: BigNumberish,
      _blockTimestampSnapshot: BigNumberish,
      _latestTimestampSnapshot: BigNumberish,
      latestOracleRoundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateTurbulenceIndicatorPercent(
      _totalTime: BigNumberish,
      _newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    volumeFeeTimeWindow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    volumeTimeWindow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
