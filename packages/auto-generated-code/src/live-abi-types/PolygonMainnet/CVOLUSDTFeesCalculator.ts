/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IFeesCalculatorV4 {
  export type CVIValueStruct = { period: BigNumberish; cviValue: BigNumberish };

  export type CVIValueStructOutput = [BigNumber, number] & {
    period: BigNumber;
    cviValue: number;
  };
}

export interface CVOLUSDTFeesCalculatorInterface extends utils.Interface {
  contractName: "CVOLUSDTFeesCalculator";
  functions: {
    "buyingPremiumFeeMaxPercent()": FunctionFragment;
    "buyingPremiumThreshold()": FunctionFragment;
    "closePositionFeeDecayPeriod()": FunctionFragment;
    "closePositionFeePercent()": FunctionFragment;
    "closePositionMaxFeePercent()": FunctionFragment;
    "depositFeePercent()": FunctionFragment;
    "fundingFeeConstantRate()": FunctionFragment;
    "maxTurbulenceFeePercentToTrim()": FunctionFragment;
    "openPositionFeePercent()": FunctionFragment;
    "openPositionLPFeePercent()": FunctionFragment;
    "oracleHeartbeatPeriod()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "turbulenceDeviationPercentage()": FunctionFragment;
    "turbulenceDeviationThresholdPercent()": FunctionFragment;
    "turbulenceIndicatorPercent()": FunctionFragment;
    "turbulenceStepPercent()": FunctionFragment;
    "turbulenceUpdator()": FunctionFragment;
    "withdrawFeePercent()": FunctionFragment;
    "updateTurbulenceIndicatorPercent(uint256,uint256,uint16,uint16)": FunctionFragment;
    "setTurbulenceUpdator(address)": FunctionFragment;
    "setDepositFee(uint16)": FunctionFragment;
    "setWithdrawFee(uint16)": FunctionFragment;
    "setOpenPositionFee(uint16)": FunctionFragment;
    "setClosePositionFee(uint16)": FunctionFragment;
    "setOpenPositionLPFee(uint16)": FunctionFragment;
    "setClosePositionMaxFee(uint16)": FunctionFragment;
    "setClosePositionFeeDecay(uint256)": FunctionFragment;
    "setOracleHeartbeatPeriod(uint256)": FunctionFragment;
    "setBuyingPremiumFeeMax(uint16)": FunctionFragment;
    "setBuyingPremiumThreshold(uint16)": FunctionFragment;
    "setTurbulenceStep(uint16)": FunctionFragment;
    "setMaxTurbulenceFeePercentToTrim(uint16)": FunctionFragment;
    "setTurbulenceDeviationThresholdPercent(uint16)": FunctionFragment;
    "setTurbulenceDeviationPercent(uint16)": FunctionFragment;
    "setFundingFeeConstantRate(uint16)": FunctionFragment;
    "calculateTurbulenceIndicatorPercent(uint256,uint256,uint16,uint16)": FunctionFragment;
    "calculateBuyingPremiumFee(uint168,uint8,uint256)": FunctionFragment;
    "calculateBuyingPremiumFeeWithTurbulence(uint168,uint8,uint256,uint16)": FunctionFragment;
    "calculateSingleUnitFundingFee((uint256,uint16)[])": FunctionFragment;
    "calculateClosePositionFeePercent(uint256)": FunctionFragment;
    "calculateWithdrawFeePercent(uint256)": FunctionFragment;
    "openPositionFees()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyingPremiumFeeMaxPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyingPremiumThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionFeeDecayPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionMaxFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingFeeConstantRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTurbulenceFeePercentToTrim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionLPFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleHeartbeatPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "turbulenceDeviationPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "turbulenceDeviationThresholdPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "turbulenceIndicatorPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "turbulenceStepPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "turbulenceUpdator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTurbulenceIndicatorPercent",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTurbulenceUpdator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpenPositionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClosePositionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpenPositionLPFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClosePositionMaxFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClosePositionFeeDecay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleHeartbeatPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyingPremiumFeeMax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyingPremiumThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTurbulenceStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTurbulenceFeePercentToTrim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTurbulenceDeviationThresholdPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTurbulenceDeviationPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingFeeConstantRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTurbulenceIndicatorPercent",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBuyingPremiumFee",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBuyingPremiumFeeWithTurbulence",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSingleUnitFundingFee",
    values: [IFeesCalculatorV4.CVIValueStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateClosePositionFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateWithdrawFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "buyingPremiumFeeMaxPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyingPremiumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionFeeDecayPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionMaxFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingFeeConstantRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTurbulenceFeePercentToTrim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionLPFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleHeartbeatPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turbulenceDeviationPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turbulenceDeviationThresholdPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turbulenceIndicatorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turbulenceStepPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turbulenceUpdator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTurbulenceIndicatorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTurbulenceUpdator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOpenPositionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClosePositionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOpenPositionLPFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClosePositionMaxFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClosePositionFeeDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleHeartbeatPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyingPremiumFeeMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyingPremiumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTurbulenceStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTurbulenceFeePercentToTrim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTurbulenceDeviationThresholdPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTurbulenceDeviationPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingFeeConstantRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTurbulenceIndicatorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateBuyingPremiumFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateBuyingPremiumFeeWithTurbulence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSingleUnitFundingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateClosePositionFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateWithdrawFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionFees",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CVOLUSDTFeesCalculator extends BaseContract {
  contractName: "CVOLUSDTFeesCalculator";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CVOLUSDTFeesCalculatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<[number]>;

    buyingPremiumThreshold(overrides?: CallOverrides): Promise<[number]>;

    closePositionFeeDecayPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    closePositionFeePercent(overrides?: CallOverrides): Promise<[number]>;

    closePositionMaxFeePercent(overrides?: CallOverrides): Promise<[number]>;

    depositFeePercent(overrides?: CallOverrides): Promise<[number]>;

    fundingFeeConstantRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTurbulenceFeePercentToTrim(overrides?: CallOverrides): Promise<[number]>;

    openPositionFeePercent(overrides?: CallOverrides): Promise<[number]>;

    openPositionLPFeePercent(overrides?: CallOverrides): Promise<[number]>;

    oracleHeartbeatPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    turbulenceDeviationPercentage(overrides?: CallOverrides): Promise<[number]>;

    turbulenceDeviationThresholdPercent(
      overrides?: CallOverrides
    ): Promise<[number]>;

    turbulenceIndicatorPercent(overrides?: CallOverrides): Promise<[number]>;

    turbulenceStepPercent(overrides?: CallOverrides): Promise<[number]>;

    turbulenceUpdator(overrides?: CallOverrides): Promise<[string]>;

    withdrawFeePercent(overrides?: CallOverrides): Promise<[number]>;

    updateTurbulenceIndicatorPercent(
      _totalTime: BigNumberish,
      _newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTurbulenceUpdator(
      _newUpdator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositFee(
      _newDepositFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawFee(
      _newWithdrawFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOpenPositionFee(
      _newOpenPositionFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClosePositionFee(
      _newClosePositionFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOpenPositionLPFee(
      _newOpenPositionLPFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClosePositionMaxFee(
      _newClosePositionMaxFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClosePositionFeeDecay(
      _newClosePositionFeeDecayPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracleHeartbeatPeriod(
      _newOracleHeartbeatPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuyingPremiumFeeMax(
      _newBuyingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuyingPremiumThreshold(
      _newBuyingPremiumThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTurbulenceStep(
      _newTurbulenceStepPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTurbulenceFeePercentToTrim(
      _newMaxTurbulenceFeePercentToTrim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTurbulenceDeviationThresholdPercent(
      _newTurbulenceDeviationThresholdPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTurbulenceDeviationPercent(
      _newTurbulenceDeviationPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundingFeeConstantRate(
      _newfundingFeeConstantRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateTurbulenceIndicatorPercent(
      totalHeartbeats: BigNumberish,
      newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    calculateBuyingPremiumFee(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _collateralRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        buyingPremiumFee: BigNumber;
        combinedPremiumFeePercentage: number;
      }
    >;

    calculateBuyingPremiumFeeWithTurbulence(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _collateralRatio: BigNumberish,
      _turbulenceIndicatorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        buyingPremiumFee: BigNumber;
        combinedPremiumFeePercentage: number;
      }
    >;

    calculateSingleUnitFundingFee(
      _cviValues: IFeesCalculatorV4.CVIValueStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fundingFee: BigNumber }>;

    calculateClosePositionFeePercent(
      creationTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    calculateWithdrawFeePercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    openPositionFees(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & {
        openPositionFeePercentResult: number;
        buyingPremiumFeeMaxPercentResult: number;
      }
    >;
  };

  buyingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<number>;

  buyingPremiumThreshold(overrides?: CallOverrides): Promise<number>;

  closePositionFeeDecayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  closePositionFeePercent(overrides?: CallOverrides): Promise<number>;

  closePositionMaxFeePercent(overrides?: CallOverrides): Promise<number>;

  depositFeePercent(overrides?: CallOverrides): Promise<number>;

  fundingFeeConstantRate(overrides?: CallOverrides): Promise<BigNumber>;

  maxTurbulenceFeePercentToTrim(overrides?: CallOverrides): Promise<number>;

  openPositionFeePercent(overrides?: CallOverrides): Promise<number>;

  openPositionLPFeePercent(overrides?: CallOverrides): Promise<number>;

  oracleHeartbeatPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  turbulenceDeviationPercentage(overrides?: CallOverrides): Promise<number>;

  turbulenceDeviationThresholdPercent(
    overrides?: CallOverrides
  ): Promise<number>;

  turbulenceIndicatorPercent(overrides?: CallOverrides): Promise<number>;

  turbulenceStepPercent(overrides?: CallOverrides): Promise<number>;

  turbulenceUpdator(overrides?: CallOverrides): Promise<string>;

  withdrawFeePercent(overrides?: CallOverrides): Promise<number>;

  updateTurbulenceIndicatorPercent(
    _totalTime: BigNumberish,
    _newRounds: BigNumberish,
    _lastCVIValue: BigNumberish,
    _currCVIValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTurbulenceUpdator(
    _newUpdator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositFee(
    _newDepositFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawFee(
    _newWithdrawFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOpenPositionFee(
    _newOpenPositionFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClosePositionFee(
    _newClosePositionFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOpenPositionLPFee(
    _newOpenPositionLPFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClosePositionMaxFee(
    _newClosePositionMaxFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClosePositionFeeDecay(
    _newClosePositionFeeDecayPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracleHeartbeatPeriod(
    _newOracleHeartbeatPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuyingPremiumFeeMax(
    _newBuyingPremiumFeeMaxPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuyingPremiumThreshold(
    _newBuyingPremiumThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTurbulenceStep(
    _newTurbulenceStepPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTurbulenceFeePercentToTrim(
    _newMaxTurbulenceFeePercentToTrim: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTurbulenceDeviationThresholdPercent(
    _newTurbulenceDeviationThresholdPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTurbulenceDeviationPercent(
    _newTurbulenceDeviationPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundingFeeConstantRate(
    _newfundingFeeConstantRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateTurbulenceIndicatorPercent(
    totalHeartbeats: BigNumberish,
    newRounds: BigNumberish,
    _lastCVIValue: BigNumberish,
    _currCVIValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  calculateBuyingPremiumFee(
    _tokenAmount: BigNumberish,
    _leverage: BigNumberish,
    _collateralRatio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & {
      buyingPremiumFee: BigNumber;
      combinedPremiumFeePercentage: number;
    }
  >;

  calculateBuyingPremiumFeeWithTurbulence(
    _tokenAmount: BigNumberish,
    _leverage: BigNumberish,
    _collateralRatio: BigNumberish,
    _turbulenceIndicatorPercent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & {
      buyingPremiumFee: BigNumber;
      combinedPremiumFeePercentage: number;
    }
  >;

  calculateSingleUnitFundingFee(
    _cviValues: IFeesCalculatorV4.CVIValueStruct[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateClosePositionFeePercent(
    creationTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  calculateWithdrawFeePercent(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  openPositionFees(
    overrides?: CallOverrides
  ): Promise<
    [number, number] & {
      openPositionFeePercentResult: number;
      buyingPremiumFeeMaxPercentResult: number;
    }
  >;

  callStatic: {
    buyingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<number>;

    buyingPremiumThreshold(overrides?: CallOverrides): Promise<number>;

    closePositionFeeDecayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    closePositionFeePercent(overrides?: CallOverrides): Promise<number>;

    closePositionMaxFeePercent(overrides?: CallOverrides): Promise<number>;

    depositFeePercent(overrides?: CallOverrides): Promise<number>;

    fundingFeeConstantRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxTurbulenceFeePercentToTrim(overrides?: CallOverrides): Promise<number>;

    openPositionFeePercent(overrides?: CallOverrides): Promise<number>;

    openPositionLPFeePercent(overrides?: CallOverrides): Promise<number>;

    oracleHeartbeatPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    turbulenceDeviationPercentage(overrides?: CallOverrides): Promise<number>;

    turbulenceDeviationThresholdPercent(
      overrides?: CallOverrides
    ): Promise<number>;

    turbulenceIndicatorPercent(overrides?: CallOverrides): Promise<number>;

    turbulenceStepPercent(overrides?: CallOverrides): Promise<number>;

    turbulenceUpdator(overrides?: CallOverrides): Promise<string>;

    withdrawFeePercent(overrides?: CallOverrides): Promise<number>;

    updateTurbulenceIndicatorPercent(
      _totalTime: BigNumberish,
      _newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    setTurbulenceUpdator(
      _newUpdator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositFee(
      _newDepositFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawFee(
      _newWithdrawFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOpenPositionFee(
      _newOpenPositionFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClosePositionFee(
      _newClosePositionFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOpenPositionLPFee(
      _newOpenPositionLPFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClosePositionMaxFee(
      _newClosePositionMaxFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClosePositionFeeDecay(
      _newClosePositionFeeDecayPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleHeartbeatPeriod(
      _newOracleHeartbeatPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyingPremiumFeeMax(
      _newBuyingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyingPremiumThreshold(
      _newBuyingPremiumThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTurbulenceStep(
      _newTurbulenceStepPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTurbulenceFeePercentToTrim(
      _newMaxTurbulenceFeePercentToTrim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTurbulenceDeviationThresholdPercent(
      _newTurbulenceDeviationThresholdPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTurbulenceDeviationPercent(
      _newTurbulenceDeviationPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingFeeConstantRate(
      _newfundingFeeConstantRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateTurbulenceIndicatorPercent(
      totalHeartbeats: BigNumberish,
      newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    calculateBuyingPremiumFee(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _collateralRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        buyingPremiumFee: BigNumber;
        combinedPremiumFeePercentage: number;
      }
    >;

    calculateBuyingPremiumFeeWithTurbulence(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _collateralRatio: BigNumberish,
      _turbulenceIndicatorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        buyingPremiumFee: BigNumber;
        combinedPremiumFeePercentage: number;
      }
    >;

    calculateSingleUnitFundingFee(
      _cviValues: IFeesCalculatorV4.CVIValueStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateClosePositionFeePercent(
      creationTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    calculateWithdrawFeePercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    openPositionFees(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & {
        openPositionFeePercentResult: number;
        buyingPremiumFeeMaxPercentResult: number;
      }
    >;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    buyingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

    buyingPremiumThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    closePositionFeeDecayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    closePositionFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    closePositionMaxFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    depositFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    fundingFeeConstantRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxTurbulenceFeePercentToTrim(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPositionFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    openPositionLPFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    oracleHeartbeatPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    turbulenceDeviationPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    turbulenceDeviationThresholdPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    turbulenceIndicatorPercent(overrides?: CallOverrides): Promise<BigNumber>;

    turbulenceStepPercent(overrides?: CallOverrides): Promise<BigNumber>;

    turbulenceUpdator(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    updateTurbulenceIndicatorPercent(
      _totalTime: BigNumberish,
      _newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTurbulenceUpdator(
      _newUpdator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositFee(
      _newDepositFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawFee(
      _newWithdrawFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOpenPositionFee(
      _newOpenPositionFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClosePositionFee(
      _newClosePositionFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOpenPositionLPFee(
      _newOpenPositionLPFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClosePositionMaxFee(
      _newClosePositionMaxFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClosePositionFeeDecay(
      _newClosePositionFeeDecayPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracleHeartbeatPeriod(
      _newOracleHeartbeatPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuyingPremiumFeeMax(
      _newBuyingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuyingPremiumThreshold(
      _newBuyingPremiumThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTurbulenceStep(
      _newTurbulenceStepPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTurbulenceFeePercentToTrim(
      _newMaxTurbulenceFeePercentToTrim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTurbulenceDeviationThresholdPercent(
      _newTurbulenceDeviationThresholdPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTurbulenceDeviationPercent(
      _newTurbulenceDeviationPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundingFeeConstantRate(
      _newfundingFeeConstantRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateTurbulenceIndicatorPercent(
      totalHeartbeats: BigNumberish,
      newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateBuyingPremiumFee(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _collateralRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateBuyingPremiumFeeWithTurbulence(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _collateralRatio: BigNumberish,
      _turbulenceIndicatorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSingleUnitFundingFee(
      _cviValues: IFeesCalculatorV4.CVIValueStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateClosePositionFeePercent(
      creationTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateWithdrawFeePercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPositionFees(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    buyingPremiumFeeMaxPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyingPremiumThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePositionFeeDecayPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePositionFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePositionMaxFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingFeeConstantRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTurbulenceFeePercentToTrim(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPositionFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPositionLPFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleHeartbeatPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    turbulenceDeviationPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    turbulenceDeviationThresholdPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    turbulenceIndicatorPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    turbulenceStepPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    turbulenceUpdator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateTurbulenceIndicatorPercent(
      _totalTime: BigNumberish,
      _newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTurbulenceUpdator(
      _newUpdator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositFee(
      _newDepositFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawFee(
      _newWithdrawFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOpenPositionFee(
      _newOpenPositionFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClosePositionFee(
      _newClosePositionFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOpenPositionLPFee(
      _newOpenPositionLPFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClosePositionMaxFee(
      _newClosePositionMaxFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClosePositionFeeDecay(
      _newClosePositionFeeDecayPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracleHeartbeatPeriod(
      _newOracleHeartbeatPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuyingPremiumFeeMax(
      _newBuyingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuyingPremiumThreshold(
      _newBuyingPremiumThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTurbulenceStep(
      _newTurbulenceStepPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTurbulenceFeePercentToTrim(
      _newMaxTurbulenceFeePercentToTrim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTurbulenceDeviationThresholdPercent(
      _newTurbulenceDeviationThresholdPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTurbulenceDeviationPercent(
      _newTurbulenceDeviationPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundingFeeConstantRate(
      _newfundingFeeConstantRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateTurbulenceIndicatorPercent(
      totalHeartbeats: BigNumberish,
      newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateBuyingPremiumFee(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _collateralRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateBuyingPremiumFeeWithTurbulence(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _collateralRatio: BigNumberish,
      _turbulenceIndicatorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSingleUnitFundingFee(
      _cviValues: IFeesCalculatorV4.CVIValueStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateClosePositionFeePercent(
      creationTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateWithdrawFeePercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPositionFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
