/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CVOLUSDTUSDCPlatformMigratorInterface extends utils.Interface {
  contractName: "CVOLUSDTUSDCPlatformMigrator";
  functions: {
    "migrateLPTokens(uint256)": FunctionFragment;
    "newPlatform()": FunctionFragment;
    "oldPlatform()": FunctionFragment;
    "oldToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardAmount()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "router()": FunctionFragment;
    "setNewPlatform(address)": FunctionFragment;
    "setOldPlatform(address)": FunctionFragment;
    "setRewardAmount(uint256)": FunctionFragment;
    "setRouter(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawAllRewards()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "migrateLPTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newPlatform",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oldPlatform",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oldToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setNewPlatform",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOldPlatform",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setRouter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllRewards",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "migrateLPTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oldPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oldToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNewPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOldPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllRewards",
    data: BytesLike
  ): Result;

  events: {
    "Migration(address,address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Migration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type MigrationEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    account: string;
    oldPlatfrom: string;
    newPlatform: string;
    oldLPTokensAmount: BigNumber;
    newLPTokensAmount: BigNumber;
    oldTokensAmount: BigNumber;
    newTokensAmount: BigNumber;
    rewardAmount: BigNumber;
  }
>;

export type MigrationEventFilter = TypedEventFilter<MigrationEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CVOLUSDTUSDCPlatformMigrator extends BaseContract {
  contractName: "CVOLUSDTUSDCPlatformMigrator";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CVOLUSDTUSDCPlatformMigratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    migrateLPTokens(
      _tokenAmountOutMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newPlatform(overrides?: CallOverrides): Promise<[string]>;

    oldPlatform(overrides?: CallOverrides): Promise<[string]>;

    oldToken(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setNewPlatform(
      _newNewPlatform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOldPlatform(
      _newOldPlatform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardAmount(
      _newRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRouter(
      _newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAllRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  migrateLPTokens(
    _tokenAmountOutMin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newPlatform(overrides?: CallOverrides): Promise<string>;

  oldPlatform(overrides?: CallOverrides): Promise<string>;

  oldToken(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  setNewPlatform(
    _newNewPlatform: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOldPlatform(
    _newOldPlatform: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardAmount(
    _newRewardAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRouter(
    _newRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAllRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    migrateLPTokens(
      _tokenAmountOutMin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newPlatform(overrides?: CallOverrides): Promise<string>;

    oldPlatform(overrides?: CallOverrides): Promise<string>;

    oldToken(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    setNewPlatform(
      _newNewPlatform: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOldPlatform(
      _newOldPlatform: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardAmount(
      _newRewardAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouter(_newRouter: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAllRewards(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Migration(address,address,address,uint256,uint256,uint256,uint256,uint256)"(
      account?: string | null,
      oldPlatfrom?: string | null,
      newPlatform?: string | null,
      oldLPTokensAmount?: null,
      newLPTokensAmount?: null,
      oldTokensAmount?: null,
      newTokensAmount?: null,
      rewardAmount?: null
    ): MigrationEventFilter;
    Migration(
      account?: string | null,
      oldPlatfrom?: string | null,
      newPlatform?: string | null,
      oldLPTokensAmount?: null,
      newLPTokensAmount?: null,
      oldTokensAmount?: null,
      newTokensAmount?: null,
      rewardAmount?: null
    ): MigrationEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    migrateLPTokens(
      _tokenAmountOutMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newPlatform(overrides?: CallOverrides): Promise<BigNumber>;

    oldPlatform(overrides?: CallOverrides): Promise<BigNumber>;

    oldToken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setNewPlatform(
      _newNewPlatform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOldPlatform(
      _newOldPlatform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardAmount(
      _newRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRouter(
      _newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAllRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    migrateLPTokens(
      _tokenAmountOutMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newPlatform(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oldPlatform(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oldToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setNewPlatform(
      _newNewPlatform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOldPlatform(
      _newOldPlatform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardAmount(
      _newRewardAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRouter(
      _newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
