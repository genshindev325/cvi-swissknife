/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CVOLUSDTPositionRewardsInterface extends utils.Interface {
  contractName: "CVOLUSDTPositionRewards";
  functions: {
    "PRECISION_DECIMALS()": FunctionFragment;
    "lastClaimedDay()": FunctionFragment;
    "lastRewardCoefficientMax()": FunctionFragment;
    "lastRewardCoefficientMin()": FunctionFragment;
    "maxClaimPeriod()": FunctionFragment;
    "maxDailyReward()": FunctionFragment;
    "maxRewardTime()": FunctionFragment;
    "maxSingleReward()": FunctionFragment;
    "minClaimPeriod()": FunctionFragment;
    "owner()": FunctionFragment;
    "platform()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardCoefficientMax()": FunctionFragment;
    "rewardCoefficientMin()": FunctionFragment;
    "rewardCoefficientValidTimestamp()": FunctionFragment;
    "rewarder()": FunctionFragment;
    "todayClaimedRewards()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unclaimedPositionUnits(address)": FunctionFragment;
    "calculatePositionReward(uint256,uint256)": FunctionFragment;
    "reward(address,uint256)": FunctionFragment;
    "claimReward()": FunctionFragment;
    "setRewarder(address)": FunctionFragment;
    "setMaxDailyReward(uint256)": FunctionFragment;
    "setMaxSingleReward(uint256)": FunctionFragment;
    "setRewardCoefficient(uint256,uint256)": FunctionFragment;
    "setMaxClaimPeriod(uint256)": FunctionFragment;
    "setMinClaimPeriod(uint256)": FunctionFragment;
    "setMaxRewardTime(uint256)": FunctionFragment;
    "setPlatform(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "PRECISION_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastClaimedDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardCoefficientMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardCoefficientMin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxClaimPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDailyReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRewardTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSingleReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minClaimPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "platform", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardCoefficientMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardCoefficientMin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardCoefficientValidTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewarder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "todayClaimedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unclaimedPositionUnits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePositionReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setRewarder", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMaxDailyReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSingleReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardCoefficient",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxClaimPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinClaimPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRewardTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPlatform", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "PRECISION_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastClaimedDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardCoefficientMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardCoefficientMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxClaimPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDailyReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRewardTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSingleReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minClaimPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "platform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardCoefficientMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardCoefficientMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardCoefficientValidTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewarder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "todayClaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unclaimedPositionUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePositionReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDailyReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSingleReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxClaimPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinClaimPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRewardTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatform",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CVOLUSDTPositionRewards extends BaseContract {
  contractName: "CVOLUSDTPositionRewards";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CVOLUSDTPositionRewardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastClaimedDay(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastRewardCoefficientMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastRewardCoefficientMin(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxClaimPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDailyReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRewardTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSingleReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    minClaimPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    platform(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardCoefficientMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardCoefficientMin(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardCoefficientValidTimestamp(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewarder(overrides?: CallOverrides): Promise<[string]>;

    todayClaimedRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unclaimedPositionUnits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculatePositionReward(
      _positionUnits: BigNumberish,
      _positionTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardAmount: BigNumber }>;

    reward(
      _account: string,
      _positionUnits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewarder(
      _newRewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxDailyReward(
      _newMaxDailyReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxSingleReward(
      _newMaxSingleReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardCoefficient(
      _newRewardCoefficientMin: BigNumberish,
      _newRewardCoefficientMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxClaimPeriod(
      _newMaxClaimPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinClaimPeriod(
      _newMinClaimPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxRewardTime(
      _newMaxRewardTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatform(
      _newPlatform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  lastClaimedDay(overrides?: CallOverrides): Promise<BigNumber>;

  lastRewardCoefficientMax(overrides?: CallOverrides): Promise<BigNumber>;

  lastRewardCoefficientMin(overrides?: CallOverrides): Promise<BigNumber>;

  maxClaimPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  maxDailyReward(overrides?: CallOverrides): Promise<BigNumber>;

  maxRewardTime(overrides?: CallOverrides): Promise<BigNumber>;

  maxSingleReward(overrides?: CallOverrides): Promise<BigNumber>;

  minClaimPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  platform(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardCoefficientMax(overrides?: CallOverrides): Promise<BigNumber>;

  rewardCoefficientMin(overrides?: CallOverrides): Promise<BigNumber>;

  rewardCoefficientValidTimestamp(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewarder(overrides?: CallOverrides): Promise<string>;

  todayClaimedRewards(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unclaimedPositionUnits(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePositionReward(
    _positionUnits: BigNumberish,
    _positionTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reward(
    _account: string,
    _positionUnits: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewarder(
    _newRewarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxDailyReward(
    _newMaxDailyReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxSingleReward(
    _newMaxSingleReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardCoefficient(
    _newRewardCoefficientMin: BigNumberish,
    _newRewardCoefficientMax: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxClaimPeriod(
    _newMaxClaimPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinClaimPeriod(
    _newMinClaimPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxRewardTime(
    _newMaxRewardTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatform(
    _newPlatform: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    lastClaimedDay(overrides?: CallOverrides): Promise<BigNumber>;

    lastRewardCoefficientMax(overrides?: CallOverrides): Promise<BigNumber>;

    lastRewardCoefficientMin(overrides?: CallOverrides): Promise<BigNumber>;

    maxClaimPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    maxDailyReward(overrides?: CallOverrides): Promise<BigNumber>;

    maxRewardTime(overrides?: CallOverrides): Promise<BigNumber>;

    maxSingleReward(overrides?: CallOverrides): Promise<BigNumber>;

    minClaimPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    platform(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardCoefficientMax(overrides?: CallOverrides): Promise<BigNumber>;

    rewardCoefficientMin(overrides?: CallOverrides): Promise<BigNumber>;

    rewardCoefficientValidTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewarder(overrides?: CallOverrides): Promise<string>;

    todayClaimedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unclaimedPositionUnits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePositionReward(
      _positionUnits: BigNumberish,
      _positionTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reward(
      _account: string,
      _positionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(overrides?: CallOverrides): Promise<void>;

    setRewarder(_newRewarder: string, overrides?: CallOverrides): Promise<void>;

    setMaxDailyReward(
      _newMaxDailyReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSingleReward(
      _newMaxSingleReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardCoefficient(
      _newRewardCoefficientMin: BigNumberish,
      _newRewardCoefficientMax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxClaimPeriod(
      _newMaxClaimPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinClaimPeriod(
      _newMinClaimPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRewardTime(
      _newMaxRewardTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatform(_newPlatform: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    lastClaimedDay(overrides?: CallOverrides): Promise<BigNumber>;

    lastRewardCoefficientMax(overrides?: CallOverrides): Promise<BigNumber>;

    lastRewardCoefficientMin(overrides?: CallOverrides): Promise<BigNumber>;

    maxClaimPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    maxDailyReward(overrides?: CallOverrides): Promise<BigNumber>;

    maxRewardTime(overrides?: CallOverrides): Promise<BigNumber>;

    maxSingleReward(overrides?: CallOverrides): Promise<BigNumber>;

    minClaimPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    platform(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardCoefficientMax(overrides?: CallOverrides): Promise<BigNumber>;

    rewardCoefficientMin(overrides?: CallOverrides): Promise<BigNumber>;

    rewardCoefficientValidTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewarder(overrides?: CallOverrides): Promise<BigNumber>;

    todayClaimedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unclaimedPositionUnits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePositionReward(
      _positionUnits: BigNumberish,
      _positionTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reward(
      _account: string,
      _positionUnits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewarder(
      _newRewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxDailyReward(
      _newMaxDailyReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxSingleReward(
      _newMaxSingleReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardCoefficient(
      _newRewardCoefficientMin: BigNumberish,
      _newRewardCoefficientMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxClaimPeriod(
      _newMaxClaimPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinClaimPeriod(
      _newMinClaimPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxRewardTime(
      _newMaxRewardTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatform(
      _newPlatform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PRECISION_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastClaimedDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRewardCoefficientMax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRewardCoefficientMin(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxClaimPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDailyReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRewardTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSingleReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minClaimPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platform(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardCoefficientMax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardCoefficientMin(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardCoefficientValidTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    todayClaimedRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unclaimedPositionUnits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePositionReward(
      _positionUnits: BigNumberish,
      _positionTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reward(
      _account: string,
      _positionUnits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewarder(
      _newRewarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDailyReward(
      _newMaxDailyReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSingleReward(
      _newMaxSingleReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardCoefficient(
      _newRewardCoefficientMin: BigNumberish,
      _newRewardCoefficientMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxClaimPeriod(
      _newMaxClaimPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinClaimPeriod(
      _newMinClaimPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxRewardTime(
      _newMaxRewardTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatform(
      _newPlatform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
