/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CVOLETHPlatformInterface extends utils.Interface {
  contractName: "CVOLETHPlatform";
  functions: {
    "MAX_CVI_VALUE()": FunctionFragment;
    "MAX_FEE_PERCENTAGE()": FunctionFragment;
    "PRECISION_DECIMALS()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyersLockupPeriod()": FunctionFragment;
    "calculateLatestTurbulenceIndicatorPercent()": FunctionFragment;
    "calculatePositionBalance(address)": FunctionFragment;
    "calculatePositionPendingFees(address,uint168)": FunctionFragment;
    "closePosition(uint168,uint16)": FunctionFragment;
    "cviSnapshots(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "emergencyWithdrawAllowed()": FunctionFragment;
    "getLiquidableAddresses(address[])": FunctionFragment;
    "getToken()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialTokenToLPTokenRate()": FunctionFragment;
    "lastDepositTimestamp(address)": FunctionFragment;
    "latestOracleRoundId()": FunctionFragment;
    "latestSnapshotTimestamp()": FunctionFragment;
    "liquidatePositions(address[])": FunctionFragment;
    "lpsLockupPeriod()": FunctionFragment;
    "maxAllowedLeverage()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "positions(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revertLockedTransfered(address)": FunctionFragment;
    "setBuyersLockupPeriod(uint256)": FunctionFragment;
    "setCVIOracle(address)": FunctionFragment;
    "setCanPurgeSnapshots(bool)": FunctionFragment;
    "setEmergencyWithdrawAllowed(bool)": FunctionFragment;
    "setFeesCalculator(address)": FunctionFragment;
    "setFeesCollector(address)": FunctionFragment;
    "setLPLockupPeriod(uint256)": FunctionFragment;
    "setLatestOracleRoundId(uint80)": FunctionFragment;
    "setLiquidation(address)": FunctionFragment;
    "setMaxAllowedLeverage(uint8)": FunctionFragment;
    "setRevertLockedTransfers(bool)": FunctionFragment;
    "setRewards(address)": FunctionFragment;
    "setStakingContractAddress(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "totalBalanceWithAddendum()": FunctionFragment;
    "totalFundingFeesAmount()": FunctionFragment;
    "totalLeveragedTokensAmount()": FunctionFragment;
    "totalPositionUnitsAmount()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawLPTokens(uint256)": FunctionFragment;
    "depositETH(uint256)": FunctionFragment;
    "openPositionETH(uint16,uint168,uint8)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "openPosition(uint168,uint16,uint168,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_CVI_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRECISION_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyersLockupPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLatestTurbulenceIndicatorPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePositionBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePositionPendingFees",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cviSnapshots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidableAddresses",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialTokenToLPTokenRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastDepositTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestOracleRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestSnapshotTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePositions",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lpsLockupPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxAllowedLeverage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "positions", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revertLockedTransfered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyersLockupPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCVIOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCanPurgeSnapshots",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyWithdrawAllowed",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesCalculator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLPLockupPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLatestOracleRoundId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxAllowedLeverage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevertLockedTransfers",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setRewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setStakingContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalanceWithAddendum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFundingFeesAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLeveragedTokensAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPositionUnitsAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLPTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionETH",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_CVI_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRECISION_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyersLockupPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLatestTurbulenceIndicatorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePositionBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePositionPendingFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cviSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidableAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialTokenToLPTokenRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastDepositTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestOracleRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestSnapshotTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpsLockupPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAllowedLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertLockedTransfered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyersLockupPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCVIOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCanPurgeSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyWithdrawAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLPLockupPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLatestOracleRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxAllowedLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevertLockedTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStakingContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBalanceWithAddendum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFundingFeesAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLeveragedTokensAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPositionUnitsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLPTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openPositionETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ClosePosition(address,uint256,uint256,uint256,uint8,uint256)": EventFragment;
    "Deposit(address,uint256,uint256,uint256)": EventFragment;
    "LiquidatePosition(address,uint256,bool,uint256)": EventFragment;
    "OpenPosition(address,uint256,uint8,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClosePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidatePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ClosePositionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, number, BigNumber],
  {
    account: string;
    tokenAmount: BigNumber;
    feeAmount: BigNumber;
    positionUnitsAmount: BigNumber;
    leverage: number;
    cviValue: BigNumber;
  }
>;

export type ClosePositionEventFilter = TypedEventFilter<ClosePositionEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    account: string;
    tokenAmount: BigNumber;
    lpTokensAmount: BigNumber;
    feeAmount: BigNumber;
  }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type LiquidatePositionEvent = TypedEvent<
  [string, BigNumber, boolean, BigNumber],
  {
    positionAddress: string;
    currentPositionBalance: BigNumber;
    isBalancePositive: boolean;
    positionUnitsAmount: BigNumber;
  }
>;

export type LiquidatePositionEventFilter =
  TypedEventFilter<LiquidatePositionEvent>;

export type OpenPositionEvent = TypedEvent<
  [string, BigNumber, number, BigNumber, BigNumber, BigNumber],
  {
    account: string;
    tokenAmount: BigNumber;
    leverage: number;
    feeAmount: BigNumber;
    positionUnitsAmount: BigNumber;
    cviValue: BigNumber;
  }
>;

export type OpenPositionEventFilter = TypedEventFilter<OpenPositionEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    account: string;
    tokenAmount: BigNumber;
    lpTokensAmount: BigNumber;
    feeAmount: BigNumber;
  }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface CVOLETHPlatform extends BaseContract {
  contractName: "CVOLETHPlatform";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CVOLETHPlatformInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_CVI_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyersLockupPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateLatestTurbulenceIndicatorPercent(
      overrides?: CallOverrides
    ): Promise<[number]>;

    calculatePositionBalance(
      _positionAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, number, BigNumber, BigNumber] & {
        currentPositionBalance: BigNumber;
        isPositive: boolean;
        positionUnitsAmount: BigNumber;
        leverage: number;
        fundingFees: BigNumber;
        marginDebt: BigNumber;
      }
    >;

    calculatePositionPendingFees(
      _positionAddress: string,
      _positionUnitsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pendingFees: BigNumber }>;

    closePosition(
      _positionUnitsAmount: BigNumberish,
      _minCVI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cviSnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    getLiquidableAddresses(
      _positionOwners: string[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getToken(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialTokenToLPTokenRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastDepositTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    latestOracleRoundId(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestSnapshotTimestamp(overrides?: CallOverrides): Promise<[number]>;

    liquidatePositions(
      _positionOwners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lpsLockupPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxAllowedLeverage(overrides?: CallOverrides): Promise<[number]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number] & {
        positionUnitsAmount: BigNumber;
        leverage: number;
        openCVIValue: number;
        creationTimestamp: number;
        originalCreationTimestamp: number;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revertLockedTransfered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setBuyersLockupPeriod(
      _newBuyersLockupPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCVIOracle(
      _newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCanPurgeSnapshots(
      _newCanPurgeSnapshots: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmergencyWithdrawAllowed(
      _newEmergencyWithdrawAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeesCalculator(
      _newCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeesCollector(
      _newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLPLockupPeriod(
      _newLPLockupPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLatestOracleRoundId(
      _newOracleRoundId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidation(
      _newLiquidation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxAllowedLeverage(
      _newMaxAllowedLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRevertLockedTransfers(
      _revertLockedTransfers: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewards(
      _newRewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingContractAddress(
      _newStakingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    totalBalanceWithAddendum(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    totalFundingFeesAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLeveragedTokensAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPositionUnitsAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _tokenAmount: BigNumberish,
      _maxLPTokenBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLPTokens(
      _lpTokensAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositETH(
      _minLPTokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openPositionETH(
      _maxCVI: BigNumberish,
      _maxBuyingPremiumFeePercentage: BigNumberish,
      _leverage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      tokenAmount: BigNumberish,
      minLPTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openPosition(
      tokenAmount: BigNumberish,
      maxCVI: BigNumberish,
      maxBuyingPremiumFeePercentage: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_CVI_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyersLockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  calculateLatestTurbulenceIndicatorPercent(
    overrides?: CallOverrides
  ): Promise<number>;

  calculatePositionBalance(
    _positionAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber, number, BigNumber, BigNumber] & {
      currentPositionBalance: BigNumber;
      isPositive: boolean;
      positionUnitsAmount: BigNumber;
      leverage: number;
      fundingFees: BigNumber;
      marginDebt: BigNumber;
    }
  >;

  calculatePositionPendingFees(
    _positionAddress: string,
    _positionUnitsAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  closePosition(
    _positionUnitsAmount: BigNumberish,
    _minCVI: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cviSnapshots(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawAllowed(overrides?: CallOverrides): Promise<boolean>;

  getLiquidableAddresses(
    _positionOwners: string[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  getToken(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialTokenToLPTokenRate(overrides?: CallOverrides): Promise<BigNumber>;

  lastDepositTimestamp(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  latestOracleRoundId(overrides?: CallOverrides): Promise<BigNumber>;

  latestSnapshotTimestamp(overrides?: CallOverrides): Promise<number>;

  liquidatePositions(
    _positionOwners: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lpsLockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  maxAllowedLeverage(overrides?: CallOverrides): Promise<number>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  positions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number] & {
      positionUnitsAmount: BigNumber;
      leverage: number;
      openCVIValue: number;
      creationTimestamp: number;
      originalCreationTimestamp: number;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revertLockedTransfered(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setBuyersLockupPeriod(
    _newBuyersLockupPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCVIOracle(
    _newOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCanPurgeSnapshots(
    _newCanPurgeSnapshots: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmergencyWithdrawAllowed(
    _newEmergencyWithdrawAllowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeesCalculator(
    _newCalculator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeesCollector(
    _newCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLPLockupPeriod(
    _newLPLockupPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLatestOracleRoundId(
    _newOracleRoundId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidation(
    _newLiquidation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxAllowedLeverage(
    _newMaxAllowedLeverage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRevertLockedTransfers(
    _revertLockedTransfers: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewards(
    _newRewards: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingContractAddress(
    _newStakingContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  totalBalanceWithAddendum(overrides?: CallOverrides): Promise<BigNumber>;

  totalFundingFeesAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalLeveragedTokensAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalPositionUnitsAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _tokenAmount: BigNumberish,
    _maxLPTokenBurnAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLPTokens(
    _lpTokensAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositETH(
    _minLPTokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openPositionETH(
    _maxCVI: BigNumberish,
    _maxBuyingPremiumFeePercentage: BigNumberish,
    _leverage: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    tokenAmount: BigNumberish,
    minLPTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openPosition(
    tokenAmount: BigNumberish,
    maxCVI: BigNumberish,
    maxBuyingPremiumFeePercentage: BigNumberish,
    leverage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_CVI_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyersLockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    calculateLatestTurbulenceIndicatorPercent(
      overrides?: CallOverrides
    ): Promise<number>;

    calculatePositionBalance(
      _positionAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, number, BigNumber, BigNumber] & {
        currentPositionBalance: BigNumber;
        isPositive: boolean;
        positionUnitsAmount: BigNumber;
        leverage: number;
        fundingFees: BigNumber;
        marginDebt: BigNumber;
      }
    >;

    calculatePositionPendingFees(
      _positionAddress: string,
      _positionUnitsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePosition(
      _positionUnitsAmount: BigNumberish,
      _minCVI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cviSnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    emergencyWithdrawAllowed(overrides?: CallOverrides): Promise<boolean>;

    getLiquidableAddresses(
      _positionOwners: string[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getToken(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialTokenToLPTokenRate(overrides?: CallOverrides): Promise<BigNumber>;

    lastDepositTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestOracleRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    latestSnapshotTimestamp(overrides?: CallOverrides): Promise<number>;

    liquidatePositions(
      _positionOwners: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpsLockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    maxAllowedLeverage(overrides?: CallOverrides): Promise<number>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number] & {
        positionUnitsAmount: BigNumber;
        leverage: number;
        openCVIValue: number;
        creationTimestamp: number;
        originalCreationTimestamp: number;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revertLockedTransfered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setBuyersLockupPeriod(
      _newBuyersLockupPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCVIOracle(_newOracle: string, overrides?: CallOverrides): Promise<void>;

    setCanPurgeSnapshots(
      _newCanPurgeSnapshots: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyWithdrawAllowed(
      _newEmergencyWithdrawAllowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesCalculator(
      _newCalculator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesCollector(
      _newCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLPLockupPeriod(
      _newLPLockupPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLatestOracleRoundId(
      _newOracleRoundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidation(
      _newLiquidation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxAllowedLeverage(
      _newMaxAllowedLeverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevertLockedTransfers(
      _revertLockedTransfers: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewards(_newRewards: string, overrides?: CallOverrides): Promise<void>;

    setStakingContractAddress(
      _newStakingContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalanceWithAddendum(overrides?: CallOverrides): Promise<BigNumber>;

    totalFundingFeesAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalLeveragedTokensAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalPositionUnitsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _tokenAmount: BigNumberish,
      _maxLPTokenBurnAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        burntAmount: BigNumber;
        withdrawnAmount: BigNumber;
      }
    >;

    withdrawLPTokens(
      _lpTokensAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        burntAmount: BigNumber;
        withdrawnAmount: BigNumber;
      }
    >;

    depositETH(
      _minLPTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPositionETH(
      _maxCVI: BigNumberish,
      _maxBuyingPremiumFeePercentage: BigNumberish,
      _leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      tokenAmount: BigNumberish,
      minLPTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPosition(
      tokenAmount: BigNumberish,
      maxCVI: BigNumberish,
      maxBuyingPremiumFeePercentage: BigNumberish,
      leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "ClosePosition(address,uint256,uint256,uint256,uint8,uint256)"(
      account?: string | null,
      tokenAmount?: null,
      feeAmount?: null,
      positionUnitsAmount?: null,
      leverage?: null,
      cviValue?: null
    ): ClosePositionEventFilter;
    ClosePosition(
      account?: string | null,
      tokenAmount?: null,
      feeAmount?: null,
      positionUnitsAmount?: null,
      leverage?: null,
      cviValue?: null
    ): ClosePositionEventFilter;

    "Deposit(address,uint256,uint256,uint256)"(
      account?: string | null,
      tokenAmount?: null,
      lpTokensAmount?: null,
      feeAmount?: null
    ): DepositEventFilter;
    Deposit(
      account?: string | null,
      tokenAmount?: null,
      lpTokensAmount?: null,
      feeAmount?: null
    ): DepositEventFilter;

    "LiquidatePosition(address,uint256,bool,uint256)"(
      positionAddress?: string | null,
      currentPositionBalance?: null,
      isBalancePositive?: null,
      positionUnitsAmount?: null
    ): LiquidatePositionEventFilter;
    LiquidatePosition(
      positionAddress?: string | null,
      currentPositionBalance?: null,
      isBalancePositive?: null,
      positionUnitsAmount?: null
    ): LiquidatePositionEventFilter;

    "OpenPosition(address,uint256,uint8,uint256,uint256,uint256)"(
      account?: string | null,
      tokenAmount?: null,
      leverage?: null,
      feeAmount?: null,
      positionUnitsAmount?: null,
      cviValue?: null
    ): OpenPositionEventFilter;
    OpenPosition(
      account?: string | null,
      tokenAmount?: null,
      leverage?: null,
      feeAmount?: null,
      positionUnitsAmount?: null,
      cviValue?: null
    ): OpenPositionEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Withdraw(address,uint256,uint256,uint256)"(
      account?: string | null,
      tokenAmount?: null,
      lpTokensAmount?: null,
      feeAmount?: null
    ): WithdrawEventFilter;
    Withdraw(
      account?: string | null,
      tokenAmount?: null,
      lpTokensAmount?: null,
      feeAmount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    MAX_CVI_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyersLockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    calculateLatestTurbulenceIndicatorPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePositionBalance(
      _positionAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePositionPendingFees(
      _positionAddress: string,
      _positionUnitsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePosition(
      _positionUnitsAmount: BigNumberish,
      _minCVI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cviSnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidableAddresses(
      _positionOwners: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialTokenToLPTokenRate(overrides?: CallOverrides): Promise<BigNumber>;

    lastDepositTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestOracleRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    latestSnapshotTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatePositions(
      _positionOwners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lpsLockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    maxAllowedLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    positions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revertLockedTransfered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBuyersLockupPeriod(
      _newBuyersLockupPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCVIOracle(
      _newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCanPurgeSnapshots(
      _newCanPurgeSnapshots: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmergencyWithdrawAllowed(
      _newEmergencyWithdrawAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeesCalculator(
      _newCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeesCollector(
      _newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLPLockupPeriod(
      _newLPLockupPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLatestOracleRoundId(
      _newOracleRoundId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidation(
      _newLiquidation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxAllowedLeverage(
      _newMaxAllowedLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRevertLockedTransfers(
      _revertLockedTransfers: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewards(
      _newRewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingContractAddress(
      _newStakingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalanceWithAddendum(overrides?: CallOverrides): Promise<BigNumber>;

    totalFundingFeesAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalLeveragedTokensAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalPositionUnitsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _tokenAmount: BigNumberish,
      _maxLPTokenBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLPTokens(
      _lpTokensAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositETH(
      _minLPTokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openPositionETH(
      _maxCVI: BigNumberish,
      _maxBuyingPremiumFeePercentage: BigNumberish,
      _leverage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      tokenAmount: BigNumberish,
      minLPTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openPosition(
      tokenAmount: BigNumberish,
      maxCVI: BigNumberish,
      maxBuyingPremiumFeePercentage: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_CVI_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRECISION_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyersLockupPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateLatestTurbulenceIndicatorPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePositionBalance(
      _positionAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePositionPendingFees(
      _positionAddress: string,
      _positionUnitsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePosition(
      _positionUnitsAmount: BigNumberish,
      _minCVI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cviSnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawAllowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidableAddresses(
      _positionOwners: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialTokenToLPTokenRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastDepositTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestOracleRoundId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestSnapshotTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidatePositions(
      _positionOwners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lpsLockupPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAllowedLeverage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revertLockedTransfered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBuyersLockupPeriod(
      _newBuyersLockupPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCVIOracle(
      _newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCanPurgeSnapshots(
      _newCanPurgeSnapshots: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyWithdrawAllowed(
      _newEmergencyWithdrawAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeesCalculator(
      _newCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeesCollector(
      _newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLPLockupPeriod(
      _newLPLockupPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLatestOracleRoundId(
      _newOracleRoundId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidation(
      _newLiquidation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxAllowedLeverage(
      _newMaxAllowedLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRevertLockedTransfers(
      _revertLockedTransfers: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewards(
      _newRewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingContractAddress(
      _newStakingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalanceWithAddendum(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFundingFeesAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLeveragedTokensAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPositionUnitsAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tokenAmount: BigNumberish,
      _maxLPTokenBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLPTokens(
      _lpTokensAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositETH(
      _minLPTokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openPositionETH(
      _maxCVI: BigNumberish,
      _maxBuyingPremiumFeePercentage: BigNumberish,
      _leverage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      tokenAmount: BigNumberish,
      minLPTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openPosition(
      tokenAmount: BigNumberish,
      maxCVI: BigNumberish,
      maxBuyingPremiumFeePercentage: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
