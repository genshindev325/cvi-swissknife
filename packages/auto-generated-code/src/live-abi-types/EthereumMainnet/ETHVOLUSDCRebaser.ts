/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ETHVOLUSDCRebaserInterface extends utils.Interface {
  contractName: "ETHVOLUSDCRebaser";
  functions: {
    "enableWhitelist()": FunctionFragment;
    "lastUpkeepTime()": FunctionFragment;
    "owner()": FunctionFragment;
    "pairs(uint256)": FunctionFragment;
    "rebasers(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upkeepInterval()": FunctionFragment;
    "upkeepTimeWindow()": FunctionFragment;
    "volatilityToken()": FunctionFragment;
    "rebase()": FunctionFragment;
    "setVolatilityToken(address)": FunctionFragment;
    "setUniswapPairs(address[])": FunctionFragment;
    "setUpkeepInterval(uint32)": FunctionFragment;
    "setUpkeepTimeWindow(uint32)": FunctionFragment;
    "setEnableWhitelist(bool)": FunctionFragment;
    "setRebaserAddress(address,bool)": FunctionFragment;
    "checkUpkeep(bytes)": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "enableWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpkeepTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pairs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "rebasers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upkeepInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upkeepTimeWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "volatilityToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rebase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setVolatilityToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapPairs",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpkeepInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpkeepTimeWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnableWhitelist",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebaserAddress",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "enableWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpkeepTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebasers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upkeepInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upkeepTimeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "volatilityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVolatilityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpkeepInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpkeepTimeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnableWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebaserAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ETHVOLUSDCRebaser extends BaseContract {
  contractName: "ETHVOLUSDCRebaser";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ETHVOLUSDCRebaserInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    enableWhitelist(overrides?: CallOverrides): Promise<[boolean]>;

    lastUpkeepTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    rebasers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upkeepInterval(overrides?: CallOverrides): Promise<[number]>;

    upkeepTimeWindow(overrides?: CallOverrides): Promise<[number]>;

    volatilityToken(overrides?: CallOverrides): Promise<[string]>;

    rebase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVolatilityToken(
      _volatilityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUniswapPairs(
      _uniswapPairs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpkeepInterval(
      _upkeepInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpkeepTimeWindow(
      _upkeepTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnableWhitelist(
      _enableWhitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRebaserAddress(
      user: string,
      isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkUpkeep(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    performUpkeep(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  enableWhitelist(overrides?: CallOverrides): Promise<boolean>;

  lastUpkeepTime(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  rebasers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upkeepInterval(overrides?: CallOverrides): Promise<number>;

  upkeepTimeWindow(overrides?: CallOverrides): Promise<number>;

  volatilityToken(overrides?: CallOverrides): Promise<string>;

  rebase(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVolatilityToken(
    _volatilityToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUniswapPairs(
    _uniswapPairs: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpkeepInterval(
    _upkeepInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpkeepTimeWindow(
    _upkeepTimeWindow: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnableWhitelist(
    _enableWhitelist: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRebaserAddress(
    user: string,
    isAllowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkUpkeep(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string] & { upkeepNeeded: boolean; performData: string }
  >;

  performUpkeep(
    arg0: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    enableWhitelist(overrides?: CallOverrides): Promise<boolean>;

    lastUpkeepTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    rebasers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upkeepInterval(overrides?: CallOverrides): Promise<number>;

    upkeepTimeWindow(overrides?: CallOverrides): Promise<number>;

    volatilityToken(overrides?: CallOverrides): Promise<string>;

    rebase(overrides?: CallOverrides): Promise<void>;

    setVolatilityToken(
      _volatilityToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUniswapPairs(
      _uniswapPairs: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setUpkeepInterval(
      _upkeepInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpkeepTimeWindow(
      _upkeepTimeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnableWhitelist(
      _enableWhitelist: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebaserAddress(
      user: string,
      isAllowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    checkUpkeep(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    performUpkeep(arg0: BytesLike, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    enableWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpkeepTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rebasers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upkeepInterval(overrides?: CallOverrides): Promise<BigNumber>;

    upkeepTimeWindow(overrides?: CallOverrides): Promise<BigNumber>;

    volatilityToken(overrides?: CallOverrides): Promise<BigNumber>;

    rebase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVolatilityToken(
      _volatilityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUniswapPairs(
      _uniswapPairs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpkeepInterval(
      _upkeepInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpkeepTimeWindow(
      _upkeepTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnableWhitelist(
      _enableWhitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRebaserAddress(
      user: string,
      isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkUpkeep(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    performUpkeep(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    enableWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpkeepTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebasers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upkeepInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upkeepTimeWindow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    volatilityToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVolatilityToken(
      _volatilityToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUniswapPairs(
      _uniswapPairs: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpkeepInterval(
      _upkeepInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpkeepTimeWindow(
      _upkeepTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnableWhitelist(
      _enableWhitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRebaserAddress(
      user: string,
      isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkUpkeep(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performUpkeep(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
