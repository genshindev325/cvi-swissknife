/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface BancorNetworkEthMainnetInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "cancelWithdrawal(uint256)": FunctionFragment;
    "collectionByPool(address)": FunctionFragment;
    "createPools(address[],address)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "depositFor(address,address,uint256)": FunctionFragment;
    "depositingEnabled()": FunctionFragment;
    "enableDepositing(bool)": FunctionFragment;
    "flashLoan(address,uint256,address,bytes)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initWithdrawal(address,uint256)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "liquidityPools()": FunctionFragment;
    "migrateLiquidity(address,address,uint256,uint256,uint256)": FunctionFragment;
    "migratePools(address[],address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingNetworkFeeAmount()": FunctionFragment;
    "poolCollections()": FunctionFragment;
    "postUpgrade(bytes)": FunctionFragment;
    "registerPoolCollection(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "resume()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "roleAdmin()": FunctionFragment;
    "roleEmergencyStopper()": FunctionFragment;
    "roleMigrationManager()": FunctionFragment;
    "roleNetworkFeeManager()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tradeBySourceAmount(address,address,uint256,uint256,uint256,address)": FunctionFragment;
    "tradeByTargetAmount(address,address,uint256,uint256,uint256,address)": FunctionFragment;
    "unregisterPoolCollection(address)": FunctionFragment;
    "version()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawNetworkFees(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "cancelWithdrawal"
      | "collectionByPool"
      | "createPools"
      | "deposit"
      | "depositFor"
      | "depositingEnabled"
      | "enableDepositing"
      | "flashLoan"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "initWithdrawal"
      | "initialize"
      | "liquidityPools"
      | "migrateLiquidity"
      | "migratePools"
      | "pause"
      | "paused"
      | "pendingNetworkFeeAmount"
      | "poolCollections"
      | "postUpgrade"
      | "registerPoolCollection"
      | "renounceRole"
      | "resume"
      | "revokeRole"
      | "roleAdmin"
      | "roleEmergencyStopper"
      | "roleMigrationManager"
      | "roleNetworkFeeManager"
      | "supportsInterface"
      | "tradeBySourceAmount"
      | "tradeByTargetAmount"
      | "unregisterPoolCollection"
      | "version"
      | "withdraw"
      | "withdrawNetworkFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionByPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createPools",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableDepositing",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initWithdrawal",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateLiquidity",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migratePools",
    values: [string[], string]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingNetworkFeeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolCollections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postUpgrade",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPoolCollection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "resume", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "roleAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "roleEmergencyStopper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roleMigrationManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roleNetworkFeeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeBySourceAmount",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeByTargetAmount",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterPoolCollection",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNetworkFees",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionByPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableDepositing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migratePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingNetworkFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPoolCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleEmergencyStopper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roleMigrationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roleNetworkFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeBySourceAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeByTargetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterPoolCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNetworkFees",
    data: BytesLike
  ): Result;

  events: {
    "FlashLoanCompleted(address,address,uint256,uint256)": EventFragment;
    "FundsMigrated(bytes32,address,address,uint256,uint256,uint256)": EventFragment;
    "NetworkFeesWithdrawn(address,address,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "PoolAdded(address,address)": EventFragment;
    "PoolCollectionAdded(uint16,address)": EventFragment;
    "PoolCollectionRemoved(uint16,address)": EventFragment;
    "PoolCreated(address,address)": EventFragment;
    "PoolRemoved(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TokensTraded(bytes32,address,address,uint256,uint256,uint256,uint256,uint256,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FlashLoanCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsMigrated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NetworkFeesWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCollectionAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCollectionRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensTraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface FlashLoanCompletedEventObject {
  token: string;
  borrower: string;
  amount: BigNumber;
  feeAmount: BigNumber;
}
export type FlashLoanCompletedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  FlashLoanCompletedEventObject
>;

export type FlashLoanCompletedEventFilter =
  TypedEventFilter<FlashLoanCompletedEvent>;

export interface FundsMigratedEventObject {
  contextId: string;
  token: string;
  provider: string;
  amount: BigNumber;
  availableAmount: BigNumber;
  originalAmount: BigNumber;
}
export type FundsMigratedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  FundsMigratedEventObject
>;

export type FundsMigratedEventFilter = TypedEventFilter<FundsMigratedEvent>;

export interface NetworkFeesWithdrawnEventObject {
  caller: string;
  recipient: string;
  amount: BigNumber;
}
export type NetworkFeesWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  NetworkFeesWithdrawnEventObject
>;

export type NetworkFeesWithdrawnEventFilter =
  TypedEventFilter<NetworkFeesWithdrawnEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PoolAddedEventObject {
  pool: string;
  poolCollection: string;
}
export type PoolAddedEvent = TypedEvent<[string, string], PoolAddedEventObject>;

export type PoolAddedEventFilter = TypedEventFilter<PoolAddedEvent>;

export interface PoolCollectionAddedEventObject {
  poolType: number;
  poolCollection: string;
}
export type PoolCollectionAddedEvent = TypedEvent<
  [number, string],
  PoolCollectionAddedEventObject
>;

export type PoolCollectionAddedEventFilter =
  TypedEventFilter<PoolCollectionAddedEvent>;

export interface PoolCollectionRemovedEventObject {
  poolType: number;
  poolCollection: string;
}
export type PoolCollectionRemovedEvent = TypedEvent<
  [number, string],
  PoolCollectionRemovedEventObject
>;

export type PoolCollectionRemovedEventFilter =
  TypedEventFilter<PoolCollectionRemovedEvent>;

export interface PoolCreatedEventObject {
  pool: string;
  poolCollection: string;
}
export type PoolCreatedEvent = TypedEvent<
  [string, string],
  PoolCreatedEventObject
>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface PoolRemovedEventObject {
  pool: string;
  poolCollection: string;
}
export type PoolRemovedEvent = TypedEvent<
  [string, string],
  PoolRemovedEventObject
>;

export type PoolRemovedEventFilter = TypedEventFilter<PoolRemovedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TokensTradedEventObject {
  contextId: string;
  sourceToken: string;
  targetToken: string;
  sourceAmount: BigNumber;
  targetAmount: BigNumber;
  bntAmount: BigNumber;
  targetFeeAmount: BigNumber;
  bntFeeAmount: BigNumber;
  trader: string;
}
export type TokensTradedEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  TokensTradedEventObject
>;

export type TokensTradedEventFilter = TypedEventFilter<TokensTradedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface BancorNetworkEthMainnet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BancorNetworkEthMainnetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    cancelWithdrawal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectionByPool(
      pool: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createPools(
      tokens: string[],
      poolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositFor(
      provider: string,
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    enableDepositing(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashLoan(
      token: string,
      amount: BigNumberish,
      recipient: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initWithdrawal(
      poolToken: string,
      poolTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      initBNTPool: string,
      initPendingWithdrawals: string,
      initPoolMigrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityPools(overrides?: CallOverrides): Promise<[string[]]>;

    migrateLiquidity(
      token: string,
      provider: string,
      amount: BigNumberish,
      availableAmount: BigNumberish,
      originalAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migratePools(
      pools: string[],
      newPoolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingNetworkFeeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolCollections(overrides?: CallOverrides): Promise<[string[]]>;

    postUpgrade(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerPoolCollection(
      newPoolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roleAdmin(overrides?: CallOverrides): Promise<[string]>;

    roleEmergencyStopper(overrides?: CallOverrides): Promise<[string]>;

    roleMigrationManager(overrides?: CallOverrides): Promise<[string]>;

    roleNetworkFeeManager(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tradeBySourceAmount(
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      minReturnAmount: BigNumberish,
      deadline: BigNumberish,
      beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tradeByTargetAmount(
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      maxSourceAmount: BigNumberish,
      deadline: BigNumberish,
      beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unregisterPoolCollection(
      poolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[number]>;

    withdraw(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawNetworkFees(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  cancelWithdrawal(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectionByPool(pool: string, overrides?: CallOverrides): Promise<string>;

  createPools(
    tokens: string[],
    poolCollection: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    pool: string,
    tokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositFor(
    provider: string,
    pool: string,
    tokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositingEnabled(overrides?: CallOverrides): Promise<boolean>;

  enableDepositing(
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashLoan(
    token: string,
    amount: BigNumberish,
    recipient: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initWithdrawal(
    poolToken: string,
    poolTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    initBNTPool: string,
    initPendingWithdrawals: string,
    initPoolMigrator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityPools(overrides?: CallOverrides): Promise<string[]>;

  migrateLiquidity(
    token: string,
    provider: string,
    amount: BigNumberish,
    availableAmount: BigNumberish,
    originalAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migratePools(
    pools: string[],
    newPoolCollection: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingNetworkFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  poolCollections(overrides?: CallOverrides): Promise<string[]>;

  postUpgrade(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerPoolCollection(
    newPoolCollection: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resume(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roleAdmin(overrides?: CallOverrides): Promise<string>;

  roleEmergencyStopper(overrides?: CallOverrides): Promise<string>;

  roleMigrationManager(overrides?: CallOverrides): Promise<string>;

  roleNetworkFeeManager(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tradeBySourceAmount(
    sourceToken: string,
    targetToken: string,
    sourceAmount: BigNumberish,
    minReturnAmount: BigNumberish,
    deadline: BigNumberish,
    beneficiary: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tradeByTargetAmount(
    sourceToken: string,
    targetToken: string,
    targetAmount: BigNumberish,
    maxSourceAmount: BigNumberish,
    deadline: BigNumberish,
    beneficiary: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unregisterPoolCollection(
    poolCollection: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<number>;

  withdraw(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawNetworkFees(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    cancelWithdrawal(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectionByPool(pool: string, overrides?: CallOverrides): Promise<string>;

    createPools(
      tokens: string[],
      poolCollection: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFor(
      provider: string,
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositingEnabled(overrides?: CallOverrides): Promise<boolean>;

    enableDepositing(status: boolean, overrides?: CallOverrides): Promise<void>;

    flashLoan(
      token: string,
      amount: BigNumberish,
      recipient: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initWithdrawal(
      poolToken: string,
      poolTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      initBNTPool: string,
      initPendingWithdrawals: string,
      initPoolMigrator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidityPools(overrides?: CallOverrides): Promise<string[]>;

    migrateLiquidity(
      token: string,
      provider: string,
      amount: BigNumberish,
      availableAmount: BigNumberish,
      originalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    migratePools(
      pools: string[],
      newPoolCollection: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingNetworkFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    poolCollections(overrides?: CallOverrides): Promise<string[]>;

    postUpgrade(data: BytesLike, overrides?: CallOverrides): Promise<void>;

    registerPoolCollection(
      newPoolCollection: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    resume(overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    roleAdmin(overrides?: CallOverrides): Promise<string>;

    roleEmergencyStopper(overrides?: CallOverrides): Promise<string>;

    roleMigrationManager(overrides?: CallOverrides): Promise<string>;

    roleNetworkFeeManager(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tradeBySourceAmount(
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      minReturnAmount: BigNumberish,
      deadline: BigNumberish,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradeByTargetAmount(
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      maxSourceAmount: BigNumberish,
      deadline: BigNumberish,
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unregisterPoolCollection(
      poolCollection: string,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<number>;

    withdraw(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawNetworkFees(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "FlashLoanCompleted(address,address,uint256,uint256)"(
      token?: string | null,
      borrower?: string | null,
      amount?: null,
      feeAmount?: null
    ): FlashLoanCompletedEventFilter;
    FlashLoanCompleted(
      token?: string | null,
      borrower?: string | null,
      amount?: null,
      feeAmount?: null
    ): FlashLoanCompletedEventFilter;

    "FundsMigrated(bytes32,address,address,uint256,uint256,uint256)"(
      contextId?: BytesLike | null,
      token?: string | null,
      provider?: string | null,
      amount?: null,
      availableAmount?: null,
      originalAmount?: null
    ): FundsMigratedEventFilter;
    FundsMigrated(
      contextId?: BytesLike | null,
      token?: string | null,
      provider?: string | null,
      amount?: null,
      availableAmount?: null,
      originalAmount?: null
    ): FundsMigratedEventFilter;

    "NetworkFeesWithdrawn(address,address,uint256)"(
      caller?: string | null,
      recipient?: string | null,
      amount?: null
    ): NetworkFeesWithdrawnEventFilter;
    NetworkFeesWithdrawn(
      caller?: string | null,
      recipient?: string | null,
      amount?: null
    ): NetworkFeesWithdrawnEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PoolAdded(address,address)"(
      pool?: string | null,
      poolCollection?: string | null
    ): PoolAddedEventFilter;
    PoolAdded(
      pool?: string | null,
      poolCollection?: string | null
    ): PoolAddedEventFilter;

    "PoolCollectionAdded(uint16,address)"(
      poolType?: BigNumberish | null,
      poolCollection?: string | null
    ): PoolCollectionAddedEventFilter;
    PoolCollectionAdded(
      poolType?: BigNumberish | null,
      poolCollection?: string | null
    ): PoolCollectionAddedEventFilter;

    "PoolCollectionRemoved(uint16,address)"(
      poolType?: BigNumberish | null,
      poolCollection?: string | null
    ): PoolCollectionRemovedEventFilter;
    PoolCollectionRemoved(
      poolType?: BigNumberish | null,
      poolCollection?: string | null
    ): PoolCollectionRemovedEventFilter;

    "PoolCreated(address,address)"(
      pool?: string | null,
      poolCollection?: string | null
    ): PoolCreatedEventFilter;
    PoolCreated(
      pool?: string | null,
      poolCollection?: string | null
    ): PoolCreatedEventFilter;

    "PoolRemoved(address,address)"(
      pool?: string | null,
      poolCollection?: string | null
    ): PoolRemovedEventFilter;
    PoolRemoved(
      pool?: string | null,
      poolCollection?: string | null
    ): PoolRemovedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "TokensTraded(bytes32,address,address,uint256,uint256,uint256,uint256,uint256,address)"(
      contextId?: BytesLike | null,
      sourceToken?: string | null,
      targetToken?: string | null,
      sourceAmount?: null,
      targetAmount?: null,
      bntAmount?: null,
      targetFeeAmount?: null,
      bntFeeAmount?: null,
      trader?: null
    ): TokensTradedEventFilter;
    TokensTraded(
      contextId?: BytesLike | null,
      sourceToken?: string | null,
      targetToken?: string | null,
      sourceAmount?: null,
      targetAmount?: null,
      bntAmount?: null,
      targetFeeAmount?: null,
      bntFeeAmount?: null,
      trader?: null
    ): TokensTradedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    cancelWithdrawal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectionByPool(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPools(
      tokens: string[],
      poolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositFor(
      provider: string,
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    enableDepositing(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashLoan(
      token: string,
      amount: BigNumberish,
      recipient: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initWithdrawal(
      poolToken: string,
      poolTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      initBNTPool: string,
      initPendingWithdrawals: string,
      initPoolMigrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityPools(overrides?: CallOverrides): Promise<BigNumber>;

    migrateLiquidity(
      token: string,
      provider: string,
      amount: BigNumberish,
      availableAmount: BigNumberish,
      originalAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migratePools(
      pools: string[],
      newPoolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingNetworkFeeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    poolCollections(overrides?: CallOverrides): Promise<BigNumber>;

    postUpgrade(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerPoolCollection(
      newPoolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roleAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    roleEmergencyStopper(overrides?: CallOverrides): Promise<BigNumber>;

    roleMigrationManager(overrides?: CallOverrides): Promise<BigNumber>;

    roleNetworkFeeManager(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradeBySourceAmount(
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      minReturnAmount: BigNumberish,
      deadline: BigNumberish,
      beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tradeByTargetAmount(
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      maxSourceAmount: BigNumberish,
      deadline: BigNumberish,
      beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unregisterPoolCollection(
      poolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawNetworkFees(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelWithdrawal(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectionByPool(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPools(
      tokens: string[],
      poolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositFor(
      provider: string,
      pool: string,
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableDepositing(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashLoan(
      token: string,
      amount: BigNumberish,
      recipient: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initWithdrawal(
      poolToken: string,
      poolTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      initBNTPool: string,
      initPendingWithdrawals: string,
      initPoolMigrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateLiquidity(
      token: string,
      provider: string,
      amount: BigNumberish,
      availableAmount: BigNumberish,
      originalAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migratePools(
      pools: string[],
      newPoolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingNetworkFeeAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolCollections(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postUpgrade(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerPoolCollection(
      newPoolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roleAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roleEmergencyStopper(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleMigrationManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleNetworkFeeManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradeBySourceAmount(
      sourceToken: string,
      targetToken: string,
      sourceAmount: BigNumberish,
      minReturnAmount: BigNumberish,
      deadline: BigNumberish,
      beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tradeByTargetAmount(
      sourceToken: string,
      targetToken: string,
      targetAmount: BigNumberish,
      maxSourceAmount: BigNumberish,
      deadline: BigNumberish,
      beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unregisterPoolCollection(
      poolCollection: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNetworkFees(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
