/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { DeployOptions, Libraries } from 'hardhat-deploy/types'
import * as GitContractTypes from './git-contract-types'
import type { HardhatEthersHelpers } from '@nomiclabs/hardhat-ethers/types'
import { TxOptions, Receipt } from 'hardhat-deploy/types'
import { CallOptions } from 'hardhat-deploy/types'
import type { MockContract } from '@defi-wonderland/smock'

export type Head<T extends (...args: any) => any> = Required<Parameters<T>> extends [...infer Head, any] ? Head : any[]

type GetDeployMethod<C> = C extends { deploy: Function } ? C['deploy'] : any
type GetInitMethod<C> = C extends { initialize: Function } ? C['initialize'] : any
      
export type AllDeployFunctionsTags = 'change-admin' | 'change-owner' | 'transfer-admin-owner' | 'disable-platform-max-time-allowed-after-latest-round' | 'fake-cvi-oracle' | 'fake-price-oracle' | 'arbitrum-buyback' | 'send-funds' | 'deploy-cvi-oracle' | 'deploy-cvi-usdc-platform-dependencies' | 'deploy-cvi-usdc-platform' | 'set-cvi-usdc-initial-liquidity' | 'set-cvi-usdc-initial-liquidity-submit-deposit' | 'set-cvi-usdc-initial-liquidity-deposit-upkeep' | 'set-cvi-usdc-initial-liquidity-submit-mint' | 'set-cvi-usdc-initial-liquidity-mint-upkeep' | 'set-cvi-usdc-initial-liquidity-add-liquidity-to-pair' | 'cvi-usdc-rebase' | 'cvi-usdc-transfer-ownership' | 'set-cvi-usdc-platform-state' | 'deploy-cvi-usdc-volatility-token' | 'set-cvi-usdc-volatility-token-state' | 'create-cvi-usdc-volatility-token-pair' | 'deploy-cvi-usdc-rebaser' | 'set-cvi-usdc-rebaser-state' | 'deploy-cvi-usdc-theta-vault' | 'set-cvi-usdc-theta-vault-state' | 'test-cvi-feed-oracle' | 'test-govi' | 'test-staking' | 'test-token-distribution' | 'test-uniswap' | 'test-weth' | 'il-libraries' | 'il-protection-config' | 'il-contracts-initial-permissions' | 'il-treasury-controller' | 'il-liquidity-controller' | 'il-token-pair-repository' | 'il-protection-nft' | 'il-protection-discount-nft-controller' | 'il-contracts' | 'il-contracts-set-state' | 'propose-add-liquidity' | 'propose-upgrade' | 'test-cvi-oracle' | 'test-il-protection-discount-nft' | 'test-price-oracles' | 'test-usdc' | 'initial-govi-transfer' | 'staking-es-govi' | 'staking-reward-distributors' | 'staking-reward-trackers' | 'staking-vesters' | 'staking-reward-router' | 'staking-initial-permissions' | 'staking-set-state' | 'test-staking-govi' | 'test-staking-theta-vault' | 'verify-contracts'
export const deploymentTags = ['change-admin', 'change-owner', 'transfer-admin-owner', 'disable-platform-max-time-allowed-after-latest-round', 'fake-cvi-oracle', 'fake-price-oracle', 'arbitrum-buyback', 'send-funds', 'deploy-cvi-oracle', 'deploy-cvi-usdc-platform-dependencies', 'deploy-cvi-usdc-platform', 'set-cvi-usdc-initial-liquidity', 'set-cvi-usdc-initial-liquidity-submit-deposit', 'set-cvi-usdc-initial-liquidity-deposit-upkeep', 'set-cvi-usdc-initial-liquidity-submit-mint', 'set-cvi-usdc-initial-liquidity-mint-upkeep', 'set-cvi-usdc-initial-liquidity-add-liquidity-to-pair', 'cvi-usdc-rebase', 'cvi-usdc-transfer-ownership', 'set-cvi-usdc-platform-state', 'deploy-cvi-usdc-volatility-token', 'set-cvi-usdc-volatility-token-state', 'create-cvi-usdc-volatility-token-pair', 'deploy-cvi-usdc-rebaser', 'set-cvi-usdc-rebaser-state', 'deploy-cvi-usdc-theta-vault', 'set-cvi-usdc-theta-vault-state', 'test-cvi-feed-oracle', 'test-govi', 'test-staking', 'test-token-distribution', 'test-uniswap', 'test-weth', 'il-libraries', 'il-protection-config', 'il-contracts-initial-permissions', 'il-treasury-controller', 'il-liquidity-controller', 'il-token-pair-repository', 'il-protection-nft', 'il-protection-discount-nft-controller', 'il-contracts', 'il-contracts-set-state', 'propose-add-liquidity', 'propose-upgrade', 'test-cvi-oracle', 'test-il-protection-discount-nft', 'test-price-oracles', 'test-usdc', 'initial-govi-transfer', 'staking-es-govi', 'staking-reward-distributors', 'staking-reward-trackers', 'staking-vesters', 'staking-reward-router', 'staking-initial-permissions', 'staking-set-state', 'test-staking-govi', 'test-staking-theta-vault', 'verify-contracts'] as const

// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------

export interface HardhatDeployAndOverrideContractNameFunctionOverloads {
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.KeeperCompatibleInterface__factory>>
      contract: 'KeeperCompatibleInterface'
      from?: string
    },
  ): Promise<GitContractTypes.KeeperCompatibleInterface>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.KeeperBase__factory>>
      contract: 'KeeperBase'
      from?: string
    },
  ): Promise<GitContractTypes.KeeperBase>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.KeeperCompatible__factory>>
      contract: 'KeeperCompatible'
      from?: string
    },
  ): Promise<GitContractTypes.KeeperCompatible>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIOracle__factory>>
      contract: 'CVIOracle'
      from?: string
    },
  ): Promise<GitContractTypes.CVIOracle>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ElasticToken__factory>>
      contract: 'ElasticToken'
      from?: string
    },
  ): Promise<GitContractTypes.ElasticToken>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IUniswapV2Factory__factory>>
      contract: 'IUniswapV2Factory'
      from?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Factory>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IUniswapV2Pair__factory>>
      contract: 'IUniswapV2Pair'
      from?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Pair>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IUniswapV2Router01__factory>>
      contract: 'IUniswapV2Router01'
      from?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Router01>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IUniswapV2Router02__factory>>
      contract: 'IUniswapV2Router02'
      from?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Router02>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.WETH9__factory>>
      contract: 'WETH9'
      from?: string
    },
  ): Promise<GitContractTypes.WETH9>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.FeesCalculator__factory>>
      contract: 'FeesCalculator'
      from?: string
    },
  ): Promise<GitContractTypes.FeesCalculator>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GOVI__factory>>
      contract: 'GOVI'
      from?: string
    },
  ): Promise<GitContractTypes.GOVI>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.AggregatorInterface__factory>>
      contract: 'AggregatorInterface'
      from?: string
    },
  ): Promise<GitContractTypes.AggregatorInterface>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.AggregatorV2V3Interface__factory>>
      contract: 'AggregatorV2V3Interface'
      from?: string
    },
  ): Promise<GitContractTypes.AggregatorV2V3Interface>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.AggregatorV3Interface__factory>>
      contract: 'AggregatorV3Interface'
      from?: string
    },
  ): Promise<GitContractTypes.AggregatorV3Interface>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ICVIOracle__factory>>
      contract: 'ICVIOracle'
      from?: string
    },
  ): Promise<GitContractTypes.ICVIOracle>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IElasticToken__factory>>
      contract: 'IElasticToken'
      from?: string
    },
  ): Promise<GitContractTypes.IElasticToken>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IFeesCalculator__factory>>
      contract: 'IFeesCalculator'
      from?: string
    },
  ): Promise<GitContractTypes.IFeesCalculator>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IFeesCollector__factory>>
      contract: 'IFeesCollector'
      from?: string
    },
  ): Promise<GitContractTypes.IFeesCollector>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IFeesCollectorManagement__factory>>
      contract: 'IFeesCollectorManagement'
      from?: string
    },
  ): Promise<GitContractTypes.IFeesCollectorManagement>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IInbox__factory>>
      contract: 'IInbox'
      from?: string
    },
  ): Promise<GitContractTypes.IInbox>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IKeepersFeeVault__factory>>
      contract: 'IKeepersFeeVault'
      from?: string
    },
  ): Promise<GitContractTypes.IKeepersFeeVault>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILiquidation__factory>>
      contract: 'ILiquidation'
      from?: string
    },
  ): Promise<GitContractTypes.ILiquidation>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IPlatform__factory>>
      contract: 'IPlatform'
      from?: string
    },
  ): Promise<GitContractTypes.IPlatform>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IPlatformHelper__factory>>
      contract: 'IPlatformHelper'
      from?: string
    },
  ): Promise<GitContractTypes.IPlatformHelper>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IPositionRewards__factory>>
      contract: 'IPositionRewards'
      from?: string
    },
  ): Promise<GitContractTypes.IPositionRewards>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IRebaser__factory>>
      contract: 'IRebaser'
      from?: string
    },
  ): Promise<GitContractTypes.IRebaser>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IRequestFeesCalculator__factory>>
      contract: 'IRequestFeesCalculator'
      from?: string
    },
  ): Promise<GitContractTypes.IRequestFeesCalculator>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IRequestFulfiller__factory>>
      contract: 'IRequestFulfiller'
      from?: string
    },
  ): Promise<GitContractTypes.IRequestFulfiller>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IRequestManager__factory>>
      contract: 'IRequestManager'
      from?: string
    },
  ): Promise<GitContractTypes.IRequestManager>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IRewardsCollector__factory>>
      contract: 'IRewardsCollector'
      from?: string
    },
  ): Promise<GitContractTypes.IRewardsCollector>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IStaking__factory>>
      contract: 'IStaking'
      from?: string
    },
  ): Promise<GitContractTypes.IStaking>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IStakingVault__factory>>
      contract: 'IStakingVault'
      from?: string
    },
  ): Promise<GitContractTypes.IStakingVault>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IThetaVault__factory>>
      contract: 'IThetaVault'
      from?: string
    },
  ): Promise<GitContractTypes.IThetaVault>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IThetaVaultInfo__factory>>
      contract: 'IThetaVaultInfo'
      from?: string
    },
  ): Promise<GitContractTypes.IThetaVaultInfo>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ITreasury__factory>>
      contract: 'ITreasury'
      from?: string
    },
  ): Promise<GitContractTypes.ITreasury>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IVolatilityToken__factory>>
      contract: 'IVolatilityToken'
      from?: string
    },
  ): Promise<GitContractTypes.IVolatilityToken>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IWETH__factory>>
      contract: 'IWETH'
      from?: string
    },
  ): Promise<GitContractTypes.IWETH>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.KeepersFeeVault__factory>>
      contract: 'KeepersFeeVault'
      from?: string
    },
  ): Promise<GitContractTypes.KeepersFeeVault>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Liquidation__factory>>
      contract: 'Liquidation'
      from?: string
    },
  ): Promise<GitContractTypes.Liquidation>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Platform__factory>>
      contract: 'Platform'
      from?: string
    },
  ): Promise<GitContractTypes.Platform>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.PlatformHelper__factory>>
      contract: 'PlatformHelper'
      from?: string
    },
  ): Promise<GitContractTypes.PlatformHelper>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.PositionRewards__factory>>
      contract: 'PositionRewards'
      from?: string
    },
  ): Promise<GitContractTypes.PositionRewards>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Rebaser__factory>>
      contract: 'Rebaser'
      from?: string
    },
  ): Promise<GitContractTypes.Rebaser>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.RequestFeesCalculator__factory>>
      contract: 'RequestFeesCalculator'
      from?: string
    },
  ): Promise<GitContractTypes.RequestFeesCalculator>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.RequestFulfiller__factory>>
      contract: 'RequestFulfiller'
      from?: string
    },
  ): Promise<GitContractTypes.RequestFulfiller>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.FeesCollector__factory>>
      contract: 'FeesCollector'
      from?: string
    },
  ): Promise<GitContractTypes.FeesCollector>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Staking__factory>>
      contract: 'Staking'
      from?: string
    },
  ): Promise<GitContractTypes.Staking>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.COTIETHSLPStakingRewards__factory>>
      contract: 'COTIETHSLPStakingRewards'
      from?: string
    },
  ): Promise<GitContractTypes.COTIETHSLPStakingRewards>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.COTIETHStakingRewards__factory>>
      contract: 'COTIETHStakingRewards'
      from?: string
    },
  ): Promise<GitContractTypes.COTIETHStakingRewards>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVOLUSDCLPStakingRewards__factory>>
      contract: 'CVOLUSDCLPStakingRewards'
      from?: string
    },
  ): Promise<GitContractTypes.CVOLUSDCLPStakingRewards>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ETHLPStakingRewards__factory>>
      contract: 'ETHLPStakingRewards'
      from?: string
    },
  ): Promise<GitContractTypes.ETHLPStakingRewards>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ETHVOL_USDCLPStakingRewards__factory>>
      contract: 'ETHVOL_USDCLPStakingRewards'
      from?: string
    },
  ): Promise<GitContractTypes.ETHVOL_USDCLPStakingRewards>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ETHVOLUSDCLPStakingRewards__factory>>
      contract: 'ETHVOLUSDCLPStakingRewards'
      from?: string
    },
  ): Promise<GitContractTypes.ETHVOLUSDCLPStakingRewards>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GOVIETHSLPStakingRewards__factory>>
      contract: 'GOVIETHSLPStakingRewards'
      from?: string
    },
  ): Promise<GitContractTypes.GOVIETHSLPStakingRewards>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GOVIETHStakingRewards__factory>>
      contract: 'GOVIETHStakingRewards'
      from?: string
    },
  ): Promise<GitContractTypes.GOVIETHStakingRewards>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.USDCLPStakingRewards__factory>>
      contract: 'USDCLPStakingRewards'
      from?: string
    },
  ): Promise<GitContractTypes.USDCLPStakingRewards>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.USDTLPStakingRewards__factory>>
      contract: 'USDTLPStakingRewards'
      from?: string
    },
  ): Promise<GitContractTypes.USDTLPStakingRewards>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IStakingRewards__factory>>
      contract: 'IStakingRewards'
      from?: string
    },
  ): Promise<GitContractTypes.IStakingRewards>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Owned__factory>>
      contract: 'Owned'
      from?: string
    },
  ): Promise<GitContractTypes.Owned>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Pausable__factory>>
      contract: 'Pausable'
      from?: string
    },
  ): Promise<GitContractTypes.Pausable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.RewardsDistributionRecipient__factory>>
      contract: 'RewardsDistributionRecipient'
      from?: string
    },
  ): Promise<GitContractTypes.RewardsDistributionRecipient>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.StakingRewards__factory>>
      contract: 'StakingRewards'
      from?: string
    },
  ): Promise<GitContractTypes.StakingRewards>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.StakingVault__factory>>
      contract: 'StakingVault'
      from?: string
    },
  ): Promise<GitContractTypes.StakingVault>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Treasury__factory>>
      contract: 'Treasury'
      from?: string
    },
  ): Promise<GitContractTypes.Treasury>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIFeedOracle__factory>>
      contract: 'CVIFeedOracle'
      from?: string
    },
  ): Promise<GitContractTypes.CVIFeedOracle>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.FakeERC20__factory>>
      contract: 'FakeERC20'
      from?: string
    },
  ): Promise<GitContractTypes.FakeERC20>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.FakePriceProvider__factory>>
      contract: 'FakePriceProvider'
      from?: string
    },
  ): Promise<GitContractTypes.FakePriceProvider>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC20__factory>>
      contract: 'IERC20'
      from?: string
    },
  ): Promise<GitContractTypes.IERC20>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IUniswapV2Callee__factory>>
      contract: 'IUniswapV2Callee'
      from?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Callee>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IUniswapV2ERC20__factory>>
      contract: 'IUniswapV2ERC20'
      from?: string
    },
  ): Promise<GitContractTypes.IUniswapV2ERC20>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.UniswapV2ERC20__factory>>
      contract: 'UniswapV2ERC20'
      from?: string
    },
  ): Promise<GitContractTypes.UniswapV2ERC20>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.UniswapV2Factory__factory>>
      contract: 'UniswapV2Factory'
      from?: string
    },
  ): Promise<GitContractTypes.UniswapV2Factory>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.UniswapV2Pair__factory>>
      contract: 'UniswapV2Pair'
      from?: string
    },
  ): Promise<GitContractTypes.UniswapV2Pair>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.UniswapV2Router02__factory>>
      contract: 'UniswapV2Router02'
      from?: string
    },
  ): Promise<GitContractTypes.UniswapV2Router02>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ThetaVault__factory>>
      contract: 'ThetaVault'
      from?: string
    },
  ): Promise<GitContractTypes.ThetaVault>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ThetaVaultRequestFulfiller__factory>>
      contract: 'ThetaVaultRequestFulfiller'
      from?: string
    },
  ): Promise<GitContractTypes.ThetaVaultRequestFulfiller>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.VolatilityToken__factory>>
      contract: 'VolatilityToken'
      from?: string
    },
  ): Promise<GitContractTypes.VolatilityToken>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.VolTokenRequestFulfiller__factory>>
      contract: 'VolTokenRequestFulfiller'
      from?: string
    },
  ): Promise<GitContractTypes.VolTokenRequestFulfiller>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.BaseController__factory>>
      contract: 'BaseController'
      from?: string
    },
  ): Promise<GitContractTypes.BaseController>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionConfig__factory>>
      contract: 'ILProtectionConfig'
      from?: string
    },
  ): Promise<GitContractTypes.ILProtectionConfig>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionController__factory>>
      contract: 'ILProtectionController'
      from?: string
    },
  ): Promise<GitContractTypes.ILProtectionController>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionDiscountNFTController__factory>>
      contract: 'ILProtectionDiscountNFTController'
      from?: string
    },
  ): Promise<GitContractTypes.ILProtectionDiscountNFTController>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionNFT__factory>>
      contract: 'ILProtectionNFT'
      from?: string
    },
  ): Promise<GitContractTypes.ILProtectionNFT>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILiquidityController__factory>>
      contract: 'ILiquidityController'
      from?: string
    },
  ): Promise<GitContractTypes.ILiquidityController>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionConfigInterface__factory>>
      contract: 'ILProtectionConfigInterface'
      from?: string
    },
  ): Promise<GitContractTypes.ILProtectionConfigInterface>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionControllerInterface__factory>>
      contract: 'ILProtectionControllerInterface'
      from?: string
    },
  ): Promise<GitContractTypes.ILProtectionControllerInterface>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionDiscountNFTControllerInterface__factory>>
      contract: 'ILProtectionDiscountNFTControllerInterface'
      from?: string
    },
  ): Promise<GitContractTypes.ILProtectionDiscountNFTControllerInterface>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionDiscountNFTInterface__factory>>
      contract: 'ILProtectionDiscountNFTInterface'
      from?: string
    },
  ): Promise<GitContractTypes.ILProtectionDiscountNFTInterface>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionNFTInterface__factory>>
      contract: 'ILProtectionNFTInterface'
      from?: string
    },
  ): Promise<GitContractTypes.ILProtectionNFTInterface>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ITokenPairRepository__factory>>
      contract: 'ITokenPairRepository'
      from?: string
    },
  ): Promise<GitContractTypes.ITokenPairRepository>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ITreasuryController__factory>>
      contract: 'ITreasuryController'
      from?: string
    },
  ): Promise<GitContractTypes.ITreasuryController>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILUtils__factory>>
      contract: 'ILUtils'
      from?: string
    },
  ): Promise<GitContractTypes.ILUtils>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.MathUtils__factory>>
      contract: 'MathUtils'
      from?: string
    },
  ): Promise<GitContractTypes.MathUtils>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.PremiumCalculator__factory>>
      contract: 'PremiumCalculator'
      from?: string
    },
  ): Promise<GitContractTypes.PremiumCalculator>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.LiquidityController__factory>>
      contract: 'LiquidityController'
      from?: string
    },
  ): Promise<GitContractTypes.LiquidityController>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionDiscountNFT__factory>>
      contract: 'ILProtectionDiscountNFT'
      from?: string
    },
  ): Promise<GitContractTypes.ILProtectionDiscountNFT>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ETHUSDOracle__factory>>
      contract: 'ETHUSDOracle'
      from?: string
    },
  ): Promise<GitContractTypes.ETHUSDOracle>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.LINKUSDOracle__factory>>
      contract: 'LINKUSDOracle'
      from?: string
    },
  ): Promise<GitContractTypes.LINKUSDOracle>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.USDUSDOracle__factory>>
      contract: 'USDUSDOracle'
      from?: string
    },
  ): Promise<GitContractTypes.USDUSDOracle>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.USDC__factory>>
      contract: 'USDC'
      from?: string
    },
  ): Promise<GitContractTypes.USDC>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.TokenPairRepository__factory>>
      contract: 'TokenPairRepository'
      from?: string
    },
  ): Promise<GitContractTypes.TokenPairRepository>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.TreasuryController__factory>>
      contract: 'TreasuryController'
      from?: string
    },
  ): Promise<GitContractTypes.TreasuryController>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.EsGOVI__factory>>
      contract: 'EsGOVI'
      from?: string
    },
  ): Promise<GitContractTypes.EsGOVI>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.EsGOVIRewardTrackerDistributor__factory>>
      contract: 'EsGOVIRewardTrackerDistributor'
      from?: string
    },
  ): Promise<GitContractTypes.EsGOVIRewardTrackerDistributor>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GOVIRewardTrackerDistributor__factory>>
      contract: 'GOVIRewardTrackerDistributor'
      from?: string
    },
  ): Promise<GitContractTypes.GOVIRewardTrackerDistributor>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ThetaVaultRewardTrackerDistributor__factory>>
      contract: 'ThetaVaultRewardTrackerDistributor'
      from?: string
    },
  ): Promise<GitContractTypes.ThetaVaultRewardTrackerDistributor>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.EsGOVIRewardTracker__factory>>
      contract: 'EsGOVIRewardTracker'
      from?: string
    },
  ): Promise<GitContractTypes.EsGOVIRewardTracker>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GOVIRewardTracker__factory>>
      contract: 'GOVIRewardTracker'
      from?: string
    },
  ): Promise<GitContractTypes.GOVIRewardTracker>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ThetaVaultRewardTracker__factory>>
      contract: 'ThetaVaultRewardTracker'
      from?: string
    },
  ): Promise<GitContractTypes.ThetaVaultRewardTracker>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GOVIVester__factory>>
      contract: 'GOVIVester'
      from?: string
    },
  ): Promise<GitContractTypes.GOVIVester>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ThetaVaultVester__factory>>
      contract: 'ThetaVaultVester'
      from?: string
    },
  ): Promise<GitContractTypes.ThetaVaultVester>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IMintable__factory>>
      contract: 'IMintable'
      from?: string
    },
  ): Promise<GitContractTypes.IMintable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IRewardDistributor__factory>>
      contract: 'IRewardDistributor'
      from?: string
    },
  ): Promise<GitContractTypes.IRewardDistributor>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IRewardRouter__factory>>
      contract: 'IRewardRouter'
      from?: string
    },
  ): Promise<GitContractTypes.IRewardRouter>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IRewardTracker__factory>>
      contract: 'IRewardTracker'
      from?: string
    },
  ): Promise<GitContractTypes.IRewardTracker>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IVester__factory>>
      contract: 'IVester'
      from?: string
    },
  ): Promise<GitContractTypes.IVester>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.RewardDistributor__factory>>
      contract: 'RewardDistributor'
      from?: string
    },
  ): Promise<GitContractTypes.RewardDistributor>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.RewardRouter__factory>>
      contract: 'RewardRouter'
      from?: string
    },
  ): Promise<GitContractTypes.RewardRouter>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.RewardTracker__factory>>
      contract: 'RewardTracker'
      from?: string
    },
  ): Promise<GitContractTypes.RewardTracker>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.FakeCVIUSDCThetaVault__factory>>
      contract: 'FakeCVIUSDCThetaVault'
      from?: string
    },
  ): Promise<GitContractTypes.FakeCVIUSDCThetaVault>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.FakeGOVI__factory>>
      contract: 'FakeGOVI'
      from?: string
    },
  ): Promise<GitContractTypes.FakeGOVI>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Vester__factory>>
      contract: 'Vester'
      from?: string
    },
  ): Promise<GitContractTypes.Vester>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.AccessControlUpgradeable__factory>>
      contract: 'AccessControlUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.AccessControlUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IAccessControlUpgradeable__factory>>
      contract: 'IAccessControlUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IAccessControlUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.OwnableUpgradeable__factory>>
      contract: 'OwnableUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.OwnableUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Initializable__factory>>
      contract: 'Initializable'
      from?: string
    },
  ): Promise<GitContractTypes.Initializable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ReentrancyGuardUpgradeable__factory>>
      contract: 'ReentrancyGuardUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ReentrancyGuardUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20Upgradeable__factory>>
      contract: 'ERC20Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC20MetadataUpgradeable__factory>>
      contract: 'IERC20MetadataUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC20MetadataUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC20Upgradeable__factory>>
      contract: 'IERC20Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC20Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721Upgradeable__factory>>
      contract: 'ERC721Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC721Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721EnumerableUpgradeable__factory>>
      contract: 'ERC721EnumerableUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC721EnumerableUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC721EnumerableUpgradeable__factory>>
      contract: 'IERC721EnumerableUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC721EnumerableUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC721MetadataUpgradeable__factory>>
      contract: 'IERC721MetadataUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC721MetadataUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC721ReceiverUpgradeable__factory>>
      contract: 'IERC721ReceiverUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC721ReceiverUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC721Upgradeable__factory>>
      contract: 'IERC721Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC721Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ContextUpgradeable__factory>>
      contract: 'ContextUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ContextUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC165Upgradeable__factory>>
      contract: 'ERC165Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC165Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC165Upgradeable__factory>>
      contract: 'IERC165Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC165Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.AccessControl__factory>>
      contract: 'AccessControl'
      from?: string
    },
  ): Promise<GitContractTypes.AccessControl>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IAccessControl__factory>>
      contract: 'IAccessControl'
      from?: string
    },
  ): Promise<GitContractTypes.IAccessControl>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Ownable__factory>>
      contract: 'Ownable'
      from?: string
    },
  ): Promise<GitContractTypes.Ownable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20__factory>>
      contract: 'ERC20'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC20Metadata__factory>>
      contract: 'IERC20Metadata'
      from?: string
    },
  ): Promise<GitContractTypes.IERC20Metadata>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC165__factory>>
      contract: 'ERC165'
      from?: string
    },
  ): Promise<GitContractTypes.ERC165>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC165__factory>>
      contract: 'IERC165'
      from?: string
    },
  ): Promise<GitContractTypes.IERC165>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIDeviationOracle__factory>>
      contract: 'CVIDeviationOracle'
      from?: string
    },
  ): Promise<GitContractTypes.CVIDeviationOracle>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIFakeFeedOracle__factory>>
      contract: 'CVIFakeFeedOracle'
      from?: string
    },
  ): Promise<GitContractTypes.CVIFakeFeedOracle>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIOracle2X__factory>>
      contract: 'CVIOracle2X'
      from?: string
    },
  ): Promise<GitContractTypes.CVIOracle2X>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ETHVIOracle__factory>>
      contract: 'ETHVIOracle'
      from?: string
    },
  ): Promise<GitContractTypes.ETHVIOracle>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCFeesCalculator__factory>>
      contract: 'CVIUSDCFeesCalculator'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCFeesCalculator>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCFeesCalculator2X__factory>>
      contract: 'CVIUSDCFeesCalculator2X'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCFeesCalculator2X>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCLiquidation__factory>>
      contract: 'CVIUSDCLiquidation'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCLiquidation>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCLiquidation2X__factory>>
      contract: 'CVIUSDCLiquidation2X'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCLiquidation2X>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCPlatform__factory>>
      contract: 'CVIUSDCPlatform'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCPlatform>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCPlatform2X__factory>>
      contract: 'CVIUSDCPlatform2X'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCPlatform2X>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCPositionRewards__factory>>
      contract: 'CVIUSDCPositionRewards'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCPositionRewards>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.StakingV2__factory>>
      contract: 'StakingV2'
      from?: string
    },
  ): Promise<GitContractTypes.StakingV2>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCLPStakingRewards__factory>>
      contract: 'CVIUSDCLPStakingRewards'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCLPStakingRewards>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCThetaVault__factory>>
      contract: 'CVIUSDCThetaVault'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCThetaVault>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCThetaVault2X__factory>>
      contract: 'CVIUSDCThetaVault2X'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCThetaVault2X>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller__factory>>
      contract: 'CVIUSDCThetaVaultRequestFulfiller'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X__factory>>
      contract: 'CVIUSDCThetaVaultRequestFulfiller2X'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.WETH__factory>>
      contract: 'WETH'
      from?: string
    },
  ): Promise<GitContractTypes.WETH>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCRebaser__factory>>
      contract: 'CVIUSDCRebaser'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCRebaser>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCRebaser2X__factory>>
      contract: 'CVIUSDCRebaser2X'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCRebaser2X>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCRequestFeesCalculator__factory>>
      contract: 'CVIUSDCRequestFeesCalculator'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCRequestFeesCalculator>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCRequestFeesCalculator2X__factory>>
      contract: 'CVIUSDCRequestFeesCalculator2X'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCRequestFeesCalculator2X>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCVolatilityToken__factory>>
      contract: 'CVIUSDCVolatilityToken'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCVolatilityToken>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCVolatilityToken2X__factory>>
      contract: 'CVIUSDCVolatilityToken2X'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCVolatilityToken2X>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCVolTokenRequestFulfiller__factory>>
      contract: 'CVIUSDCVolTokenRequestFulfiller'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCVolTokenRequestFulfiller>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X__factory>>
      contract: 'CVIUSDCVolTokenRequestFulfiller2X'
      from?: string
    },
  ): Promise<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.AccessControlCrossChainUpgradeable__factory>>
      contract: 'AccessControlCrossChainUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.AccessControlCrossChainUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.AccessControlEnumerableUpgradeable__factory>>
      contract: 'AccessControlEnumerableUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.AccessControlEnumerableUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ConditionalEscrowUpgradeable__factory>>
      contract: 'ConditionalEscrowUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ConditionalEscrowUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledAMBUpgradeable__factory>>
      contract: 'CrossChainEnabledAMBUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledAMBUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable__factory>>
      contract: 'CrossChainEnabledArbitrumL1Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable__factory>>
      contract: 'CrossChainEnabledArbitrumL2Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledOptimismUpgradeable__factory>>
      contract: 'CrossChainEnabledOptimismUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledOptimismUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable__factory>>
      contract: 'CrossChainEnabledPolygonChildUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledUpgradeable__factory>>
      contract: 'CrossChainEnabledUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.DoubleEndedQueueUpgradeable__factory>>
      contract: 'DoubleEndedQueueUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.DoubleEndedQueueUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.EIP712Upgradeable__factory>>
      contract: 'EIP712Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.EIP712Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155BurnableUpgradeable__factory>>
      contract: 'ERC1155BurnableUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1155BurnableUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155HolderUpgradeable__factory>>
      contract: 'ERC1155HolderUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1155HolderUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155PausableUpgradeable__factory>>
      contract: 'ERC1155PausableUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1155PausableUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155PresetMinterPauserUpgradeable__factory>>
      contract: 'ERC1155PresetMinterPauserUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1155PresetMinterPauserUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155ReceiverUpgradeable__factory>>
      contract: 'ERC1155ReceiverUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1155ReceiverUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155SupplyUpgradeable__factory>>
      contract: 'ERC1155SupplyUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1155SupplyUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155Upgradeable__factory>>
      contract: 'ERC1155Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1155Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155URIStorageUpgradeable__factory>>
      contract: 'ERC1155URIStorageUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1155URIStorageUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC165StorageUpgradeable__factory>>
      contract: 'ERC165StorageUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC165StorageUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1820ImplementerUpgradeable__factory>>
      contract: 'ERC1820ImplementerUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1820ImplementerUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1967UpgradeUpgradeable__factory>>
      contract: 'ERC1967UpgradeUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1967UpgradeUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20BurnableUpgradeable__factory>>
      contract: 'ERC20BurnableUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20BurnableUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20CappedUpgradeable__factory>>
      contract: 'ERC20CappedUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20CappedUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20FlashMintUpgradeable__factory>>
      contract: 'ERC20FlashMintUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20FlashMintUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20PausableUpgradeable__factory>>
      contract: 'ERC20PausableUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20PausableUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20PermitUpgradeable__factory>>
      contract: 'ERC20PermitUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20PermitUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20PresetFixedSupplyUpgradeable__factory>>
      contract: 'ERC20PresetFixedSupplyUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20PresetFixedSupplyUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20PresetMinterPauserUpgradeable__factory>>
      contract: 'ERC20PresetMinterPauserUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20PresetMinterPauserUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20SnapshotUpgradeable__factory>>
      contract: 'ERC20SnapshotUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20SnapshotUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20VotesCompUpgradeable__factory>>
      contract: 'ERC20VotesCompUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20VotesCompUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20VotesUpgradeable__factory>>
      contract: 'ERC20VotesUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20VotesUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20WrapperUpgradeable__factory>>
      contract: 'ERC20WrapperUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20WrapperUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC2771ContextUpgradeable__factory>>
      contract: 'ERC2771ContextUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC2771ContextUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC2981Upgradeable__factory>>
      contract: 'ERC2981Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC2981Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721BurnableUpgradeable__factory>>
      contract: 'ERC721BurnableUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC721BurnableUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721HolderUpgradeable__factory>>
      contract: 'ERC721HolderUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC721HolderUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721PausableUpgradeable__factory>>
      contract: 'ERC721PausableUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC721PausableUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable__factory>>
      contract: 'ERC721PresetMinterPauserAutoIdUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721RoyaltyUpgradeable__factory>>
      contract: 'ERC721RoyaltyUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC721RoyaltyUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721URIStorageUpgradeable__factory>>
      contract: 'ERC721URIStorageUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC721URIStorageUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721VotesUpgradeable__factory>>
      contract: 'ERC721VotesUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC721VotesUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC777PresetFixedSupplyUpgradeable__factory>>
      contract: 'ERC777PresetFixedSupplyUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC777PresetFixedSupplyUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC777Upgradeable__factory>>
      contract: 'ERC777Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC777Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.EscrowUpgradeable__factory>>
      contract: 'EscrowUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.EscrowUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorCompatibilityBravoUpgradeable__factory>>
      contract: 'GovernorCompatibilityBravoUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorCompatibilityBravoUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorCountingSimpleUpgradeable__factory>>
      contract: 'GovernorCountingSimpleUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorCountingSimpleUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorPreventLateQuorumUpgradeable__factory>>
      contract: 'GovernorPreventLateQuorumUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorPreventLateQuorumUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorProposalThresholdUpgradeable__factory>>
      contract: 'GovernorProposalThresholdUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorProposalThresholdUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorSettingsUpgradeable__factory>>
      contract: 'GovernorSettingsUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorSettingsUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorTimelockCompoundUpgradeable__factory>>
      contract: 'GovernorTimelockCompoundUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorTimelockCompoundUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorTimelockControlUpgradeable__factory>>
      contract: 'GovernorTimelockControlUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorTimelockControlUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorUpgradeable__factory>>
      contract: 'GovernorUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorVotesCompUpgradeable__factory>>
      contract: 'GovernorVotesCompUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorVotesCompUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorVotesQuorumFractionUpgradeable__factory>>
      contract: 'GovernorVotesQuorumFractionUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorVotesQuorumFractionUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorVotesUpgradeable__factory>>
      contract: 'GovernorVotesUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorVotesUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IAccessControlEnumerableUpgradeable__factory>>
      contract: 'IAccessControlEnumerableUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IAccessControlEnumerableUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IAMBUpgradeable__factory>>
      contract: 'IAMBUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IAMBUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IArbSysUpgradeable__factory>>
      contract: 'IArbSysUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IArbSysUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IBeaconUpgradeable__factory>>
      contract: 'IBeaconUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IBeaconUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IBridgeUpgradeable__factory>>
      contract: 'IBridgeUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IBridgeUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ICompoundTimelockUpgradeable__factory>>
      contract: 'ICompoundTimelockUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ICompoundTimelockUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ICrossDomainMessengerUpgradeable__factory>>
      contract: 'ICrossDomainMessengerUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.ICrossDomainMessengerUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1155MetadataURIUpgradeable__factory>>
      contract: 'IERC1155MetadataURIUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1155MetadataURIUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1155ReceiverUpgradeable__factory>>
      contract: 'IERC1155ReceiverUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1155ReceiverUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1155Upgradeable__factory>>
      contract: 'IERC1155Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1155Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1271Upgradeable__factory>>
      contract: 'IERC1271Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1271Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1363ReceiverUpgradeable__factory>>
      contract: 'IERC1363ReceiverUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1363ReceiverUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1363SpenderUpgradeable__factory>>
      contract: 'IERC1363SpenderUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1363SpenderUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1363Upgradeable__factory>>
      contract: 'IERC1363Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1363Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1820ImplementerUpgradeable__factory>>
      contract: 'IERC1820ImplementerUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1820ImplementerUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1820RegistryUpgradeable__factory>>
      contract: 'IERC1820RegistryUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1820RegistryUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1822ProxiableUpgradeable__factory>>
      contract: 'IERC1822ProxiableUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1822ProxiableUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC20PermitUpgradeable__factory>>
      contract: 'IERC20PermitUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC20PermitUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC2612Upgradeable__factory>>
      contract: 'IERC2612Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC2612Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC2981Upgradeable__factory>>
      contract: 'IERC2981Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC2981Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC3156FlashBorrowerUpgradeable__factory>>
      contract: 'IERC3156FlashBorrowerUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC3156FlashBorrowerUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC3156FlashLenderUpgradeable__factory>>
      contract: 'IERC3156FlashLenderUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC3156FlashLenderUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC777RecipientUpgradeable__factory>>
      contract: 'IERC777RecipientUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC777RecipientUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC777SenderUpgradeable__factory>>
      contract: 'IERC777SenderUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC777SenderUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC777Upgradeable__factory>>
      contract: 'IERC777Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC777Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IFxMessageProcessorUpgradeable__factory>>
      contract: 'IFxMessageProcessorUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IFxMessageProcessorUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IGovernorCompatibilityBravoUpgradeable__factory>>
      contract: 'IGovernorCompatibilityBravoUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IGovernorCompatibilityBravoUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IGovernorTimelockUpgradeable__factory>>
      contract: 'IGovernorTimelockUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IGovernorTimelockUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IGovernorUpgradeable__factory>>
      contract: 'IGovernorUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IGovernorUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IInboxUpgradeable__factory>>
      contract: 'IInboxUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IInboxUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IMessageProviderUpgradeable__factory>>
      contract: 'IMessageProviderUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IMessageProviderUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IOutboxUpgradeable__factory>>
      contract: 'IOutboxUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IOutboxUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IVotesUpgradeable__factory>>
      contract: 'IVotesUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.IVotesUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.LibArbitrumL2Upgradeable__factory>>
      contract: 'LibArbitrumL2Upgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.LibArbitrumL2Upgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.MinimalForwarderUpgradeable__factory>>
      contract: 'MinimalForwarderUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.MinimalForwarderUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.MulticallUpgradeable__factory>>
      contract: 'MulticallUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.MulticallUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.PausableUpgradeable__factory>>
      contract: 'PausableUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.PausableUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.PaymentSplitterUpgradeable__factory>>
      contract: 'PaymentSplitterUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.PaymentSplitterUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.PullPaymentUpgradeable__factory>>
      contract: 'PullPaymentUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.PullPaymentUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.RefundEscrowUpgradeable__factory>>
      contract: 'RefundEscrowUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.RefundEscrowUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.TimelockControllerUpgradeable__factory>>
      contract: 'TimelockControllerUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.TimelockControllerUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.TimelockControllerWith46MigrationUpgradeable__factory>>
      contract: 'TimelockControllerWith46MigrationUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.TimelockControllerWith46MigrationUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.TokenTimelockUpgradeable__factory>>
      contract: 'TokenTimelockUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.TokenTimelockUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.UUPSUpgradeable__factory>>
      contract: 'UUPSUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.UUPSUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.VestingWalletUpgradeable__factory>>
      contract: 'VestingWalletUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.VestingWalletUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.VotesUpgradeable__factory>>
      contract: 'VotesUpgradeable'
      from?: string
    },
  ): Promise<GitContractTypes.VotesUpgradeable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.AccessControlCrossChain__factory>>
      contract: 'AccessControlCrossChain'
      from?: string
    },
  ): Promise<GitContractTypes.AccessControlCrossChain>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.AccessControlEnumerable__factory>>
      contract: 'AccessControlEnumerable'
      from?: string
    },
  ): Promise<GitContractTypes.AccessControlEnumerable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.BeaconProxy__factory>>
      contract: 'BeaconProxy'
      from?: string
    },
  ): Promise<GitContractTypes.BeaconProxy>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ConditionalEscrow__factory>>
      contract: 'ConditionalEscrow'
      from?: string
    },
  ): Promise<GitContractTypes.ConditionalEscrow>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledAMB__factory>>
      contract: 'CrossChainEnabledAMB'
      from?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledAMB>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledPolygonChild__factory>>
      contract: 'CrossChainEnabledPolygonChild'
      from?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledPolygonChild>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.DoubleEndedQueue__factory>>
      contract: 'DoubleEndedQueue'
      from?: string
    },
  ): Promise<GitContractTypes.DoubleEndedQueue>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155__factory>>
      contract: 'ERC1155'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1155>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155Burnable__factory>>
      contract: 'ERC1155Burnable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1155Burnable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155Holder__factory>>
      contract: 'ERC1155Holder'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1155Holder>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155Pausable__factory>>
      contract: 'ERC1155Pausable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1155Pausable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155PresetMinterPauser__factory>>
      contract: 'ERC1155PresetMinterPauser'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1155PresetMinterPauser>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155Receiver__factory>>
      contract: 'ERC1155Receiver'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1155Receiver>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155Supply__factory>>
      contract: 'ERC1155Supply'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1155Supply>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155URIStorage__factory>>
      contract: 'ERC1155URIStorage'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1155URIStorage>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC165Storage__factory>>
      contract: 'ERC165Storage'
      from?: string
    },
  ): Promise<GitContractTypes.ERC165Storage>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1820Implementer__factory>>
      contract: 'ERC1820Implementer'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1820Implementer>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1967Proxy__factory>>
      contract: 'ERC1967Proxy'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1967Proxy>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1967Upgrade__factory>>
      contract: 'ERC1967Upgrade'
      from?: string
    },
  ): Promise<GitContractTypes.ERC1967Upgrade>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20Burnable__factory>>
      contract: 'ERC20Burnable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20Burnable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20Capped__factory>>
      contract: 'ERC20Capped'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20Capped>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20FlashMint__factory>>
      contract: 'ERC20FlashMint'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20FlashMint>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20Pausable__factory>>
      contract: 'ERC20Pausable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20Pausable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20Permit__factory>>
      contract: 'ERC20Permit'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20Permit>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20PresetFixedSupply__factory>>
      contract: 'ERC20PresetFixedSupply'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20PresetFixedSupply>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20PresetMinterPauser__factory>>
      contract: 'ERC20PresetMinterPauser'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20PresetMinterPauser>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20Snapshot__factory>>
      contract: 'ERC20Snapshot'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20Snapshot>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20Votes__factory>>
      contract: 'ERC20Votes'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20Votes>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20VotesComp__factory>>
      contract: 'ERC20VotesComp'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20VotesComp>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20Wrapper__factory>>
      contract: 'ERC20Wrapper'
      from?: string
    },
  ): Promise<GitContractTypes.ERC20Wrapper>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC2771Context__factory>>
      contract: 'ERC2771Context'
      from?: string
    },
  ): Promise<GitContractTypes.ERC2771Context>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC2981__factory>>
      contract: 'ERC2981'
      from?: string
    },
  ): Promise<GitContractTypes.ERC2981>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721__factory>>
      contract: 'ERC721'
      from?: string
    },
  ): Promise<GitContractTypes.ERC721>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721Burnable__factory>>
      contract: 'ERC721Burnable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC721Burnable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721Enumerable__factory>>
      contract: 'ERC721Enumerable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC721Enumerable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721Holder__factory>>
      contract: 'ERC721Holder'
      from?: string
    },
  ): Promise<GitContractTypes.ERC721Holder>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721Pausable__factory>>
      contract: 'ERC721Pausable'
      from?: string
    },
  ): Promise<GitContractTypes.ERC721Pausable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721PresetMinterPauserAutoId__factory>>
      contract: 'ERC721PresetMinterPauserAutoId'
      from?: string
    },
  ): Promise<GitContractTypes.ERC721PresetMinterPauserAutoId>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721Royalty__factory>>
      contract: 'ERC721Royalty'
      from?: string
    },
  ): Promise<GitContractTypes.ERC721Royalty>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721URIStorage__factory>>
      contract: 'ERC721URIStorage'
      from?: string
    },
  ): Promise<GitContractTypes.ERC721URIStorage>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721Votes__factory>>
      contract: 'ERC721Votes'
      from?: string
    },
  ): Promise<GitContractTypes.ERC721Votes>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC777__factory>>
      contract: 'ERC777'
      from?: string
    },
  ): Promise<GitContractTypes.ERC777>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC777PresetFixedSupply__factory>>
      contract: 'ERC777PresetFixedSupply'
      from?: string
    },
  ): Promise<GitContractTypes.ERC777PresetFixedSupply>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Escrow__factory>>
      contract: 'Escrow'
      from?: string
    },
  ): Promise<GitContractTypes.Escrow>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Governor__factory>>
      contract: 'Governor'
      from?: string
    },
  ): Promise<GitContractTypes.Governor>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorCompatibilityBravo__factory>>
      contract: 'GovernorCompatibilityBravo'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorCompatibilityBravo>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorCountingSimple__factory>>
      contract: 'GovernorCountingSimple'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorCountingSimple>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorPreventLateQuorum__factory>>
      contract: 'GovernorPreventLateQuorum'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorPreventLateQuorum>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorProposalThreshold__factory>>
      contract: 'GovernorProposalThreshold'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorProposalThreshold>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorSettings__factory>>
      contract: 'GovernorSettings'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorSettings>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorTimelockCompound__factory>>
      contract: 'GovernorTimelockCompound'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorTimelockCompound>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorTimelockControl__factory>>
      contract: 'GovernorTimelockControl'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorTimelockControl>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorVotes__factory>>
      contract: 'GovernorVotes'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorVotes>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorVotesComp__factory>>
      contract: 'GovernorVotesComp'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorVotesComp>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorVotesQuorumFraction__factory>>
      contract: 'GovernorVotesQuorumFraction'
      from?: string
    },
  ): Promise<GitContractTypes.GovernorVotesQuorumFraction>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IAccessControlEnumerable__factory>>
      contract: 'IAccessControlEnumerable'
      from?: string
    },
  ): Promise<GitContractTypes.IAccessControlEnumerable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IAMB__factory>>
      contract: 'IAMB'
      from?: string
    },
  ): Promise<GitContractTypes.IAMB>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IArbSys__factory>>
      contract: 'IArbSys'
      from?: string
    },
  ): Promise<GitContractTypes.IArbSys>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IBeacon__factory>>
      contract: 'IBeacon'
      from?: string
    },
  ): Promise<GitContractTypes.IBeacon>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IBridge__factory>>
      contract: 'IBridge'
      from?: string
    },
  ): Promise<GitContractTypes.IBridge>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ICompoundTimelock__factory>>
      contract: 'ICompoundTimelock'
      from?: string
    },
  ): Promise<GitContractTypes.ICompoundTimelock>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ICrossDomainMessenger__factory>>
      contract: 'ICrossDomainMessenger'
      from?: string
    },
  ): Promise<GitContractTypes.ICrossDomainMessenger>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1155__factory>>
      contract: 'IERC1155'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1155>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1155MetadataURI__factory>>
      contract: 'IERC1155MetadataURI'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1155MetadataURI>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1155Receiver__factory>>
      contract: 'IERC1155Receiver'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1155Receiver>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1271__factory>>
      contract: 'IERC1271'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1271>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1363__factory>>
      contract: 'IERC1363'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1363>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1363Receiver__factory>>
      contract: 'IERC1363Receiver'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1363Receiver>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1363Spender__factory>>
      contract: 'IERC1363Spender'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1363Spender>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1820Implementer__factory>>
      contract: 'IERC1820Implementer'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1820Implementer>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1820Registry__factory>>
      contract: 'IERC1820Registry'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1820Registry>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1822Proxiable__factory>>
      contract: 'IERC1822Proxiable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC1822Proxiable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC20Permit__factory>>
      contract: 'IERC20Permit'
      from?: string
    },
  ): Promise<GitContractTypes.IERC20Permit>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC2612__factory>>
      contract: 'IERC2612'
      from?: string
    },
  ): Promise<GitContractTypes.IERC2612>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC2981__factory>>
      contract: 'IERC2981'
      from?: string
    },
  ): Promise<GitContractTypes.IERC2981>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC3156FlashBorrower__factory>>
      contract: 'IERC3156FlashBorrower'
      from?: string
    },
  ): Promise<GitContractTypes.IERC3156FlashBorrower>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC3156FlashLender__factory>>
      contract: 'IERC3156FlashLender'
      from?: string
    },
  ): Promise<GitContractTypes.IERC3156FlashLender>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC721__factory>>
      contract: 'IERC721'
      from?: string
    },
  ): Promise<GitContractTypes.IERC721>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC721Enumerable__factory>>
      contract: 'IERC721Enumerable'
      from?: string
    },
  ): Promise<GitContractTypes.IERC721Enumerable>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC721Metadata__factory>>
      contract: 'IERC721Metadata'
      from?: string
    },
  ): Promise<GitContractTypes.IERC721Metadata>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC721Receiver__factory>>
      contract: 'IERC721Receiver'
      from?: string
    },
  ): Promise<GitContractTypes.IERC721Receiver>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC777__factory>>
      contract: 'IERC777'
      from?: string
    },
  ): Promise<GitContractTypes.IERC777>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC777Recipient__factory>>
      contract: 'IERC777Recipient'
      from?: string
    },
  ): Promise<GitContractTypes.IERC777Recipient>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC777Sender__factory>>
      contract: 'IERC777Sender'
      from?: string
    },
  ): Promise<GitContractTypes.IERC777Sender>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IFxMessageProcessor__factory>>
      contract: 'IFxMessageProcessor'
      from?: string
    },
  ): Promise<GitContractTypes.IFxMessageProcessor>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IGovernor__factory>>
      contract: 'IGovernor'
      from?: string
    },
  ): Promise<GitContractTypes.IGovernor>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IGovernorCompatibilityBravo__factory>>
      contract: 'IGovernorCompatibilityBravo'
      from?: string
    },
  ): Promise<GitContractTypes.IGovernorCompatibilityBravo>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IGovernorTimelock__factory>>
      contract: 'IGovernorTimelock'
      from?: string
    },
  ): Promise<GitContractTypes.IGovernorTimelock>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IMessageProvider__factory>>
      contract: 'IMessageProvider'
      from?: string
    },
  ): Promise<GitContractTypes.IMessageProvider>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IOutbox__factory>>
      contract: 'IOutbox'
      from?: string
    },
  ): Promise<GitContractTypes.IOutbox>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IVotes__factory>>
      contract: 'IVotes'
      from?: string
    },
  ): Promise<GitContractTypes.IVotes>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.LibArbitrumL2__factory>>
      contract: 'LibArbitrumL2'
      from?: string
    },
  ): Promise<GitContractTypes.LibArbitrumL2>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.MinimalForwarder__factory>>
      contract: 'MinimalForwarder'
      from?: string
    },
  ): Promise<GitContractTypes.MinimalForwarder>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Multicall__factory>>
      contract: 'Multicall'
      from?: string
    },
  ): Promise<GitContractTypes.Multicall>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.PaymentSplitter__factory>>
      contract: 'PaymentSplitter'
      from?: string
    },
  ): Promise<GitContractTypes.PaymentSplitter>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Proxy__factory>>
      contract: 'Proxy'
      from?: string
    },
  ): Promise<GitContractTypes.Proxy>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ProxyAdmin__factory>>
      contract: 'ProxyAdmin'
      from?: string
    },
  ): Promise<GitContractTypes.ProxyAdmin>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.PullPayment__factory>>
      contract: 'PullPayment'
      from?: string
    },
  ): Promise<GitContractTypes.PullPayment>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.RefundEscrow__factory>>
      contract: 'RefundEscrow'
      from?: string
    },
  ): Promise<GitContractTypes.RefundEscrow>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.TimelockController__factory>>
      contract: 'TimelockController'
      from?: string
    },
  ): Promise<GitContractTypes.TimelockController>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.TokenTimelock__factory>>
      contract: 'TokenTimelock'
      from?: string
    },
  ): Promise<GitContractTypes.TokenTimelock>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.TransparentUpgradeableProxy__factory>>
      contract: 'TransparentUpgradeableProxy'
      from?: string
    },
  ): Promise<GitContractTypes.TransparentUpgradeableProxy>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.UpgradeableBeacon__factory>>
      contract: 'UpgradeableBeacon'
      from?: string
    },
  ): Promise<GitContractTypes.UpgradeableBeacon>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.VestingWallet__factory>>
      contract: 'VestingWallet'
      from?: string
    },
  ): Promise<GitContractTypes.VestingWallet>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Votes__factory>>
      contract: 'Votes'
      from?: string
    },
  ): Promise<GitContractTypes.Votes>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.UniswapV2Migrator__factory>>
      contract: 'UniswapV2Migrator'
      from?: string
    },
  ): Promise<GitContractTypes.UniswapV2Migrator>
  (
    contractName: string,
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.UniswapV2Router01__factory>>
      contract: 'UniswapV2Router01'
      from?: string
    },
  ): Promise<GitContractTypes.UniswapV2Router01>
}


// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------

export interface HardhatDeployFunctionOverloads {
  (
    contract: 'KeeperCompatibleInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.KeeperCompatibleInterface__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.KeeperCompatibleInterface>
  (
    contract: 'KeeperBase',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.KeeperBase__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.KeeperBase>
  (
    contract: 'KeeperCompatible',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.KeeperCompatible__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.KeeperCompatible>
  (
    contract: 'CVIOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIOracle__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIOracle>
  (
    contract: 'ElasticToken',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ElasticToken__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ElasticToken>
  (
    contract: 'IUniswapV2Factory',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IUniswapV2Factory__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Factory>
  (
    contract: 'IUniswapV2Pair',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IUniswapV2Pair__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Pair>
  (
    contract: 'IUniswapV2Router01',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IUniswapV2Router01__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Router01>
  (
    contract: 'IUniswapV2Router02',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IUniswapV2Router02__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Router02>
  (
    contract: 'WETH9',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.WETH9__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.WETH9>
  (
    contract: 'FeesCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.FeesCalculator__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.FeesCalculator>
  (
    contract: 'GOVI',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GOVI__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GOVI>
  (
    contract: 'AggregatorInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.AggregatorInterface__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AggregatorInterface>
  (
    contract: 'AggregatorV2V3Interface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.AggregatorV2V3Interface__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AggregatorV2V3Interface>
  (
    contract: 'AggregatorV3Interface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.AggregatorV3Interface__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AggregatorV3Interface>
  (
    contract: 'ICVIOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ICVIOracle__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ICVIOracle>
  (
    contract: 'IElasticToken',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IElasticToken__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IElasticToken>
  (
    contract: 'IFeesCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IFeesCalculator__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IFeesCalculator>
  (
    contract: 'IFeesCollector',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IFeesCollector__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IFeesCollector>
  (
    contract: 'IFeesCollectorManagement',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IFeesCollectorManagement__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IFeesCollectorManagement>
  (
    contract: 'IInbox',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IInbox__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IInbox>
  (
    contract: 'IKeepersFeeVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IKeepersFeeVault__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IKeepersFeeVault>
  (
    contract: 'ILiquidation',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILiquidation__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILiquidation>
  (
    contract: 'IPlatform',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IPlatform__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IPlatform>
  (
    contract: 'IPlatformHelper',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IPlatformHelper__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IPlatformHelper>
  (
    contract: 'IPositionRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IPositionRewards__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IPositionRewards>
  (
    contract: 'IRebaser',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IRebaser__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRebaser>
  (
    contract: 'IRequestFeesCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IRequestFeesCalculator__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRequestFeesCalculator>
  (
    contract: 'IRequestFulfiller',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IRequestFulfiller__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRequestFulfiller>
  (
    contract: 'IRequestManager',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IRequestManager__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRequestManager>
  (
    contract: 'IRewardsCollector',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IRewardsCollector__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRewardsCollector>
  (
    contract: 'IStaking',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IStaking__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IStaking>
  (
    contract: 'IStakingVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IStakingVault__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IStakingVault>
  (
    contract: 'IThetaVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IThetaVault__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IThetaVault>
  (
    contract: 'IThetaVaultInfo',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IThetaVaultInfo__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IThetaVaultInfo>
  (
    contract: 'ITreasury',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ITreasury__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ITreasury>
  (
    contract: 'IVolatilityToken',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IVolatilityToken__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IVolatilityToken>
  (
    contract: 'IWETH',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IWETH__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IWETH>
  (
    contract: 'KeepersFeeVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.KeepersFeeVault__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.KeepersFeeVault>
  (
    contract: 'Liquidation',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Liquidation__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Liquidation>
  (
    contract: 'Platform',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Platform__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Platform>
  (
    contract: 'PlatformHelper',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.PlatformHelper__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PlatformHelper>
  (
    contract: 'PositionRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.PositionRewards__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PositionRewards>
  (
    contract: 'Rebaser',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Rebaser__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Rebaser>
  (
    contract: 'RequestFeesCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.RequestFeesCalculator__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RequestFeesCalculator>
  (
    contract: 'RequestFulfiller',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.RequestFulfiller__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RequestFulfiller>
  (
    contract: 'FeesCollector',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.FeesCollector__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.FeesCollector>
  (
    contract: 'Staking',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Staking__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Staking>
  (
    contract: 'COTIETHSLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.COTIETHSLPStakingRewards__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.COTIETHSLPStakingRewards>
  (
    contract: 'COTIETHStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.COTIETHStakingRewards__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.COTIETHStakingRewards>
  (
    contract: 'CVOLUSDCLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVOLUSDCLPStakingRewards__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVOLUSDCLPStakingRewards>
  (
    contract: 'ETHLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ETHLPStakingRewards__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ETHLPStakingRewards>
  (
    contract: 'ETHVOL_USDCLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ETHVOL_USDCLPStakingRewards__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ETHVOL_USDCLPStakingRewards>
  (
    contract: 'ETHVOLUSDCLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ETHVOLUSDCLPStakingRewards__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ETHVOLUSDCLPStakingRewards>
  (
    contract: 'GOVIETHSLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GOVIETHSLPStakingRewards__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GOVIETHSLPStakingRewards>
  (
    contract: 'GOVIETHStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GOVIETHStakingRewards__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GOVIETHStakingRewards>
  (
    contract: 'USDCLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.USDCLPStakingRewards__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.USDCLPStakingRewards>
  (
    contract: 'USDTLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.USDTLPStakingRewards__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.USDTLPStakingRewards>
  (
    contract: 'IStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IStakingRewards__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IStakingRewards>
  (
    contract: 'Owned',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Owned__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Owned>
  (
    contract: 'Pausable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Pausable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Pausable>
  (
    contract: 'RewardsDistributionRecipient',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.RewardsDistributionRecipient__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RewardsDistributionRecipient>
  (
    contract: 'StakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.StakingRewards__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.StakingRewards>
  (
    contract: 'StakingVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.StakingVault__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.StakingVault>
  (
    contract: 'Treasury',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Treasury__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Treasury>
  (
    contract: 'CVIFeedOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIFeedOracle__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIFeedOracle>
  (
    contract: 'FakeERC20',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.FakeERC20__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.FakeERC20>
  (
    contract: 'FakePriceProvider',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.FakePriceProvider__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.FakePriceProvider>
  (
    contract: 'IERC20',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC20__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC20>
  (
    contract: 'IUniswapV2Callee',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IUniswapV2Callee__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Callee>
  (
    contract: 'IUniswapV2ERC20',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IUniswapV2ERC20__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IUniswapV2ERC20>
  (
    contract: 'UniswapV2ERC20',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.UniswapV2ERC20__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UniswapV2ERC20>
  (
    contract: 'UniswapV2Factory',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.UniswapV2Factory__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UniswapV2Factory>
  (
    contract: 'UniswapV2Pair',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.UniswapV2Pair__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UniswapV2Pair>
  (
    contract: 'UniswapV2Router02',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.UniswapV2Router02__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UniswapV2Router02>
  (
    contract: 'ThetaVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ThetaVault__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ThetaVault>
  (
    contract: 'ThetaVaultRequestFulfiller',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ThetaVaultRequestFulfiller__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ThetaVaultRequestFulfiller>
  (
    contract: 'VolatilityToken',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.VolatilityToken__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.VolatilityToken>
  (
    contract: 'VolTokenRequestFulfiller',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.VolTokenRequestFulfiller__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.VolTokenRequestFulfiller>
  (
    contract: 'BaseController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.BaseController__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.BaseController>
  (
    contract: 'ILProtectionConfig',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionConfig__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionConfig>
  (
    contract: 'ILProtectionController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionController__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionController>
  (
    contract: 'ILProtectionDiscountNFTController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionDiscountNFTController__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionDiscountNFTController>
  (
    contract: 'ILProtectionNFT',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionNFT__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionNFT>
  (
    contract: 'ILiquidityController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILiquidityController__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILiquidityController>
  (
    contract: 'ILProtectionConfigInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionConfigInterface__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionConfigInterface>
  (
    contract: 'ILProtectionControllerInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionControllerInterface__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionControllerInterface>
  (
    contract: 'ILProtectionDiscountNFTControllerInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionDiscountNFTControllerInterface__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionDiscountNFTControllerInterface>
  (
    contract: 'ILProtectionDiscountNFTInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionDiscountNFTInterface__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionDiscountNFTInterface>
  (
    contract: 'ILProtectionNFTInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionNFTInterface__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionNFTInterface>
  (
    contract: 'ITokenPairRepository',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ITokenPairRepository__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ITokenPairRepository>
  (
    contract: 'ITreasuryController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ITreasuryController__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ITreasuryController>
  (
    contract: 'ILUtils',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILUtils__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILUtils>
  (
    contract: 'MathUtils',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.MathUtils__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.MathUtils>
  (
    contract: 'PremiumCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.PremiumCalculator__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PremiumCalculator>
  (
    contract: 'LiquidityController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.LiquidityController__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.LiquidityController>
  (
    contract: 'ILProtectionDiscountNFT',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ILProtectionDiscountNFT__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionDiscountNFT>
  (
    contract: 'ETHUSDOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ETHUSDOracle__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ETHUSDOracle>
  (
    contract: 'LINKUSDOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.LINKUSDOracle__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.LINKUSDOracle>
  (
    contract: 'USDUSDOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.USDUSDOracle__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.USDUSDOracle>
  (
    contract: 'USDC',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.USDC__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.USDC>
  (
    contract: 'TokenPairRepository',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.TokenPairRepository__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TokenPairRepository>
  (
    contract: 'TreasuryController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.TreasuryController__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TreasuryController>
  (
    contract: 'EsGOVI',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.EsGOVI__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.EsGOVI>
  (
    contract: 'EsGOVIRewardTrackerDistributor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.EsGOVIRewardTrackerDistributor__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.EsGOVIRewardTrackerDistributor>
  (
    contract: 'GOVIRewardTrackerDistributor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GOVIRewardTrackerDistributor__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GOVIRewardTrackerDistributor>
  (
    contract: 'ThetaVaultRewardTrackerDistributor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ThetaVaultRewardTrackerDistributor__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ThetaVaultRewardTrackerDistributor>
  (
    contract: 'EsGOVIRewardTracker',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.EsGOVIRewardTracker__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.EsGOVIRewardTracker>
  (
    contract: 'GOVIRewardTracker',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GOVIRewardTracker__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GOVIRewardTracker>
  (
    contract: 'ThetaVaultRewardTracker',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ThetaVaultRewardTracker__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ThetaVaultRewardTracker>
  (
    contract: 'GOVIVester',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GOVIVester__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GOVIVester>
  (
    contract: 'ThetaVaultVester',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ThetaVaultVester__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ThetaVaultVester>
  (
    contract: 'IMintable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IMintable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IMintable>
  (
    contract: 'IRewardDistributor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IRewardDistributor__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRewardDistributor>
  (
    contract: 'IRewardRouter',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IRewardRouter__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRewardRouter>
  (
    contract: 'IRewardTracker',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IRewardTracker__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRewardTracker>
  (
    contract: 'IVester',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IVester__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IVester>
  (
    contract: 'RewardDistributor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.RewardDistributor__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RewardDistributor>
  (
    contract: 'RewardRouter',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.RewardRouter__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RewardRouter>
  (
    contract: 'RewardTracker',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.RewardTracker__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RewardTracker>
  (
    contract: 'FakeCVIUSDCThetaVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.FakeCVIUSDCThetaVault__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.FakeCVIUSDCThetaVault>
  (
    contract: 'FakeGOVI',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.FakeGOVI__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.FakeGOVI>
  (
    contract: 'Vester',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Vester__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Vester>
  (
    contract: 'AccessControlUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.AccessControlUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AccessControlUpgradeable>
  (
    contract: 'IAccessControlUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IAccessControlUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IAccessControlUpgradeable>
  (
    contract: 'OwnableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.OwnableUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.OwnableUpgradeable>
  (
    contract: 'Initializable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Initializable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Initializable>
  (
    contract: 'ReentrancyGuardUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ReentrancyGuardUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ReentrancyGuardUpgradeable>
  (
    contract: 'ERC20Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Upgradeable>
  (
    contract: 'IERC20MetadataUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC20MetadataUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC20MetadataUpgradeable>
  (
    contract: 'IERC20Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC20Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC20Upgradeable>
  (
    contract: 'ERC721Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Upgradeable>
  (
    contract: 'ERC721EnumerableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721EnumerableUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721EnumerableUpgradeable>
  (
    contract: 'IERC721EnumerableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC721EnumerableUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721EnumerableUpgradeable>
  (
    contract: 'IERC721MetadataUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC721MetadataUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721MetadataUpgradeable>
  (
    contract: 'IERC721ReceiverUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC721ReceiverUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721ReceiverUpgradeable>
  (
    contract: 'IERC721Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC721Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721Upgradeable>
  (
    contract: 'ContextUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ContextUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ContextUpgradeable>
  (
    contract: 'ERC165Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC165Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC165Upgradeable>
  (
    contract: 'IERC165Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC165Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC165Upgradeable>
  (
    contract: 'AccessControl',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.AccessControl__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AccessControl>
  (
    contract: 'IAccessControl',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IAccessControl__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IAccessControl>
  (
    contract: 'Ownable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Ownable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Ownable>
  (
    contract: 'ERC20',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20>
  (
    contract: 'IERC20Metadata',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC20Metadata__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC20Metadata>
  (
    contract: 'ERC165',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC165__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC165>
  (
    contract: 'IERC165',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC165__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC165>
  (
    contract: 'CVIDeviationOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIDeviationOracle__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIDeviationOracle>
  (
    contract: 'CVIFakeFeedOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIFakeFeedOracle__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIFakeFeedOracle>
  (
    contract: 'CVIOracle2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIOracle2X__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIOracle2X>
  (
    contract: 'ETHVIOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ETHVIOracle__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ETHVIOracle>
  (
    contract: 'CVIUSDCFeesCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCFeesCalculator__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCFeesCalculator>
  (
    contract: 'CVIUSDCFeesCalculator2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCFeesCalculator2X__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCFeesCalculator2X>
  (
    contract: 'CVIUSDCLiquidation',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCLiquidation__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCLiquidation>
  (
    contract: 'CVIUSDCLiquidation2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCLiquidation2X__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCLiquidation2X>
  (
    contract: 'CVIUSDCPlatform',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCPlatform__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCPlatform>
  (
    contract: 'CVIUSDCPlatform2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCPlatform2X__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCPlatform2X>
  (
    contract: 'CVIUSDCPositionRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCPositionRewards__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCPositionRewards>
  (
    contract: 'StakingV2',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.StakingV2__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.StakingV2>
  (
    contract: 'CVIUSDCLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCLPStakingRewards__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCLPStakingRewards>
  (
    contract: 'CVIUSDCThetaVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCThetaVault__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCThetaVault>
  (
    contract: 'CVIUSDCThetaVault2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCThetaVault2X__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCThetaVault2X>
  (
    contract: 'CVIUSDCThetaVaultRequestFulfiller',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller>
  (
    contract: 'CVIUSDCThetaVaultRequestFulfiller2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X>
  (
    contract: 'WETH',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.WETH__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.WETH>
  (
    contract: 'CVIUSDCRebaser',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCRebaser__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCRebaser>
  (
    contract: 'CVIUSDCRebaser2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCRebaser2X__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCRebaser2X>
  (
    contract: 'CVIUSDCRequestFeesCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCRequestFeesCalculator__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCRequestFeesCalculator>
  (
    contract: 'CVIUSDCRequestFeesCalculator2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCRequestFeesCalculator2X__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCRequestFeesCalculator2X>
  (
    contract: 'CVIUSDCVolatilityToken',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCVolatilityToken__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCVolatilityToken>
  (
    contract: 'CVIUSDCVolatilityToken2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCVolatilityToken2X__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCVolatilityToken2X>
  (
    contract: 'CVIUSDCVolTokenRequestFulfiller',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCVolTokenRequestFulfiller__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCVolTokenRequestFulfiller>
  (
    contract: 'CVIUSDCVolTokenRequestFulfiller2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X>
  (
    contract: 'AccessControlCrossChainUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.AccessControlCrossChainUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AccessControlCrossChainUpgradeable>
  (
    contract: 'AccessControlEnumerableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.AccessControlEnumerableUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AccessControlEnumerableUpgradeable>
  (
    contract: 'ConditionalEscrowUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ConditionalEscrowUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ConditionalEscrowUpgradeable>
  (
    contract: 'CrossChainEnabledAMBUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledAMBUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledAMBUpgradeable>
  (
    contract: 'CrossChainEnabledArbitrumL1Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable>
  (
    contract: 'CrossChainEnabledArbitrumL2Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable>
  (
    contract: 'CrossChainEnabledOptimismUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledOptimismUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledOptimismUpgradeable>
  (
    contract: 'CrossChainEnabledPolygonChildUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable>
  (
    contract: 'CrossChainEnabledUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledUpgradeable>
  (
    contract: 'DoubleEndedQueueUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.DoubleEndedQueueUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.DoubleEndedQueueUpgradeable>
  (
    contract: 'EIP712Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.EIP712Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.EIP712Upgradeable>
  (
    contract: 'ERC1155BurnableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155BurnableUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155BurnableUpgradeable>
  (
    contract: 'ERC1155HolderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155HolderUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155HolderUpgradeable>
  (
    contract: 'ERC1155PausableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155PausableUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155PausableUpgradeable>
  (
    contract: 'ERC1155PresetMinterPauserUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155PresetMinterPauserUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155PresetMinterPauserUpgradeable>
  (
    contract: 'ERC1155ReceiverUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155ReceiverUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155ReceiverUpgradeable>
  (
    contract: 'ERC1155SupplyUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155SupplyUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155SupplyUpgradeable>
  (
    contract: 'ERC1155Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155Upgradeable>
  (
    contract: 'ERC1155URIStorageUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155URIStorageUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155URIStorageUpgradeable>
  (
    contract: 'ERC165StorageUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC165StorageUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC165StorageUpgradeable>
  (
    contract: 'ERC1820ImplementerUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1820ImplementerUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1820ImplementerUpgradeable>
  (
    contract: 'ERC1967UpgradeUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1967UpgradeUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1967UpgradeUpgradeable>
  (
    contract: 'ERC20BurnableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20BurnableUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20BurnableUpgradeable>
  (
    contract: 'ERC20CappedUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20CappedUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20CappedUpgradeable>
  (
    contract: 'ERC20FlashMintUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20FlashMintUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20FlashMintUpgradeable>
  (
    contract: 'ERC20PausableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20PausableUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20PausableUpgradeable>
  (
    contract: 'ERC20PermitUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20PermitUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20PermitUpgradeable>
  (
    contract: 'ERC20PresetFixedSupplyUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20PresetFixedSupplyUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20PresetFixedSupplyUpgradeable>
  (
    contract: 'ERC20PresetMinterPauserUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20PresetMinterPauserUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20PresetMinterPauserUpgradeable>
  (
    contract: 'ERC20SnapshotUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20SnapshotUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20SnapshotUpgradeable>
  (
    contract: 'ERC20VotesCompUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20VotesCompUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20VotesCompUpgradeable>
  (
    contract: 'ERC20VotesUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20VotesUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20VotesUpgradeable>
  (
    contract: 'ERC20WrapperUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20WrapperUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20WrapperUpgradeable>
  (
    contract: 'ERC2771ContextUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC2771ContextUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC2771ContextUpgradeable>
  (
    contract: 'ERC2981Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC2981Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC2981Upgradeable>
  (
    contract: 'ERC721BurnableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721BurnableUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721BurnableUpgradeable>
  (
    contract: 'ERC721HolderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721HolderUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721HolderUpgradeable>
  (
    contract: 'ERC721PausableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721PausableUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721PausableUpgradeable>
  (
    contract: 'ERC721PresetMinterPauserAutoIdUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable>
  (
    contract: 'ERC721RoyaltyUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721RoyaltyUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721RoyaltyUpgradeable>
  (
    contract: 'ERC721URIStorageUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721URIStorageUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721URIStorageUpgradeable>
  (
    contract: 'ERC721VotesUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721VotesUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721VotesUpgradeable>
  (
    contract: 'ERC777PresetFixedSupplyUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC777PresetFixedSupplyUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC777PresetFixedSupplyUpgradeable>
  (
    contract: 'ERC777Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC777Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC777Upgradeable>
  (
    contract: 'EscrowUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.EscrowUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.EscrowUpgradeable>
  (
    contract: 'GovernorCompatibilityBravoUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorCompatibilityBravoUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorCompatibilityBravoUpgradeable>
  (
    contract: 'GovernorCountingSimpleUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorCountingSimpleUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorCountingSimpleUpgradeable>
  (
    contract: 'GovernorPreventLateQuorumUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorPreventLateQuorumUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorPreventLateQuorumUpgradeable>
  (
    contract: 'GovernorProposalThresholdUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorProposalThresholdUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorProposalThresholdUpgradeable>
  (
    contract: 'GovernorSettingsUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorSettingsUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorSettingsUpgradeable>
  (
    contract: 'GovernorTimelockCompoundUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorTimelockCompoundUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorTimelockCompoundUpgradeable>
  (
    contract: 'GovernorTimelockControlUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorTimelockControlUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorTimelockControlUpgradeable>
  (
    contract: 'GovernorUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorUpgradeable>
  (
    contract: 'GovernorVotesCompUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorVotesCompUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorVotesCompUpgradeable>
  (
    contract: 'GovernorVotesQuorumFractionUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorVotesQuorumFractionUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorVotesQuorumFractionUpgradeable>
  (
    contract: 'GovernorVotesUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorVotesUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorVotesUpgradeable>
  (
    contract: 'IAccessControlEnumerableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IAccessControlEnumerableUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IAccessControlEnumerableUpgradeable>
  (
    contract: 'IAMBUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IAMBUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IAMBUpgradeable>
  (
    contract: 'IArbSysUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IArbSysUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IArbSysUpgradeable>
  (
    contract: 'IBeaconUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IBeaconUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IBeaconUpgradeable>
  (
    contract: 'IBridgeUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IBridgeUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IBridgeUpgradeable>
  (
    contract: 'ICompoundTimelockUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ICompoundTimelockUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ICompoundTimelockUpgradeable>
  (
    contract: 'ICrossDomainMessengerUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ICrossDomainMessengerUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ICrossDomainMessengerUpgradeable>
  (
    contract: 'IERC1155MetadataURIUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1155MetadataURIUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1155MetadataURIUpgradeable>
  (
    contract: 'IERC1155ReceiverUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1155ReceiverUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1155ReceiverUpgradeable>
  (
    contract: 'IERC1155Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1155Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1155Upgradeable>
  (
    contract: 'IERC1271Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1271Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1271Upgradeable>
  (
    contract: 'IERC1363ReceiverUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1363ReceiverUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1363ReceiverUpgradeable>
  (
    contract: 'IERC1363SpenderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1363SpenderUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1363SpenderUpgradeable>
  (
    contract: 'IERC1363Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1363Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1363Upgradeable>
  (
    contract: 'IERC1820ImplementerUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1820ImplementerUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1820ImplementerUpgradeable>
  (
    contract: 'IERC1820RegistryUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1820RegistryUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1820RegistryUpgradeable>
  (
    contract: 'IERC1822ProxiableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1822ProxiableUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1822ProxiableUpgradeable>
  (
    contract: 'IERC20PermitUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC20PermitUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC20PermitUpgradeable>
  (
    contract: 'IERC2612Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC2612Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC2612Upgradeable>
  (
    contract: 'IERC2981Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC2981Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC2981Upgradeable>
  (
    contract: 'IERC3156FlashBorrowerUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC3156FlashBorrowerUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC3156FlashBorrowerUpgradeable>
  (
    contract: 'IERC3156FlashLenderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC3156FlashLenderUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC3156FlashLenderUpgradeable>
  (
    contract: 'IERC777RecipientUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC777RecipientUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC777RecipientUpgradeable>
  (
    contract: 'IERC777SenderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC777SenderUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC777SenderUpgradeable>
  (
    contract: 'IERC777Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC777Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC777Upgradeable>
  (
    contract: 'IFxMessageProcessorUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IFxMessageProcessorUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IFxMessageProcessorUpgradeable>
  (
    contract: 'IGovernorCompatibilityBravoUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IGovernorCompatibilityBravoUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IGovernorCompatibilityBravoUpgradeable>
  (
    contract: 'IGovernorTimelockUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IGovernorTimelockUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IGovernorTimelockUpgradeable>
  (
    contract: 'IGovernorUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IGovernorUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IGovernorUpgradeable>
  (
    contract: 'IInboxUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IInboxUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IInboxUpgradeable>
  (
    contract: 'IMessageProviderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IMessageProviderUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IMessageProviderUpgradeable>
  (
    contract: 'IOutboxUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IOutboxUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IOutboxUpgradeable>
  (
    contract: 'IVotesUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IVotesUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IVotesUpgradeable>
  (
    contract: 'LibArbitrumL2Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.LibArbitrumL2Upgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.LibArbitrumL2Upgradeable>
  (
    contract: 'MinimalForwarderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.MinimalForwarderUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.MinimalForwarderUpgradeable>
  (
    contract: 'MulticallUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.MulticallUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.MulticallUpgradeable>
  (
    contract: 'PausableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.PausableUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PausableUpgradeable>
  (
    contract: 'PaymentSplitterUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.PaymentSplitterUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PaymentSplitterUpgradeable>
  (
    contract: 'PullPaymentUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.PullPaymentUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PullPaymentUpgradeable>
  (
    contract: 'RefundEscrowUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.RefundEscrowUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RefundEscrowUpgradeable>
  (
    contract: 'TimelockControllerUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.TimelockControllerUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TimelockControllerUpgradeable>
  (
    contract: 'TimelockControllerWith46MigrationUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.TimelockControllerWith46MigrationUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TimelockControllerWith46MigrationUpgradeable>
  (
    contract: 'TokenTimelockUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.TokenTimelockUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TokenTimelockUpgradeable>
  (
    contract: 'UUPSUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.UUPSUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UUPSUpgradeable>
  (
    contract: 'VestingWalletUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.VestingWalletUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.VestingWalletUpgradeable>
  (
    contract: 'VotesUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.VotesUpgradeable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.VotesUpgradeable>
  (
    contract: 'AccessControlCrossChain',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.AccessControlCrossChain__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AccessControlCrossChain>
  (
    contract: 'AccessControlEnumerable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.AccessControlEnumerable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AccessControlEnumerable>
  (
    contract: 'BeaconProxy',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.BeaconProxy__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.BeaconProxy>
  (
    contract: 'ConditionalEscrow',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ConditionalEscrow__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ConditionalEscrow>
  (
    contract: 'CrossChainEnabledAMB',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledAMB__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledAMB>
  (
    contract: 'CrossChainEnabledPolygonChild',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledPolygonChild__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledPolygonChild>
  (
    contract: 'DoubleEndedQueue',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.DoubleEndedQueue__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.DoubleEndedQueue>
  (
    contract: 'ERC1155',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155>
  (
    contract: 'ERC1155Burnable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155Burnable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155Burnable>
  (
    contract: 'ERC1155Holder',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155Holder__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155Holder>
  (
    contract: 'ERC1155Pausable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155Pausable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155Pausable>
  (
    contract: 'ERC1155PresetMinterPauser',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155PresetMinterPauser__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155PresetMinterPauser>
  (
    contract: 'ERC1155Receiver',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155Receiver__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155Receiver>
  (
    contract: 'ERC1155Supply',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155Supply__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155Supply>
  (
    contract: 'ERC1155URIStorage',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1155URIStorage__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155URIStorage>
  (
    contract: 'ERC165Storage',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC165Storage__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC165Storage>
  (
    contract: 'ERC1820Implementer',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1820Implementer__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1820Implementer>
  (
    contract: 'ERC1967Proxy',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1967Proxy__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1967Proxy>
  (
    contract: 'ERC1967Upgrade',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC1967Upgrade__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1967Upgrade>
  (
    contract: 'ERC20Burnable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20Burnable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Burnable>
  (
    contract: 'ERC20Capped',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20Capped__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Capped>
  (
    contract: 'ERC20FlashMint',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20FlashMint__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20FlashMint>
  (
    contract: 'ERC20Pausable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20Pausable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Pausable>
  (
    contract: 'ERC20Permit',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20Permit__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Permit>
  (
    contract: 'ERC20PresetFixedSupply',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20PresetFixedSupply__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20PresetFixedSupply>
  (
    contract: 'ERC20PresetMinterPauser',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20PresetMinterPauser__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20PresetMinterPauser>
  (
    contract: 'ERC20Snapshot',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20Snapshot__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Snapshot>
  (
    contract: 'ERC20Votes',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20Votes__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Votes>
  (
    contract: 'ERC20VotesComp',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20VotesComp__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20VotesComp>
  (
    contract: 'ERC20Wrapper',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC20Wrapper__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Wrapper>
  (
    contract: 'ERC2771Context',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC2771Context__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC2771Context>
  (
    contract: 'ERC2981',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC2981__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC2981>
  (
    contract: 'ERC721',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721>
  (
    contract: 'ERC721Burnable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721Burnable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Burnable>
  (
    contract: 'ERC721Enumerable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721Enumerable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Enumerable>
  (
    contract: 'ERC721Holder',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721Holder__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Holder>
  (
    contract: 'ERC721Pausable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721Pausable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Pausable>
  (
    contract: 'ERC721PresetMinterPauserAutoId',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721PresetMinterPauserAutoId__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721PresetMinterPauserAutoId>
  (
    contract: 'ERC721Royalty',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721Royalty__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Royalty>
  (
    contract: 'ERC721URIStorage',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721URIStorage__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721URIStorage>
  (
    contract: 'ERC721Votes',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC721Votes__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Votes>
  (
    contract: 'ERC777',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC777__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC777>
  (
    contract: 'ERC777PresetFixedSupply',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ERC777PresetFixedSupply__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC777PresetFixedSupply>
  (
    contract: 'Escrow',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Escrow__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Escrow>
  (
    contract: 'Governor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Governor__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Governor>
  (
    contract: 'GovernorCompatibilityBravo',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorCompatibilityBravo__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorCompatibilityBravo>
  (
    contract: 'GovernorCountingSimple',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorCountingSimple__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorCountingSimple>
  (
    contract: 'GovernorPreventLateQuorum',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorPreventLateQuorum__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorPreventLateQuorum>
  (
    contract: 'GovernorProposalThreshold',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorProposalThreshold__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorProposalThreshold>
  (
    contract: 'GovernorSettings',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorSettings__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorSettings>
  (
    contract: 'GovernorTimelockCompound',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorTimelockCompound__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorTimelockCompound>
  (
    contract: 'GovernorTimelockControl',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorTimelockControl__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorTimelockControl>
  (
    contract: 'GovernorVotes',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorVotes__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorVotes>
  (
    contract: 'GovernorVotesComp',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorVotesComp__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorVotesComp>
  (
    contract: 'GovernorVotesQuorumFraction',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.GovernorVotesQuorumFraction__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorVotesQuorumFraction>
  (
    contract: 'IAccessControlEnumerable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IAccessControlEnumerable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IAccessControlEnumerable>
  (
    contract: 'IAMB',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IAMB__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IAMB>
  (
    contract: 'IArbSys',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IArbSys__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IArbSys>
  (
    contract: 'IBeacon',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IBeacon__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IBeacon>
  (
    contract: 'IBridge',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IBridge__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IBridge>
  (
    contract: 'ICompoundTimelock',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ICompoundTimelock__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ICompoundTimelock>
  (
    contract: 'ICrossDomainMessenger',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ICrossDomainMessenger__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ICrossDomainMessenger>
  (
    contract: 'IERC1155',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1155__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1155>
  (
    contract: 'IERC1155MetadataURI',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1155MetadataURI__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1155MetadataURI>
  (
    contract: 'IERC1155Receiver',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1155Receiver__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1155Receiver>
  (
    contract: 'IERC1271',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1271__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1271>
  (
    contract: 'IERC1363',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1363__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1363>
  (
    contract: 'IERC1363Receiver',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1363Receiver__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1363Receiver>
  (
    contract: 'IERC1363Spender',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1363Spender__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1363Spender>
  (
    contract: 'IERC1820Implementer',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1820Implementer__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1820Implementer>
  (
    contract: 'IERC1820Registry',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1820Registry__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1820Registry>
  (
    contract: 'IERC1822Proxiable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC1822Proxiable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1822Proxiable>
  (
    contract: 'IERC20Permit',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC20Permit__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC20Permit>
  (
    contract: 'IERC2612',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC2612__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC2612>
  (
    contract: 'IERC2981',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC2981__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC2981>
  (
    contract: 'IERC3156FlashBorrower',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC3156FlashBorrower__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC3156FlashBorrower>
  (
    contract: 'IERC3156FlashLender',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC3156FlashLender__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC3156FlashLender>
  (
    contract: 'IERC721',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC721__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721>
  (
    contract: 'IERC721Enumerable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC721Enumerable__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721Enumerable>
  (
    contract: 'IERC721Metadata',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC721Metadata__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721Metadata>
  (
    contract: 'IERC721Receiver',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC721Receiver__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721Receiver>
  (
    contract: 'IERC777',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC777__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC777>
  (
    contract: 'IERC777Recipient',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC777Recipient__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC777Recipient>
  (
    contract: 'IERC777Sender',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IERC777Sender__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC777Sender>
  (
    contract: 'IFxMessageProcessor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IFxMessageProcessor__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IFxMessageProcessor>
  (
    contract: 'IGovernor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IGovernor__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IGovernor>
  (
    contract: 'IGovernorCompatibilityBravo',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IGovernorCompatibilityBravo__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IGovernorCompatibilityBravo>
  (
    contract: 'IGovernorTimelock',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IGovernorTimelock__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IGovernorTimelock>
  (
    contract: 'IMessageProvider',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IMessageProvider__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IMessageProvider>
  (
    contract: 'IOutbox',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IOutbox__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IOutbox>
  (
    contract: 'IVotes',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.IVotes__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IVotes>
  (
    contract: 'LibArbitrumL2',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.LibArbitrumL2__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.LibArbitrumL2>
  (
    contract: 'MinimalForwarder',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.MinimalForwarder__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.MinimalForwarder>
  (
    contract: 'Multicall',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Multicall__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Multicall>
  (
    contract: 'PaymentSplitter',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.PaymentSplitter__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PaymentSplitter>
  (
    contract: 'Proxy',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Proxy__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Proxy>
  (
    contract: 'ProxyAdmin',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.ProxyAdmin__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ProxyAdmin>
  (
    contract: 'PullPayment',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.PullPayment__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PullPayment>
  (
    contract: 'RefundEscrow',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.RefundEscrow__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RefundEscrow>
  (
    contract: 'TimelockController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.TimelockController__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TimelockController>
  (
    contract: 'TokenTimelock',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.TokenTimelock__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TokenTimelock>
  (
    contract: 'TransparentUpgradeableProxy',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.TransparentUpgradeableProxy__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TransparentUpgradeableProxy>
  (
    contract: 'UpgradeableBeacon',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.UpgradeableBeacon__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UpgradeableBeacon>
  (
    contract: 'VestingWallet',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.VestingWallet__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.VestingWallet>
  (
    contract: 'Votes',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.Votes__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Votes>
  (
    contract: 'UniswapV2Migrator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.UniswapV2Migrator__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UniswapV2Migrator>
  (
    contract: 'UniswapV2Router01',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetDeployMethod<GitContractTypes.UniswapV2Router01__factory>>
      from?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UniswapV2Router01>
}


// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------

export interface HardhatDeployProxyFunctionOverloads {
  (
    contract: 'KeeperCompatibleInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.KeeperCompatibleInterface>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.KeeperCompatibleInterface>
  (
    contract: 'KeeperBase',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.KeeperBase>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.KeeperBase>
  (
    contract: 'KeeperCompatible',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.KeeperCompatible>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.KeeperCompatible>
  (
    contract: 'CVIOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIOracle>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIOracle>
  (
    contract: 'ElasticToken',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ElasticToken>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ElasticToken>
  (
    contract: 'IUniswapV2Factory',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IUniswapV2Factory>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Factory>
  (
    contract: 'IUniswapV2Pair',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IUniswapV2Pair>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Pair>
  (
    contract: 'IUniswapV2Router01',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IUniswapV2Router01>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Router01>
  (
    contract: 'IUniswapV2Router02',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IUniswapV2Router02>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Router02>
  (
    contract: 'WETH9',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.WETH9>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.WETH9>
  (
    contract: 'FeesCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.FeesCalculator>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.FeesCalculator>
  (
    contract: 'GOVI',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GOVI>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GOVI>
  (
    contract: 'AggregatorInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.AggregatorInterface>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AggregatorInterface>
  (
    contract: 'AggregatorV2V3Interface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.AggregatorV2V3Interface>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AggregatorV2V3Interface>
  (
    contract: 'AggregatorV3Interface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.AggregatorV3Interface>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AggregatorV3Interface>
  (
    contract: 'ICVIOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ICVIOracle>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ICVIOracle>
  (
    contract: 'IElasticToken',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IElasticToken>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IElasticToken>
  (
    contract: 'IFeesCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IFeesCalculator>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IFeesCalculator>
  (
    contract: 'IFeesCollector',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IFeesCollector>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IFeesCollector>
  (
    contract: 'IFeesCollectorManagement',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IFeesCollectorManagement>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IFeesCollectorManagement>
  (
    contract: 'IInbox',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IInbox>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IInbox>
  (
    contract: 'IKeepersFeeVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IKeepersFeeVault>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IKeepersFeeVault>
  (
    contract: 'ILiquidation',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ILiquidation>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILiquidation>
  (
    contract: 'IPlatform',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IPlatform>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IPlatform>
  (
    contract: 'IPlatformHelper',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IPlatformHelper>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IPlatformHelper>
  (
    contract: 'IPositionRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IPositionRewards>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IPositionRewards>
  (
    contract: 'IRebaser',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IRebaser>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRebaser>
  (
    contract: 'IRequestFeesCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IRequestFeesCalculator>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRequestFeesCalculator>
  (
    contract: 'IRequestFulfiller',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IRequestFulfiller>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRequestFulfiller>
  (
    contract: 'IRequestManager',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IRequestManager>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRequestManager>
  (
    contract: 'IRewardsCollector',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IRewardsCollector>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRewardsCollector>
  (
    contract: 'IStaking',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IStaking>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IStaking>
  (
    contract: 'IStakingVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IStakingVault>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IStakingVault>
  (
    contract: 'IThetaVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IThetaVault>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IThetaVault>
  (
    contract: 'IThetaVaultInfo',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IThetaVaultInfo>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IThetaVaultInfo>
  (
    contract: 'ITreasury',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ITreasury>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ITreasury>
  (
    contract: 'IVolatilityToken',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IVolatilityToken>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IVolatilityToken>
  (
    contract: 'IWETH',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IWETH>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IWETH>
  (
    contract: 'KeepersFeeVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.KeepersFeeVault>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.KeepersFeeVault>
  (
    contract: 'Liquidation',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.Liquidation>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Liquidation>
  (
    contract: 'Platform',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.Platform>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Platform>
  (
    contract: 'PlatformHelper',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.PlatformHelper>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PlatformHelper>
  (
    contract: 'PositionRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.PositionRewards>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PositionRewards>
  (
    contract: 'Rebaser',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.Rebaser>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Rebaser>
  (
    contract: 'RequestFeesCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.RequestFeesCalculator>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RequestFeesCalculator>
  (
    contract: 'RequestFulfiller',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.RequestFulfiller>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RequestFulfiller>
  (
    contract: 'FeesCollector',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.FeesCollector>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.FeesCollector>
  (
    contract: 'Staking',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.Staking>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Staking>
  (
    contract: 'COTIETHSLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.COTIETHSLPStakingRewards>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.COTIETHSLPStakingRewards>
  (
    contract: 'COTIETHStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.COTIETHStakingRewards>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.COTIETHStakingRewards>
  (
    contract: 'CVOLUSDCLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVOLUSDCLPStakingRewards>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVOLUSDCLPStakingRewards>
  (
    contract: 'ETHLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ETHLPStakingRewards>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ETHLPStakingRewards>
  (
    contract: 'ETHVOL_USDCLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ETHVOL_USDCLPStakingRewards>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ETHVOL_USDCLPStakingRewards>
  (
    contract: 'ETHVOLUSDCLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ETHVOLUSDCLPStakingRewards>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ETHVOLUSDCLPStakingRewards>
  (
    contract: 'GOVIETHSLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GOVIETHSLPStakingRewards>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GOVIETHSLPStakingRewards>
  (
    contract: 'GOVIETHStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GOVIETHStakingRewards>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GOVIETHStakingRewards>
  (
    contract: 'USDCLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.USDCLPStakingRewards>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.USDCLPStakingRewards>
  (
    contract: 'USDTLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.USDTLPStakingRewards>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.USDTLPStakingRewards>
  (
    contract: 'IStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IStakingRewards>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IStakingRewards>
  (
    contract: 'Owned',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.Owned>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Owned>
  (
    contract: 'Pausable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.Pausable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Pausable>
  (
    contract: 'RewardsDistributionRecipient',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.RewardsDistributionRecipient>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RewardsDistributionRecipient>
  (
    contract: 'StakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.StakingRewards>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.StakingRewards>
  (
    contract: 'StakingVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.StakingVault>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.StakingVault>
  (
    contract: 'Treasury',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.Treasury>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Treasury>
  (
    contract: 'CVIFeedOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIFeedOracle>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIFeedOracle>
  (
    contract: 'FakeERC20',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.FakeERC20>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.FakeERC20>
  (
    contract: 'FakePriceProvider',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.FakePriceProvider>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.FakePriceProvider>
  (
    contract: 'IERC20',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC20>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC20>
  (
    contract: 'IUniswapV2Callee',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IUniswapV2Callee>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Callee>
  (
    contract: 'IUniswapV2ERC20',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IUniswapV2ERC20>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IUniswapV2ERC20>
  (
    contract: 'UniswapV2ERC20',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.UniswapV2ERC20>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UniswapV2ERC20>
  (
    contract: 'UniswapV2Factory',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.UniswapV2Factory>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UniswapV2Factory>
  (
    contract: 'UniswapV2Pair',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.UniswapV2Pair>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UniswapV2Pair>
  (
    contract: 'UniswapV2Router02',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.UniswapV2Router02>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UniswapV2Router02>
  (
    contract: 'ThetaVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ThetaVault>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ThetaVault>
  (
    contract: 'ThetaVaultRequestFulfiller',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ThetaVaultRequestFulfiller>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ThetaVaultRequestFulfiller>
  (
    contract: 'VolatilityToken',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.VolatilityToken>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.VolatilityToken>
  (
    contract: 'VolTokenRequestFulfiller',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.VolTokenRequestFulfiller>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.VolTokenRequestFulfiller>
  (
    contract: 'BaseController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.BaseController>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.BaseController>
  (
    contract: 'ILProtectionConfig',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ILProtectionConfig>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionConfig>
  (
    contract: 'ILProtectionController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ILProtectionController>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionController>
  (
    contract: 'ILProtectionDiscountNFTController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ILProtectionDiscountNFTController>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionDiscountNFTController>
  (
    contract: 'ILProtectionNFT',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ILProtectionNFT>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionNFT>
  (
    contract: 'ILiquidityController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ILiquidityController>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILiquidityController>
  (
    contract: 'ILProtectionConfigInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ILProtectionConfigInterface>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionConfigInterface>
  (
    contract: 'ILProtectionControllerInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ILProtectionControllerInterface>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionControllerInterface>
  (
    contract: 'ILProtectionDiscountNFTControllerInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ILProtectionDiscountNFTControllerInterface>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionDiscountNFTControllerInterface>
  (
    contract: 'ILProtectionDiscountNFTInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ILProtectionDiscountNFTInterface>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionDiscountNFTInterface>
  (
    contract: 'ILProtectionNFTInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ILProtectionNFTInterface>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionNFTInterface>
  (
    contract: 'ITokenPairRepository',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ITokenPairRepository>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ITokenPairRepository>
  (
    contract: 'ITreasuryController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ITreasuryController>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ITreasuryController>
  (
    contract: 'ILUtils',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ILUtils>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILUtils>
  (
    contract: 'MathUtils',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.MathUtils>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.MathUtils>
  (
    contract: 'PremiumCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.PremiumCalculator>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PremiumCalculator>
  (
    contract: 'LiquidityController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.LiquidityController>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.LiquidityController>
  (
    contract: 'ILProtectionDiscountNFT',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ILProtectionDiscountNFT>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionDiscountNFT>
  (
    contract: 'ETHUSDOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ETHUSDOracle>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ETHUSDOracle>
  (
    contract: 'LINKUSDOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.LINKUSDOracle>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.LINKUSDOracle>
  (
    contract: 'USDUSDOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.USDUSDOracle>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.USDUSDOracle>
  (
    contract: 'USDC',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.USDC>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.USDC>
  (
    contract: 'TokenPairRepository',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.TokenPairRepository>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TokenPairRepository>
  (
    contract: 'TreasuryController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.TreasuryController>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TreasuryController>
  (
    contract: 'EsGOVI',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.EsGOVI>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.EsGOVI>
  (
    contract: 'EsGOVIRewardTrackerDistributor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.EsGOVIRewardTrackerDistributor>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.EsGOVIRewardTrackerDistributor>
  (
    contract: 'GOVIRewardTrackerDistributor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GOVIRewardTrackerDistributor>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GOVIRewardTrackerDistributor>
  (
    contract: 'ThetaVaultRewardTrackerDistributor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ThetaVaultRewardTrackerDistributor>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ThetaVaultRewardTrackerDistributor>
  (
    contract: 'EsGOVIRewardTracker',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.EsGOVIRewardTracker>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.EsGOVIRewardTracker>
  (
    contract: 'GOVIRewardTracker',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GOVIRewardTracker>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GOVIRewardTracker>
  (
    contract: 'ThetaVaultRewardTracker',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ThetaVaultRewardTracker>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ThetaVaultRewardTracker>
  (
    contract: 'GOVIVester',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GOVIVester>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GOVIVester>
  (
    contract: 'ThetaVaultVester',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ThetaVaultVester>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ThetaVaultVester>
  (
    contract: 'IMintable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IMintable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IMintable>
  (
    contract: 'IRewardDistributor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IRewardDistributor>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRewardDistributor>
  (
    contract: 'IRewardRouter',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IRewardRouter>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRewardRouter>
  (
    contract: 'IRewardTracker',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IRewardTracker>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRewardTracker>
  (
    contract: 'IVester',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IVester>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IVester>
  (
    contract: 'RewardDistributor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.RewardDistributor>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RewardDistributor>
  (
    contract: 'RewardRouter',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.RewardRouter>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RewardRouter>
  (
    contract: 'RewardTracker',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.RewardTracker>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RewardTracker>
  (
    contract: 'FakeCVIUSDCThetaVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.FakeCVIUSDCThetaVault>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.FakeCVIUSDCThetaVault>
  (
    contract: 'FakeGOVI',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.FakeGOVI>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.FakeGOVI>
  (
    contract: 'Vester',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.Vester>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Vester>
  (
    contract: 'AccessControlUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.AccessControlUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AccessControlUpgradeable>
  (
    contract: 'IAccessControlUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IAccessControlUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IAccessControlUpgradeable>
  (
    contract: 'OwnableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.OwnableUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.OwnableUpgradeable>
  (
    contract: 'Initializable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.Initializable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Initializable>
  (
    contract: 'ReentrancyGuardUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ReentrancyGuardUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ReentrancyGuardUpgradeable>
  (
    contract: 'ERC20Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Upgradeable>
  (
    contract: 'IERC20MetadataUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC20MetadataUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC20MetadataUpgradeable>
  (
    contract: 'IERC20Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC20Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC20Upgradeable>
  (
    contract: 'ERC721Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC721Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Upgradeable>
  (
    contract: 'ERC721EnumerableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC721EnumerableUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721EnumerableUpgradeable>
  (
    contract: 'IERC721EnumerableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC721EnumerableUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721EnumerableUpgradeable>
  (
    contract: 'IERC721MetadataUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC721MetadataUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721MetadataUpgradeable>
  (
    contract: 'IERC721ReceiverUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC721ReceiverUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721ReceiverUpgradeable>
  (
    contract: 'IERC721Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC721Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721Upgradeable>
  (
    contract: 'ContextUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ContextUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ContextUpgradeable>
  (
    contract: 'ERC165Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC165Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC165Upgradeable>
  (
    contract: 'IERC165Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC165Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC165Upgradeable>
  (
    contract: 'AccessControl',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.AccessControl>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AccessControl>
  (
    contract: 'IAccessControl',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IAccessControl>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IAccessControl>
  (
    contract: 'Ownable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.Ownable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Ownable>
  (
    contract: 'ERC20',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20>
  (
    contract: 'IERC20Metadata',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC20Metadata>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC20Metadata>
  (
    contract: 'ERC165',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC165>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC165>
  (
    contract: 'IERC165',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC165>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC165>
  (
    contract: 'CVIDeviationOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIDeviationOracle>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIDeviationOracle>
  (
    contract: 'CVIFakeFeedOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIFakeFeedOracle>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIFakeFeedOracle>
  (
    contract: 'CVIOracle2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIOracle2X>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIOracle2X>
  (
    contract: 'ETHVIOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ETHVIOracle>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ETHVIOracle>
  (
    contract: 'CVIUSDCFeesCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCFeesCalculator>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCFeesCalculator>
  (
    contract: 'CVIUSDCFeesCalculator2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCFeesCalculator2X>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCFeesCalculator2X>
  (
    contract: 'CVIUSDCLiquidation',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCLiquidation>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCLiquidation>
  (
    contract: 'CVIUSDCLiquidation2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCLiquidation2X>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCLiquidation2X>
  (
    contract: 'CVIUSDCPlatform',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCPlatform>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCPlatform>
  (
    contract: 'CVIUSDCPlatform2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCPlatform2X>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCPlatform2X>
  (
    contract: 'CVIUSDCPositionRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCPositionRewards>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCPositionRewards>
  (
    contract: 'StakingV2',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.StakingV2>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.StakingV2>
  (
    contract: 'CVIUSDCLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCLPStakingRewards>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCLPStakingRewards>
  (
    contract: 'CVIUSDCThetaVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCThetaVault>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCThetaVault>
  (
    contract: 'CVIUSDCThetaVault2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCThetaVault2X>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCThetaVault2X>
  (
    contract: 'CVIUSDCThetaVaultRequestFulfiller',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller>
  (
    contract: 'CVIUSDCThetaVaultRequestFulfiller2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X>
  (
    contract: 'WETH',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.WETH>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.WETH>
  (
    contract: 'CVIUSDCRebaser',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCRebaser>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCRebaser>
  (
    contract: 'CVIUSDCRebaser2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCRebaser2X>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCRebaser2X>
  (
    contract: 'CVIUSDCRequestFeesCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCRequestFeesCalculator>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCRequestFeesCalculator>
  (
    contract: 'CVIUSDCRequestFeesCalculator2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCRequestFeesCalculator2X>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCRequestFeesCalculator2X>
  (
    contract: 'CVIUSDCVolatilityToken',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCVolatilityToken>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCVolatilityToken>
  (
    contract: 'CVIUSDCVolatilityToken2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCVolatilityToken2X>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCVolatilityToken2X>
  (
    contract: 'CVIUSDCVolTokenRequestFulfiller',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCVolTokenRequestFulfiller>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCVolTokenRequestFulfiller>
  (
    contract: 'CVIUSDCVolTokenRequestFulfiller2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X>
  (
    contract: 'AccessControlCrossChainUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.AccessControlCrossChainUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AccessControlCrossChainUpgradeable>
  (
    contract: 'AccessControlEnumerableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.AccessControlEnumerableUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AccessControlEnumerableUpgradeable>
  (
    contract: 'ConditionalEscrowUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ConditionalEscrowUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ConditionalEscrowUpgradeable>
  (
    contract: 'CrossChainEnabledAMBUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CrossChainEnabledAMBUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledAMBUpgradeable>
  (
    contract: 'CrossChainEnabledArbitrumL1Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable>
  (
    contract: 'CrossChainEnabledArbitrumL2Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable>
  (
    contract: 'CrossChainEnabledOptimismUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CrossChainEnabledOptimismUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledOptimismUpgradeable>
  (
    contract: 'CrossChainEnabledPolygonChildUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable>
  (
    contract: 'CrossChainEnabledUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CrossChainEnabledUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledUpgradeable>
  (
    contract: 'DoubleEndedQueueUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.DoubleEndedQueueUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.DoubleEndedQueueUpgradeable>
  (
    contract: 'EIP712Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.EIP712Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.EIP712Upgradeable>
  (
    contract: 'ERC1155BurnableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1155BurnableUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155BurnableUpgradeable>
  (
    contract: 'ERC1155HolderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1155HolderUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155HolderUpgradeable>
  (
    contract: 'ERC1155PausableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1155PausableUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155PausableUpgradeable>
  (
    contract: 'ERC1155PresetMinterPauserUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1155PresetMinterPauserUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155PresetMinterPauserUpgradeable>
  (
    contract: 'ERC1155ReceiverUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1155ReceiverUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155ReceiverUpgradeable>
  (
    contract: 'ERC1155SupplyUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1155SupplyUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155SupplyUpgradeable>
  (
    contract: 'ERC1155Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1155Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155Upgradeable>
  (
    contract: 'ERC1155URIStorageUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1155URIStorageUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155URIStorageUpgradeable>
  (
    contract: 'ERC165StorageUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC165StorageUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC165StorageUpgradeable>
  (
    contract: 'ERC1820ImplementerUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1820ImplementerUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1820ImplementerUpgradeable>
  (
    contract: 'ERC1967UpgradeUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1967UpgradeUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1967UpgradeUpgradeable>
  (
    contract: 'ERC20BurnableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20BurnableUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20BurnableUpgradeable>
  (
    contract: 'ERC20CappedUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20CappedUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20CappedUpgradeable>
  (
    contract: 'ERC20FlashMintUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20FlashMintUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20FlashMintUpgradeable>
  (
    contract: 'ERC20PausableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20PausableUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20PausableUpgradeable>
  (
    contract: 'ERC20PermitUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20PermitUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20PermitUpgradeable>
  (
    contract: 'ERC20PresetFixedSupplyUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20PresetFixedSupplyUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20PresetFixedSupplyUpgradeable>
  (
    contract: 'ERC20PresetMinterPauserUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20PresetMinterPauserUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20PresetMinterPauserUpgradeable>
  (
    contract: 'ERC20SnapshotUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20SnapshotUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20SnapshotUpgradeable>
  (
    contract: 'ERC20VotesCompUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20VotesCompUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20VotesCompUpgradeable>
  (
    contract: 'ERC20VotesUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20VotesUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20VotesUpgradeable>
  (
    contract: 'ERC20WrapperUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20WrapperUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20WrapperUpgradeable>
  (
    contract: 'ERC2771ContextUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC2771ContextUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC2771ContextUpgradeable>
  (
    contract: 'ERC2981Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC2981Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC2981Upgradeable>
  (
    contract: 'ERC721BurnableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC721BurnableUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721BurnableUpgradeable>
  (
    contract: 'ERC721HolderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC721HolderUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721HolderUpgradeable>
  (
    contract: 'ERC721PausableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC721PausableUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721PausableUpgradeable>
  (
    contract: 'ERC721PresetMinterPauserAutoIdUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable>
  (
    contract: 'ERC721RoyaltyUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC721RoyaltyUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721RoyaltyUpgradeable>
  (
    contract: 'ERC721URIStorageUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC721URIStorageUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721URIStorageUpgradeable>
  (
    contract: 'ERC721VotesUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC721VotesUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721VotesUpgradeable>
  (
    contract: 'ERC777PresetFixedSupplyUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC777PresetFixedSupplyUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC777PresetFixedSupplyUpgradeable>
  (
    contract: 'ERC777Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC777Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC777Upgradeable>
  (
    contract: 'EscrowUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.EscrowUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.EscrowUpgradeable>
  (
    contract: 'GovernorCompatibilityBravoUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorCompatibilityBravoUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorCompatibilityBravoUpgradeable>
  (
    contract: 'GovernorCountingSimpleUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorCountingSimpleUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorCountingSimpleUpgradeable>
  (
    contract: 'GovernorPreventLateQuorumUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorPreventLateQuorumUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorPreventLateQuorumUpgradeable>
  (
    contract: 'GovernorProposalThresholdUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorProposalThresholdUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorProposalThresholdUpgradeable>
  (
    contract: 'GovernorSettingsUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorSettingsUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorSettingsUpgradeable>
  (
    contract: 'GovernorTimelockCompoundUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorTimelockCompoundUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorTimelockCompoundUpgradeable>
  (
    contract: 'GovernorTimelockControlUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorTimelockControlUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorTimelockControlUpgradeable>
  (
    contract: 'GovernorUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorUpgradeable>
  (
    contract: 'GovernorVotesCompUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorVotesCompUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorVotesCompUpgradeable>
  (
    contract: 'GovernorVotesQuorumFractionUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorVotesQuorumFractionUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorVotesQuorumFractionUpgradeable>
  (
    contract: 'GovernorVotesUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorVotesUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorVotesUpgradeable>
  (
    contract: 'IAccessControlEnumerableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IAccessControlEnumerableUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IAccessControlEnumerableUpgradeable>
  (
    contract: 'IAMBUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IAMBUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IAMBUpgradeable>
  (
    contract: 'IArbSysUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IArbSysUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IArbSysUpgradeable>
  (
    contract: 'IBeaconUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IBeaconUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IBeaconUpgradeable>
  (
    contract: 'IBridgeUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IBridgeUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IBridgeUpgradeable>
  (
    contract: 'ICompoundTimelockUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ICompoundTimelockUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ICompoundTimelockUpgradeable>
  (
    contract: 'ICrossDomainMessengerUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ICrossDomainMessengerUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ICrossDomainMessengerUpgradeable>
  (
    contract: 'IERC1155MetadataURIUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1155MetadataURIUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1155MetadataURIUpgradeable>
  (
    contract: 'IERC1155ReceiverUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1155ReceiverUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1155ReceiverUpgradeable>
  (
    contract: 'IERC1155Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1155Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1155Upgradeable>
  (
    contract: 'IERC1271Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1271Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1271Upgradeable>
  (
    contract: 'IERC1363ReceiverUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1363ReceiverUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1363ReceiverUpgradeable>
  (
    contract: 'IERC1363SpenderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1363SpenderUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1363SpenderUpgradeable>
  (
    contract: 'IERC1363Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1363Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1363Upgradeable>
  (
    contract: 'IERC1820ImplementerUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1820ImplementerUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1820ImplementerUpgradeable>
  (
    contract: 'IERC1820RegistryUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1820RegistryUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1820RegistryUpgradeable>
  (
    contract: 'IERC1822ProxiableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1822ProxiableUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1822ProxiableUpgradeable>
  (
    contract: 'IERC20PermitUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC20PermitUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC20PermitUpgradeable>
  (
    contract: 'IERC2612Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC2612Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC2612Upgradeable>
  (
    contract: 'IERC2981Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC2981Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC2981Upgradeable>
  (
    contract: 'IERC3156FlashBorrowerUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC3156FlashBorrowerUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC3156FlashBorrowerUpgradeable>
  (
    contract: 'IERC3156FlashLenderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC3156FlashLenderUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC3156FlashLenderUpgradeable>
  (
    contract: 'IERC777RecipientUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC777RecipientUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC777RecipientUpgradeable>
  (
    contract: 'IERC777SenderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC777SenderUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC777SenderUpgradeable>
  (
    contract: 'IERC777Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC777Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC777Upgradeable>
  (
    contract: 'IFxMessageProcessorUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IFxMessageProcessorUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IFxMessageProcessorUpgradeable>
  (
    contract: 'IGovernorCompatibilityBravoUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IGovernorCompatibilityBravoUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IGovernorCompatibilityBravoUpgradeable>
  (
    contract: 'IGovernorTimelockUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IGovernorTimelockUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IGovernorTimelockUpgradeable>
  (
    contract: 'IGovernorUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IGovernorUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IGovernorUpgradeable>
  (
    contract: 'IInboxUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IInboxUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IInboxUpgradeable>
  (
    contract: 'IMessageProviderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IMessageProviderUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IMessageProviderUpgradeable>
  (
    contract: 'IOutboxUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IOutboxUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IOutboxUpgradeable>
  (
    contract: 'IVotesUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IVotesUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IVotesUpgradeable>
  (
    contract: 'LibArbitrumL2Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.LibArbitrumL2Upgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.LibArbitrumL2Upgradeable>
  (
    contract: 'MinimalForwarderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.MinimalForwarderUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.MinimalForwarderUpgradeable>
  (
    contract: 'MulticallUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.MulticallUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.MulticallUpgradeable>
  (
    contract: 'PausableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.PausableUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PausableUpgradeable>
  (
    contract: 'PaymentSplitterUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.PaymentSplitterUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PaymentSplitterUpgradeable>
  (
    contract: 'PullPaymentUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.PullPaymentUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PullPaymentUpgradeable>
  (
    contract: 'RefundEscrowUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.RefundEscrowUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RefundEscrowUpgradeable>
  (
    contract: 'TimelockControllerUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.TimelockControllerUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TimelockControllerUpgradeable>
  (
    contract: 'TimelockControllerWith46MigrationUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.TimelockControllerWith46MigrationUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TimelockControllerWith46MigrationUpgradeable>
  (
    contract: 'TokenTimelockUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.TokenTimelockUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TokenTimelockUpgradeable>
  (
    contract: 'UUPSUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.UUPSUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UUPSUpgradeable>
  (
    contract: 'VestingWalletUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.VestingWalletUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.VestingWalletUpgradeable>
  (
    contract: 'VotesUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.VotesUpgradeable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.VotesUpgradeable>
  (
    contract: 'AccessControlCrossChain',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.AccessControlCrossChain>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AccessControlCrossChain>
  (
    contract: 'AccessControlEnumerable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.AccessControlEnumerable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AccessControlEnumerable>
  (
    contract: 'BeaconProxy',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.BeaconProxy>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.BeaconProxy>
  (
    contract: 'ConditionalEscrow',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ConditionalEscrow>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ConditionalEscrow>
  (
    contract: 'CrossChainEnabledAMB',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CrossChainEnabledAMB>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledAMB>
  (
    contract: 'CrossChainEnabledPolygonChild',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.CrossChainEnabledPolygonChild>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledPolygonChild>
  (
    contract: 'DoubleEndedQueue',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.DoubleEndedQueue>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.DoubleEndedQueue>
  (
    contract: 'ERC1155',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1155>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155>
  (
    contract: 'ERC1155Burnable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1155Burnable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155Burnable>
  (
    contract: 'ERC1155Holder',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1155Holder>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155Holder>
  (
    contract: 'ERC1155Pausable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1155Pausable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155Pausable>
  (
    contract: 'ERC1155PresetMinterPauser',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1155PresetMinterPauser>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155PresetMinterPauser>
  (
    contract: 'ERC1155Receiver',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1155Receiver>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155Receiver>
  (
    contract: 'ERC1155Supply',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1155Supply>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155Supply>
  (
    contract: 'ERC1155URIStorage',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1155URIStorage>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155URIStorage>
  (
    contract: 'ERC165Storage',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC165Storage>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC165Storage>
  (
    contract: 'ERC1820Implementer',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1820Implementer>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1820Implementer>
  (
    contract: 'ERC1967Proxy',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1967Proxy>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1967Proxy>
  (
    contract: 'ERC1967Upgrade',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC1967Upgrade>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1967Upgrade>
  (
    contract: 'ERC20Burnable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20Burnable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Burnable>
  (
    contract: 'ERC20Capped',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20Capped>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Capped>
  (
    contract: 'ERC20FlashMint',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20FlashMint>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20FlashMint>
  (
    contract: 'ERC20Pausable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20Pausable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Pausable>
  (
    contract: 'ERC20Permit',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20Permit>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Permit>
  (
    contract: 'ERC20PresetFixedSupply',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20PresetFixedSupply>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20PresetFixedSupply>
  (
    contract: 'ERC20PresetMinterPauser',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20PresetMinterPauser>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20PresetMinterPauser>
  (
    contract: 'ERC20Snapshot',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20Snapshot>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Snapshot>
  (
    contract: 'ERC20Votes',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20Votes>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Votes>
  (
    contract: 'ERC20VotesComp',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20VotesComp>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20VotesComp>
  (
    contract: 'ERC20Wrapper',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC20Wrapper>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Wrapper>
  (
    contract: 'ERC2771Context',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC2771Context>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC2771Context>
  (
    contract: 'ERC2981',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC2981>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC2981>
  (
    contract: 'ERC721',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC721>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721>
  (
    contract: 'ERC721Burnable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC721Burnable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Burnable>
  (
    contract: 'ERC721Enumerable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC721Enumerable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Enumerable>
  (
    contract: 'ERC721Holder',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC721Holder>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Holder>
  (
    contract: 'ERC721Pausable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC721Pausable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Pausable>
  (
    contract: 'ERC721PresetMinterPauserAutoId',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC721PresetMinterPauserAutoId>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721PresetMinterPauserAutoId>
  (
    contract: 'ERC721Royalty',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC721Royalty>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Royalty>
  (
    contract: 'ERC721URIStorage',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC721URIStorage>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721URIStorage>
  (
    contract: 'ERC721Votes',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC721Votes>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Votes>
  (
    contract: 'ERC777',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC777>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC777>
  (
    contract: 'ERC777PresetFixedSupply',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ERC777PresetFixedSupply>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC777PresetFixedSupply>
  (
    contract: 'Escrow',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.Escrow>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Escrow>
  (
    contract: 'Governor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.Governor>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Governor>
  (
    contract: 'GovernorCompatibilityBravo',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorCompatibilityBravo>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorCompatibilityBravo>
  (
    contract: 'GovernorCountingSimple',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorCountingSimple>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorCountingSimple>
  (
    contract: 'GovernorPreventLateQuorum',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorPreventLateQuorum>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorPreventLateQuorum>
  (
    contract: 'GovernorProposalThreshold',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorProposalThreshold>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorProposalThreshold>
  (
    contract: 'GovernorSettings',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorSettings>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorSettings>
  (
    contract: 'GovernorTimelockCompound',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorTimelockCompound>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorTimelockCompound>
  (
    contract: 'GovernorTimelockControl',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorTimelockControl>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorTimelockControl>
  (
    contract: 'GovernorVotes',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorVotes>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorVotes>
  (
    contract: 'GovernorVotesComp',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorVotesComp>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorVotesComp>
  (
    contract: 'GovernorVotesQuorumFraction',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.GovernorVotesQuorumFraction>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorVotesQuorumFraction>
  (
    contract: 'IAccessControlEnumerable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IAccessControlEnumerable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IAccessControlEnumerable>
  (
    contract: 'IAMB',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IAMB>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IAMB>
  (
    contract: 'IArbSys',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IArbSys>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IArbSys>
  (
    contract: 'IBeacon',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IBeacon>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IBeacon>
  (
    contract: 'IBridge',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IBridge>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IBridge>
  (
    contract: 'ICompoundTimelock',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ICompoundTimelock>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ICompoundTimelock>
  (
    contract: 'ICrossDomainMessenger',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ICrossDomainMessenger>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ICrossDomainMessenger>
  (
    contract: 'IERC1155',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1155>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1155>
  (
    contract: 'IERC1155MetadataURI',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1155MetadataURI>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1155MetadataURI>
  (
    contract: 'IERC1155Receiver',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1155Receiver>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1155Receiver>
  (
    contract: 'IERC1271',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1271>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1271>
  (
    contract: 'IERC1363',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1363>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1363>
  (
    contract: 'IERC1363Receiver',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1363Receiver>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1363Receiver>
  (
    contract: 'IERC1363Spender',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1363Spender>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1363Spender>
  (
    contract: 'IERC1820Implementer',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1820Implementer>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1820Implementer>
  (
    contract: 'IERC1820Registry',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1820Registry>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1820Registry>
  (
    contract: 'IERC1822Proxiable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC1822Proxiable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1822Proxiable>
  (
    contract: 'IERC20Permit',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC20Permit>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC20Permit>
  (
    contract: 'IERC2612',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC2612>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC2612>
  (
    contract: 'IERC2981',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC2981>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC2981>
  (
    contract: 'IERC3156FlashBorrower',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC3156FlashBorrower>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC3156FlashBorrower>
  (
    contract: 'IERC3156FlashLender',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC3156FlashLender>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC3156FlashLender>
  (
    contract: 'IERC721',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC721>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721>
  (
    contract: 'IERC721Enumerable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC721Enumerable>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721Enumerable>
  (
    contract: 'IERC721Metadata',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC721Metadata>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721Metadata>
  (
    contract: 'IERC721Receiver',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC721Receiver>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721Receiver>
  (
    contract: 'IERC777',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC777>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC777>
  (
    contract: 'IERC777Recipient',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC777Recipient>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC777Recipient>
  (
    contract: 'IERC777Sender',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IERC777Sender>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC777Sender>
  (
    contract: 'IFxMessageProcessor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IFxMessageProcessor>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IFxMessageProcessor>
  (
    contract: 'IGovernor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IGovernor>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IGovernor>
  (
    contract: 'IGovernorCompatibilityBravo',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IGovernorCompatibilityBravo>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IGovernorCompatibilityBravo>
  (
    contract: 'IGovernorTimelock',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IGovernorTimelock>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IGovernorTimelock>
  (
    contract: 'IMessageProvider',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IMessageProvider>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IMessageProvider>
  (
    contract: 'IOutbox',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IOutbox>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IOutbox>
  (
    contract: 'IVotes',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.IVotes>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IVotes>
  (
    contract: 'LibArbitrumL2',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.LibArbitrumL2>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.LibArbitrumL2>
  (
    contract: 'MinimalForwarder',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.MinimalForwarder>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.MinimalForwarder>
  (
    contract: 'Multicall',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.Multicall>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Multicall>
  (
    contract: 'PaymentSplitter',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.PaymentSplitter>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PaymentSplitter>
  (
    contract: 'Proxy',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.Proxy>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Proxy>
  (
    contract: 'ProxyAdmin',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.ProxyAdmin>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ProxyAdmin>
  (
    contract: 'PullPayment',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.PullPayment>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PullPayment>
  (
    contract: 'RefundEscrow',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.RefundEscrow>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RefundEscrow>
  (
    contract: 'TimelockController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.TimelockController>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TimelockController>
  (
    contract: 'TokenTimelock',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.TokenTimelock>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TokenTimelock>
  (
    contract: 'TransparentUpgradeableProxy',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.TransparentUpgradeableProxy>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TransparentUpgradeableProxy>
  (
    contract: 'UpgradeableBeacon',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.UpgradeableBeacon>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UpgradeableBeacon>
  (
    contract: 'VestingWallet',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.VestingWallet>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.VestingWallet>
  (
    contract: 'Votes',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.Votes>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Votes>
  (
    contract: 'UniswapV2Migrator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.UniswapV2Migrator>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UniswapV2Migrator>
  (
    contract: 'UniswapV2Router01',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      args: Head<GetInitMethod<GitContractTypes.UniswapV2Router01>>
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UniswapV2Router01>
}


// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------

export interface HardhatUpgradeProxyFunctionOverloads {
  (
    contract: 'KeeperCompatibleInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.KeeperCompatibleInterface>
  (
    contract: 'KeeperBase',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.KeeperBase>
  (
    contract: 'KeeperCompatible',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.KeeperCompatible>
  (
    contract: 'CVIOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIOracle>
  (
    contract: 'ElasticToken',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ElasticToken>
  (
    contract: 'IUniswapV2Factory',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Factory>
  (
    contract: 'IUniswapV2Pair',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Pair>
  (
    contract: 'IUniswapV2Router01',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Router01>
  (
    contract: 'IUniswapV2Router02',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Router02>
  (
    contract: 'WETH9',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.WETH9>
  (
    contract: 'FeesCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.FeesCalculator>
  (
    contract: 'GOVI',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GOVI>
  (
    contract: 'AggregatorInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AggregatorInterface>
  (
    contract: 'AggregatorV2V3Interface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AggregatorV2V3Interface>
  (
    contract: 'AggregatorV3Interface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AggregatorV3Interface>
  (
    contract: 'ICVIOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ICVIOracle>
  (
    contract: 'IElasticToken',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IElasticToken>
  (
    contract: 'IFeesCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IFeesCalculator>
  (
    contract: 'IFeesCollector',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IFeesCollector>
  (
    contract: 'IFeesCollectorManagement',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IFeesCollectorManagement>
  (
    contract: 'IInbox',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IInbox>
  (
    contract: 'IKeepersFeeVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IKeepersFeeVault>
  (
    contract: 'ILiquidation',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILiquidation>
  (
    contract: 'IPlatform',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IPlatform>
  (
    contract: 'IPlatformHelper',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IPlatformHelper>
  (
    contract: 'IPositionRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IPositionRewards>
  (
    contract: 'IRebaser',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRebaser>
  (
    contract: 'IRequestFeesCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRequestFeesCalculator>
  (
    contract: 'IRequestFulfiller',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRequestFulfiller>
  (
    contract: 'IRequestManager',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRequestManager>
  (
    contract: 'IRewardsCollector',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRewardsCollector>
  (
    contract: 'IStaking',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IStaking>
  (
    contract: 'IStakingVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IStakingVault>
  (
    contract: 'IThetaVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IThetaVault>
  (
    contract: 'IThetaVaultInfo',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IThetaVaultInfo>
  (
    contract: 'ITreasury',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ITreasury>
  (
    contract: 'IVolatilityToken',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IVolatilityToken>
  (
    contract: 'IWETH',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IWETH>
  (
    contract: 'KeepersFeeVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.KeepersFeeVault>
  (
    contract: 'Liquidation',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Liquidation>
  (
    contract: 'Platform',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Platform>
  (
    contract: 'PlatformHelper',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PlatformHelper>
  (
    contract: 'PositionRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PositionRewards>
  (
    contract: 'Rebaser',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Rebaser>
  (
    contract: 'RequestFeesCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RequestFeesCalculator>
  (
    contract: 'RequestFulfiller',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RequestFulfiller>
  (
    contract: 'FeesCollector',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.FeesCollector>
  (
    contract: 'Staking',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Staking>
  (
    contract: 'COTIETHSLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.COTIETHSLPStakingRewards>
  (
    contract: 'COTIETHStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.COTIETHStakingRewards>
  (
    contract: 'CVOLUSDCLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVOLUSDCLPStakingRewards>
  (
    contract: 'ETHLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ETHLPStakingRewards>
  (
    contract: 'ETHVOL_USDCLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ETHVOL_USDCLPStakingRewards>
  (
    contract: 'ETHVOLUSDCLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ETHVOLUSDCLPStakingRewards>
  (
    contract: 'GOVIETHSLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GOVIETHSLPStakingRewards>
  (
    contract: 'GOVIETHStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GOVIETHStakingRewards>
  (
    contract: 'USDCLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.USDCLPStakingRewards>
  (
    contract: 'USDTLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.USDTLPStakingRewards>
  (
    contract: 'IStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IStakingRewards>
  (
    contract: 'Owned',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Owned>
  (
    contract: 'Pausable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Pausable>
  (
    contract: 'RewardsDistributionRecipient',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RewardsDistributionRecipient>
  (
    contract: 'StakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.StakingRewards>
  (
    contract: 'StakingVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.StakingVault>
  (
    contract: 'Treasury',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Treasury>
  (
    contract: 'CVIFeedOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIFeedOracle>
  (
    contract: 'FakeERC20',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.FakeERC20>
  (
    contract: 'FakePriceProvider',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.FakePriceProvider>
  (
    contract: 'IERC20',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC20>
  (
    contract: 'IUniswapV2Callee',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IUniswapV2Callee>
  (
    contract: 'IUniswapV2ERC20',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IUniswapV2ERC20>
  (
    contract: 'UniswapV2ERC20',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UniswapV2ERC20>
  (
    contract: 'UniswapV2Factory',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UniswapV2Factory>
  (
    contract: 'UniswapV2Pair',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UniswapV2Pair>
  (
    contract: 'UniswapV2Router02',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UniswapV2Router02>
  (
    contract: 'ThetaVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ThetaVault>
  (
    contract: 'ThetaVaultRequestFulfiller',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ThetaVaultRequestFulfiller>
  (
    contract: 'VolatilityToken',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.VolatilityToken>
  (
    contract: 'VolTokenRequestFulfiller',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.VolTokenRequestFulfiller>
  (
    contract: 'BaseController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.BaseController>
  (
    contract: 'ILProtectionConfig',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionConfig>
  (
    contract: 'ILProtectionController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionController>
  (
    contract: 'ILProtectionDiscountNFTController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionDiscountNFTController>
  (
    contract: 'ILProtectionNFT',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionNFT>
  (
    contract: 'ILiquidityController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILiquidityController>
  (
    contract: 'ILProtectionConfigInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionConfigInterface>
  (
    contract: 'ILProtectionControllerInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionControllerInterface>
  (
    contract: 'ILProtectionDiscountNFTControllerInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionDiscountNFTControllerInterface>
  (
    contract: 'ILProtectionDiscountNFTInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionDiscountNFTInterface>
  (
    contract: 'ILProtectionNFTInterface',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionNFTInterface>
  (
    contract: 'ITokenPairRepository',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ITokenPairRepository>
  (
    contract: 'ITreasuryController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ITreasuryController>
  (
    contract: 'ILUtils',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILUtils>
  (
    contract: 'MathUtils',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.MathUtils>
  (
    contract: 'PremiumCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PremiumCalculator>
  (
    contract: 'LiquidityController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.LiquidityController>
  (
    contract: 'ILProtectionDiscountNFT',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ILProtectionDiscountNFT>
  (
    contract: 'ETHUSDOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ETHUSDOracle>
  (
    contract: 'LINKUSDOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.LINKUSDOracle>
  (
    contract: 'USDUSDOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.USDUSDOracle>
  (
    contract: 'USDC',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.USDC>
  (
    contract: 'TokenPairRepository',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TokenPairRepository>
  (
    contract: 'TreasuryController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TreasuryController>
  (
    contract: 'EsGOVI',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.EsGOVI>
  (
    contract: 'EsGOVIRewardTrackerDistributor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.EsGOVIRewardTrackerDistributor>
  (
    contract: 'GOVIRewardTrackerDistributor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GOVIRewardTrackerDistributor>
  (
    contract: 'ThetaVaultRewardTrackerDistributor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ThetaVaultRewardTrackerDistributor>
  (
    contract: 'EsGOVIRewardTracker',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.EsGOVIRewardTracker>
  (
    contract: 'GOVIRewardTracker',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GOVIRewardTracker>
  (
    contract: 'ThetaVaultRewardTracker',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ThetaVaultRewardTracker>
  (
    contract: 'GOVIVester',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GOVIVester>
  (
    contract: 'ThetaVaultVester',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ThetaVaultVester>
  (
    contract: 'IMintable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IMintable>
  (
    contract: 'IRewardDistributor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRewardDistributor>
  (
    contract: 'IRewardRouter',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRewardRouter>
  (
    contract: 'IRewardTracker',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IRewardTracker>
  (
    contract: 'IVester',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IVester>
  (
    contract: 'RewardDistributor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RewardDistributor>
  (
    contract: 'RewardRouter',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RewardRouter>
  (
    contract: 'RewardTracker',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RewardTracker>
  (
    contract: 'FakeCVIUSDCThetaVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.FakeCVIUSDCThetaVault>
  (
    contract: 'FakeGOVI',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.FakeGOVI>
  (
    contract: 'Vester',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Vester>
  (
    contract: 'AccessControlUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AccessControlUpgradeable>
  (
    contract: 'IAccessControlUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IAccessControlUpgradeable>
  (
    contract: 'OwnableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.OwnableUpgradeable>
  (
    contract: 'Initializable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Initializable>
  (
    contract: 'ReentrancyGuardUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ReentrancyGuardUpgradeable>
  (
    contract: 'ERC20Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Upgradeable>
  (
    contract: 'IERC20MetadataUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC20MetadataUpgradeable>
  (
    contract: 'IERC20Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC20Upgradeable>
  (
    contract: 'ERC721Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Upgradeable>
  (
    contract: 'ERC721EnumerableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721EnumerableUpgradeable>
  (
    contract: 'IERC721EnumerableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721EnumerableUpgradeable>
  (
    contract: 'IERC721MetadataUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721MetadataUpgradeable>
  (
    contract: 'IERC721ReceiverUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721ReceiverUpgradeable>
  (
    contract: 'IERC721Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721Upgradeable>
  (
    contract: 'ContextUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ContextUpgradeable>
  (
    contract: 'ERC165Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC165Upgradeable>
  (
    contract: 'IERC165Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC165Upgradeable>
  (
    contract: 'AccessControl',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AccessControl>
  (
    contract: 'IAccessControl',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IAccessControl>
  (
    contract: 'Ownable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Ownable>
  (
    contract: 'ERC20',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20>
  (
    contract: 'IERC20Metadata',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC20Metadata>
  (
    contract: 'ERC165',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC165>
  (
    contract: 'IERC165',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC165>
  (
    contract: 'CVIDeviationOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIDeviationOracle>
  (
    contract: 'CVIFakeFeedOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIFakeFeedOracle>
  (
    contract: 'CVIOracle2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIOracle2X>
  (
    contract: 'ETHVIOracle',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ETHVIOracle>
  (
    contract: 'CVIUSDCFeesCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCFeesCalculator>
  (
    contract: 'CVIUSDCFeesCalculator2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCFeesCalculator2X>
  (
    contract: 'CVIUSDCLiquidation',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCLiquidation>
  (
    contract: 'CVIUSDCLiquidation2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCLiquidation2X>
  (
    contract: 'CVIUSDCPlatform',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCPlatform>
  (
    contract: 'CVIUSDCPlatform2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCPlatform2X>
  (
    contract: 'CVIUSDCPositionRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCPositionRewards>
  (
    contract: 'StakingV2',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.StakingV2>
  (
    contract: 'CVIUSDCLPStakingRewards',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCLPStakingRewards>
  (
    contract: 'CVIUSDCThetaVault',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCThetaVault>
  (
    contract: 'CVIUSDCThetaVault2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCThetaVault2X>
  (
    contract: 'CVIUSDCThetaVaultRequestFulfiller',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller>
  (
    contract: 'CVIUSDCThetaVaultRequestFulfiller2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X>
  (
    contract: 'WETH',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.WETH>
  (
    contract: 'CVIUSDCRebaser',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCRebaser>
  (
    contract: 'CVIUSDCRebaser2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCRebaser2X>
  (
    contract: 'CVIUSDCRequestFeesCalculator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCRequestFeesCalculator>
  (
    contract: 'CVIUSDCRequestFeesCalculator2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCRequestFeesCalculator2X>
  (
    contract: 'CVIUSDCVolatilityToken',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCVolatilityToken>
  (
    contract: 'CVIUSDCVolatilityToken2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCVolatilityToken2X>
  (
    contract: 'CVIUSDCVolTokenRequestFulfiller',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCVolTokenRequestFulfiller>
  (
    contract: 'CVIUSDCVolTokenRequestFulfiller2X',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X>
  (
    contract: 'AccessControlCrossChainUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AccessControlCrossChainUpgradeable>
  (
    contract: 'AccessControlEnumerableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AccessControlEnumerableUpgradeable>
  (
    contract: 'ConditionalEscrowUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ConditionalEscrowUpgradeable>
  (
    contract: 'CrossChainEnabledAMBUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledAMBUpgradeable>
  (
    contract: 'CrossChainEnabledArbitrumL1Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable>
  (
    contract: 'CrossChainEnabledArbitrumL2Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable>
  (
    contract: 'CrossChainEnabledOptimismUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledOptimismUpgradeable>
  (
    contract: 'CrossChainEnabledPolygonChildUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable>
  (
    contract: 'CrossChainEnabledUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledUpgradeable>
  (
    contract: 'DoubleEndedQueueUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.DoubleEndedQueueUpgradeable>
  (
    contract: 'EIP712Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.EIP712Upgradeable>
  (
    contract: 'ERC1155BurnableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155BurnableUpgradeable>
  (
    contract: 'ERC1155HolderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155HolderUpgradeable>
  (
    contract: 'ERC1155PausableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155PausableUpgradeable>
  (
    contract: 'ERC1155PresetMinterPauserUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155PresetMinterPauserUpgradeable>
  (
    contract: 'ERC1155ReceiverUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155ReceiverUpgradeable>
  (
    contract: 'ERC1155SupplyUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155SupplyUpgradeable>
  (
    contract: 'ERC1155Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155Upgradeable>
  (
    contract: 'ERC1155URIStorageUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155URIStorageUpgradeable>
  (
    contract: 'ERC165StorageUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC165StorageUpgradeable>
  (
    contract: 'ERC1820ImplementerUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1820ImplementerUpgradeable>
  (
    contract: 'ERC1967UpgradeUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1967UpgradeUpgradeable>
  (
    contract: 'ERC20BurnableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20BurnableUpgradeable>
  (
    contract: 'ERC20CappedUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20CappedUpgradeable>
  (
    contract: 'ERC20FlashMintUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20FlashMintUpgradeable>
  (
    contract: 'ERC20PausableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20PausableUpgradeable>
  (
    contract: 'ERC20PermitUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20PermitUpgradeable>
  (
    contract: 'ERC20PresetFixedSupplyUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20PresetFixedSupplyUpgradeable>
  (
    contract: 'ERC20PresetMinterPauserUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20PresetMinterPauserUpgradeable>
  (
    contract: 'ERC20SnapshotUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20SnapshotUpgradeable>
  (
    contract: 'ERC20VotesCompUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20VotesCompUpgradeable>
  (
    contract: 'ERC20VotesUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20VotesUpgradeable>
  (
    contract: 'ERC20WrapperUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20WrapperUpgradeable>
  (
    contract: 'ERC2771ContextUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC2771ContextUpgradeable>
  (
    contract: 'ERC2981Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC2981Upgradeable>
  (
    contract: 'ERC721BurnableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721BurnableUpgradeable>
  (
    contract: 'ERC721HolderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721HolderUpgradeable>
  (
    contract: 'ERC721PausableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721PausableUpgradeable>
  (
    contract: 'ERC721PresetMinterPauserAutoIdUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable>
  (
    contract: 'ERC721RoyaltyUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721RoyaltyUpgradeable>
  (
    contract: 'ERC721URIStorageUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721URIStorageUpgradeable>
  (
    contract: 'ERC721VotesUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721VotesUpgradeable>
  (
    contract: 'ERC777PresetFixedSupplyUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC777PresetFixedSupplyUpgradeable>
  (
    contract: 'ERC777Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC777Upgradeable>
  (
    contract: 'EscrowUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.EscrowUpgradeable>
  (
    contract: 'GovernorCompatibilityBravoUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorCompatibilityBravoUpgradeable>
  (
    contract: 'GovernorCountingSimpleUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorCountingSimpleUpgradeable>
  (
    contract: 'GovernorPreventLateQuorumUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorPreventLateQuorumUpgradeable>
  (
    contract: 'GovernorProposalThresholdUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorProposalThresholdUpgradeable>
  (
    contract: 'GovernorSettingsUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorSettingsUpgradeable>
  (
    contract: 'GovernorTimelockCompoundUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorTimelockCompoundUpgradeable>
  (
    contract: 'GovernorTimelockControlUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorTimelockControlUpgradeable>
  (
    contract: 'GovernorUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorUpgradeable>
  (
    contract: 'GovernorVotesCompUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorVotesCompUpgradeable>
  (
    contract: 'GovernorVotesQuorumFractionUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorVotesQuorumFractionUpgradeable>
  (
    contract: 'GovernorVotesUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorVotesUpgradeable>
  (
    contract: 'IAccessControlEnumerableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IAccessControlEnumerableUpgradeable>
  (
    contract: 'IAMBUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IAMBUpgradeable>
  (
    contract: 'IArbSysUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IArbSysUpgradeable>
  (
    contract: 'IBeaconUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IBeaconUpgradeable>
  (
    contract: 'IBridgeUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IBridgeUpgradeable>
  (
    contract: 'ICompoundTimelockUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ICompoundTimelockUpgradeable>
  (
    contract: 'ICrossDomainMessengerUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ICrossDomainMessengerUpgradeable>
  (
    contract: 'IERC1155MetadataURIUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1155MetadataURIUpgradeable>
  (
    contract: 'IERC1155ReceiverUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1155ReceiverUpgradeable>
  (
    contract: 'IERC1155Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1155Upgradeable>
  (
    contract: 'IERC1271Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1271Upgradeable>
  (
    contract: 'IERC1363ReceiverUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1363ReceiverUpgradeable>
  (
    contract: 'IERC1363SpenderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1363SpenderUpgradeable>
  (
    contract: 'IERC1363Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1363Upgradeable>
  (
    contract: 'IERC1820ImplementerUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1820ImplementerUpgradeable>
  (
    contract: 'IERC1820RegistryUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1820RegistryUpgradeable>
  (
    contract: 'IERC1822ProxiableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1822ProxiableUpgradeable>
  (
    contract: 'IERC20PermitUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC20PermitUpgradeable>
  (
    contract: 'IERC2612Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC2612Upgradeable>
  (
    contract: 'IERC2981Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC2981Upgradeable>
  (
    contract: 'IERC3156FlashBorrowerUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC3156FlashBorrowerUpgradeable>
  (
    contract: 'IERC3156FlashLenderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC3156FlashLenderUpgradeable>
  (
    contract: 'IERC777RecipientUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC777RecipientUpgradeable>
  (
    contract: 'IERC777SenderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC777SenderUpgradeable>
  (
    contract: 'IERC777Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC777Upgradeable>
  (
    contract: 'IFxMessageProcessorUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IFxMessageProcessorUpgradeable>
  (
    contract: 'IGovernorCompatibilityBravoUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IGovernorCompatibilityBravoUpgradeable>
  (
    contract: 'IGovernorTimelockUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IGovernorTimelockUpgradeable>
  (
    contract: 'IGovernorUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IGovernorUpgradeable>
  (
    contract: 'IInboxUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IInboxUpgradeable>
  (
    contract: 'IMessageProviderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IMessageProviderUpgradeable>
  (
    contract: 'IOutboxUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IOutboxUpgradeable>
  (
    contract: 'IVotesUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IVotesUpgradeable>
  (
    contract: 'LibArbitrumL2Upgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.LibArbitrumL2Upgradeable>
  (
    contract: 'MinimalForwarderUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.MinimalForwarderUpgradeable>
  (
    contract: 'MulticallUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.MulticallUpgradeable>
  (
    contract: 'PausableUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PausableUpgradeable>
  (
    contract: 'PaymentSplitterUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PaymentSplitterUpgradeable>
  (
    contract: 'PullPaymentUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PullPaymentUpgradeable>
  (
    contract: 'RefundEscrowUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RefundEscrowUpgradeable>
  (
    contract: 'TimelockControllerUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TimelockControllerUpgradeable>
  (
    contract: 'TimelockControllerWith46MigrationUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TimelockControllerWith46MigrationUpgradeable>
  (
    contract: 'TokenTimelockUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TokenTimelockUpgradeable>
  (
    contract: 'UUPSUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UUPSUpgradeable>
  (
    contract: 'VestingWalletUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.VestingWalletUpgradeable>
  (
    contract: 'VotesUpgradeable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.VotesUpgradeable>
  (
    contract: 'AccessControlCrossChain',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AccessControlCrossChain>
  (
    contract: 'AccessControlEnumerable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.AccessControlEnumerable>
  (
    contract: 'BeaconProxy',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.BeaconProxy>
  (
    contract: 'ConditionalEscrow',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ConditionalEscrow>
  (
    contract: 'CrossChainEnabledAMB',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledAMB>
  (
    contract: 'CrossChainEnabledPolygonChild',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.CrossChainEnabledPolygonChild>
  (
    contract: 'DoubleEndedQueue',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.DoubleEndedQueue>
  (
    contract: 'ERC1155',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155>
  (
    contract: 'ERC1155Burnable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155Burnable>
  (
    contract: 'ERC1155Holder',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155Holder>
  (
    contract: 'ERC1155Pausable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155Pausable>
  (
    contract: 'ERC1155PresetMinterPauser',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155PresetMinterPauser>
  (
    contract: 'ERC1155Receiver',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155Receiver>
  (
    contract: 'ERC1155Supply',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155Supply>
  (
    contract: 'ERC1155URIStorage',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1155URIStorage>
  (
    contract: 'ERC165Storage',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC165Storage>
  (
    contract: 'ERC1820Implementer',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1820Implementer>
  (
    contract: 'ERC1967Proxy',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1967Proxy>
  (
    contract: 'ERC1967Upgrade',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC1967Upgrade>
  (
    contract: 'ERC20Burnable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Burnable>
  (
    contract: 'ERC20Capped',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Capped>
  (
    contract: 'ERC20FlashMint',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20FlashMint>
  (
    contract: 'ERC20Pausable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Pausable>
  (
    contract: 'ERC20Permit',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Permit>
  (
    contract: 'ERC20PresetFixedSupply',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20PresetFixedSupply>
  (
    contract: 'ERC20PresetMinterPauser',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20PresetMinterPauser>
  (
    contract: 'ERC20Snapshot',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Snapshot>
  (
    contract: 'ERC20Votes',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Votes>
  (
    contract: 'ERC20VotesComp',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20VotesComp>
  (
    contract: 'ERC20Wrapper',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC20Wrapper>
  (
    contract: 'ERC2771Context',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC2771Context>
  (
    contract: 'ERC2981',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC2981>
  (
    contract: 'ERC721',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721>
  (
    contract: 'ERC721Burnable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Burnable>
  (
    contract: 'ERC721Enumerable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Enumerable>
  (
    contract: 'ERC721Holder',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Holder>
  (
    contract: 'ERC721Pausable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Pausable>
  (
    contract: 'ERC721PresetMinterPauserAutoId',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721PresetMinterPauserAutoId>
  (
    contract: 'ERC721Royalty',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Royalty>
  (
    contract: 'ERC721URIStorage',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721URIStorage>
  (
    contract: 'ERC721Votes',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC721Votes>
  (
    contract: 'ERC777',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC777>
  (
    contract: 'ERC777PresetFixedSupply',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ERC777PresetFixedSupply>
  (
    contract: 'Escrow',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Escrow>
  (
    contract: 'Governor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Governor>
  (
    contract: 'GovernorCompatibilityBravo',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorCompatibilityBravo>
  (
    contract: 'GovernorCountingSimple',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorCountingSimple>
  (
    contract: 'GovernorPreventLateQuorum',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorPreventLateQuorum>
  (
    contract: 'GovernorProposalThreshold',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorProposalThreshold>
  (
    contract: 'GovernorSettings',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorSettings>
  (
    contract: 'GovernorTimelockCompound',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorTimelockCompound>
  (
    contract: 'GovernorTimelockControl',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorTimelockControl>
  (
    contract: 'GovernorVotes',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorVotes>
  (
    contract: 'GovernorVotesComp',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorVotesComp>
  (
    contract: 'GovernorVotesQuorumFraction',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.GovernorVotesQuorumFraction>
  (
    contract: 'IAccessControlEnumerable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IAccessControlEnumerable>
  (
    contract: 'IAMB',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IAMB>
  (
    contract: 'IArbSys',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IArbSys>
  (
    contract: 'IBeacon',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IBeacon>
  (
    contract: 'IBridge',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IBridge>
  (
    contract: 'ICompoundTimelock',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ICompoundTimelock>
  (
    contract: 'ICrossDomainMessenger',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ICrossDomainMessenger>
  (
    contract: 'IERC1155',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1155>
  (
    contract: 'IERC1155MetadataURI',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1155MetadataURI>
  (
    contract: 'IERC1155Receiver',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1155Receiver>
  (
    contract: 'IERC1271',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1271>
  (
    contract: 'IERC1363',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1363>
  (
    contract: 'IERC1363Receiver',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1363Receiver>
  (
    contract: 'IERC1363Spender',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1363Spender>
  (
    contract: 'IERC1820Implementer',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1820Implementer>
  (
    contract: 'IERC1820Registry',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1820Registry>
  (
    contract: 'IERC1822Proxiable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC1822Proxiable>
  (
    contract: 'IERC20Permit',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC20Permit>
  (
    contract: 'IERC2612',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC2612>
  (
    contract: 'IERC2981',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC2981>
  (
    contract: 'IERC3156FlashBorrower',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC3156FlashBorrower>
  (
    contract: 'IERC3156FlashLender',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC3156FlashLender>
  (
    contract: 'IERC721',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721>
  (
    contract: 'IERC721Enumerable',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721Enumerable>
  (
    contract: 'IERC721Metadata',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721Metadata>
  (
    contract: 'IERC721Receiver',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC721Receiver>
  (
    contract: 'IERC777',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC777>
  (
    contract: 'IERC777Recipient',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC777Recipient>
  (
    contract: 'IERC777Sender',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IERC777Sender>
  (
    contract: 'IFxMessageProcessor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IFxMessageProcessor>
  (
    contract: 'IGovernor',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IGovernor>
  (
    contract: 'IGovernorCompatibilityBravo',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IGovernorCompatibilityBravo>
  (
    contract: 'IGovernorTimelock',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IGovernorTimelock>
  (
    contract: 'IMessageProvider',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IMessageProvider>
  (
    contract: 'IOutbox',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IOutbox>
  (
    contract: 'IVotes',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.IVotes>
  (
    contract: 'LibArbitrumL2',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.LibArbitrumL2>
  (
    contract: 'MinimalForwarder',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.MinimalForwarder>
  (
    contract: 'Multicall',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Multicall>
  (
    contract: 'PaymentSplitter',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PaymentSplitter>
  (
    contract: 'Proxy',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Proxy>
  (
    contract: 'ProxyAdmin',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.ProxyAdmin>
  (
    contract: 'PullPayment',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.PullPayment>
  (
    contract: 'RefundEscrow',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.RefundEscrow>
  (
    contract: 'TimelockController',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TimelockController>
  (
    contract: 'TokenTimelock',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TokenTimelock>
  (
    contract: 'TransparentUpgradeableProxy',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.TransparentUpgradeableProxy>
  (
    contract: 'UpgradeableBeacon',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UpgradeableBeacon>
  (
    contract: 'VestingWallet',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.VestingWallet>
  (
    contract: 'Votes',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.Votes>
  (
    contract: 'UniswapV2Migrator',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UniswapV2Migrator>
  (
    contract: 'UniswapV2Router01',
    options: Omit<DeployOptions, 'args' | 'contract' | 'from'> & {
      from?: string
      adminOwner?: string
      contractName?: string
    },
  ): Promise<GitContractTypes.UniswapV2Router01>
}


// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------

export type HardhatContractsOverloads = 'KeeperCompatibleInterface' | 'KeeperBase' | 'KeeperCompatible' | 'CVIOracle' | 'ElasticToken' | 'IUniswapV2Factory' | 'IUniswapV2Pair' | 'IUniswapV2Router01' | 'IUniswapV2Router02' | 'WETH9' | 'FeesCalculator' | 'GOVI' | 'AggregatorInterface' | 'AggregatorV2V3Interface' | 'AggregatorV3Interface' | 'ICVIOracle' | 'IElasticToken' | 'IFeesCalculator' | 'IFeesCollector' | 'IFeesCollectorManagement' | 'IInbox' | 'IKeepersFeeVault' | 'ILiquidation' | 'IPlatform' | 'IPlatformHelper' | 'IPositionRewards' | 'IRebaser' | 'IRequestFeesCalculator' | 'IRequestFulfiller' | 'IRequestManager' | 'IRewardsCollector' | 'IStaking' | 'IStakingVault' | 'IThetaVault' | 'IThetaVaultInfo' | 'ITreasury' | 'IVolatilityToken' | 'IWETH' | 'KeepersFeeVault' | 'Liquidation' | 'Platform' | 'PlatformHelper' | 'PositionRewards' | 'Rebaser' | 'RequestFeesCalculator' | 'RequestFulfiller' | 'FeesCollector' | 'Staking' | 'COTIETHSLPStakingRewards' | 'COTIETHStakingRewards' | 'CVOLUSDCLPStakingRewards' | 'ETHLPStakingRewards' | 'ETHVOL_USDCLPStakingRewards' | 'ETHVOLUSDCLPStakingRewards' | 'GOVIETHSLPStakingRewards' | 'GOVIETHStakingRewards' | 'USDCLPStakingRewards' | 'USDTLPStakingRewards' | 'IStakingRewards' | 'Owned' | 'Pausable' | 'RewardsDistributionRecipient' | 'StakingRewards' | 'StakingVault' | 'Treasury' | 'CVIFeedOracle' | 'FakeERC20' | 'FakePriceProvider' | 'IERC20' | 'IUniswapV2Callee' | 'IUniswapV2ERC20' | 'UniswapV2ERC20' | 'UniswapV2Factory' | 'UniswapV2Pair' | 'UniswapV2Router02' | 'ThetaVault' | 'ThetaVaultRequestFulfiller' | 'VolatilityToken' | 'VolTokenRequestFulfiller' | 'BaseController' | 'ILProtectionConfig' | 'ILProtectionController' | 'ILProtectionDiscountNFTController' | 'ILProtectionNFT' | 'ILiquidityController' | 'ILProtectionConfigInterface' | 'ILProtectionControllerInterface' | 'ILProtectionDiscountNFTControllerInterface' | 'ILProtectionDiscountNFTInterface' | 'ILProtectionNFTInterface' | 'ITokenPairRepository' | 'ITreasuryController' | 'ILUtils' | 'MathUtils' | 'PremiumCalculator' | 'LiquidityController' | 'ILProtectionDiscountNFT' | 'ETHUSDOracle' | 'LINKUSDOracle' | 'USDUSDOracle' | 'USDC' | 'TokenPairRepository' | 'TreasuryController' | 'EsGOVI' | 'EsGOVIRewardTrackerDistributor' | 'GOVIRewardTrackerDistributor' | 'ThetaVaultRewardTrackerDistributor' | 'EsGOVIRewardTracker' | 'GOVIRewardTracker' | 'ThetaVaultRewardTracker' | 'GOVIVester' | 'ThetaVaultVester' | 'IMintable' | 'IRewardDistributor' | 'IRewardRouter' | 'IRewardTracker' | 'IVester' | 'RewardDistributor' | 'RewardRouter' | 'RewardTracker' | 'FakeCVIUSDCThetaVault' | 'FakeGOVI' | 'Vester' | 'AccessControlUpgradeable' | 'IAccessControlUpgradeable' | 'OwnableUpgradeable' | 'Initializable' | 'ReentrancyGuardUpgradeable' | 'ERC20Upgradeable' | 'IERC20MetadataUpgradeable' | 'IERC20Upgradeable' | 'ERC721Upgradeable' | 'ERC721EnumerableUpgradeable' | 'IERC721EnumerableUpgradeable' | 'IERC721MetadataUpgradeable' | 'IERC721ReceiverUpgradeable' | 'IERC721Upgradeable' | 'ContextUpgradeable' | 'ERC165Upgradeable' | 'IERC165Upgradeable' | 'AccessControl' | 'IAccessControl' | 'Ownable' | 'ERC20' | 'IERC20Metadata' | 'ERC165' | 'IERC165' | 'CVIDeviationOracle' | 'CVIFakeFeedOracle' | 'CVIOracle2X' | 'ETHVIOracle' | 'CVIUSDCFeesCalculator' | 'CVIUSDCFeesCalculator2X' | 'CVIUSDCLiquidation' | 'CVIUSDCLiquidation2X' | 'CVIUSDCPlatform' | 'CVIUSDCPlatform2X' | 'CVIUSDCPositionRewards' | 'StakingV2' | 'CVIUSDCLPStakingRewards' | 'CVIUSDCThetaVault' | 'CVIUSDCThetaVault2X' | 'CVIUSDCThetaVaultRequestFulfiller' | 'CVIUSDCThetaVaultRequestFulfiller2X' | 'WETH' | 'CVIUSDCRebaser' | 'CVIUSDCRebaser2X' | 'CVIUSDCRequestFeesCalculator' | 'CVIUSDCRequestFeesCalculator2X' | 'CVIUSDCVolatilityToken' | 'CVIUSDCVolatilityToken2X' | 'CVIUSDCVolTokenRequestFulfiller' | 'CVIUSDCVolTokenRequestFulfiller2X' | 'AccessControlCrossChainUpgradeable' | 'AccessControlEnumerableUpgradeable' | 'ConditionalEscrowUpgradeable' | 'CrossChainEnabledAMBUpgradeable' | 'CrossChainEnabledArbitrumL1Upgradeable' | 'CrossChainEnabledArbitrumL2Upgradeable' | 'CrossChainEnabledOptimismUpgradeable' | 'CrossChainEnabledPolygonChildUpgradeable' | 'CrossChainEnabledUpgradeable' | 'DoubleEndedQueueUpgradeable' | 'EIP712Upgradeable' | 'ERC1155BurnableUpgradeable' | 'ERC1155HolderUpgradeable' | 'ERC1155PausableUpgradeable' | 'ERC1155PresetMinterPauserUpgradeable' | 'ERC1155ReceiverUpgradeable' | 'ERC1155SupplyUpgradeable' | 'ERC1155Upgradeable' | 'ERC1155URIStorageUpgradeable' | 'ERC165StorageUpgradeable' | 'ERC1820ImplementerUpgradeable' | 'ERC1967UpgradeUpgradeable' | 'ERC20BurnableUpgradeable' | 'ERC20CappedUpgradeable' | 'ERC20FlashMintUpgradeable' | 'ERC20PausableUpgradeable' | 'ERC20PermitUpgradeable' | 'ERC20PresetFixedSupplyUpgradeable' | 'ERC20PresetMinterPauserUpgradeable' | 'ERC20SnapshotUpgradeable' | 'ERC20VotesCompUpgradeable' | 'ERC20VotesUpgradeable' | 'ERC20WrapperUpgradeable' | 'ERC2771ContextUpgradeable' | 'ERC2981Upgradeable' | 'ERC721BurnableUpgradeable' | 'ERC721HolderUpgradeable' | 'ERC721PausableUpgradeable' | 'ERC721PresetMinterPauserAutoIdUpgradeable' | 'ERC721RoyaltyUpgradeable' | 'ERC721URIStorageUpgradeable' | 'ERC721VotesUpgradeable' | 'ERC777PresetFixedSupplyUpgradeable' | 'ERC777Upgradeable' | 'EscrowUpgradeable' | 'GovernorCompatibilityBravoUpgradeable' | 'GovernorCountingSimpleUpgradeable' | 'GovernorPreventLateQuorumUpgradeable' | 'GovernorProposalThresholdUpgradeable' | 'GovernorSettingsUpgradeable' | 'GovernorTimelockCompoundUpgradeable' | 'GovernorTimelockControlUpgradeable' | 'GovernorUpgradeable' | 'GovernorVotesCompUpgradeable' | 'GovernorVotesQuorumFractionUpgradeable' | 'GovernorVotesUpgradeable' | 'IAccessControlEnumerableUpgradeable' | 'IAMBUpgradeable' | 'IArbSysUpgradeable' | 'IBeaconUpgradeable' | 'IBridgeUpgradeable' | 'ICompoundTimelockUpgradeable' | 'ICrossDomainMessengerUpgradeable' | 'IERC1155MetadataURIUpgradeable' | 'IERC1155ReceiverUpgradeable' | 'IERC1155Upgradeable' | 'IERC1271Upgradeable' | 'IERC1363ReceiverUpgradeable' | 'IERC1363SpenderUpgradeable' | 'IERC1363Upgradeable' | 'IERC1820ImplementerUpgradeable' | 'IERC1820RegistryUpgradeable' | 'IERC1822ProxiableUpgradeable' | 'IERC20PermitUpgradeable' | 'IERC2612Upgradeable' | 'IERC2981Upgradeable' | 'IERC3156FlashBorrowerUpgradeable' | 'IERC3156FlashLenderUpgradeable' | 'IERC777RecipientUpgradeable' | 'IERC777SenderUpgradeable' | 'IERC777Upgradeable' | 'IFxMessageProcessorUpgradeable' | 'IGovernorCompatibilityBravoUpgradeable' | 'IGovernorTimelockUpgradeable' | 'IGovernorUpgradeable' | 'IInboxUpgradeable' | 'IMessageProviderUpgradeable' | 'IOutboxUpgradeable' | 'IVotesUpgradeable' | 'LibArbitrumL2Upgradeable' | 'MinimalForwarderUpgradeable' | 'MulticallUpgradeable' | 'PausableUpgradeable' | 'PaymentSplitterUpgradeable' | 'PullPaymentUpgradeable' | 'RefundEscrowUpgradeable' | 'TimelockControllerUpgradeable' | 'TimelockControllerWith46MigrationUpgradeable' | 'TokenTimelockUpgradeable' | 'UUPSUpgradeable' | 'VestingWalletUpgradeable' | 'VotesUpgradeable' | 'AccessControlCrossChain' | 'AccessControlEnumerable' | 'BeaconProxy' | 'ConditionalEscrow' | 'CrossChainEnabledAMB' | 'CrossChainEnabledPolygonChild' | 'DoubleEndedQueue' | 'ERC1155' | 'ERC1155Burnable' | 'ERC1155Holder' | 'ERC1155Pausable' | 'ERC1155PresetMinterPauser' | 'ERC1155Receiver' | 'ERC1155Supply' | 'ERC1155URIStorage' | 'ERC165Storage' | 'ERC1820Implementer' | 'ERC1967Proxy' | 'ERC1967Upgrade' | 'ERC20Burnable' | 'ERC20Capped' | 'ERC20FlashMint' | 'ERC20Pausable' | 'ERC20Permit' | 'ERC20PresetFixedSupply' | 'ERC20PresetMinterPauser' | 'ERC20Snapshot' | 'ERC20Votes' | 'ERC20VotesComp' | 'ERC20Wrapper' | 'ERC2771Context' | 'ERC2981' | 'ERC721' | 'ERC721Burnable' | 'ERC721Enumerable' | 'ERC721Holder' | 'ERC721Pausable' | 'ERC721PresetMinterPauserAutoId' | 'ERC721Royalty' | 'ERC721URIStorage' | 'ERC721Votes' | 'ERC777' | 'ERC777PresetFixedSupply' | 'Escrow' | 'Governor' | 'GovernorCompatibilityBravo' | 'GovernorCountingSimple' | 'GovernorPreventLateQuorum' | 'GovernorProposalThreshold' | 'GovernorSettings' | 'GovernorTimelockCompound' | 'GovernorTimelockControl' | 'GovernorVotes' | 'GovernorVotesComp' | 'GovernorVotesQuorumFraction' | 'IAccessControlEnumerable' | 'IAMB' | 'IArbSys' | 'IBeacon' | 'IBridge' | 'ICompoundTimelock' | 'ICrossDomainMessenger' | 'IERC1155' | 'IERC1155MetadataURI' | 'IERC1155Receiver' | 'IERC1271' | 'IERC1363' | 'IERC1363Receiver' | 'IERC1363Spender' | 'IERC1820Implementer' | 'IERC1820Registry' | 'IERC1822Proxiable' | 'IERC20Permit' | 'IERC2612' | 'IERC2981' | 'IERC3156FlashBorrower' | 'IERC3156FlashLender' | 'IERC721' | 'IERC721Enumerable' | 'IERC721Metadata' | 'IERC721Receiver' | 'IERC777' | 'IERC777Recipient' | 'IERC777Sender' | 'IFxMessageProcessor' | 'IGovernor' | 'IGovernorCompatibilityBravo' | 'IGovernorTimelock' | 'IMessageProvider' | 'IOutbox' | 'IVotes' | 'LibArbitrumL2' | 'MinimalForwarder' | 'Multicall' | 'PaymentSplitter' | 'Proxy' | 'ProxyAdmin' | 'PullPayment' | 'RefundEscrow' | 'TimelockController' | 'TokenTimelock' | 'TransparentUpgradeableProxy' | 'UpgradeableBeacon' | 'VestingWallet' | 'Votes' | 'UniswapV2Migrator' | 'UniswapV2Router01'

export interface HardhatEthersGetContractFunctionOverloads {
  (
    ethers: HardhatEthersHelpers,
    contractName: 'KeeperCompatibleInterface',
  ): Promise<GitContractTypes.KeeperCompatibleInterface>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'KeeperBase',
  ): Promise<GitContractTypes.KeeperBase>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'KeeperCompatible',
  ): Promise<GitContractTypes.KeeperCompatible>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIOracle',
  ): Promise<GitContractTypes.CVIOracle>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ElasticToken',
  ): Promise<GitContractTypes.ElasticToken>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IUniswapV2Factory',
  ): Promise<GitContractTypes.IUniswapV2Factory>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IUniswapV2Pair',
  ): Promise<GitContractTypes.IUniswapV2Pair>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IUniswapV2Router01',
  ): Promise<GitContractTypes.IUniswapV2Router01>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IUniswapV2Router02',
  ): Promise<GitContractTypes.IUniswapV2Router02>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'WETH9',
  ): Promise<GitContractTypes.WETH9>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'FeesCalculator',
  ): Promise<GitContractTypes.FeesCalculator>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GOVI',
  ): Promise<GitContractTypes.GOVI>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'AggregatorInterface',
  ): Promise<GitContractTypes.AggregatorInterface>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'AggregatorV2V3Interface',
  ): Promise<GitContractTypes.AggregatorV2V3Interface>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'AggregatorV3Interface',
  ): Promise<GitContractTypes.AggregatorV3Interface>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ICVIOracle',
  ): Promise<GitContractTypes.ICVIOracle>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IElasticToken',
  ): Promise<GitContractTypes.IElasticToken>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IFeesCalculator',
  ): Promise<GitContractTypes.IFeesCalculator>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IFeesCollector',
  ): Promise<GitContractTypes.IFeesCollector>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IFeesCollectorManagement',
  ): Promise<GitContractTypes.IFeesCollectorManagement>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IInbox',
  ): Promise<GitContractTypes.IInbox>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IKeepersFeeVault',
  ): Promise<GitContractTypes.IKeepersFeeVault>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ILiquidation',
  ): Promise<GitContractTypes.ILiquidation>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IPlatform',
  ): Promise<GitContractTypes.IPlatform>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IPlatformHelper',
  ): Promise<GitContractTypes.IPlatformHelper>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IPositionRewards',
  ): Promise<GitContractTypes.IPositionRewards>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IRebaser',
  ): Promise<GitContractTypes.IRebaser>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IRequestFeesCalculator',
  ): Promise<GitContractTypes.IRequestFeesCalculator>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IRequestFulfiller',
  ): Promise<GitContractTypes.IRequestFulfiller>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IRequestManager',
  ): Promise<GitContractTypes.IRequestManager>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IRewardsCollector',
  ): Promise<GitContractTypes.IRewardsCollector>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IStaking',
  ): Promise<GitContractTypes.IStaking>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IStakingVault',
  ): Promise<GitContractTypes.IStakingVault>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IThetaVault',
  ): Promise<GitContractTypes.IThetaVault>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IThetaVaultInfo',
  ): Promise<GitContractTypes.IThetaVaultInfo>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ITreasury',
  ): Promise<GitContractTypes.ITreasury>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IVolatilityToken',
  ): Promise<GitContractTypes.IVolatilityToken>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IWETH',
  ): Promise<GitContractTypes.IWETH>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'KeepersFeeVault',
  ): Promise<GitContractTypes.KeepersFeeVault>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'Liquidation',
  ): Promise<GitContractTypes.Liquidation>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'Platform',
  ): Promise<GitContractTypes.Platform>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'PlatformHelper',
  ): Promise<GitContractTypes.PlatformHelper>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'PositionRewards',
  ): Promise<GitContractTypes.PositionRewards>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'Rebaser',
  ): Promise<GitContractTypes.Rebaser>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'RequestFeesCalculator',
  ): Promise<GitContractTypes.RequestFeesCalculator>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'RequestFulfiller',
  ): Promise<GitContractTypes.RequestFulfiller>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'FeesCollector',
  ): Promise<GitContractTypes.FeesCollector>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'Staking',
  ): Promise<GitContractTypes.Staking>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'COTIETHSLPStakingRewards',
  ): Promise<GitContractTypes.COTIETHSLPStakingRewards>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'COTIETHStakingRewards',
  ): Promise<GitContractTypes.COTIETHStakingRewards>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVOLUSDCLPStakingRewards',
  ): Promise<GitContractTypes.CVOLUSDCLPStakingRewards>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ETHLPStakingRewards',
  ): Promise<GitContractTypes.ETHLPStakingRewards>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ETHVOL_USDCLPStakingRewards',
  ): Promise<GitContractTypes.ETHVOL_USDCLPStakingRewards>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ETHVOLUSDCLPStakingRewards',
  ): Promise<GitContractTypes.ETHVOLUSDCLPStakingRewards>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GOVIETHSLPStakingRewards',
  ): Promise<GitContractTypes.GOVIETHSLPStakingRewards>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GOVIETHStakingRewards',
  ): Promise<GitContractTypes.GOVIETHStakingRewards>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'USDCLPStakingRewards',
  ): Promise<GitContractTypes.USDCLPStakingRewards>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'USDTLPStakingRewards',
  ): Promise<GitContractTypes.USDTLPStakingRewards>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IStakingRewards',
  ): Promise<GitContractTypes.IStakingRewards>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'Owned',
  ): Promise<GitContractTypes.Owned>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'Pausable',
  ): Promise<GitContractTypes.Pausable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'RewardsDistributionRecipient',
  ): Promise<GitContractTypes.RewardsDistributionRecipient>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'StakingRewards',
  ): Promise<GitContractTypes.StakingRewards>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'StakingVault',
  ): Promise<GitContractTypes.StakingVault>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'Treasury',
  ): Promise<GitContractTypes.Treasury>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIFeedOracle',
  ): Promise<GitContractTypes.CVIFeedOracle>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'FakeERC20',
  ): Promise<GitContractTypes.FakeERC20>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'FakePriceProvider',
  ): Promise<GitContractTypes.FakePriceProvider>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC20',
  ): Promise<GitContractTypes.IERC20>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IUniswapV2Callee',
  ): Promise<GitContractTypes.IUniswapV2Callee>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IUniswapV2ERC20',
  ): Promise<GitContractTypes.IUniswapV2ERC20>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'UniswapV2ERC20',
  ): Promise<GitContractTypes.UniswapV2ERC20>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'UniswapV2Factory',
  ): Promise<GitContractTypes.UniswapV2Factory>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'UniswapV2Pair',
  ): Promise<GitContractTypes.UniswapV2Pair>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'UniswapV2Router02',
  ): Promise<GitContractTypes.UniswapV2Router02>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ThetaVault',
  ): Promise<GitContractTypes.ThetaVault>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ThetaVaultRequestFulfiller',
  ): Promise<GitContractTypes.ThetaVaultRequestFulfiller>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'VolatilityToken',
  ): Promise<GitContractTypes.VolatilityToken>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'VolTokenRequestFulfiller',
  ): Promise<GitContractTypes.VolTokenRequestFulfiller>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'BaseController',
  ): Promise<GitContractTypes.BaseController>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ILProtectionConfig',
  ): Promise<GitContractTypes.ILProtectionConfig>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ILProtectionController',
  ): Promise<GitContractTypes.ILProtectionController>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ILProtectionDiscountNFTController',
  ): Promise<GitContractTypes.ILProtectionDiscountNFTController>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ILProtectionNFT',
  ): Promise<GitContractTypes.ILProtectionNFT>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ILiquidityController',
  ): Promise<GitContractTypes.ILiquidityController>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ILProtectionConfigInterface',
  ): Promise<GitContractTypes.ILProtectionConfigInterface>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ILProtectionControllerInterface',
  ): Promise<GitContractTypes.ILProtectionControllerInterface>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ILProtectionDiscountNFTControllerInterface',
  ): Promise<GitContractTypes.ILProtectionDiscountNFTControllerInterface>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ILProtectionDiscountNFTInterface',
  ): Promise<GitContractTypes.ILProtectionDiscountNFTInterface>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ILProtectionNFTInterface',
  ): Promise<GitContractTypes.ILProtectionNFTInterface>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ITokenPairRepository',
  ): Promise<GitContractTypes.ITokenPairRepository>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ITreasuryController',
  ): Promise<GitContractTypes.ITreasuryController>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ILUtils',
  ): Promise<GitContractTypes.ILUtils>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'MathUtils',
  ): Promise<GitContractTypes.MathUtils>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'PremiumCalculator',
  ): Promise<GitContractTypes.PremiumCalculator>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'LiquidityController',
  ): Promise<GitContractTypes.LiquidityController>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ILProtectionDiscountNFT',
  ): Promise<GitContractTypes.ILProtectionDiscountNFT>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ETHUSDOracle',
  ): Promise<GitContractTypes.ETHUSDOracle>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'LINKUSDOracle',
  ): Promise<GitContractTypes.LINKUSDOracle>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'USDUSDOracle',
  ): Promise<GitContractTypes.USDUSDOracle>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'USDC',
  ): Promise<GitContractTypes.USDC>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'TokenPairRepository',
  ): Promise<GitContractTypes.TokenPairRepository>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'TreasuryController',
  ): Promise<GitContractTypes.TreasuryController>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'EsGOVI',
  ): Promise<GitContractTypes.EsGOVI>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'EsGOVIRewardTrackerDistributor',
  ): Promise<GitContractTypes.EsGOVIRewardTrackerDistributor>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GOVIRewardTrackerDistributor',
  ): Promise<GitContractTypes.GOVIRewardTrackerDistributor>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ThetaVaultRewardTrackerDistributor',
  ): Promise<GitContractTypes.ThetaVaultRewardTrackerDistributor>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'EsGOVIRewardTracker',
  ): Promise<GitContractTypes.EsGOVIRewardTracker>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GOVIRewardTracker',
  ): Promise<GitContractTypes.GOVIRewardTracker>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ThetaVaultRewardTracker',
  ): Promise<GitContractTypes.ThetaVaultRewardTracker>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GOVIVester',
  ): Promise<GitContractTypes.GOVIVester>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ThetaVaultVester',
  ): Promise<GitContractTypes.ThetaVaultVester>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IMintable',
  ): Promise<GitContractTypes.IMintable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IRewardDistributor',
  ): Promise<GitContractTypes.IRewardDistributor>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IRewardRouter',
  ): Promise<GitContractTypes.IRewardRouter>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IRewardTracker',
  ): Promise<GitContractTypes.IRewardTracker>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IVester',
  ): Promise<GitContractTypes.IVester>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'RewardDistributor',
  ): Promise<GitContractTypes.RewardDistributor>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'RewardRouter',
  ): Promise<GitContractTypes.RewardRouter>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'RewardTracker',
  ): Promise<GitContractTypes.RewardTracker>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'FakeCVIUSDCThetaVault',
  ): Promise<GitContractTypes.FakeCVIUSDCThetaVault>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'FakeGOVI',
  ): Promise<GitContractTypes.FakeGOVI>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'Vester',
  ): Promise<GitContractTypes.Vester>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'AccessControlUpgradeable',
  ): Promise<GitContractTypes.AccessControlUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IAccessControlUpgradeable',
  ): Promise<GitContractTypes.IAccessControlUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'OwnableUpgradeable',
  ): Promise<GitContractTypes.OwnableUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'Initializable',
  ): Promise<GitContractTypes.Initializable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ReentrancyGuardUpgradeable',
  ): Promise<GitContractTypes.ReentrancyGuardUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20Upgradeable',
  ): Promise<GitContractTypes.ERC20Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC20MetadataUpgradeable',
  ): Promise<GitContractTypes.IERC20MetadataUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC20Upgradeable',
  ): Promise<GitContractTypes.IERC20Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC721Upgradeable',
  ): Promise<GitContractTypes.ERC721Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC721EnumerableUpgradeable',
  ): Promise<GitContractTypes.ERC721EnumerableUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC721EnumerableUpgradeable',
  ): Promise<GitContractTypes.IERC721EnumerableUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC721MetadataUpgradeable',
  ): Promise<GitContractTypes.IERC721MetadataUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC721ReceiverUpgradeable',
  ): Promise<GitContractTypes.IERC721ReceiverUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC721Upgradeable',
  ): Promise<GitContractTypes.IERC721Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ContextUpgradeable',
  ): Promise<GitContractTypes.ContextUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC165Upgradeable',
  ): Promise<GitContractTypes.ERC165Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC165Upgradeable',
  ): Promise<GitContractTypes.IERC165Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'AccessControl',
  ): Promise<GitContractTypes.AccessControl>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IAccessControl',
  ): Promise<GitContractTypes.IAccessControl>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'Ownable',
  ): Promise<GitContractTypes.Ownable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20',
  ): Promise<GitContractTypes.ERC20>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC20Metadata',
  ): Promise<GitContractTypes.IERC20Metadata>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC165',
  ): Promise<GitContractTypes.ERC165>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC165',
  ): Promise<GitContractTypes.IERC165>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIDeviationOracle',
  ): Promise<GitContractTypes.CVIDeviationOracle>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIFakeFeedOracle',
  ): Promise<GitContractTypes.CVIFakeFeedOracle>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIOracle2X',
  ): Promise<GitContractTypes.CVIOracle2X>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ETHVIOracle',
  ): Promise<GitContractTypes.ETHVIOracle>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCFeesCalculator',
  ): Promise<GitContractTypes.CVIUSDCFeesCalculator>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCFeesCalculator2X',
  ): Promise<GitContractTypes.CVIUSDCFeesCalculator2X>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCLiquidation',
  ): Promise<GitContractTypes.CVIUSDCLiquidation>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCLiquidation2X',
  ): Promise<GitContractTypes.CVIUSDCLiquidation2X>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCPlatform',
  ): Promise<GitContractTypes.CVIUSDCPlatform>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCPlatform2X',
  ): Promise<GitContractTypes.CVIUSDCPlatform2X>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCPositionRewards',
  ): Promise<GitContractTypes.CVIUSDCPositionRewards>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'StakingV2',
  ): Promise<GitContractTypes.StakingV2>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCLPStakingRewards',
  ): Promise<GitContractTypes.CVIUSDCLPStakingRewards>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCThetaVault',
  ): Promise<GitContractTypes.CVIUSDCThetaVault>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCThetaVault2X',
  ): Promise<GitContractTypes.CVIUSDCThetaVault2X>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCThetaVaultRequestFulfiller',
  ): Promise<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCThetaVaultRequestFulfiller2X',
  ): Promise<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'WETH',
  ): Promise<GitContractTypes.WETH>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCRebaser',
  ): Promise<GitContractTypes.CVIUSDCRebaser>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCRebaser2X',
  ): Promise<GitContractTypes.CVIUSDCRebaser2X>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCRequestFeesCalculator',
  ): Promise<GitContractTypes.CVIUSDCRequestFeesCalculator>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCRequestFeesCalculator2X',
  ): Promise<GitContractTypes.CVIUSDCRequestFeesCalculator2X>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCVolatilityToken',
  ): Promise<GitContractTypes.CVIUSDCVolatilityToken>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCVolatilityToken2X',
  ): Promise<GitContractTypes.CVIUSDCVolatilityToken2X>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCVolTokenRequestFulfiller',
  ): Promise<GitContractTypes.CVIUSDCVolTokenRequestFulfiller>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CVIUSDCVolTokenRequestFulfiller2X',
  ): Promise<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'AccessControlCrossChainUpgradeable',
  ): Promise<GitContractTypes.AccessControlCrossChainUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'AccessControlEnumerableUpgradeable',
  ): Promise<GitContractTypes.AccessControlEnumerableUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ConditionalEscrowUpgradeable',
  ): Promise<GitContractTypes.ConditionalEscrowUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CrossChainEnabledAMBUpgradeable',
  ): Promise<GitContractTypes.CrossChainEnabledAMBUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CrossChainEnabledArbitrumL1Upgradeable',
  ): Promise<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CrossChainEnabledArbitrumL2Upgradeable',
  ): Promise<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CrossChainEnabledOptimismUpgradeable',
  ): Promise<GitContractTypes.CrossChainEnabledOptimismUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CrossChainEnabledPolygonChildUpgradeable',
  ): Promise<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CrossChainEnabledUpgradeable',
  ): Promise<GitContractTypes.CrossChainEnabledUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'DoubleEndedQueueUpgradeable',
  ): Promise<GitContractTypes.DoubleEndedQueueUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'EIP712Upgradeable',
  ): Promise<GitContractTypes.EIP712Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1155BurnableUpgradeable',
  ): Promise<GitContractTypes.ERC1155BurnableUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1155HolderUpgradeable',
  ): Promise<GitContractTypes.ERC1155HolderUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1155PausableUpgradeable',
  ): Promise<GitContractTypes.ERC1155PausableUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1155PresetMinterPauserUpgradeable',
  ): Promise<GitContractTypes.ERC1155PresetMinterPauserUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1155ReceiverUpgradeable',
  ): Promise<GitContractTypes.ERC1155ReceiverUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1155SupplyUpgradeable',
  ): Promise<GitContractTypes.ERC1155SupplyUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1155Upgradeable',
  ): Promise<GitContractTypes.ERC1155Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1155URIStorageUpgradeable',
  ): Promise<GitContractTypes.ERC1155URIStorageUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC165StorageUpgradeable',
  ): Promise<GitContractTypes.ERC165StorageUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1820ImplementerUpgradeable',
  ): Promise<GitContractTypes.ERC1820ImplementerUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1967UpgradeUpgradeable',
  ): Promise<GitContractTypes.ERC1967UpgradeUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20BurnableUpgradeable',
  ): Promise<GitContractTypes.ERC20BurnableUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20CappedUpgradeable',
  ): Promise<GitContractTypes.ERC20CappedUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20FlashMintUpgradeable',
  ): Promise<GitContractTypes.ERC20FlashMintUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20PausableUpgradeable',
  ): Promise<GitContractTypes.ERC20PausableUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20PermitUpgradeable',
  ): Promise<GitContractTypes.ERC20PermitUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20PresetFixedSupplyUpgradeable',
  ): Promise<GitContractTypes.ERC20PresetFixedSupplyUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20PresetMinterPauserUpgradeable',
  ): Promise<GitContractTypes.ERC20PresetMinterPauserUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20SnapshotUpgradeable',
  ): Promise<GitContractTypes.ERC20SnapshotUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20VotesCompUpgradeable',
  ): Promise<GitContractTypes.ERC20VotesCompUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20VotesUpgradeable',
  ): Promise<GitContractTypes.ERC20VotesUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20WrapperUpgradeable',
  ): Promise<GitContractTypes.ERC20WrapperUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC2771ContextUpgradeable',
  ): Promise<GitContractTypes.ERC2771ContextUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC2981Upgradeable',
  ): Promise<GitContractTypes.ERC2981Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC721BurnableUpgradeable',
  ): Promise<GitContractTypes.ERC721BurnableUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC721HolderUpgradeable',
  ): Promise<GitContractTypes.ERC721HolderUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC721PausableUpgradeable',
  ): Promise<GitContractTypes.ERC721PausableUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC721PresetMinterPauserAutoIdUpgradeable',
  ): Promise<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC721RoyaltyUpgradeable',
  ): Promise<GitContractTypes.ERC721RoyaltyUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC721URIStorageUpgradeable',
  ): Promise<GitContractTypes.ERC721URIStorageUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC721VotesUpgradeable',
  ): Promise<GitContractTypes.ERC721VotesUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC777PresetFixedSupplyUpgradeable',
  ): Promise<GitContractTypes.ERC777PresetFixedSupplyUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC777Upgradeable',
  ): Promise<GitContractTypes.ERC777Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'EscrowUpgradeable',
  ): Promise<GitContractTypes.EscrowUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorCompatibilityBravoUpgradeable',
  ): Promise<GitContractTypes.GovernorCompatibilityBravoUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorCountingSimpleUpgradeable',
  ): Promise<GitContractTypes.GovernorCountingSimpleUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorPreventLateQuorumUpgradeable',
  ): Promise<GitContractTypes.GovernorPreventLateQuorumUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorProposalThresholdUpgradeable',
  ): Promise<GitContractTypes.GovernorProposalThresholdUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorSettingsUpgradeable',
  ): Promise<GitContractTypes.GovernorSettingsUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorTimelockCompoundUpgradeable',
  ): Promise<GitContractTypes.GovernorTimelockCompoundUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorTimelockControlUpgradeable',
  ): Promise<GitContractTypes.GovernorTimelockControlUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorUpgradeable',
  ): Promise<GitContractTypes.GovernorUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorVotesCompUpgradeable',
  ): Promise<GitContractTypes.GovernorVotesCompUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorVotesQuorumFractionUpgradeable',
  ): Promise<GitContractTypes.GovernorVotesQuorumFractionUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorVotesUpgradeable',
  ): Promise<GitContractTypes.GovernorVotesUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IAccessControlEnumerableUpgradeable',
  ): Promise<GitContractTypes.IAccessControlEnumerableUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IAMBUpgradeable',
  ): Promise<GitContractTypes.IAMBUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IArbSysUpgradeable',
  ): Promise<GitContractTypes.IArbSysUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IBeaconUpgradeable',
  ): Promise<GitContractTypes.IBeaconUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IBridgeUpgradeable',
  ): Promise<GitContractTypes.IBridgeUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ICompoundTimelockUpgradeable',
  ): Promise<GitContractTypes.ICompoundTimelockUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ICrossDomainMessengerUpgradeable',
  ): Promise<GitContractTypes.ICrossDomainMessengerUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1155MetadataURIUpgradeable',
  ): Promise<GitContractTypes.IERC1155MetadataURIUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1155ReceiverUpgradeable',
  ): Promise<GitContractTypes.IERC1155ReceiverUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1155Upgradeable',
  ): Promise<GitContractTypes.IERC1155Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1271Upgradeable',
  ): Promise<GitContractTypes.IERC1271Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1363ReceiverUpgradeable',
  ): Promise<GitContractTypes.IERC1363ReceiverUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1363SpenderUpgradeable',
  ): Promise<GitContractTypes.IERC1363SpenderUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1363Upgradeable',
  ): Promise<GitContractTypes.IERC1363Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1820ImplementerUpgradeable',
  ): Promise<GitContractTypes.IERC1820ImplementerUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1820RegistryUpgradeable',
  ): Promise<GitContractTypes.IERC1820RegistryUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1822ProxiableUpgradeable',
  ): Promise<GitContractTypes.IERC1822ProxiableUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC20PermitUpgradeable',
  ): Promise<GitContractTypes.IERC20PermitUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC2612Upgradeable',
  ): Promise<GitContractTypes.IERC2612Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC2981Upgradeable',
  ): Promise<GitContractTypes.IERC2981Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC3156FlashBorrowerUpgradeable',
  ): Promise<GitContractTypes.IERC3156FlashBorrowerUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC3156FlashLenderUpgradeable',
  ): Promise<GitContractTypes.IERC3156FlashLenderUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC777RecipientUpgradeable',
  ): Promise<GitContractTypes.IERC777RecipientUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC777SenderUpgradeable',
  ): Promise<GitContractTypes.IERC777SenderUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC777Upgradeable',
  ): Promise<GitContractTypes.IERC777Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IFxMessageProcessorUpgradeable',
  ): Promise<GitContractTypes.IFxMessageProcessorUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IGovernorCompatibilityBravoUpgradeable',
  ): Promise<GitContractTypes.IGovernorCompatibilityBravoUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IGovernorTimelockUpgradeable',
  ): Promise<GitContractTypes.IGovernorTimelockUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IGovernorUpgradeable',
  ): Promise<GitContractTypes.IGovernorUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IInboxUpgradeable',
  ): Promise<GitContractTypes.IInboxUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IMessageProviderUpgradeable',
  ): Promise<GitContractTypes.IMessageProviderUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IOutboxUpgradeable',
  ): Promise<GitContractTypes.IOutboxUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IVotesUpgradeable',
  ): Promise<GitContractTypes.IVotesUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'LibArbitrumL2Upgradeable',
  ): Promise<GitContractTypes.LibArbitrumL2Upgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'MinimalForwarderUpgradeable',
  ): Promise<GitContractTypes.MinimalForwarderUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'MulticallUpgradeable',
  ): Promise<GitContractTypes.MulticallUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'PausableUpgradeable',
  ): Promise<GitContractTypes.PausableUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'PaymentSplitterUpgradeable',
  ): Promise<GitContractTypes.PaymentSplitterUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'PullPaymentUpgradeable',
  ): Promise<GitContractTypes.PullPaymentUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'RefundEscrowUpgradeable',
  ): Promise<GitContractTypes.RefundEscrowUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'TimelockControllerUpgradeable',
  ): Promise<GitContractTypes.TimelockControllerUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'TimelockControllerWith46MigrationUpgradeable',
  ): Promise<GitContractTypes.TimelockControllerWith46MigrationUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'TokenTimelockUpgradeable',
  ): Promise<GitContractTypes.TokenTimelockUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'UUPSUpgradeable',
  ): Promise<GitContractTypes.UUPSUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'VestingWalletUpgradeable',
  ): Promise<GitContractTypes.VestingWalletUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'VotesUpgradeable',
  ): Promise<GitContractTypes.VotesUpgradeable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'AccessControlCrossChain',
  ): Promise<GitContractTypes.AccessControlCrossChain>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'AccessControlEnumerable',
  ): Promise<GitContractTypes.AccessControlEnumerable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'BeaconProxy',
  ): Promise<GitContractTypes.BeaconProxy>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ConditionalEscrow',
  ): Promise<GitContractTypes.ConditionalEscrow>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CrossChainEnabledAMB',
  ): Promise<GitContractTypes.CrossChainEnabledAMB>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'CrossChainEnabledPolygonChild',
  ): Promise<GitContractTypes.CrossChainEnabledPolygonChild>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'DoubleEndedQueue',
  ): Promise<GitContractTypes.DoubleEndedQueue>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1155',
  ): Promise<GitContractTypes.ERC1155>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1155Burnable',
  ): Promise<GitContractTypes.ERC1155Burnable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1155Holder',
  ): Promise<GitContractTypes.ERC1155Holder>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1155Pausable',
  ): Promise<GitContractTypes.ERC1155Pausable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1155PresetMinterPauser',
  ): Promise<GitContractTypes.ERC1155PresetMinterPauser>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1155Receiver',
  ): Promise<GitContractTypes.ERC1155Receiver>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1155Supply',
  ): Promise<GitContractTypes.ERC1155Supply>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1155URIStorage',
  ): Promise<GitContractTypes.ERC1155URIStorage>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC165Storage',
  ): Promise<GitContractTypes.ERC165Storage>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1820Implementer',
  ): Promise<GitContractTypes.ERC1820Implementer>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1967Proxy',
  ): Promise<GitContractTypes.ERC1967Proxy>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC1967Upgrade',
  ): Promise<GitContractTypes.ERC1967Upgrade>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20Burnable',
  ): Promise<GitContractTypes.ERC20Burnable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20Capped',
  ): Promise<GitContractTypes.ERC20Capped>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20FlashMint',
  ): Promise<GitContractTypes.ERC20FlashMint>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20Pausable',
  ): Promise<GitContractTypes.ERC20Pausable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20Permit',
  ): Promise<GitContractTypes.ERC20Permit>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20PresetFixedSupply',
  ): Promise<GitContractTypes.ERC20PresetFixedSupply>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20PresetMinterPauser',
  ): Promise<GitContractTypes.ERC20PresetMinterPauser>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20Snapshot',
  ): Promise<GitContractTypes.ERC20Snapshot>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20Votes',
  ): Promise<GitContractTypes.ERC20Votes>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20VotesComp',
  ): Promise<GitContractTypes.ERC20VotesComp>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC20Wrapper',
  ): Promise<GitContractTypes.ERC20Wrapper>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC2771Context',
  ): Promise<GitContractTypes.ERC2771Context>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC2981',
  ): Promise<GitContractTypes.ERC2981>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC721',
  ): Promise<GitContractTypes.ERC721>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC721Burnable',
  ): Promise<GitContractTypes.ERC721Burnable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC721Enumerable',
  ): Promise<GitContractTypes.ERC721Enumerable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC721Holder',
  ): Promise<GitContractTypes.ERC721Holder>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC721Pausable',
  ): Promise<GitContractTypes.ERC721Pausable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC721PresetMinterPauserAutoId',
  ): Promise<GitContractTypes.ERC721PresetMinterPauserAutoId>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC721Royalty',
  ): Promise<GitContractTypes.ERC721Royalty>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC721URIStorage',
  ): Promise<GitContractTypes.ERC721URIStorage>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC721Votes',
  ): Promise<GitContractTypes.ERC721Votes>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC777',
  ): Promise<GitContractTypes.ERC777>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ERC777PresetFixedSupply',
  ): Promise<GitContractTypes.ERC777PresetFixedSupply>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'Escrow',
  ): Promise<GitContractTypes.Escrow>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'Governor',
  ): Promise<GitContractTypes.Governor>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorCompatibilityBravo',
  ): Promise<GitContractTypes.GovernorCompatibilityBravo>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorCountingSimple',
  ): Promise<GitContractTypes.GovernorCountingSimple>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorPreventLateQuorum',
  ): Promise<GitContractTypes.GovernorPreventLateQuorum>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorProposalThreshold',
  ): Promise<GitContractTypes.GovernorProposalThreshold>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorSettings',
  ): Promise<GitContractTypes.GovernorSettings>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorTimelockCompound',
  ): Promise<GitContractTypes.GovernorTimelockCompound>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorTimelockControl',
  ): Promise<GitContractTypes.GovernorTimelockControl>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorVotes',
  ): Promise<GitContractTypes.GovernorVotes>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorVotesComp',
  ): Promise<GitContractTypes.GovernorVotesComp>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'GovernorVotesQuorumFraction',
  ): Promise<GitContractTypes.GovernorVotesQuorumFraction>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IAccessControlEnumerable',
  ): Promise<GitContractTypes.IAccessControlEnumerable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IAMB',
  ): Promise<GitContractTypes.IAMB>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IArbSys',
  ): Promise<GitContractTypes.IArbSys>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IBeacon',
  ): Promise<GitContractTypes.IBeacon>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IBridge',
  ): Promise<GitContractTypes.IBridge>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ICompoundTimelock',
  ): Promise<GitContractTypes.ICompoundTimelock>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ICrossDomainMessenger',
  ): Promise<GitContractTypes.ICrossDomainMessenger>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1155',
  ): Promise<GitContractTypes.IERC1155>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1155MetadataURI',
  ): Promise<GitContractTypes.IERC1155MetadataURI>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1155Receiver',
  ): Promise<GitContractTypes.IERC1155Receiver>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1271',
  ): Promise<GitContractTypes.IERC1271>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1363',
  ): Promise<GitContractTypes.IERC1363>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1363Receiver',
  ): Promise<GitContractTypes.IERC1363Receiver>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1363Spender',
  ): Promise<GitContractTypes.IERC1363Spender>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1820Implementer',
  ): Promise<GitContractTypes.IERC1820Implementer>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1820Registry',
  ): Promise<GitContractTypes.IERC1820Registry>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC1822Proxiable',
  ): Promise<GitContractTypes.IERC1822Proxiable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC20Permit',
  ): Promise<GitContractTypes.IERC20Permit>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC2612',
  ): Promise<GitContractTypes.IERC2612>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC2981',
  ): Promise<GitContractTypes.IERC2981>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC3156FlashBorrower',
  ): Promise<GitContractTypes.IERC3156FlashBorrower>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC3156FlashLender',
  ): Promise<GitContractTypes.IERC3156FlashLender>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC721',
  ): Promise<GitContractTypes.IERC721>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC721Enumerable',
  ): Promise<GitContractTypes.IERC721Enumerable>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC721Metadata',
  ): Promise<GitContractTypes.IERC721Metadata>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC721Receiver',
  ): Promise<GitContractTypes.IERC721Receiver>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC777',
  ): Promise<GitContractTypes.IERC777>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC777Recipient',
  ): Promise<GitContractTypes.IERC777Recipient>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IERC777Sender',
  ): Promise<GitContractTypes.IERC777Sender>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IFxMessageProcessor',
  ): Promise<GitContractTypes.IFxMessageProcessor>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IGovernor',
  ): Promise<GitContractTypes.IGovernor>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IGovernorCompatibilityBravo',
  ): Promise<GitContractTypes.IGovernorCompatibilityBravo>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IGovernorTimelock',
  ): Promise<GitContractTypes.IGovernorTimelock>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IMessageProvider',
  ): Promise<GitContractTypes.IMessageProvider>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IOutbox',
  ): Promise<GitContractTypes.IOutbox>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'IVotes',
  ): Promise<GitContractTypes.IVotes>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'LibArbitrumL2',
  ): Promise<GitContractTypes.LibArbitrumL2>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'MinimalForwarder',
  ): Promise<GitContractTypes.MinimalForwarder>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'Multicall',
  ): Promise<GitContractTypes.Multicall>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'PaymentSplitter',
  ): Promise<GitContractTypes.PaymentSplitter>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'Proxy',
  ): Promise<GitContractTypes.Proxy>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'ProxyAdmin',
  ): Promise<GitContractTypes.ProxyAdmin>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'PullPayment',
  ): Promise<GitContractTypes.PullPayment>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'RefundEscrow',
  ): Promise<GitContractTypes.RefundEscrow>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'TimelockController',
  ): Promise<GitContractTypes.TimelockController>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'TokenTimelock',
  ): Promise<GitContractTypes.TokenTimelock>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'TransparentUpgradeableProxy',
  ): Promise<GitContractTypes.TransparentUpgradeableProxy>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'UpgradeableBeacon',
  ): Promise<GitContractTypes.UpgradeableBeacon>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'VestingWallet',
  ): Promise<GitContractTypes.VestingWallet>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'Votes',
  ): Promise<GitContractTypes.Votes>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'UniswapV2Migrator',
  ): Promise<GitContractTypes.UniswapV2Migrator>
  (
    ethers: HardhatEthersHelpers,
    contractName: 'UniswapV2Router01',
  ): Promise<GitContractTypes.UniswapV2Router01>
}


// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------

export interface EthersGetContractFromGitContractTypesFunctionOverloads {
  (contractName: 'KeeperCompatibleInterface'): GitContractTypes.KeeperCompatibleInterface
  (contractName: 'KeeperBase'): GitContractTypes.KeeperBase
  (contractName: 'KeeperCompatible'): GitContractTypes.KeeperCompatible
  (contractName: 'CVIOracle'): GitContractTypes.CVIOracle
  (contractName: 'ElasticToken'): GitContractTypes.ElasticToken
  (contractName: 'IUniswapV2Factory'): GitContractTypes.IUniswapV2Factory
  (contractName: 'IUniswapV2Pair'): GitContractTypes.IUniswapV2Pair
  (contractName: 'IUniswapV2Router01'): GitContractTypes.IUniswapV2Router01
  (contractName: 'IUniswapV2Router02'): GitContractTypes.IUniswapV2Router02
  (contractName: 'WETH9'): GitContractTypes.WETH9
  (contractName: 'FeesCalculator'): GitContractTypes.FeesCalculator
  (contractName: 'GOVI'): GitContractTypes.GOVI
  (contractName: 'AggregatorInterface'): GitContractTypes.AggregatorInterface
  (contractName: 'AggregatorV2V3Interface'): GitContractTypes.AggregatorV2V3Interface
  (contractName: 'AggregatorV3Interface'): GitContractTypes.AggregatorV3Interface
  (contractName: 'ICVIOracle'): GitContractTypes.ICVIOracle
  (contractName: 'IElasticToken'): GitContractTypes.IElasticToken
  (contractName: 'IFeesCalculator'): GitContractTypes.IFeesCalculator
  (contractName: 'IFeesCollector'): GitContractTypes.IFeesCollector
  (contractName: 'IFeesCollectorManagement'): GitContractTypes.IFeesCollectorManagement
  (contractName: 'IInbox'): GitContractTypes.IInbox
  (contractName: 'IKeepersFeeVault'): GitContractTypes.IKeepersFeeVault
  (contractName: 'ILiquidation'): GitContractTypes.ILiquidation
  (contractName: 'IPlatform'): GitContractTypes.IPlatform
  (contractName: 'IPlatformHelper'): GitContractTypes.IPlatformHelper
  (contractName: 'IPositionRewards'): GitContractTypes.IPositionRewards
  (contractName: 'IRebaser'): GitContractTypes.IRebaser
  (contractName: 'IRequestFeesCalculator'): GitContractTypes.IRequestFeesCalculator
  (contractName: 'IRequestFulfiller'): GitContractTypes.IRequestFulfiller
  (contractName: 'IRequestManager'): GitContractTypes.IRequestManager
  (contractName: 'IRewardsCollector'): GitContractTypes.IRewardsCollector
  (contractName: 'IStaking'): GitContractTypes.IStaking
  (contractName: 'IStakingVault'): GitContractTypes.IStakingVault
  (contractName: 'IThetaVault'): GitContractTypes.IThetaVault
  (contractName: 'IThetaVaultInfo'): GitContractTypes.IThetaVaultInfo
  (contractName: 'ITreasury'): GitContractTypes.ITreasury
  (contractName: 'IVolatilityToken'): GitContractTypes.IVolatilityToken
  (contractName: 'IWETH'): GitContractTypes.IWETH
  (contractName: 'KeepersFeeVault'): GitContractTypes.KeepersFeeVault
  (contractName: 'Liquidation'): GitContractTypes.Liquidation
  (contractName: 'Platform'): GitContractTypes.Platform
  (contractName: 'PlatformHelper'): GitContractTypes.PlatformHelper
  (contractName: 'PositionRewards'): GitContractTypes.PositionRewards
  (contractName: 'Rebaser'): GitContractTypes.Rebaser
  (contractName: 'RequestFeesCalculator'): GitContractTypes.RequestFeesCalculator
  (contractName: 'RequestFulfiller'): GitContractTypes.RequestFulfiller
  (contractName: 'FeesCollector'): GitContractTypes.FeesCollector
  (contractName: 'Staking'): GitContractTypes.Staking
  (contractName: 'COTIETHSLPStakingRewards'): GitContractTypes.COTIETHSLPStakingRewards
  (contractName: 'COTIETHStakingRewards'): GitContractTypes.COTIETHStakingRewards
  (contractName: 'CVOLUSDCLPStakingRewards'): GitContractTypes.CVOLUSDCLPStakingRewards
  (contractName: 'ETHLPStakingRewards'): GitContractTypes.ETHLPStakingRewards
  (contractName: 'ETHVOL_USDCLPStakingRewards'): GitContractTypes.ETHVOL_USDCLPStakingRewards
  (contractName: 'ETHVOLUSDCLPStakingRewards'): GitContractTypes.ETHVOLUSDCLPStakingRewards
  (contractName: 'GOVIETHSLPStakingRewards'): GitContractTypes.GOVIETHSLPStakingRewards
  (contractName: 'GOVIETHStakingRewards'): GitContractTypes.GOVIETHStakingRewards
  (contractName: 'USDCLPStakingRewards'): GitContractTypes.USDCLPStakingRewards
  (contractName: 'USDTLPStakingRewards'): GitContractTypes.USDTLPStakingRewards
  (contractName: 'IStakingRewards'): GitContractTypes.IStakingRewards
  (contractName: 'Owned'): GitContractTypes.Owned
  (contractName: 'Pausable'): GitContractTypes.Pausable
  (contractName: 'RewardsDistributionRecipient'): GitContractTypes.RewardsDistributionRecipient
  (contractName: 'StakingRewards'): GitContractTypes.StakingRewards
  (contractName: 'StakingVault'): GitContractTypes.StakingVault
  (contractName: 'Treasury'): GitContractTypes.Treasury
  (contractName: 'CVIFeedOracle'): GitContractTypes.CVIFeedOracle
  (contractName: 'FakeERC20'): GitContractTypes.FakeERC20
  (contractName: 'FakePriceProvider'): GitContractTypes.FakePriceProvider
  (contractName: 'IERC20'): GitContractTypes.IERC20
  (contractName: 'IUniswapV2Callee'): GitContractTypes.IUniswapV2Callee
  (contractName: 'IUniswapV2ERC20'): GitContractTypes.IUniswapV2ERC20
  (contractName: 'UniswapV2ERC20'): GitContractTypes.UniswapV2ERC20
  (contractName: 'UniswapV2Factory'): GitContractTypes.UniswapV2Factory
  (contractName: 'UniswapV2Pair'): GitContractTypes.UniswapV2Pair
  (contractName: 'UniswapV2Router02'): GitContractTypes.UniswapV2Router02
  (contractName: 'ThetaVault'): GitContractTypes.ThetaVault
  (contractName: 'ThetaVaultRequestFulfiller'): GitContractTypes.ThetaVaultRequestFulfiller
  (contractName: 'VolatilityToken'): GitContractTypes.VolatilityToken
  (contractName: 'VolTokenRequestFulfiller'): GitContractTypes.VolTokenRequestFulfiller
  (contractName: 'BaseController'): GitContractTypes.BaseController
  (contractName: 'ILProtectionConfig'): GitContractTypes.ILProtectionConfig
  (contractName: 'ILProtectionController'): GitContractTypes.ILProtectionController
  (contractName: 'ILProtectionDiscountNFTController'): GitContractTypes.ILProtectionDiscountNFTController
  (contractName: 'ILProtectionNFT'): GitContractTypes.ILProtectionNFT
  (contractName: 'ILiquidityController'): GitContractTypes.ILiquidityController
  (contractName: 'ILProtectionConfigInterface'): GitContractTypes.ILProtectionConfigInterface
  (contractName: 'ILProtectionControllerInterface'): GitContractTypes.ILProtectionControllerInterface
  (contractName: 'ILProtectionDiscountNFTControllerInterface'): GitContractTypes.ILProtectionDiscountNFTControllerInterface
  (contractName: 'ILProtectionDiscountNFTInterface'): GitContractTypes.ILProtectionDiscountNFTInterface
  (contractName: 'ILProtectionNFTInterface'): GitContractTypes.ILProtectionNFTInterface
  (contractName: 'ITokenPairRepository'): GitContractTypes.ITokenPairRepository
  (contractName: 'ITreasuryController'): GitContractTypes.ITreasuryController
  (contractName: 'ILUtils'): GitContractTypes.ILUtils
  (contractName: 'MathUtils'): GitContractTypes.MathUtils
  (contractName: 'PremiumCalculator'): GitContractTypes.PremiumCalculator
  (contractName: 'LiquidityController'): GitContractTypes.LiquidityController
  (contractName: 'ILProtectionDiscountNFT'): GitContractTypes.ILProtectionDiscountNFT
  (contractName: 'ETHUSDOracle'): GitContractTypes.ETHUSDOracle
  (contractName: 'LINKUSDOracle'): GitContractTypes.LINKUSDOracle
  (contractName: 'USDUSDOracle'): GitContractTypes.USDUSDOracle
  (contractName: 'USDC'): GitContractTypes.USDC
  (contractName: 'TokenPairRepository'): GitContractTypes.TokenPairRepository
  (contractName: 'TreasuryController'): GitContractTypes.TreasuryController
  (contractName: 'EsGOVI'): GitContractTypes.EsGOVI
  (contractName: 'EsGOVIRewardTrackerDistributor'): GitContractTypes.EsGOVIRewardTrackerDistributor
  (contractName: 'GOVIRewardTrackerDistributor'): GitContractTypes.GOVIRewardTrackerDistributor
  (contractName: 'ThetaVaultRewardTrackerDistributor'): GitContractTypes.ThetaVaultRewardTrackerDistributor
  (contractName: 'EsGOVIRewardTracker'): GitContractTypes.EsGOVIRewardTracker
  (contractName: 'GOVIRewardTracker'): GitContractTypes.GOVIRewardTracker
  (contractName: 'ThetaVaultRewardTracker'): GitContractTypes.ThetaVaultRewardTracker
  (contractName: 'GOVIVester'): GitContractTypes.GOVIVester
  (contractName: 'ThetaVaultVester'): GitContractTypes.ThetaVaultVester
  (contractName: 'IMintable'): GitContractTypes.IMintable
  (contractName: 'IRewardDistributor'): GitContractTypes.IRewardDistributor
  (contractName: 'IRewardRouter'): GitContractTypes.IRewardRouter
  (contractName: 'IRewardTracker'): GitContractTypes.IRewardTracker
  (contractName: 'IVester'): GitContractTypes.IVester
  (contractName: 'RewardDistributor'): GitContractTypes.RewardDistributor
  (contractName: 'RewardRouter'): GitContractTypes.RewardRouter
  (contractName: 'RewardTracker'): GitContractTypes.RewardTracker
  (contractName: 'FakeCVIUSDCThetaVault'): GitContractTypes.FakeCVIUSDCThetaVault
  (contractName: 'FakeGOVI'): GitContractTypes.FakeGOVI
  (contractName: 'Vester'): GitContractTypes.Vester
  (contractName: 'AccessControlUpgradeable'): GitContractTypes.AccessControlUpgradeable
  (contractName: 'IAccessControlUpgradeable'): GitContractTypes.IAccessControlUpgradeable
  (contractName: 'OwnableUpgradeable'): GitContractTypes.OwnableUpgradeable
  (contractName: 'Initializable'): GitContractTypes.Initializable
  (contractName: 'ReentrancyGuardUpgradeable'): GitContractTypes.ReentrancyGuardUpgradeable
  (contractName: 'ERC20Upgradeable'): GitContractTypes.ERC20Upgradeable
  (contractName: 'IERC20MetadataUpgradeable'): GitContractTypes.IERC20MetadataUpgradeable
  (contractName: 'IERC20Upgradeable'): GitContractTypes.IERC20Upgradeable
  (contractName: 'ERC721Upgradeable'): GitContractTypes.ERC721Upgradeable
  (contractName: 'ERC721EnumerableUpgradeable'): GitContractTypes.ERC721EnumerableUpgradeable
  (contractName: 'IERC721EnumerableUpgradeable'): GitContractTypes.IERC721EnumerableUpgradeable
  (contractName: 'IERC721MetadataUpgradeable'): GitContractTypes.IERC721MetadataUpgradeable
  (contractName: 'IERC721ReceiverUpgradeable'): GitContractTypes.IERC721ReceiverUpgradeable
  (contractName: 'IERC721Upgradeable'): GitContractTypes.IERC721Upgradeable
  (contractName: 'ContextUpgradeable'): GitContractTypes.ContextUpgradeable
  (contractName: 'ERC165Upgradeable'): GitContractTypes.ERC165Upgradeable
  (contractName: 'IERC165Upgradeable'): GitContractTypes.IERC165Upgradeable
  (contractName: 'AccessControl'): GitContractTypes.AccessControl
  (contractName: 'IAccessControl'): GitContractTypes.IAccessControl
  (contractName: 'Ownable'): GitContractTypes.Ownable
  (contractName: 'ERC20'): GitContractTypes.ERC20
  (contractName: 'IERC20Metadata'): GitContractTypes.IERC20Metadata
  (contractName: 'ERC165'): GitContractTypes.ERC165
  (contractName: 'IERC165'): GitContractTypes.IERC165
  (contractName: 'CVIDeviationOracle'): GitContractTypes.CVIDeviationOracle
  (contractName: 'CVIFakeFeedOracle'): GitContractTypes.CVIFakeFeedOracle
  (contractName: 'CVIOracle2X'): GitContractTypes.CVIOracle2X
  (contractName: 'ETHVIOracle'): GitContractTypes.ETHVIOracle
  (contractName: 'CVIUSDCFeesCalculator'): GitContractTypes.CVIUSDCFeesCalculator
  (contractName: 'CVIUSDCFeesCalculator2X'): GitContractTypes.CVIUSDCFeesCalculator2X
  (contractName: 'CVIUSDCLiquidation'): GitContractTypes.CVIUSDCLiquidation
  (contractName: 'CVIUSDCLiquidation2X'): GitContractTypes.CVIUSDCLiquidation2X
  (contractName: 'CVIUSDCPlatform'): GitContractTypes.CVIUSDCPlatform
  (contractName: 'CVIUSDCPlatform2X'): GitContractTypes.CVIUSDCPlatform2X
  (contractName: 'CVIUSDCPositionRewards'): GitContractTypes.CVIUSDCPositionRewards
  (contractName: 'StakingV2'): GitContractTypes.StakingV2
  (contractName: 'CVIUSDCLPStakingRewards'): GitContractTypes.CVIUSDCLPStakingRewards
  (contractName: 'CVIUSDCThetaVault'): GitContractTypes.CVIUSDCThetaVault
  (contractName: 'CVIUSDCThetaVault2X'): GitContractTypes.CVIUSDCThetaVault2X
  (contractName: 'CVIUSDCThetaVaultRequestFulfiller'): GitContractTypes.CVIUSDCThetaVaultRequestFulfiller
  (contractName: 'CVIUSDCThetaVaultRequestFulfiller2X'): GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X
  (contractName: 'WETH'): GitContractTypes.WETH
  (contractName: 'CVIUSDCRebaser'): GitContractTypes.CVIUSDCRebaser
  (contractName: 'CVIUSDCRebaser2X'): GitContractTypes.CVIUSDCRebaser2X
  (contractName: 'CVIUSDCRequestFeesCalculator'): GitContractTypes.CVIUSDCRequestFeesCalculator
  (contractName: 'CVIUSDCRequestFeesCalculator2X'): GitContractTypes.CVIUSDCRequestFeesCalculator2X
  (contractName: 'CVIUSDCVolatilityToken'): GitContractTypes.CVIUSDCVolatilityToken
  (contractName: 'CVIUSDCVolatilityToken2X'): GitContractTypes.CVIUSDCVolatilityToken2X
  (contractName: 'CVIUSDCVolTokenRequestFulfiller'): GitContractTypes.CVIUSDCVolTokenRequestFulfiller
  (contractName: 'CVIUSDCVolTokenRequestFulfiller2X'): GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X
  (contractName: 'AccessControlCrossChainUpgradeable'): GitContractTypes.AccessControlCrossChainUpgradeable
  (contractName: 'AccessControlEnumerableUpgradeable'): GitContractTypes.AccessControlEnumerableUpgradeable
  (contractName: 'ConditionalEscrowUpgradeable'): GitContractTypes.ConditionalEscrowUpgradeable
  (contractName: 'CrossChainEnabledAMBUpgradeable'): GitContractTypes.CrossChainEnabledAMBUpgradeable
  (contractName: 'CrossChainEnabledArbitrumL1Upgradeable'): GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable
  (contractName: 'CrossChainEnabledArbitrumL2Upgradeable'): GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable
  (contractName: 'CrossChainEnabledOptimismUpgradeable'): GitContractTypes.CrossChainEnabledOptimismUpgradeable
  (contractName: 'CrossChainEnabledPolygonChildUpgradeable'): GitContractTypes.CrossChainEnabledPolygonChildUpgradeable
  (contractName: 'CrossChainEnabledUpgradeable'): GitContractTypes.CrossChainEnabledUpgradeable
  (contractName: 'DoubleEndedQueueUpgradeable'): GitContractTypes.DoubleEndedQueueUpgradeable
  (contractName: 'EIP712Upgradeable'): GitContractTypes.EIP712Upgradeable
  (contractName: 'ERC1155BurnableUpgradeable'): GitContractTypes.ERC1155BurnableUpgradeable
  (contractName: 'ERC1155HolderUpgradeable'): GitContractTypes.ERC1155HolderUpgradeable
  (contractName: 'ERC1155PausableUpgradeable'): GitContractTypes.ERC1155PausableUpgradeable
  (contractName: 'ERC1155PresetMinterPauserUpgradeable'): GitContractTypes.ERC1155PresetMinterPauserUpgradeable
  (contractName: 'ERC1155ReceiverUpgradeable'): GitContractTypes.ERC1155ReceiverUpgradeable
  (contractName: 'ERC1155SupplyUpgradeable'): GitContractTypes.ERC1155SupplyUpgradeable
  (contractName: 'ERC1155Upgradeable'): GitContractTypes.ERC1155Upgradeable
  (contractName: 'ERC1155URIStorageUpgradeable'): GitContractTypes.ERC1155URIStorageUpgradeable
  (contractName: 'ERC165StorageUpgradeable'): GitContractTypes.ERC165StorageUpgradeable
  (contractName: 'ERC1820ImplementerUpgradeable'): GitContractTypes.ERC1820ImplementerUpgradeable
  (contractName: 'ERC1967UpgradeUpgradeable'): GitContractTypes.ERC1967UpgradeUpgradeable
  (contractName: 'ERC20BurnableUpgradeable'): GitContractTypes.ERC20BurnableUpgradeable
  (contractName: 'ERC20CappedUpgradeable'): GitContractTypes.ERC20CappedUpgradeable
  (contractName: 'ERC20FlashMintUpgradeable'): GitContractTypes.ERC20FlashMintUpgradeable
  (contractName: 'ERC20PausableUpgradeable'): GitContractTypes.ERC20PausableUpgradeable
  (contractName: 'ERC20PermitUpgradeable'): GitContractTypes.ERC20PermitUpgradeable
  (contractName: 'ERC20PresetFixedSupplyUpgradeable'): GitContractTypes.ERC20PresetFixedSupplyUpgradeable
  (contractName: 'ERC20PresetMinterPauserUpgradeable'): GitContractTypes.ERC20PresetMinterPauserUpgradeable
  (contractName: 'ERC20SnapshotUpgradeable'): GitContractTypes.ERC20SnapshotUpgradeable
  (contractName: 'ERC20VotesCompUpgradeable'): GitContractTypes.ERC20VotesCompUpgradeable
  (contractName: 'ERC20VotesUpgradeable'): GitContractTypes.ERC20VotesUpgradeable
  (contractName: 'ERC20WrapperUpgradeable'): GitContractTypes.ERC20WrapperUpgradeable
  (contractName: 'ERC2771ContextUpgradeable'): GitContractTypes.ERC2771ContextUpgradeable
  (contractName: 'ERC2981Upgradeable'): GitContractTypes.ERC2981Upgradeable
  (contractName: 'ERC721BurnableUpgradeable'): GitContractTypes.ERC721BurnableUpgradeable
  (contractName: 'ERC721HolderUpgradeable'): GitContractTypes.ERC721HolderUpgradeable
  (contractName: 'ERC721PausableUpgradeable'): GitContractTypes.ERC721PausableUpgradeable
  (contractName: 'ERC721PresetMinterPauserAutoIdUpgradeable'): GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable
  (contractName: 'ERC721RoyaltyUpgradeable'): GitContractTypes.ERC721RoyaltyUpgradeable
  (contractName: 'ERC721URIStorageUpgradeable'): GitContractTypes.ERC721URIStorageUpgradeable
  (contractName: 'ERC721VotesUpgradeable'): GitContractTypes.ERC721VotesUpgradeable
  (contractName: 'ERC777PresetFixedSupplyUpgradeable'): GitContractTypes.ERC777PresetFixedSupplyUpgradeable
  (contractName: 'ERC777Upgradeable'): GitContractTypes.ERC777Upgradeable
  (contractName: 'EscrowUpgradeable'): GitContractTypes.EscrowUpgradeable
  (contractName: 'GovernorCompatibilityBravoUpgradeable'): GitContractTypes.GovernorCompatibilityBravoUpgradeable
  (contractName: 'GovernorCountingSimpleUpgradeable'): GitContractTypes.GovernorCountingSimpleUpgradeable
  (contractName: 'GovernorPreventLateQuorumUpgradeable'): GitContractTypes.GovernorPreventLateQuorumUpgradeable
  (contractName: 'GovernorProposalThresholdUpgradeable'): GitContractTypes.GovernorProposalThresholdUpgradeable
  (contractName: 'GovernorSettingsUpgradeable'): GitContractTypes.GovernorSettingsUpgradeable
  (contractName: 'GovernorTimelockCompoundUpgradeable'): GitContractTypes.GovernorTimelockCompoundUpgradeable
  (contractName: 'GovernorTimelockControlUpgradeable'): GitContractTypes.GovernorTimelockControlUpgradeable
  (contractName: 'GovernorUpgradeable'): GitContractTypes.GovernorUpgradeable
  (contractName: 'GovernorVotesCompUpgradeable'): GitContractTypes.GovernorVotesCompUpgradeable
  (contractName: 'GovernorVotesQuorumFractionUpgradeable'): GitContractTypes.GovernorVotesQuorumFractionUpgradeable
  (contractName: 'GovernorVotesUpgradeable'): GitContractTypes.GovernorVotesUpgradeable
  (contractName: 'IAccessControlEnumerableUpgradeable'): GitContractTypes.IAccessControlEnumerableUpgradeable
  (contractName: 'IAMBUpgradeable'): GitContractTypes.IAMBUpgradeable
  (contractName: 'IArbSysUpgradeable'): GitContractTypes.IArbSysUpgradeable
  (contractName: 'IBeaconUpgradeable'): GitContractTypes.IBeaconUpgradeable
  (contractName: 'IBridgeUpgradeable'): GitContractTypes.IBridgeUpgradeable
  (contractName: 'ICompoundTimelockUpgradeable'): GitContractTypes.ICompoundTimelockUpgradeable
  (contractName: 'ICrossDomainMessengerUpgradeable'): GitContractTypes.ICrossDomainMessengerUpgradeable
  (contractName: 'IERC1155MetadataURIUpgradeable'): GitContractTypes.IERC1155MetadataURIUpgradeable
  (contractName: 'IERC1155ReceiverUpgradeable'): GitContractTypes.IERC1155ReceiverUpgradeable
  (contractName: 'IERC1155Upgradeable'): GitContractTypes.IERC1155Upgradeable
  (contractName: 'IERC1271Upgradeable'): GitContractTypes.IERC1271Upgradeable
  (contractName: 'IERC1363ReceiverUpgradeable'): GitContractTypes.IERC1363ReceiverUpgradeable
  (contractName: 'IERC1363SpenderUpgradeable'): GitContractTypes.IERC1363SpenderUpgradeable
  (contractName: 'IERC1363Upgradeable'): GitContractTypes.IERC1363Upgradeable
  (contractName: 'IERC1820ImplementerUpgradeable'): GitContractTypes.IERC1820ImplementerUpgradeable
  (contractName: 'IERC1820RegistryUpgradeable'): GitContractTypes.IERC1820RegistryUpgradeable
  (contractName: 'IERC1822ProxiableUpgradeable'): GitContractTypes.IERC1822ProxiableUpgradeable
  (contractName: 'IERC20PermitUpgradeable'): GitContractTypes.IERC20PermitUpgradeable
  (contractName: 'IERC2612Upgradeable'): GitContractTypes.IERC2612Upgradeable
  (contractName: 'IERC2981Upgradeable'): GitContractTypes.IERC2981Upgradeable
  (contractName: 'IERC3156FlashBorrowerUpgradeable'): GitContractTypes.IERC3156FlashBorrowerUpgradeable
  (contractName: 'IERC3156FlashLenderUpgradeable'): GitContractTypes.IERC3156FlashLenderUpgradeable
  (contractName: 'IERC777RecipientUpgradeable'): GitContractTypes.IERC777RecipientUpgradeable
  (contractName: 'IERC777SenderUpgradeable'): GitContractTypes.IERC777SenderUpgradeable
  (contractName: 'IERC777Upgradeable'): GitContractTypes.IERC777Upgradeable
  (contractName: 'IFxMessageProcessorUpgradeable'): GitContractTypes.IFxMessageProcessorUpgradeable
  (contractName: 'IGovernorCompatibilityBravoUpgradeable'): GitContractTypes.IGovernorCompatibilityBravoUpgradeable
  (contractName: 'IGovernorTimelockUpgradeable'): GitContractTypes.IGovernorTimelockUpgradeable
  (contractName: 'IGovernorUpgradeable'): GitContractTypes.IGovernorUpgradeable
  (contractName: 'IInboxUpgradeable'): GitContractTypes.IInboxUpgradeable
  (contractName: 'IMessageProviderUpgradeable'): GitContractTypes.IMessageProviderUpgradeable
  (contractName: 'IOutboxUpgradeable'): GitContractTypes.IOutboxUpgradeable
  (contractName: 'IVotesUpgradeable'): GitContractTypes.IVotesUpgradeable
  (contractName: 'LibArbitrumL2Upgradeable'): GitContractTypes.LibArbitrumL2Upgradeable
  (contractName: 'MinimalForwarderUpgradeable'): GitContractTypes.MinimalForwarderUpgradeable
  (contractName: 'MulticallUpgradeable'): GitContractTypes.MulticallUpgradeable
  (contractName: 'PausableUpgradeable'): GitContractTypes.PausableUpgradeable
  (contractName: 'PaymentSplitterUpgradeable'): GitContractTypes.PaymentSplitterUpgradeable
  (contractName: 'PullPaymentUpgradeable'): GitContractTypes.PullPaymentUpgradeable
  (contractName: 'RefundEscrowUpgradeable'): GitContractTypes.RefundEscrowUpgradeable
  (contractName: 'TimelockControllerUpgradeable'): GitContractTypes.TimelockControllerUpgradeable
  (contractName: 'TimelockControllerWith46MigrationUpgradeable'): GitContractTypes.TimelockControllerWith46MigrationUpgradeable
  (contractName: 'TokenTimelockUpgradeable'): GitContractTypes.TokenTimelockUpgradeable
  (contractName: 'UUPSUpgradeable'): GitContractTypes.UUPSUpgradeable
  (contractName: 'VestingWalletUpgradeable'): GitContractTypes.VestingWalletUpgradeable
  (contractName: 'VotesUpgradeable'): GitContractTypes.VotesUpgradeable
  (contractName: 'AccessControlCrossChain'): GitContractTypes.AccessControlCrossChain
  (contractName: 'AccessControlEnumerable'): GitContractTypes.AccessControlEnumerable
  (contractName: 'BeaconProxy'): GitContractTypes.BeaconProxy
  (contractName: 'ConditionalEscrow'): GitContractTypes.ConditionalEscrow
  (contractName: 'CrossChainEnabledAMB'): GitContractTypes.CrossChainEnabledAMB
  (contractName: 'CrossChainEnabledPolygonChild'): GitContractTypes.CrossChainEnabledPolygonChild
  (contractName: 'DoubleEndedQueue'): GitContractTypes.DoubleEndedQueue
  (contractName: 'ERC1155'): GitContractTypes.ERC1155
  (contractName: 'ERC1155Burnable'): GitContractTypes.ERC1155Burnable
  (contractName: 'ERC1155Holder'): GitContractTypes.ERC1155Holder
  (contractName: 'ERC1155Pausable'): GitContractTypes.ERC1155Pausable
  (contractName: 'ERC1155PresetMinterPauser'): GitContractTypes.ERC1155PresetMinterPauser
  (contractName: 'ERC1155Receiver'): GitContractTypes.ERC1155Receiver
  (contractName: 'ERC1155Supply'): GitContractTypes.ERC1155Supply
  (contractName: 'ERC1155URIStorage'): GitContractTypes.ERC1155URIStorage
  (contractName: 'ERC165Storage'): GitContractTypes.ERC165Storage
  (contractName: 'ERC1820Implementer'): GitContractTypes.ERC1820Implementer
  (contractName: 'ERC1967Proxy'): GitContractTypes.ERC1967Proxy
  (contractName: 'ERC1967Upgrade'): GitContractTypes.ERC1967Upgrade
  (contractName: 'ERC20Burnable'): GitContractTypes.ERC20Burnable
  (contractName: 'ERC20Capped'): GitContractTypes.ERC20Capped
  (contractName: 'ERC20FlashMint'): GitContractTypes.ERC20FlashMint
  (contractName: 'ERC20Pausable'): GitContractTypes.ERC20Pausable
  (contractName: 'ERC20Permit'): GitContractTypes.ERC20Permit
  (contractName: 'ERC20PresetFixedSupply'): GitContractTypes.ERC20PresetFixedSupply
  (contractName: 'ERC20PresetMinterPauser'): GitContractTypes.ERC20PresetMinterPauser
  (contractName: 'ERC20Snapshot'): GitContractTypes.ERC20Snapshot
  (contractName: 'ERC20Votes'): GitContractTypes.ERC20Votes
  (contractName: 'ERC20VotesComp'): GitContractTypes.ERC20VotesComp
  (contractName: 'ERC20Wrapper'): GitContractTypes.ERC20Wrapper
  (contractName: 'ERC2771Context'): GitContractTypes.ERC2771Context
  (contractName: 'ERC2981'): GitContractTypes.ERC2981
  (contractName: 'ERC721'): GitContractTypes.ERC721
  (contractName: 'ERC721Burnable'): GitContractTypes.ERC721Burnable
  (contractName: 'ERC721Enumerable'): GitContractTypes.ERC721Enumerable
  (contractName: 'ERC721Holder'): GitContractTypes.ERC721Holder
  (contractName: 'ERC721Pausable'): GitContractTypes.ERC721Pausable
  (contractName: 'ERC721PresetMinterPauserAutoId'): GitContractTypes.ERC721PresetMinterPauserAutoId
  (contractName: 'ERC721Royalty'): GitContractTypes.ERC721Royalty
  (contractName: 'ERC721URIStorage'): GitContractTypes.ERC721URIStorage
  (contractName: 'ERC721Votes'): GitContractTypes.ERC721Votes
  (contractName: 'ERC777'): GitContractTypes.ERC777
  (contractName: 'ERC777PresetFixedSupply'): GitContractTypes.ERC777PresetFixedSupply
  (contractName: 'Escrow'): GitContractTypes.Escrow
  (contractName: 'Governor'): GitContractTypes.Governor
  (contractName: 'GovernorCompatibilityBravo'): GitContractTypes.GovernorCompatibilityBravo
  (contractName: 'GovernorCountingSimple'): GitContractTypes.GovernorCountingSimple
  (contractName: 'GovernorPreventLateQuorum'): GitContractTypes.GovernorPreventLateQuorum
  (contractName: 'GovernorProposalThreshold'): GitContractTypes.GovernorProposalThreshold
  (contractName: 'GovernorSettings'): GitContractTypes.GovernorSettings
  (contractName: 'GovernorTimelockCompound'): GitContractTypes.GovernorTimelockCompound
  (contractName: 'GovernorTimelockControl'): GitContractTypes.GovernorTimelockControl
  (contractName: 'GovernorVotes'): GitContractTypes.GovernorVotes
  (contractName: 'GovernorVotesComp'): GitContractTypes.GovernorVotesComp
  (contractName: 'GovernorVotesQuorumFraction'): GitContractTypes.GovernorVotesQuorumFraction
  (contractName: 'IAccessControlEnumerable'): GitContractTypes.IAccessControlEnumerable
  (contractName: 'IAMB'): GitContractTypes.IAMB
  (contractName: 'IArbSys'): GitContractTypes.IArbSys
  (contractName: 'IBeacon'): GitContractTypes.IBeacon
  (contractName: 'IBridge'): GitContractTypes.IBridge
  (contractName: 'ICompoundTimelock'): GitContractTypes.ICompoundTimelock
  (contractName: 'ICrossDomainMessenger'): GitContractTypes.ICrossDomainMessenger
  (contractName: 'IERC1155'): GitContractTypes.IERC1155
  (contractName: 'IERC1155MetadataURI'): GitContractTypes.IERC1155MetadataURI
  (contractName: 'IERC1155Receiver'): GitContractTypes.IERC1155Receiver
  (contractName: 'IERC1271'): GitContractTypes.IERC1271
  (contractName: 'IERC1363'): GitContractTypes.IERC1363
  (contractName: 'IERC1363Receiver'): GitContractTypes.IERC1363Receiver
  (contractName: 'IERC1363Spender'): GitContractTypes.IERC1363Spender
  (contractName: 'IERC1820Implementer'): GitContractTypes.IERC1820Implementer
  (contractName: 'IERC1820Registry'): GitContractTypes.IERC1820Registry
  (contractName: 'IERC1822Proxiable'): GitContractTypes.IERC1822Proxiable
  (contractName: 'IERC20Permit'): GitContractTypes.IERC20Permit
  (contractName: 'IERC2612'): GitContractTypes.IERC2612
  (contractName: 'IERC2981'): GitContractTypes.IERC2981
  (contractName: 'IERC3156FlashBorrower'): GitContractTypes.IERC3156FlashBorrower
  (contractName: 'IERC3156FlashLender'): GitContractTypes.IERC3156FlashLender
  (contractName: 'IERC721'): GitContractTypes.IERC721
  (contractName: 'IERC721Enumerable'): GitContractTypes.IERC721Enumerable
  (contractName: 'IERC721Metadata'): GitContractTypes.IERC721Metadata
  (contractName: 'IERC721Receiver'): GitContractTypes.IERC721Receiver
  (contractName: 'IERC777'): GitContractTypes.IERC777
  (contractName: 'IERC777Recipient'): GitContractTypes.IERC777Recipient
  (contractName: 'IERC777Sender'): GitContractTypes.IERC777Sender
  (contractName: 'IFxMessageProcessor'): GitContractTypes.IFxMessageProcessor
  (contractName: 'IGovernor'): GitContractTypes.IGovernor
  (contractName: 'IGovernorCompatibilityBravo'): GitContractTypes.IGovernorCompatibilityBravo
  (contractName: 'IGovernorTimelock'): GitContractTypes.IGovernorTimelock
  (contractName: 'IMessageProvider'): GitContractTypes.IMessageProvider
  (contractName: 'IOutbox'): GitContractTypes.IOutbox
  (contractName: 'IVotes'): GitContractTypes.IVotes
  (contractName: 'LibArbitrumL2'): GitContractTypes.LibArbitrumL2
  (contractName: 'MinimalForwarder'): GitContractTypes.MinimalForwarder
  (contractName: 'Multicall'): GitContractTypes.Multicall
  (contractName: 'PaymentSplitter'): GitContractTypes.PaymentSplitter
  (contractName: 'Proxy'): GitContractTypes.Proxy
  (contractName: 'ProxyAdmin'): GitContractTypes.ProxyAdmin
  (contractName: 'PullPayment'): GitContractTypes.PullPayment
  (contractName: 'RefundEscrow'): GitContractTypes.RefundEscrow
  (contractName: 'TimelockController'): GitContractTypes.TimelockController
  (contractName: 'TokenTimelock'): GitContractTypes.TokenTimelock
  (contractName: 'TransparentUpgradeableProxy'): GitContractTypes.TransparentUpgradeableProxy
  (contractName: 'UpgradeableBeacon'): GitContractTypes.UpgradeableBeacon
  (contractName: 'VestingWallet'): GitContractTypes.VestingWallet
  (contractName: 'Votes'): GitContractTypes.Votes
  (contractName: 'UniswapV2Migrator'): GitContractTypes.UniswapV2Migrator
  (contractName: 'UniswapV2Router01'): GitContractTypes.UniswapV2Router01
}


// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------

export interface HardhatConnectOverloads {
  (
    contractName: 'KeeperCompatibleInterface',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.KeeperCompatibleInterface>
  (
    contractName: 'KeeperBase',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.KeeperBase>
  (
    contractName: 'KeeperCompatible',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.KeeperCompatible>
  (
    contractName: 'CVIOracle',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIOracle>
  (
    contractName: 'ElasticToken',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ElasticToken>
  (
    contractName: 'IUniswapV2Factory',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IUniswapV2Factory>
  (
    contractName: 'IUniswapV2Pair',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IUniswapV2Pair>
  (
    contractName: 'IUniswapV2Router01',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IUniswapV2Router01>
  (
    contractName: 'IUniswapV2Router02',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IUniswapV2Router02>
  (
    contractName: 'WETH9',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.WETH9>
  (
    contractName: 'FeesCalculator',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.FeesCalculator>
  (
    contractName: 'GOVI',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GOVI>
  (
    contractName: 'AggregatorInterface',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.AggregatorInterface>
  (
    contractName: 'AggregatorV2V3Interface',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.AggregatorV2V3Interface>
  (
    contractName: 'AggregatorV3Interface',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.AggregatorV3Interface>
  (
    contractName: 'ICVIOracle',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ICVIOracle>
  (
    contractName: 'IElasticToken',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IElasticToken>
  (
    contractName: 'IFeesCalculator',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IFeesCalculator>
  (
    contractName: 'IFeesCollector',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IFeesCollector>
  (
    contractName: 'IFeesCollectorManagement',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IFeesCollectorManagement>
  (
    contractName: 'IInbox',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IInbox>
  (
    contractName: 'IKeepersFeeVault',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IKeepersFeeVault>
  (
    contractName: 'ILiquidation',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ILiquidation>
  (
    contractName: 'IPlatform',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IPlatform>
  (
    contractName: 'IPlatformHelper',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IPlatformHelper>
  (
    contractName: 'IPositionRewards',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IPositionRewards>
  (
    contractName: 'IRebaser',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IRebaser>
  (
    contractName: 'IRequestFeesCalculator',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IRequestFeesCalculator>
  (
    contractName: 'IRequestFulfiller',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IRequestFulfiller>
  (
    contractName: 'IRequestManager',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IRequestManager>
  (
    contractName: 'IRewardsCollector',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IRewardsCollector>
  (
    contractName: 'IStaking',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IStaking>
  (
    contractName: 'IStakingVault',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IStakingVault>
  (
    contractName: 'IThetaVault',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IThetaVault>
  (
    contractName: 'IThetaVaultInfo',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IThetaVaultInfo>
  (
    contractName: 'ITreasury',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ITreasury>
  (
    contractName: 'IVolatilityToken',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IVolatilityToken>
  (
    contractName: 'IWETH',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IWETH>
  (
    contractName: 'KeepersFeeVault',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.KeepersFeeVault>
  (
    contractName: 'Liquidation',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.Liquidation>
  (
    contractName: 'Platform',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.Platform>
  (
    contractName: 'PlatformHelper',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.PlatformHelper>
  (
    contractName: 'PositionRewards',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.PositionRewards>
  (
    contractName: 'Rebaser',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.Rebaser>
  (
    contractName: 'RequestFeesCalculator',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.RequestFeesCalculator>
  (
    contractName: 'RequestFulfiller',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.RequestFulfiller>
  (
    contractName: 'FeesCollector',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.FeesCollector>
  (
    contractName: 'Staking',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.Staking>
  (
    contractName: 'COTIETHSLPStakingRewards',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.COTIETHSLPStakingRewards>
  (
    contractName: 'COTIETHStakingRewards',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.COTIETHStakingRewards>
  (
    contractName: 'CVOLUSDCLPStakingRewards',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVOLUSDCLPStakingRewards>
  (
    contractName: 'ETHLPStakingRewards',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ETHLPStakingRewards>
  (
    contractName: 'ETHVOL_USDCLPStakingRewards',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ETHVOL_USDCLPStakingRewards>
  (
    contractName: 'ETHVOLUSDCLPStakingRewards',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ETHVOLUSDCLPStakingRewards>
  (
    contractName: 'GOVIETHSLPStakingRewards',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GOVIETHSLPStakingRewards>
  (
    contractName: 'GOVIETHStakingRewards',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GOVIETHStakingRewards>
  (
    contractName: 'USDCLPStakingRewards',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.USDCLPStakingRewards>
  (
    contractName: 'USDTLPStakingRewards',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.USDTLPStakingRewards>
  (
    contractName: 'IStakingRewards',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IStakingRewards>
  (
    contractName: 'Owned',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.Owned>
  (
    contractName: 'Pausable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.Pausable>
  (
    contractName: 'RewardsDistributionRecipient',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.RewardsDistributionRecipient>
  (
    contractName: 'StakingRewards',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.StakingRewards>
  (
    contractName: 'StakingVault',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.StakingVault>
  (
    contractName: 'Treasury',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.Treasury>
  (
    contractName: 'CVIFeedOracle',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIFeedOracle>
  (
    contractName: 'FakeERC20',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.FakeERC20>
  (
    contractName: 'FakePriceProvider',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.FakePriceProvider>
  (
    contractName: 'IERC20',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC20>
  (
    contractName: 'IUniswapV2Callee',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IUniswapV2Callee>
  (
    contractName: 'IUniswapV2ERC20',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IUniswapV2ERC20>
  (
    contractName: 'UniswapV2ERC20',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.UniswapV2ERC20>
  (
    contractName: 'UniswapV2Factory',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.UniswapV2Factory>
  (
    contractName: 'UniswapV2Pair',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.UniswapV2Pair>
  (
    contractName: 'UniswapV2Router02',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.UniswapV2Router02>
  (
    contractName: 'ThetaVault',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ThetaVault>
  (
    contractName: 'ThetaVaultRequestFulfiller',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ThetaVaultRequestFulfiller>
  (
    contractName: 'VolatilityToken',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.VolatilityToken>
  (
    contractName: 'VolTokenRequestFulfiller',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.VolTokenRequestFulfiller>
  (
    contractName: 'BaseController',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.BaseController>
  (
    contractName: 'ILProtectionConfig',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ILProtectionConfig>
  (
    contractName: 'ILProtectionController',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ILProtectionController>
  (
    contractName: 'ILProtectionDiscountNFTController',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ILProtectionDiscountNFTController>
  (
    contractName: 'ILProtectionNFT',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ILProtectionNFT>
  (
    contractName: 'ILiquidityController',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ILiquidityController>
  (
    contractName: 'ILProtectionConfigInterface',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ILProtectionConfigInterface>
  (
    contractName: 'ILProtectionControllerInterface',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ILProtectionControllerInterface>
  (
    contractName: 'ILProtectionDiscountNFTControllerInterface',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ILProtectionDiscountNFTControllerInterface>
  (
    contractName: 'ILProtectionDiscountNFTInterface',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ILProtectionDiscountNFTInterface>
  (
    contractName: 'ILProtectionNFTInterface',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ILProtectionNFTInterface>
  (
    contractName: 'ITokenPairRepository',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ITokenPairRepository>
  (
    contractName: 'ITreasuryController',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ITreasuryController>
  (
    contractName: 'ILUtils',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ILUtils>
  (
    contractName: 'MathUtils',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.MathUtils>
  (
    contractName: 'PremiumCalculator',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.PremiumCalculator>
  (
    contractName: 'LiquidityController',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.LiquidityController>
  (
    contractName: 'ILProtectionDiscountNFT',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ILProtectionDiscountNFT>
  (
    contractName: 'ETHUSDOracle',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ETHUSDOracle>
  (
    contractName: 'LINKUSDOracle',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.LINKUSDOracle>
  (
    contractName: 'USDUSDOracle',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.USDUSDOracle>
  (
    contractName: 'USDC',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.USDC>
  (
    contractName: 'TokenPairRepository',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.TokenPairRepository>
  (
    contractName: 'TreasuryController',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.TreasuryController>
  (
    contractName: 'EsGOVI',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.EsGOVI>
  (
    contractName: 'EsGOVIRewardTrackerDistributor',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.EsGOVIRewardTrackerDistributor>
  (
    contractName: 'GOVIRewardTrackerDistributor',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GOVIRewardTrackerDistributor>
  (
    contractName: 'ThetaVaultRewardTrackerDistributor',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ThetaVaultRewardTrackerDistributor>
  (
    contractName: 'EsGOVIRewardTracker',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.EsGOVIRewardTracker>
  (
    contractName: 'GOVIRewardTracker',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GOVIRewardTracker>
  (
    contractName: 'ThetaVaultRewardTracker',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ThetaVaultRewardTracker>
  (
    contractName: 'GOVIVester',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GOVIVester>
  (
    contractName: 'ThetaVaultVester',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ThetaVaultVester>
  (
    contractName: 'IMintable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IMintable>
  (
    contractName: 'IRewardDistributor',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IRewardDistributor>
  (
    contractName: 'IRewardRouter',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IRewardRouter>
  (
    contractName: 'IRewardTracker',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IRewardTracker>
  (
    contractName: 'IVester',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IVester>
  (
    contractName: 'RewardDistributor',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.RewardDistributor>
  (
    contractName: 'RewardRouter',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.RewardRouter>
  (
    contractName: 'RewardTracker',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.RewardTracker>
  (
    contractName: 'FakeCVIUSDCThetaVault',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.FakeCVIUSDCThetaVault>
  (
    contractName: 'FakeGOVI',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.FakeGOVI>
  (
    contractName: 'Vester',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.Vester>
  (
    contractName: 'AccessControlUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.AccessControlUpgradeable>
  (
    contractName: 'IAccessControlUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IAccessControlUpgradeable>
  (
    contractName: 'OwnableUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.OwnableUpgradeable>
  (
    contractName: 'Initializable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.Initializable>
  (
    contractName: 'ReentrancyGuardUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ReentrancyGuardUpgradeable>
  (
    contractName: 'ERC20Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20Upgradeable>
  (
    contractName: 'IERC20MetadataUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC20MetadataUpgradeable>
  (
    contractName: 'IERC20Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC20Upgradeable>
  (
    contractName: 'ERC721Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC721Upgradeable>
  (
    contractName: 'ERC721EnumerableUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC721EnumerableUpgradeable>
  (
    contractName: 'IERC721EnumerableUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC721EnumerableUpgradeable>
  (
    contractName: 'IERC721MetadataUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC721MetadataUpgradeable>
  (
    contractName: 'IERC721ReceiverUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC721ReceiverUpgradeable>
  (
    contractName: 'IERC721Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC721Upgradeable>
  (
    contractName: 'ContextUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ContextUpgradeable>
  (
    contractName: 'ERC165Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC165Upgradeable>
  (
    contractName: 'IERC165Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC165Upgradeable>
  (
    contractName: 'AccessControl',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.AccessControl>
  (
    contractName: 'IAccessControl',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IAccessControl>
  (
    contractName: 'Ownable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.Ownable>
  (
    contractName: 'ERC20',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20>
  (
    contractName: 'IERC20Metadata',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC20Metadata>
  (
    contractName: 'ERC165',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC165>
  (
    contractName: 'IERC165',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC165>
  (
    contractName: 'CVIDeviationOracle',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIDeviationOracle>
  (
    contractName: 'CVIFakeFeedOracle',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIFakeFeedOracle>
  (
    contractName: 'CVIOracle2X',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIOracle2X>
  (
    contractName: 'ETHVIOracle',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ETHVIOracle>
  (
    contractName: 'CVIUSDCFeesCalculator',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCFeesCalculator>
  (
    contractName: 'CVIUSDCFeesCalculator2X',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCFeesCalculator2X>
  (
    contractName: 'CVIUSDCLiquidation',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCLiquidation>
  (
    contractName: 'CVIUSDCLiquidation2X',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCLiquidation2X>
  (
    contractName: 'CVIUSDCPlatform',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCPlatform>
  (
    contractName: 'CVIUSDCPlatform2X',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCPlatform2X>
  (
    contractName: 'CVIUSDCPositionRewards',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCPositionRewards>
  (
    contractName: 'StakingV2',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.StakingV2>
  (
    contractName: 'CVIUSDCLPStakingRewards',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCLPStakingRewards>
  (
    contractName: 'CVIUSDCThetaVault',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCThetaVault>
  (
    contractName: 'CVIUSDCThetaVault2X',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCThetaVault2X>
  (
    contractName: 'CVIUSDCThetaVaultRequestFulfiller',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller>
  (
    contractName: 'CVIUSDCThetaVaultRequestFulfiller2X',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X>
  (
    contractName: 'WETH',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.WETH>
  (
    contractName: 'CVIUSDCRebaser',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCRebaser>
  (
    contractName: 'CVIUSDCRebaser2X',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCRebaser2X>
  (
    contractName: 'CVIUSDCRequestFeesCalculator',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCRequestFeesCalculator>
  (
    contractName: 'CVIUSDCRequestFeesCalculator2X',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCRequestFeesCalculator2X>
  (
    contractName: 'CVIUSDCVolatilityToken',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCVolatilityToken>
  (
    contractName: 'CVIUSDCVolatilityToken2X',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCVolatilityToken2X>
  (
    contractName: 'CVIUSDCVolTokenRequestFulfiller',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCVolTokenRequestFulfiller>
  (
    contractName: 'CVIUSDCVolTokenRequestFulfiller2X',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X>
  (
    contractName: 'AccessControlCrossChainUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.AccessControlCrossChainUpgradeable>
  (
    contractName: 'AccessControlEnumerableUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.AccessControlEnumerableUpgradeable>
  (
    contractName: 'ConditionalEscrowUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ConditionalEscrowUpgradeable>
  (
    contractName: 'CrossChainEnabledAMBUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CrossChainEnabledAMBUpgradeable>
  (
    contractName: 'CrossChainEnabledArbitrumL1Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable>
  (
    contractName: 'CrossChainEnabledArbitrumL2Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable>
  (
    contractName: 'CrossChainEnabledOptimismUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CrossChainEnabledOptimismUpgradeable>
  (
    contractName: 'CrossChainEnabledPolygonChildUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable>
  (
    contractName: 'CrossChainEnabledUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CrossChainEnabledUpgradeable>
  (
    contractName: 'DoubleEndedQueueUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.DoubleEndedQueueUpgradeable>
  (
    contractName: 'EIP712Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.EIP712Upgradeable>
  (
    contractName: 'ERC1155BurnableUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1155BurnableUpgradeable>
  (
    contractName: 'ERC1155HolderUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1155HolderUpgradeable>
  (
    contractName: 'ERC1155PausableUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1155PausableUpgradeable>
  (
    contractName: 'ERC1155PresetMinterPauserUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1155PresetMinterPauserUpgradeable>
  (
    contractName: 'ERC1155ReceiverUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1155ReceiverUpgradeable>
  (
    contractName: 'ERC1155SupplyUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1155SupplyUpgradeable>
  (
    contractName: 'ERC1155Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1155Upgradeable>
  (
    contractName: 'ERC1155URIStorageUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1155URIStorageUpgradeable>
  (
    contractName: 'ERC165StorageUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC165StorageUpgradeable>
  (
    contractName: 'ERC1820ImplementerUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1820ImplementerUpgradeable>
  (
    contractName: 'ERC1967UpgradeUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1967UpgradeUpgradeable>
  (
    contractName: 'ERC20BurnableUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20BurnableUpgradeable>
  (
    contractName: 'ERC20CappedUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20CappedUpgradeable>
  (
    contractName: 'ERC20FlashMintUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20FlashMintUpgradeable>
  (
    contractName: 'ERC20PausableUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20PausableUpgradeable>
  (
    contractName: 'ERC20PermitUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20PermitUpgradeable>
  (
    contractName: 'ERC20PresetFixedSupplyUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20PresetFixedSupplyUpgradeable>
  (
    contractName: 'ERC20PresetMinterPauserUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20PresetMinterPauserUpgradeable>
  (
    contractName: 'ERC20SnapshotUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20SnapshotUpgradeable>
  (
    contractName: 'ERC20VotesCompUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20VotesCompUpgradeable>
  (
    contractName: 'ERC20VotesUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20VotesUpgradeable>
  (
    contractName: 'ERC20WrapperUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20WrapperUpgradeable>
  (
    contractName: 'ERC2771ContextUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC2771ContextUpgradeable>
  (
    contractName: 'ERC2981Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC2981Upgradeable>
  (
    contractName: 'ERC721BurnableUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC721BurnableUpgradeable>
  (
    contractName: 'ERC721HolderUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC721HolderUpgradeable>
  (
    contractName: 'ERC721PausableUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC721PausableUpgradeable>
  (
    contractName: 'ERC721PresetMinterPauserAutoIdUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable>
  (
    contractName: 'ERC721RoyaltyUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC721RoyaltyUpgradeable>
  (
    contractName: 'ERC721URIStorageUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC721URIStorageUpgradeable>
  (
    contractName: 'ERC721VotesUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC721VotesUpgradeable>
  (
    contractName: 'ERC777PresetFixedSupplyUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC777PresetFixedSupplyUpgradeable>
  (
    contractName: 'ERC777Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC777Upgradeable>
  (
    contractName: 'EscrowUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.EscrowUpgradeable>
  (
    contractName: 'GovernorCompatibilityBravoUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorCompatibilityBravoUpgradeable>
  (
    contractName: 'GovernorCountingSimpleUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorCountingSimpleUpgradeable>
  (
    contractName: 'GovernorPreventLateQuorumUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorPreventLateQuorumUpgradeable>
  (
    contractName: 'GovernorProposalThresholdUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorProposalThresholdUpgradeable>
  (
    contractName: 'GovernorSettingsUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorSettingsUpgradeable>
  (
    contractName: 'GovernorTimelockCompoundUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorTimelockCompoundUpgradeable>
  (
    contractName: 'GovernorTimelockControlUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorTimelockControlUpgradeable>
  (
    contractName: 'GovernorUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorUpgradeable>
  (
    contractName: 'GovernorVotesCompUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorVotesCompUpgradeable>
  (
    contractName: 'GovernorVotesQuorumFractionUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorVotesQuorumFractionUpgradeable>
  (
    contractName: 'GovernorVotesUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorVotesUpgradeable>
  (
    contractName: 'IAccessControlEnumerableUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IAccessControlEnumerableUpgradeable>
  (
    contractName: 'IAMBUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IAMBUpgradeable>
  (
    contractName: 'IArbSysUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IArbSysUpgradeable>
  (
    contractName: 'IBeaconUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IBeaconUpgradeable>
  (
    contractName: 'IBridgeUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IBridgeUpgradeable>
  (
    contractName: 'ICompoundTimelockUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ICompoundTimelockUpgradeable>
  (
    contractName: 'ICrossDomainMessengerUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ICrossDomainMessengerUpgradeable>
  (
    contractName: 'IERC1155MetadataURIUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1155MetadataURIUpgradeable>
  (
    contractName: 'IERC1155ReceiverUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1155ReceiverUpgradeable>
  (
    contractName: 'IERC1155Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1155Upgradeable>
  (
    contractName: 'IERC1271Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1271Upgradeable>
  (
    contractName: 'IERC1363ReceiverUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1363ReceiverUpgradeable>
  (
    contractName: 'IERC1363SpenderUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1363SpenderUpgradeable>
  (
    contractName: 'IERC1363Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1363Upgradeable>
  (
    contractName: 'IERC1820ImplementerUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1820ImplementerUpgradeable>
  (
    contractName: 'IERC1820RegistryUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1820RegistryUpgradeable>
  (
    contractName: 'IERC1822ProxiableUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1822ProxiableUpgradeable>
  (
    contractName: 'IERC20PermitUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC20PermitUpgradeable>
  (
    contractName: 'IERC2612Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC2612Upgradeable>
  (
    contractName: 'IERC2981Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC2981Upgradeable>
  (
    contractName: 'IERC3156FlashBorrowerUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC3156FlashBorrowerUpgradeable>
  (
    contractName: 'IERC3156FlashLenderUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC3156FlashLenderUpgradeable>
  (
    contractName: 'IERC777RecipientUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC777RecipientUpgradeable>
  (
    contractName: 'IERC777SenderUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC777SenderUpgradeable>
  (
    contractName: 'IERC777Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC777Upgradeable>
  (
    contractName: 'IFxMessageProcessorUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IFxMessageProcessorUpgradeable>
  (
    contractName: 'IGovernorCompatibilityBravoUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IGovernorCompatibilityBravoUpgradeable>
  (
    contractName: 'IGovernorTimelockUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IGovernorTimelockUpgradeable>
  (
    contractName: 'IGovernorUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IGovernorUpgradeable>
  (
    contractName: 'IInboxUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IInboxUpgradeable>
  (
    contractName: 'IMessageProviderUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IMessageProviderUpgradeable>
  (
    contractName: 'IOutboxUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IOutboxUpgradeable>
  (
    contractName: 'IVotesUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IVotesUpgradeable>
  (
    contractName: 'LibArbitrumL2Upgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.LibArbitrumL2Upgradeable>
  (
    contractName: 'MinimalForwarderUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.MinimalForwarderUpgradeable>
  (
    contractName: 'MulticallUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.MulticallUpgradeable>
  (
    contractName: 'PausableUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.PausableUpgradeable>
  (
    contractName: 'PaymentSplitterUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.PaymentSplitterUpgradeable>
  (
    contractName: 'PullPaymentUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.PullPaymentUpgradeable>
  (
    contractName: 'RefundEscrowUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.RefundEscrowUpgradeable>
  (
    contractName: 'TimelockControllerUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.TimelockControllerUpgradeable>
  (
    contractName: 'TimelockControllerWith46MigrationUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.TimelockControllerWith46MigrationUpgradeable>
  (
    contractName: 'TokenTimelockUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.TokenTimelockUpgradeable>
  (
    contractName: 'UUPSUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.UUPSUpgradeable>
  (
    contractName: 'VestingWalletUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.VestingWalletUpgradeable>
  (
    contractName: 'VotesUpgradeable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.VotesUpgradeable>
  (
    contractName: 'AccessControlCrossChain',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.AccessControlCrossChain>
  (
    contractName: 'AccessControlEnumerable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.AccessControlEnumerable>
  (
    contractName: 'BeaconProxy',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.BeaconProxy>
  (
    contractName: 'ConditionalEscrow',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ConditionalEscrow>
  (
    contractName: 'CrossChainEnabledAMB',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CrossChainEnabledAMB>
  (
    contractName: 'CrossChainEnabledPolygonChild',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.CrossChainEnabledPolygonChild>
  (
    contractName: 'DoubleEndedQueue',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.DoubleEndedQueue>
  (
    contractName: 'ERC1155',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1155>
  (
    contractName: 'ERC1155Burnable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1155Burnable>
  (
    contractName: 'ERC1155Holder',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1155Holder>
  (
    contractName: 'ERC1155Pausable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1155Pausable>
  (
    contractName: 'ERC1155PresetMinterPauser',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1155PresetMinterPauser>
  (
    contractName: 'ERC1155Receiver',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1155Receiver>
  (
    contractName: 'ERC1155Supply',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1155Supply>
  (
    contractName: 'ERC1155URIStorage',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1155URIStorage>
  (
    contractName: 'ERC165Storage',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC165Storage>
  (
    contractName: 'ERC1820Implementer',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1820Implementer>
  (
    contractName: 'ERC1967Proxy',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1967Proxy>
  (
    contractName: 'ERC1967Upgrade',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC1967Upgrade>
  (
    contractName: 'ERC20Burnable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20Burnable>
  (
    contractName: 'ERC20Capped',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20Capped>
  (
    contractName: 'ERC20FlashMint',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20FlashMint>
  (
    contractName: 'ERC20Pausable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20Pausable>
  (
    contractName: 'ERC20Permit',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20Permit>
  (
    contractName: 'ERC20PresetFixedSupply',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20PresetFixedSupply>
  (
    contractName: 'ERC20PresetMinterPauser',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20PresetMinterPauser>
  (
    contractName: 'ERC20Snapshot',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20Snapshot>
  (
    contractName: 'ERC20Votes',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20Votes>
  (
    contractName: 'ERC20VotesComp',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20VotesComp>
  (
    contractName: 'ERC20Wrapper',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC20Wrapper>
  (
    contractName: 'ERC2771Context',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC2771Context>
  (
    contractName: 'ERC2981',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC2981>
  (
    contractName: 'ERC721',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC721>
  (
    contractName: 'ERC721Burnable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC721Burnable>
  (
    contractName: 'ERC721Enumerable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC721Enumerable>
  (
    contractName: 'ERC721Holder',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC721Holder>
  (
    contractName: 'ERC721Pausable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC721Pausable>
  (
    contractName: 'ERC721PresetMinterPauserAutoId',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC721PresetMinterPauserAutoId>
  (
    contractName: 'ERC721Royalty',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC721Royalty>
  (
    contractName: 'ERC721URIStorage',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC721URIStorage>
  (
    contractName: 'ERC721Votes',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC721Votes>
  (
    contractName: 'ERC777',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC777>
  (
    contractName: 'ERC777PresetFixedSupply',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ERC777PresetFixedSupply>
  (
    contractName: 'Escrow',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.Escrow>
  (
    contractName: 'Governor',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.Governor>
  (
    contractName: 'GovernorCompatibilityBravo',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorCompatibilityBravo>
  (
    contractName: 'GovernorCountingSimple',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorCountingSimple>
  (
    contractName: 'GovernorPreventLateQuorum',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorPreventLateQuorum>
  (
    contractName: 'GovernorProposalThreshold',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorProposalThreshold>
  (
    contractName: 'GovernorSettings',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorSettings>
  (
    contractName: 'GovernorTimelockCompound',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorTimelockCompound>
  (
    contractName: 'GovernorTimelockControl',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorTimelockControl>
  (
    contractName: 'GovernorVotes',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorVotes>
  (
    contractName: 'GovernorVotesComp',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorVotesComp>
  (
    contractName: 'GovernorVotesQuorumFraction',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.GovernorVotesQuorumFraction>
  (
    contractName: 'IAccessControlEnumerable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IAccessControlEnumerable>
  (
    contractName: 'IAMB',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IAMB>
  (
    contractName: 'IArbSys',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IArbSys>
  (
    contractName: 'IBeacon',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IBeacon>
  (
    contractName: 'IBridge',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IBridge>
  (
    contractName: 'ICompoundTimelock',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ICompoundTimelock>
  (
    contractName: 'ICrossDomainMessenger',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ICrossDomainMessenger>
  (
    contractName: 'IERC1155',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1155>
  (
    contractName: 'IERC1155MetadataURI',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1155MetadataURI>
  (
    contractName: 'IERC1155Receiver',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1155Receiver>
  (
    contractName: 'IERC1271',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1271>
  (
    contractName: 'IERC1363',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1363>
  (
    contractName: 'IERC1363Receiver',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1363Receiver>
  (
    contractName: 'IERC1363Spender',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1363Spender>
  (
    contractName: 'IERC1820Implementer',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1820Implementer>
  (
    contractName: 'IERC1820Registry',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1820Registry>
  (
    contractName: 'IERC1822Proxiable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC1822Proxiable>
  (
    contractName: 'IERC20Permit',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC20Permit>
  (
    contractName: 'IERC2612',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC2612>
  (
    contractName: 'IERC2981',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC2981>
  (
    contractName: 'IERC3156FlashBorrower',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC3156FlashBorrower>
  (
    contractName: 'IERC3156FlashLender',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC3156FlashLender>
  (
    contractName: 'IERC721',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC721>
  (
    contractName: 'IERC721Enumerable',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC721Enumerable>
  (
    contractName: 'IERC721Metadata',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC721Metadata>
  (
    contractName: 'IERC721Receiver',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC721Receiver>
  (
    contractName: 'IERC777',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC777>
  (
    contractName: 'IERC777Recipient',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC777Recipient>
  (
    contractName: 'IERC777Sender',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IERC777Sender>
  (
    contractName: 'IFxMessageProcessor',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IFxMessageProcessor>
  (
    contractName: 'IGovernor',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IGovernor>
  (
    contractName: 'IGovernorCompatibilityBravo',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IGovernorCompatibilityBravo>
  (
    contractName: 'IGovernorTimelock',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IGovernorTimelock>
  (
    contractName: 'IMessageProvider',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IMessageProvider>
  (
    contractName: 'IOutbox',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IOutbox>
  (
    contractName: 'IVotes',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.IVotes>
  (
    contractName: 'LibArbitrumL2',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.LibArbitrumL2>
  (
    contractName: 'MinimalForwarder',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.MinimalForwarder>
  (
    contractName: 'Multicall',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.Multicall>
  (
    contractName: 'PaymentSplitter',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.PaymentSplitter>
  (
    contractName: 'Proxy',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.Proxy>
  (
    contractName: 'ProxyAdmin',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.ProxyAdmin>
  (
    contractName: 'PullPayment',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.PullPayment>
  (
    contractName: 'RefundEscrow',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.RefundEscrow>
  (
    contractName: 'TimelockController',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.TimelockController>
  (
    contractName: 'TokenTimelock',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.TokenTimelock>
  (
    contractName: 'TransparentUpgradeableProxy',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.TransparentUpgradeableProxy>
  (
    contractName: 'UpgradeableBeacon',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.UpgradeableBeacon>
  (
    contractName: 'VestingWallet',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.VestingWallet>
  (
    contractName: 'Votes',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.Votes>
  (
    contractName: 'UniswapV2Migrator',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.UniswapV2Migrator>
  (
    contractName: 'UniswapV2Router01',
    options?: { overrideSignerAddress?: string; overrideContractAddress?: string },
  ): Promise<GitContractTypes.UniswapV2Router01>
}


// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------

export interface HardhatExecuteOverloads {
  <
      M extends keyof GitContractTypes.KeeperCompatibleInterface['functions'],
      Args extends Head<GitContractTypes.KeeperCompatibleInterface['functions'][M]>,
    >(
      contract: 'KeeperCompatibleInterface',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.KeeperBase['functions'],
      Args extends Head<GitContractTypes.KeeperBase['functions'][M]>,
    >(
      contract: 'KeeperBase',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.KeeperCompatible['functions'],
      Args extends Head<GitContractTypes.KeeperCompatible['functions'][M]>,
    >(
      contract: 'KeeperCompatible',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIOracle['functions'],
      Args extends Head<GitContractTypes.CVIOracle['functions'][M]>,
    >(
      contract: 'CVIOracle',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ElasticToken['functions'],
      Args extends Head<GitContractTypes.ElasticToken['functions'][M]>,
    >(
      contract: 'ElasticToken',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IUniswapV2Factory['functions'],
      Args extends Head<GitContractTypes.IUniswapV2Factory['functions'][M]>,
    >(
      contract: 'IUniswapV2Factory',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IUniswapV2Pair['functions'],
      Args extends Head<GitContractTypes.IUniswapV2Pair['functions'][M]>,
    >(
      contract: 'IUniswapV2Pair',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IUniswapV2Router01['functions'],
      Args extends Head<GitContractTypes.IUniswapV2Router01['functions'][M]>,
    >(
      contract: 'IUniswapV2Router01',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IUniswapV2Router02['functions'],
      Args extends Head<GitContractTypes.IUniswapV2Router02['functions'][M]>,
    >(
      contract: 'IUniswapV2Router02',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.WETH9['functions'],
      Args extends Head<GitContractTypes.WETH9['functions'][M]>,
    >(
      contract: 'WETH9',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.FeesCalculator['functions'],
      Args extends Head<GitContractTypes.FeesCalculator['functions'][M]>,
    >(
      contract: 'FeesCalculator',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GOVI['functions'],
      Args extends Head<GitContractTypes.GOVI['functions'][M]>,
    >(
      contract: 'GOVI',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.AggregatorInterface['functions'],
      Args extends Head<GitContractTypes.AggregatorInterface['functions'][M]>,
    >(
      contract: 'AggregatorInterface',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.AggregatorV2V3Interface['functions'],
      Args extends Head<GitContractTypes.AggregatorV2V3Interface['functions'][M]>,
    >(
      contract: 'AggregatorV2V3Interface',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.AggregatorV3Interface['functions'],
      Args extends Head<GitContractTypes.AggregatorV3Interface['functions'][M]>,
    >(
      contract: 'AggregatorV3Interface',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ICVIOracle['functions'],
      Args extends Head<GitContractTypes.ICVIOracle['functions'][M]>,
    >(
      contract: 'ICVIOracle',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IElasticToken['functions'],
      Args extends Head<GitContractTypes.IElasticToken['functions'][M]>,
    >(
      contract: 'IElasticToken',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IFeesCalculator['functions'],
      Args extends Head<GitContractTypes.IFeesCalculator['functions'][M]>,
    >(
      contract: 'IFeesCalculator',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IFeesCollector['functions'],
      Args extends Head<GitContractTypes.IFeesCollector['functions'][M]>,
    >(
      contract: 'IFeesCollector',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IFeesCollectorManagement['functions'],
      Args extends Head<GitContractTypes.IFeesCollectorManagement['functions'][M]>,
    >(
      contract: 'IFeesCollectorManagement',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IInbox['functions'],
      Args extends Head<GitContractTypes.IInbox['functions'][M]>,
    >(
      contract: 'IInbox',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IKeepersFeeVault['functions'],
      Args extends Head<GitContractTypes.IKeepersFeeVault['functions'][M]>,
    >(
      contract: 'IKeepersFeeVault',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILiquidation['functions'],
      Args extends Head<GitContractTypes.ILiquidation['functions'][M]>,
    >(
      contract: 'ILiquidation',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IPlatform['functions'],
      Args extends Head<GitContractTypes.IPlatform['functions'][M]>,
    >(
      contract: 'IPlatform',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IPlatformHelper['functions'],
      Args extends Head<GitContractTypes.IPlatformHelper['functions'][M]>,
    >(
      contract: 'IPlatformHelper',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IPositionRewards['functions'],
      Args extends Head<GitContractTypes.IPositionRewards['functions'][M]>,
    >(
      contract: 'IPositionRewards',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IRebaser['functions'],
      Args extends Head<GitContractTypes.IRebaser['functions'][M]>,
    >(
      contract: 'IRebaser',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IRequestFeesCalculator['functions'],
      Args extends Head<GitContractTypes.IRequestFeesCalculator['functions'][M]>,
    >(
      contract: 'IRequestFeesCalculator',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IRequestFulfiller['functions'],
      Args extends Head<GitContractTypes.IRequestFulfiller['functions'][M]>,
    >(
      contract: 'IRequestFulfiller',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IRequestManager['functions'],
      Args extends Head<GitContractTypes.IRequestManager['functions'][M]>,
    >(
      contract: 'IRequestManager',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IRewardsCollector['functions'],
      Args extends Head<GitContractTypes.IRewardsCollector['functions'][M]>,
    >(
      contract: 'IRewardsCollector',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IStaking['functions'],
      Args extends Head<GitContractTypes.IStaking['functions'][M]>,
    >(
      contract: 'IStaking',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IStakingVault['functions'],
      Args extends Head<GitContractTypes.IStakingVault['functions'][M]>,
    >(
      contract: 'IStakingVault',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IThetaVault['functions'],
      Args extends Head<GitContractTypes.IThetaVault['functions'][M]>,
    >(
      contract: 'IThetaVault',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IThetaVaultInfo['functions'],
      Args extends Head<GitContractTypes.IThetaVaultInfo['functions'][M]>,
    >(
      contract: 'IThetaVaultInfo',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ITreasury['functions'],
      Args extends Head<GitContractTypes.ITreasury['functions'][M]>,
    >(
      contract: 'ITreasury',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IVolatilityToken['functions'],
      Args extends Head<GitContractTypes.IVolatilityToken['functions'][M]>,
    >(
      contract: 'IVolatilityToken',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IWETH['functions'],
      Args extends Head<GitContractTypes.IWETH['functions'][M]>,
    >(
      contract: 'IWETH',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.KeepersFeeVault['functions'],
      Args extends Head<GitContractTypes.KeepersFeeVault['functions'][M]>,
    >(
      contract: 'KeepersFeeVault',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Liquidation['functions'],
      Args extends Head<GitContractTypes.Liquidation['functions'][M]>,
    >(
      contract: 'Liquidation',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Platform['functions'],
      Args extends Head<GitContractTypes.Platform['functions'][M]>,
    >(
      contract: 'Platform',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.PlatformHelper['functions'],
      Args extends Head<GitContractTypes.PlatformHelper['functions'][M]>,
    >(
      contract: 'PlatformHelper',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.PositionRewards['functions'],
      Args extends Head<GitContractTypes.PositionRewards['functions'][M]>,
    >(
      contract: 'PositionRewards',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Rebaser['functions'],
      Args extends Head<GitContractTypes.Rebaser['functions'][M]>,
    >(
      contract: 'Rebaser',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.RequestFeesCalculator['functions'],
      Args extends Head<GitContractTypes.RequestFeesCalculator['functions'][M]>,
    >(
      contract: 'RequestFeesCalculator',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.RequestFulfiller['functions'],
      Args extends Head<GitContractTypes.RequestFulfiller['functions'][M]>,
    >(
      contract: 'RequestFulfiller',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.FeesCollector['functions'],
      Args extends Head<GitContractTypes.FeesCollector['functions'][M]>,
    >(
      contract: 'FeesCollector',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Staking['functions'],
      Args extends Head<GitContractTypes.Staking['functions'][M]>,
    >(
      contract: 'Staking',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.COTIETHSLPStakingRewards['functions'],
      Args extends Head<GitContractTypes.COTIETHSLPStakingRewards['functions'][M]>,
    >(
      contract: 'COTIETHSLPStakingRewards',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.COTIETHStakingRewards['functions'],
      Args extends Head<GitContractTypes.COTIETHStakingRewards['functions'][M]>,
    >(
      contract: 'COTIETHStakingRewards',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVOLUSDCLPStakingRewards['functions'],
      Args extends Head<GitContractTypes.CVOLUSDCLPStakingRewards['functions'][M]>,
    >(
      contract: 'CVOLUSDCLPStakingRewards',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ETHLPStakingRewards['functions'],
      Args extends Head<GitContractTypes.ETHLPStakingRewards['functions'][M]>,
    >(
      contract: 'ETHLPStakingRewards',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ETHVOL_USDCLPStakingRewards['functions'],
      Args extends Head<GitContractTypes.ETHVOL_USDCLPStakingRewards['functions'][M]>,
    >(
      contract: 'ETHVOL_USDCLPStakingRewards',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ETHVOLUSDCLPStakingRewards['functions'],
      Args extends Head<GitContractTypes.ETHVOLUSDCLPStakingRewards['functions'][M]>,
    >(
      contract: 'ETHVOLUSDCLPStakingRewards',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GOVIETHSLPStakingRewards['functions'],
      Args extends Head<GitContractTypes.GOVIETHSLPStakingRewards['functions'][M]>,
    >(
      contract: 'GOVIETHSLPStakingRewards',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GOVIETHStakingRewards['functions'],
      Args extends Head<GitContractTypes.GOVIETHStakingRewards['functions'][M]>,
    >(
      contract: 'GOVIETHStakingRewards',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.USDCLPStakingRewards['functions'],
      Args extends Head<GitContractTypes.USDCLPStakingRewards['functions'][M]>,
    >(
      contract: 'USDCLPStakingRewards',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.USDTLPStakingRewards['functions'],
      Args extends Head<GitContractTypes.USDTLPStakingRewards['functions'][M]>,
    >(
      contract: 'USDTLPStakingRewards',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IStakingRewards['functions'],
      Args extends Head<GitContractTypes.IStakingRewards['functions'][M]>,
    >(
      contract: 'IStakingRewards',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Owned['functions'],
      Args extends Head<GitContractTypes.Owned['functions'][M]>,
    >(
      contract: 'Owned',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Pausable['functions'],
      Args extends Head<GitContractTypes.Pausable['functions'][M]>,
    >(
      contract: 'Pausable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.RewardsDistributionRecipient['functions'],
      Args extends Head<GitContractTypes.RewardsDistributionRecipient['functions'][M]>,
    >(
      contract: 'RewardsDistributionRecipient',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.StakingRewards['functions'],
      Args extends Head<GitContractTypes.StakingRewards['functions'][M]>,
    >(
      contract: 'StakingRewards',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.StakingVault['functions'],
      Args extends Head<GitContractTypes.StakingVault['functions'][M]>,
    >(
      contract: 'StakingVault',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Treasury['functions'],
      Args extends Head<GitContractTypes.Treasury['functions'][M]>,
    >(
      contract: 'Treasury',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIFeedOracle['functions'],
      Args extends Head<GitContractTypes.CVIFeedOracle['functions'][M]>,
    >(
      contract: 'CVIFeedOracle',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.FakeERC20['functions'],
      Args extends Head<GitContractTypes.FakeERC20['functions'][M]>,
    >(
      contract: 'FakeERC20',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.FakePriceProvider['functions'],
      Args extends Head<GitContractTypes.FakePriceProvider['functions'][M]>,
    >(
      contract: 'FakePriceProvider',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC20['functions'],
      Args extends Head<GitContractTypes.IERC20['functions'][M]>,
    >(
      contract: 'IERC20',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IUniswapV2Callee['functions'],
      Args extends Head<GitContractTypes.IUniswapV2Callee['functions'][M]>,
    >(
      contract: 'IUniswapV2Callee',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IUniswapV2ERC20['functions'],
      Args extends Head<GitContractTypes.IUniswapV2ERC20['functions'][M]>,
    >(
      contract: 'IUniswapV2ERC20',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.UniswapV2ERC20['functions'],
      Args extends Head<GitContractTypes.UniswapV2ERC20['functions'][M]>,
    >(
      contract: 'UniswapV2ERC20',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.UniswapV2Factory['functions'],
      Args extends Head<GitContractTypes.UniswapV2Factory['functions'][M]>,
    >(
      contract: 'UniswapV2Factory',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.UniswapV2Pair['functions'],
      Args extends Head<GitContractTypes.UniswapV2Pair['functions'][M]>,
    >(
      contract: 'UniswapV2Pair',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.UniswapV2Router02['functions'],
      Args extends Head<GitContractTypes.UniswapV2Router02['functions'][M]>,
    >(
      contract: 'UniswapV2Router02',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ThetaVault['functions'],
      Args extends Head<GitContractTypes.ThetaVault['functions'][M]>,
    >(
      contract: 'ThetaVault',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ThetaVaultRequestFulfiller['functions'],
      Args extends Head<GitContractTypes.ThetaVaultRequestFulfiller['functions'][M]>,
    >(
      contract: 'ThetaVaultRequestFulfiller',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.VolatilityToken['functions'],
      Args extends Head<GitContractTypes.VolatilityToken['functions'][M]>,
    >(
      contract: 'VolatilityToken',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.VolTokenRequestFulfiller['functions'],
      Args extends Head<GitContractTypes.VolTokenRequestFulfiller['functions'][M]>,
    >(
      contract: 'VolTokenRequestFulfiller',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.BaseController['functions'],
      Args extends Head<GitContractTypes.BaseController['functions'][M]>,
    >(
      contract: 'BaseController',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionConfig['functions'],
      Args extends Head<GitContractTypes.ILProtectionConfig['functions'][M]>,
    >(
      contract: 'ILProtectionConfig',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionController['functions'],
      Args extends Head<GitContractTypes.ILProtectionController['functions'][M]>,
    >(
      contract: 'ILProtectionController',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionDiscountNFTController['functions'],
      Args extends Head<GitContractTypes.ILProtectionDiscountNFTController['functions'][M]>,
    >(
      contract: 'ILProtectionDiscountNFTController',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionNFT['functions'],
      Args extends Head<GitContractTypes.ILProtectionNFT['functions'][M]>,
    >(
      contract: 'ILProtectionNFT',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILiquidityController['functions'],
      Args extends Head<GitContractTypes.ILiquidityController['functions'][M]>,
    >(
      contract: 'ILiquidityController',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionConfigInterface['functions'],
      Args extends Head<GitContractTypes.ILProtectionConfigInterface['functions'][M]>,
    >(
      contract: 'ILProtectionConfigInterface',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionControllerInterface['functions'],
      Args extends Head<GitContractTypes.ILProtectionControllerInterface['functions'][M]>,
    >(
      contract: 'ILProtectionControllerInterface',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionDiscountNFTControllerInterface['functions'],
      Args extends Head<GitContractTypes.ILProtectionDiscountNFTControllerInterface['functions'][M]>,
    >(
      contract: 'ILProtectionDiscountNFTControllerInterface',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionDiscountNFTInterface['functions'],
      Args extends Head<GitContractTypes.ILProtectionDiscountNFTInterface['functions'][M]>,
    >(
      contract: 'ILProtectionDiscountNFTInterface',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionNFTInterface['functions'],
      Args extends Head<GitContractTypes.ILProtectionNFTInterface['functions'][M]>,
    >(
      contract: 'ILProtectionNFTInterface',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ITokenPairRepository['functions'],
      Args extends Head<GitContractTypes.ITokenPairRepository['functions'][M]>,
    >(
      contract: 'ITokenPairRepository',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ITreasuryController['functions'],
      Args extends Head<GitContractTypes.ITreasuryController['functions'][M]>,
    >(
      contract: 'ITreasuryController',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILUtils['functions'],
      Args extends Head<GitContractTypes.ILUtils['functions'][M]>,
    >(
      contract: 'ILUtils',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.MathUtils['functions'],
      Args extends Head<GitContractTypes.MathUtils['functions'][M]>,
    >(
      contract: 'MathUtils',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.PremiumCalculator['functions'],
      Args extends Head<GitContractTypes.PremiumCalculator['functions'][M]>,
    >(
      contract: 'PremiumCalculator',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.LiquidityController['functions'],
      Args extends Head<GitContractTypes.LiquidityController['functions'][M]>,
    >(
      contract: 'LiquidityController',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionDiscountNFT['functions'],
      Args extends Head<GitContractTypes.ILProtectionDiscountNFT['functions'][M]>,
    >(
      contract: 'ILProtectionDiscountNFT',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ETHUSDOracle['functions'],
      Args extends Head<GitContractTypes.ETHUSDOracle['functions'][M]>,
    >(
      contract: 'ETHUSDOracle',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.LINKUSDOracle['functions'],
      Args extends Head<GitContractTypes.LINKUSDOracle['functions'][M]>,
    >(
      contract: 'LINKUSDOracle',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.USDUSDOracle['functions'],
      Args extends Head<GitContractTypes.USDUSDOracle['functions'][M]>,
    >(
      contract: 'USDUSDOracle',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.USDC['functions'],
      Args extends Head<GitContractTypes.USDC['functions'][M]>,
    >(
      contract: 'USDC',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.TokenPairRepository['functions'],
      Args extends Head<GitContractTypes.TokenPairRepository['functions'][M]>,
    >(
      contract: 'TokenPairRepository',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.TreasuryController['functions'],
      Args extends Head<GitContractTypes.TreasuryController['functions'][M]>,
    >(
      contract: 'TreasuryController',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.EsGOVI['functions'],
      Args extends Head<GitContractTypes.EsGOVI['functions'][M]>,
    >(
      contract: 'EsGOVI',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.EsGOVIRewardTrackerDistributor['functions'],
      Args extends Head<GitContractTypes.EsGOVIRewardTrackerDistributor['functions'][M]>,
    >(
      contract: 'EsGOVIRewardTrackerDistributor',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GOVIRewardTrackerDistributor['functions'],
      Args extends Head<GitContractTypes.GOVIRewardTrackerDistributor['functions'][M]>,
    >(
      contract: 'GOVIRewardTrackerDistributor',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ThetaVaultRewardTrackerDistributor['functions'],
      Args extends Head<GitContractTypes.ThetaVaultRewardTrackerDistributor['functions'][M]>,
    >(
      contract: 'ThetaVaultRewardTrackerDistributor',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.EsGOVIRewardTracker['functions'],
      Args extends Head<GitContractTypes.EsGOVIRewardTracker['functions'][M]>,
    >(
      contract: 'EsGOVIRewardTracker',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GOVIRewardTracker['functions'],
      Args extends Head<GitContractTypes.GOVIRewardTracker['functions'][M]>,
    >(
      contract: 'GOVIRewardTracker',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ThetaVaultRewardTracker['functions'],
      Args extends Head<GitContractTypes.ThetaVaultRewardTracker['functions'][M]>,
    >(
      contract: 'ThetaVaultRewardTracker',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GOVIVester['functions'],
      Args extends Head<GitContractTypes.GOVIVester['functions'][M]>,
    >(
      contract: 'GOVIVester',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ThetaVaultVester['functions'],
      Args extends Head<GitContractTypes.ThetaVaultVester['functions'][M]>,
    >(
      contract: 'ThetaVaultVester',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IMintable['functions'],
      Args extends Head<GitContractTypes.IMintable['functions'][M]>,
    >(
      contract: 'IMintable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IRewardDistributor['functions'],
      Args extends Head<GitContractTypes.IRewardDistributor['functions'][M]>,
    >(
      contract: 'IRewardDistributor',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IRewardRouter['functions'],
      Args extends Head<GitContractTypes.IRewardRouter['functions'][M]>,
    >(
      contract: 'IRewardRouter',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IRewardTracker['functions'],
      Args extends Head<GitContractTypes.IRewardTracker['functions'][M]>,
    >(
      contract: 'IRewardTracker',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IVester['functions'],
      Args extends Head<GitContractTypes.IVester['functions'][M]>,
    >(
      contract: 'IVester',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.RewardDistributor['functions'],
      Args extends Head<GitContractTypes.RewardDistributor['functions'][M]>,
    >(
      contract: 'RewardDistributor',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.RewardRouter['functions'],
      Args extends Head<GitContractTypes.RewardRouter['functions'][M]>,
    >(
      contract: 'RewardRouter',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.RewardTracker['functions'],
      Args extends Head<GitContractTypes.RewardTracker['functions'][M]>,
    >(
      contract: 'RewardTracker',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.FakeCVIUSDCThetaVault['functions'],
      Args extends Head<GitContractTypes.FakeCVIUSDCThetaVault['functions'][M]>,
    >(
      contract: 'FakeCVIUSDCThetaVault',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.FakeGOVI['functions'],
      Args extends Head<GitContractTypes.FakeGOVI['functions'][M]>,
    >(
      contract: 'FakeGOVI',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Vester['functions'],
      Args extends Head<GitContractTypes.Vester['functions'][M]>,
    >(
      contract: 'Vester',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.AccessControlUpgradeable['functions'],
      Args extends Head<GitContractTypes.AccessControlUpgradeable['functions'][M]>,
    >(
      contract: 'AccessControlUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IAccessControlUpgradeable['functions'],
      Args extends Head<GitContractTypes.IAccessControlUpgradeable['functions'][M]>,
    >(
      contract: 'IAccessControlUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.OwnableUpgradeable['functions'],
      Args extends Head<GitContractTypes.OwnableUpgradeable['functions'][M]>,
    >(
      contract: 'OwnableUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Initializable['functions'],
      Args extends Head<GitContractTypes.Initializable['functions'][M]>,
    >(
      contract: 'Initializable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ReentrancyGuardUpgradeable['functions'],
      Args extends Head<GitContractTypes.ReentrancyGuardUpgradeable['functions'][M]>,
    >(
      contract: 'ReentrancyGuardUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20Upgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20Upgradeable['functions'][M]>,
    >(
      contract: 'ERC20Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC20MetadataUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC20MetadataUpgradeable['functions'][M]>,
    >(
      contract: 'IERC20MetadataUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC20Upgradeable['functions'],
      Args extends Head<GitContractTypes.IERC20Upgradeable['functions'][M]>,
    >(
      contract: 'IERC20Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721Upgradeable['functions'],
      Args extends Head<GitContractTypes.ERC721Upgradeable['functions'][M]>,
    >(
      contract: 'ERC721Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721EnumerableUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC721EnumerableUpgradeable['functions'][M]>,
    >(
      contract: 'ERC721EnumerableUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC721EnumerableUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC721EnumerableUpgradeable['functions'][M]>,
    >(
      contract: 'IERC721EnumerableUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC721MetadataUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC721MetadataUpgradeable['functions'][M]>,
    >(
      contract: 'IERC721MetadataUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC721ReceiverUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC721ReceiverUpgradeable['functions'][M]>,
    >(
      contract: 'IERC721ReceiverUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC721Upgradeable['functions'],
      Args extends Head<GitContractTypes.IERC721Upgradeable['functions'][M]>,
    >(
      contract: 'IERC721Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ContextUpgradeable['functions'],
      Args extends Head<GitContractTypes.ContextUpgradeable['functions'][M]>,
    >(
      contract: 'ContextUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC165Upgradeable['functions'],
      Args extends Head<GitContractTypes.ERC165Upgradeable['functions'][M]>,
    >(
      contract: 'ERC165Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC165Upgradeable['functions'],
      Args extends Head<GitContractTypes.IERC165Upgradeable['functions'][M]>,
    >(
      contract: 'IERC165Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.AccessControl['functions'],
      Args extends Head<GitContractTypes.AccessControl['functions'][M]>,
    >(
      contract: 'AccessControl',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IAccessControl['functions'],
      Args extends Head<GitContractTypes.IAccessControl['functions'][M]>,
    >(
      contract: 'IAccessControl',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Ownable['functions'],
      Args extends Head<GitContractTypes.Ownable['functions'][M]>,
    >(
      contract: 'Ownable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20['functions'],
      Args extends Head<GitContractTypes.ERC20['functions'][M]>,
    >(
      contract: 'ERC20',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC20Metadata['functions'],
      Args extends Head<GitContractTypes.IERC20Metadata['functions'][M]>,
    >(
      contract: 'IERC20Metadata',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC165['functions'],
      Args extends Head<GitContractTypes.ERC165['functions'][M]>,
    >(
      contract: 'ERC165',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC165['functions'],
      Args extends Head<GitContractTypes.IERC165['functions'][M]>,
    >(
      contract: 'IERC165',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIDeviationOracle['functions'],
      Args extends Head<GitContractTypes.CVIDeviationOracle['functions'][M]>,
    >(
      contract: 'CVIDeviationOracle',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIFakeFeedOracle['functions'],
      Args extends Head<GitContractTypes.CVIFakeFeedOracle['functions'][M]>,
    >(
      contract: 'CVIFakeFeedOracle',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIOracle2X['functions'],
      Args extends Head<GitContractTypes.CVIOracle2X['functions'][M]>,
    >(
      contract: 'CVIOracle2X',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ETHVIOracle['functions'],
      Args extends Head<GitContractTypes.ETHVIOracle['functions'][M]>,
    >(
      contract: 'ETHVIOracle',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCFeesCalculator['functions'],
      Args extends Head<GitContractTypes.CVIUSDCFeesCalculator['functions'][M]>,
    >(
      contract: 'CVIUSDCFeesCalculator',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCFeesCalculator2X['functions'],
      Args extends Head<GitContractTypes.CVIUSDCFeesCalculator2X['functions'][M]>,
    >(
      contract: 'CVIUSDCFeesCalculator2X',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCLiquidation['functions'],
      Args extends Head<GitContractTypes.CVIUSDCLiquidation['functions'][M]>,
    >(
      contract: 'CVIUSDCLiquidation',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCLiquidation2X['functions'],
      Args extends Head<GitContractTypes.CVIUSDCLiquidation2X['functions'][M]>,
    >(
      contract: 'CVIUSDCLiquidation2X',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCPlatform['functions'],
      Args extends Head<GitContractTypes.CVIUSDCPlatform['functions'][M]>,
    >(
      contract: 'CVIUSDCPlatform',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCPlatform2X['functions'],
      Args extends Head<GitContractTypes.CVIUSDCPlatform2X['functions'][M]>,
    >(
      contract: 'CVIUSDCPlatform2X',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCPositionRewards['functions'],
      Args extends Head<GitContractTypes.CVIUSDCPositionRewards['functions'][M]>,
    >(
      contract: 'CVIUSDCPositionRewards',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.StakingV2['functions'],
      Args extends Head<GitContractTypes.StakingV2['functions'][M]>,
    >(
      contract: 'StakingV2',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCLPStakingRewards['functions'],
      Args extends Head<GitContractTypes.CVIUSDCLPStakingRewards['functions'][M]>,
    >(
      contract: 'CVIUSDCLPStakingRewards',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCThetaVault['functions'],
      Args extends Head<GitContractTypes.CVIUSDCThetaVault['functions'][M]>,
    >(
      contract: 'CVIUSDCThetaVault',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCThetaVault2X['functions'],
      Args extends Head<GitContractTypes.CVIUSDCThetaVault2X['functions'][M]>,
    >(
      contract: 'CVIUSDCThetaVault2X',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCThetaVaultRequestFulfiller['functions'],
      Args extends Head<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller['functions'][M]>,
    >(
      contract: 'CVIUSDCThetaVaultRequestFulfiller',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X['functions'],
      Args extends Head<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X['functions'][M]>,
    >(
      contract: 'CVIUSDCThetaVaultRequestFulfiller2X',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.WETH['functions'],
      Args extends Head<GitContractTypes.WETH['functions'][M]>,
    >(
      contract: 'WETH',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCRebaser['functions'],
      Args extends Head<GitContractTypes.CVIUSDCRebaser['functions'][M]>,
    >(
      contract: 'CVIUSDCRebaser',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCRebaser2X['functions'],
      Args extends Head<GitContractTypes.CVIUSDCRebaser2X['functions'][M]>,
    >(
      contract: 'CVIUSDCRebaser2X',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCRequestFeesCalculator['functions'],
      Args extends Head<GitContractTypes.CVIUSDCRequestFeesCalculator['functions'][M]>,
    >(
      contract: 'CVIUSDCRequestFeesCalculator',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCRequestFeesCalculator2X['functions'],
      Args extends Head<GitContractTypes.CVIUSDCRequestFeesCalculator2X['functions'][M]>,
    >(
      contract: 'CVIUSDCRequestFeesCalculator2X',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCVolatilityToken['functions'],
      Args extends Head<GitContractTypes.CVIUSDCVolatilityToken['functions'][M]>,
    >(
      contract: 'CVIUSDCVolatilityToken',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCVolatilityToken2X['functions'],
      Args extends Head<GitContractTypes.CVIUSDCVolatilityToken2X['functions'][M]>,
    >(
      contract: 'CVIUSDCVolatilityToken2X',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCVolTokenRequestFulfiller['functions'],
      Args extends Head<GitContractTypes.CVIUSDCVolTokenRequestFulfiller['functions'][M]>,
    >(
      contract: 'CVIUSDCVolTokenRequestFulfiller',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X['functions'],
      Args extends Head<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X['functions'][M]>,
    >(
      contract: 'CVIUSDCVolTokenRequestFulfiller2X',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.AccessControlCrossChainUpgradeable['functions'],
      Args extends Head<GitContractTypes.AccessControlCrossChainUpgradeable['functions'][M]>,
    >(
      contract: 'AccessControlCrossChainUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.AccessControlEnumerableUpgradeable['functions'],
      Args extends Head<GitContractTypes.AccessControlEnumerableUpgradeable['functions'][M]>,
    >(
      contract: 'AccessControlEnumerableUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ConditionalEscrowUpgradeable['functions'],
      Args extends Head<GitContractTypes.ConditionalEscrowUpgradeable['functions'][M]>,
    >(
      contract: 'ConditionalEscrowUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CrossChainEnabledAMBUpgradeable['functions'],
      Args extends Head<GitContractTypes.CrossChainEnabledAMBUpgradeable['functions'][M]>,
    >(
      contract: 'CrossChainEnabledAMBUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable['functions'],
      Args extends Head<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable['functions'][M]>,
    >(
      contract: 'CrossChainEnabledArbitrumL1Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable['functions'],
      Args extends Head<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable['functions'][M]>,
    >(
      contract: 'CrossChainEnabledArbitrumL2Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CrossChainEnabledOptimismUpgradeable['functions'],
      Args extends Head<GitContractTypes.CrossChainEnabledOptimismUpgradeable['functions'][M]>,
    >(
      contract: 'CrossChainEnabledOptimismUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CrossChainEnabledPolygonChildUpgradeable['functions'],
      Args extends Head<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable['functions'][M]>,
    >(
      contract: 'CrossChainEnabledPolygonChildUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CrossChainEnabledUpgradeable['functions'],
      Args extends Head<GitContractTypes.CrossChainEnabledUpgradeable['functions'][M]>,
    >(
      contract: 'CrossChainEnabledUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.DoubleEndedQueueUpgradeable['functions'],
      Args extends Head<GitContractTypes.DoubleEndedQueueUpgradeable['functions'][M]>,
    >(
      contract: 'DoubleEndedQueueUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.EIP712Upgradeable['functions'],
      Args extends Head<GitContractTypes.EIP712Upgradeable['functions'][M]>,
    >(
      contract: 'EIP712Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155BurnableUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1155BurnableUpgradeable['functions'][M]>,
    >(
      contract: 'ERC1155BurnableUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155HolderUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1155HolderUpgradeable['functions'][M]>,
    >(
      contract: 'ERC1155HolderUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155PausableUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1155PausableUpgradeable['functions'][M]>,
    >(
      contract: 'ERC1155PausableUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155PresetMinterPauserUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1155PresetMinterPauserUpgradeable['functions'][M]>,
    >(
      contract: 'ERC1155PresetMinterPauserUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155ReceiverUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1155ReceiverUpgradeable['functions'][M]>,
    >(
      contract: 'ERC1155ReceiverUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155SupplyUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1155SupplyUpgradeable['functions'][M]>,
    >(
      contract: 'ERC1155SupplyUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155Upgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1155Upgradeable['functions'][M]>,
    >(
      contract: 'ERC1155Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155URIStorageUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1155URIStorageUpgradeable['functions'][M]>,
    >(
      contract: 'ERC1155URIStorageUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC165StorageUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC165StorageUpgradeable['functions'][M]>,
    >(
      contract: 'ERC165StorageUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1820ImplementerUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1820ImplementerUpgradeable['functions'][M]>,
    >(
      contract: 'ERC1820ImplementerUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1967UpgradeUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1967UpgradeUpgradeable['functions'][M]>,
    >(
      contract: 'ERC1967UpgradeUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20BurnableUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20BurnableUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20BurnableUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20CappedUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20CappedUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20CappedUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20FlashMintUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20FlashMintUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20FlashMintUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20PausableUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20PausableUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20PausableUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20PermitUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20PermitUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20PermitUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20PresetFixedSupplyUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20PresetFixedSupplyUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20PresetFixedSupplyUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20PresetMinterPauserUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20PresetMinterPauserUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20PresetMinterPauserUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20SnapshotUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20SnapshotUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20SnapshotUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20VotesCompUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20VotesCompUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20VotesCompUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20VotesUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20VotesUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20VotesUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20WrapperUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20WrapperUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20WrapperUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC2771ContextUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC2771ContextUpgradeable['functions'][M]>,
    >(
      contract: 'ERC2771ContextUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC2981Upgradeable['functions'],
      Args extends Head<GitContractTypes.ERC2981Upgradeable['functions'][M]>,
    >(
      contract: 'ERC2981Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721BurnableUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC721BurnableUpgradeable['functions'][M]>,
    >(
      contract: 'ERC721BurnableUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721HolderUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC721HolderUpgradeable['functions'][M]>,
    >(
      contract: 'ERC721HolderUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721PausableUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC721PausableUpgradeable['functions'][M]>,
    >(
      contract: 'ERC721PausableUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable['functions'][M]>,
    >(
      contract: 'ERC721PresetMinterPauserAutoIdUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721RoyaltyUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC721RoyaltyUpgradeable['functions'][M]>,
    >(
      contract: 'ERC721RoyaltyUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721URIStorageUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC721URIStorageUpgradeable['functions'][M]>,
    >(
      contract: 'ERC721URIStorageUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721VotesUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC721VotesUpgradeable['functions'][M]>,
    >(
      contract: 'ERC721VotesUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC777PresetFixedSupplyUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC777PresetFixedSupplyUpgradeable['functions'][M]>,
    >(
      contract: 'ERC777PresetFixedSupplyUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC777Upgradeable['functions'],
      Args extends Head<GitContractTypes.ERC777Upgradeable['functions'][M]>,
    >(
      contract: 'ERC777Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.EscrowUpgradeable['functions'],
      Args extends Head<GitContractTypes.EscrowUpgradeable['functions'][M]>,
    >(
      contract: 'EscrowUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorCompatibilityBravoUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorCompatibilityBravoUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorCompatibilityBravoUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorCountingSimpleUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorCountingSimpleUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorCountingSimpleUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorPreventLateQuorumUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorPreventLateQuorumUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorPreventLateQuorumUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorProposalThresholdUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorProposalThresholdUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorProposalThresholdUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorSettingsUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorSettingsUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorSettingsUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorTimelockCompoundUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorTimelockCompoundUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorTimelockCompoundUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorTimelockControlUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorTimelockControlUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorTimelockControlUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorVotesCompUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorVotesCompUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorVotesCompUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorVotesQuorumFractionUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorVotesQuorumFractionUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorVotesQuorumFractionUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorVotesUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorVotesUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorVotesUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IAccessControlEnumerableUpgradeable['functions'],
      Args extends Head<GitContractTypes.IAccessControlEnumerableUpgradeable['functions'][M]>,
    >(
      contract: 'IAccessControlEnumerableUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IAMBUpgradeable['functions'],
      Args extends Head<GitContractTypes.IAMBUpgradeable['functions'][M]>,
    >(
      contract: 'IAMBUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IArbSysUpgradeable['functions'],
      Args extends Head<GitContractTypes.IArbSysUpgradeable['functions'][M]>,
    >(
      contract: 'IArbSysUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IBeaconUpgradeable['functions'],
      Args extends Head<GitContractTypes.IBeaconUpgradeable['functions'][M]>,
    >(
      contract: 'IBeaconUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IBridgeUpgradeable['functions'],
      Args extends Head<GitContractTypes.IBridgeUpgradeable['functions'][M]>,
    >(
      contract: 'IBridgeUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ICompoundTimelockUpgradeable['functions'],
      Args extends Head<GitContractTypes.ICompoundTimelockUpgradeable['functions'][M]>,
    >(
      contract: 'ICompoundTimelockUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ICrossDomainMessengerUpgradeable['functions'],
      Args extends Head<GitContractTypes.ICrossDomainMessengerUpgradeable['functions'][M]>,
    >(
      contract: 'ICrossDomainMessengerUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1155MetadataURIUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1155MetadataURIUpgradeable['functions'][M]>,
    >(
      contract: 'IERC1155MetadataURIUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1155ReceiverUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1155ReceiverUpgradeable['functions'][M]>,
    >(
      contract: 'IERC1155ReceiverUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1155Upgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1155Upgradeable['functions'][M]>,
    >(
      contract: 'IERC1155Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1271Upgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1271Upgradeable['functions'][M]>,
    >(
      contract: 'IERC1271Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1363ReceiverUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1363ReceiverUpgradeable['functions'][M]>,
    >(
      contract: 'IERC1363ReceiverUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1363SpenderUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1363SpenderUpgradeable['functions'][M]>,
    >(
      contract: 'IERC1363SpenderUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1363Upgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1363Upgradeable['functions'][M]>,
    >(
      contract: 'IERC1363Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1820ImplementerUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1820ImplementerUpgradeable['functions'][M]>,
    >(
      contract: 'IERC1820ImplementerUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1820RegistryUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1820RegistryUpgradeable['functions'][M]>,
    >(
      contract: 'IERC1820RegistryUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1822ProxiableUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1822ProxiableUpgradeable['functions'][M]>,
    >(
      contract: 'IERC1822ProxiableUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC20PermitUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC20PermitUpgradeable['functions'][M]>,
    >(
      contract: 'IERC20PermitUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC2612Upgradeable['functions'],
      Args extends Head<GitContractTypes.IERC2612Upgradeable['functions'][M]>,
    >(
      contract: 'IERC2612Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC2981Upgradeable['functions'],
      Args extends Head<GitContractTypes.IERC2981Upgradeable['functions'][M]>,
    >(
      contract: 'IERC2981Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC3156FlashBorrowerUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC3156FlashBorrowerUpgradeable['functions'][M]>,
    >(
      contract: 'IERC3156FlashBorrowerUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC3156FlashLenderUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC3156FlashLenderUpgradeable['functions'][M]>,
    >(
      contract: 'IERC3156FlashLenderUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC777RecipientUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC777RecipientUpgradeable['functions'][M]>,
    >(
      contract: 'IERC777RecipientUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC777SenderUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC777SenderUpgradeable['functions'][M]>,
    >(
      contract: 'IERC777SenderUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC777Upgradeable['functions'],
      Args extends Head<GitContractTypes.IERC777Upgradeable['functions'][M]>,
    >(
      contract: 'IERC777Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IFxMessageProcessorUpgradeable['functions'],
      Args extends Head<GitContractTypes.IFxMessageProcessorUpgradeable['functions'][M]>,
    >(
      contract: 'IFxMessageProcessorUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IGovernorCompatibilityBravoUpgradeable['functions'],
      Args extends Head<GitContractTypes.IGovernorCompatibilityBravoUpgradeable['functions'][M]>,
    >(
      contract: 'IGovernorCompatibilityBravoUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IGovernorTimelockUpgradeable['functions'],
      Args extends Head<GitContractTypes.IGovernorTimelockUpgradeable['functions'][M]>,
    >(
      contract: 'IGovernorTimelockUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IGovernorUpgradeable['functions'],
      Args extends Head<GitContractTypes.IGovernorUpgradeable['functions'][M]>,
    >(
      contract: 'IGovernorUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IInboxUpgradeable['functions'],
      Args extends Head<GitContractTypes.IInboxUpgradeable['functions'][M]>,
    >(
      contract: 'IInboxUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IMessageProviderUpgradeable['functions'],
      Args extends Head<GitContractTypes.IMessageProviderUpgradeable['functions'][M]>,
    >(
      contract: 'IMessageProviderUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IOutboxUpgradeable['functions'],
      Args extends Head<GitContractTypes.IOutboxUpgradeable['functions'][M]>,
    >(
      contract: 'IOutboxUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IVotesUpgradeable['functions'],
      Args extends Head<GitContractTypes.IVotesUpgradeable['functions'][M]>,
    >(
      contract: 'IVotesUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.LibArbitrumL2Upgradeable['functions'],
      Args extends Head<GitContractTypes.LibArbitrumL2Upgradeable['functions'][M]>,
    >(
      contract: 'LibArbitrumL2Upgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.MinimalForwarderUpgradeable['functions'],
      Args extends Head<GitContractTypes.MinimalForwarderUpgradeable['functions'][M]>,
    >(
      contract: 'MinimalForwarderUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.MulticallUpgradeable['functions'],
      Args extends Head<GitContractTypes.MulticallUpgradeable['functions'][M]>,
    >(
      contract: 'MulticallUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.PausableUpgradeable['functions'],
      Args extends Head<GitContractTypes.PausableUpgradeable['functions'][M]>,
    >(
      contract: 'PausableUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.PaymentSplitterUpgradeable['functions'],
      Args extends Head<GitContractTypes.PaymentSplitterUpgradeable['functions'][M]>,
    >(
      contract: 'PaymentSplitterUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.PullPaymentUpgradeable['functions'],
      Args extends Head<GitContractTypes.PullPaymentUpgradeable['functions'][M]>,
    >(
      contract: 'PullPaymentUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.RefundEscrowUpgradeable['functions'],
      Args extends Head<GitContractTypes.RefundEscrowUpgradeable['functions'][M]>,
    >(
      contract: 'RefundEscrowUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.TimelockControllerUpgradeable['functions'],
      Args extends Head<GitContractTypes.TimelockControllerUpgradeable['functions'][M]>,
    >(
      contract: 'TimelockControllerUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.TimelockControllerWith46MigrationUpgradeable['functions'],
      Args extends Head<GitContractTypes.TimelockControllerWith46MigrationUpgradeable['functions'][M]>,
    >(
      contract: 'TimelockControllerWith46MigrationUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.TokenTimelockUpgradeable['functions'],
      Args extends Head<GitContractTypes.TokenTimelockUpgradeable['functions'][M]>,
    >(
      contract: 'TokenTimelockUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.UUPSUpgradeable['functions'],
      Args extends Head<GitContractTypes.UUPSUpgradeable['functions'][M]>,
    >(
      contract: 'UUPSUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.VestingWalletUpgradeable['functions'],
      Args extends Head<GitContractTypes.VestingWalletUpgradeable['functions'][M]>,
    >(
      contract: 'VestingWalletUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.VotesUpgradeable['functions'],
      Args extends Head<GitContractTypes.VotesUpgradeable['functions'][M]>,
    >(
      contract: 'VotesUpgradeable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.AccessControlCrossChain['functions'],
      Args extends Head<GitContractTypes.AccessControlCrossChain['functions'][M]>,
    >(
      contract: 'AccessControlCrossChain',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.AccessControlEnumerable['functions'],
      Args extends Head<GitContractTypes.AccessControlEnumerable['functions'][M]>,
    >(
      contract: 'AccessControlEnumerable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.BeaconProxy['functions'],
      Args extends Head<GitContractTypes.BeaconProxy['functions'][M]>,
    >(
      contract: 'BeaconProxy',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ConditionalEscrow['functions'],
      Args extends Head<GitContractTypes.ConditionalEscrow['functions'][M]>,
    >(
      contract: 'ConditionalEscrow',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CrossChainEnabledAMB['functions'],
      Args extends Head<GitContractTypes.CrossChainEnabledAMB['functions'][M]>,
    >(
      contract: 'CrossChainEnabledAMB',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CrossChainEnabledPolygonChild['functions'],
      Args extends Head<GitContractTypes.CrossChainEnabledPolygonChild['functions'][M]>,
    >(
      contract: 'CrossChainEnabledPolygonChild',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.DoubleEndedQueue['functions'],
      Args extends Head<GitContractTypes.DoubleEndedQueue['functions'][M]>,
    >(
      contract: 'DoubleEndedQueue',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155['functions'],
      Args extends Head<GitContractTypes.ERC1155['functions'][M]>,
    >(
      contract: 'ERC1155',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155Burnable['functions'],
      Args extends Head<GitContractTypes.ERC1155Burnable['functions'][M]>,
    >(
      contract: 'ERC1155Burnable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155Holder['functions'],
      Args extends Head<GitContractTypes.ERC1155Holder['functions'][M]>,
    >(
      contract: 'ERC1155Holder',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155Pausable['functions'],
      Args extends Head<GitContractTypes.ERC1155Pausable['functions'][M]>,
    >(
      contract: 'ERC1155Pausable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155PresetMinterPauser['functions'],
      Args extends Head<GitContractTypes.ERC1155PresetMinterPauser['functions'][M]>,
    >(
      contract: 'ERC1155PresetMinterPauser',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155Receiver['functions'],
      Args extends Head<GitContractTypes.ERC1155Receiver['functions'][M]>,
    >(
      contract: 'ERC1155Receiver',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155Supply['functions'],
      Args extends Head<GitContractTypes.ERC1155Supply['functions'][M]>,
    >(
      contract: 'ERC1155Supply',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155URIStorage['functions'],
      Args extends Head<GitContractTypes.ERC1155URIStorage['functions'][M]>,
    >(
      contract: 'ERC1155URIStorage',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC165Storage['functions'],
      Args extends Head<GitContractTypes.ERC165Storage['functions'][M]>,
    >(
      contract: 'ERC165Storage',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1820Implementer['functions'],
      Args extends Head<GitContractTypes.ERC1820Implementer['functions'][M]>,
    >(
      contract: 'ERC1820Implementer',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1967Proxy['functions'],
      Args extends Head<GitContractTypes.ERC1967Proxy['functions'][M]>,
    >(
      contract: 'ERC1967Proxy',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1967Upgrade['functions'],
      Args extends Head<GitContractTypes.ERC1967Upgrade['functions'][M]>,
    >(
      contract: 'ERC1967Upgrade',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20Burnable['functions'],
      Args extends Head<GitContractTypes.ERC20Burnable['functions'][M]>,
    >(
      contract: 'ERC20Burnable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20Capped['functions'],
      Args extends Head<GitContractTypes.ERC20Capped['functions'][M]>,
    >(
      contract: 'ERC20Capped',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20FlashMint['functions'],
      Args extends Head<GitContractTypes.ERC20FlashMint['functions'][M]>,
    >(
      contract: 'ERC20FlashMint',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20Pausable['functions'],
      Args extends Head<GitContractTypes.ERC20Pausable['functions'][M]>,
    >(
      contract: 'ERC20Pausable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20Permit['functions'],
      Args extends Head<GitContractTypes.ERC20Permit['functions'][M]>,
    >(
      contract: 'ERC20Permit',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20PresetFixedSupply['functions'],
      Args extends Head<GitContractTypes.ERC20PresetFixedSupply['functions'][M]>,
    >(
      contract: 'ERC20PresetFixedSupply',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20PresetMinterPauser['functions'],
      Args extends Head<GitContractTypes.ERC20PresetMinterPauser['functions'][M]>,
    >(
      contract: 'ERC20PresetMinterPauser',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20Snapshot['functions'],
      Args extends Head<GitContractTypes.ERC20Snapshot['functions'][M]>,
    >(
      contract: 'ERC20Snapshot',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20Votes['functions'],
      Args extends Head<GitContractTypes.ERC20Votes['functions'][M]>,
    >(
      contract: 'ERC20Votes',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20VotesComp['functions'],
      Args extends Head<GitContractTypes.ERC20VotesComp['functions'][M]>,
    >(
      contract: 'ERC20VotesComp',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20Wrapper['functions'],
      Args extends Head<GitContractTypes.ERC20Wrapper['functions'][M]>,
    >(
      contract: 'ERC20Wrapper',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC2771Context['functions'],
      Args extends Head<GitContractTypes.ERC2771Context['functions'][M]>,
    >(
      contract: 'ERC2771Context',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC2981['functions'],
      Args extends Head<GitContractTypes.ERC2981['functions'][M]>,
    >(
      contract: 'ERC2981',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721['functions'],
      Args extends Head<GitContractTypes.ERC721['functions'][M]>,
    >(
      contract: 'ERC721',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721Burnable['functions'],
      Args extends Head<GitContractTypes.ERC721Burnable['functions'][M]>,
    >(
      contract: 'ERC721Burnable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721Enumerable['functions'],
      Args extends Head<GitContractTypes.ERC721Enumerable['functions'][M]>,
    >(
      contract: 'ERC721Enumerable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721Holder['functions'],
      Args extends Head<GitContractTypes.ERC721Holder['functions'][M]>,
    >(
      contract: 'ERC721Holder',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721Pausable['functions'],
      Args extends Head<GitContractTypes.ERC721Pausable['functions'][M]>,
    >(
      contract: 'ERC721Pausable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721PresetMinterPauserAutoId['functions'],
      Args extends Head<GitContractTypes.ERC721PresetMinterPauserAutoId['functions'][M]>,
    >(
      contract: 'ERC721PresetMinterPauserAutoId',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721Royalty['functions'],
      Args extends Head<GitContractTypes.ERC721Royalty['functions'][M]>,
    >(
      contract: 'ERC721Royalty',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721URIStorage['functions'],
      Args extends Head<GitContractTypes.ERC721URIStorage['functions'][M]>,
    >(
      contract: 'ERC721URIStorage',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721Votes['functions'],
      Args extends Head<GitContractTypes.ERC721Votes['functions'][M]>,
    >(
      contract: 'ERC721Votes',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC777['functions'],
      Args extends Head<GitContractTypes.ERC777['functions'][M]>,
    >(
      contract: 'ERC777',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC777PresetFixedSupply['functions'],
      Args extends Head<GitContractTypes.ERC777PresetFixedSupply['functions'][M]>,
    >(
      contract: 'ERC777PresetFixedSupply',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Escrow['functions'],
      Args extends Head<GitContractTypes.Escrow['functions'][M]>,
    >(
      contract: 'Escrow',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Governor['functions'],
      Args extends Head<GitContractTypes.Governor['functions'][M]>,
    >(
      contract: 'Governor',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorCompatibilityBravo['functions'],
      Args extends Head<GitContractTypes.GovernorCompatibilityBravo['functions'][M]>,
    >(
      contract: 'GovernorCompatibilityBravo',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorCountingSimple['functions'],
      Args extends Head<GitContractTypes.GovernorCountingSimple['functions'][M]>,
    >(
      contract: 'GovernorCountingSimple',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorPreventLateQuorum['functions'],
      Args extends Head<GitContractTypes.GovernorPreventLateQuorum['functions'][M]>,
    >(
      contract: 'GovernorPreventLateQuorum',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorProposalThreshold['functions'],
      Args extends Head<GitContractTypes.GovernorProposalThreshold['functions'][M]>,
    >(
      contract: 'GovernorProposalThreshold',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorSettings['functions'],
      Args extends Head<GitContractTypes.GovernorSettings['functions'][M]>,
    >(
      contract: 'GovernorSettings',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorTimelockCompound['functions'],
      Args extends Head<GitContractTypes.GovernorTimelockCompound['functions'][M]>,
    >(
      contract: 'GovernorTimelockCompound',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorTimelockControl['functions'],
      Args extends Head<GitContractTypes.GovernorTimelockControl['functions'][M]>,
    >(
      contract: 'GovernorTimelockControl',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorVotes['functions'],
      Args extends Head<GitContractTypes.GovernorVotes['functions'][M]>,
    >(
      contract: 'GovernorVotes',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorVotesComp['functions'],
      Args extends Head<GitContractTypes.GovernorVotesComp['functions'][M]>,
    >(
      contract: 'GovernorVotesComp',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorVotesQuorumFraction['functions'],
      Args extends Head<GitContractTypes.GovernorVotesQuorumFraction['functions'][M]>,
    >(
      contract: 'GovernorVotesQuorumFraction',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IAccessControlEnumerable['functions'],
      Args extends Head<GitContractTypes.IAccessControlEnumerable['functions'][M]>,
    >(
      contract: 'IAccessControlEnumerable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IAMB['functions'],
      Args extends Head<GitContractTypes.IAMB['functions'][M]>,
    >(
      contract: 'IAMB',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IArbSys['functions'],
      Args extends Head<GitContractTypes.IArbSys['functions'][M]>,
    >(
      contract: 'IArbSys',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IBeacon['functions'],
      Args extends Head<GitContractTypes.IBeacon['functions'][M]>,
    >(
      contract: 'IBeacon',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IBridge['functions'],
      Args extends Head<GitContractTypes.IBridge['functions'][M]>,
    >(
      contract: 'IBridge',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ICompoundTimelock['functions'],
      Args extends Head<GitContractTypes.ICompoundTimelock['functions'][M]>,
    >(
      contract: 'ICompoundTimelock',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ICrossDomainMessenger['functions'],
      Args extends Head<GitContractTypes.ICrossDomainMessenger['functions'][M]>,
    >(
      contract: 'ICrossDomainMessenger',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1155['functions'],
      Args extends Head<GitContractTypes.IERC1155['functions'][M]>,
    >(
      contract: 'IERC1155',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1155MetadataURI['functions'],
      Args extends Head<GitContractTypes.IERC1155MetadataURI['functions'][M]>,
    >(
      contract: 'IERC1155MetadataURI',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1155Receiver['functions'],
      Args extends Head<GitContractTypes.IERC1155Receiver['functions'][M]>,
    >(
      contract: 'IERC1155Receiver',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1271['functions'],
      Args extends Head<GitContractTypes.IERC1271['functions'][M]>,
    >(
      contract: 'IERC1271',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1363['functions'],
      Args extends Head<GitContractTypes.IERC1363['functions'][M]>,
    >(
      contract: 'IERC1363',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1363Receiver['functions'],
      Args extends Head<GitContractTypes.IERC1363Receiver['functions'][M]>,
    >(
      contract: 'IERC1363Receiver',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1363Spender['functions'],
      Args extends Head<GitContractTypes.IERC1363Spender['functions'][M]>,
    >(
      contract: 'IERC1363Spender',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1820Implementer['functions'],
      Args extends Head<GitContractTypes.IERC1820Implementer['functions'][M]>,
    >(
      contract: 'IERC1820Implementer',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1820Registry['functions'],
      Args extends Head<GitContractTypes.IERC1820Registry['functions'][M]>,
    >(
      contract: 'IERC1820Registry',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1822Proxiable['functions'],
      Args extends Head<GitContractTypes.IERC1822Proxiable['functions'][M]>,
    >(
      contract: 'IERC1822Proxiable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC20Permit['functions'],
      Args extends Head<GitContractTypes.IERC20Permit['functions'][M]>,
    >(
      contract: 'IERC20Permit',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC2612['functions'],
      Args extends Head<GitContractTypes.IERC2612['functions'][M]>,
    >(
      contract: 'IERC2612',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC2981['functions'],
      Args extends Head<GitContractTypes.IERC2981['functions'][M]>,
    >(
      contract: 'IERC2981',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC3156FlashBorrower['functions'],
      Args extends Head<GitContractTypes.IERC3156FlashBorrower['functions'][M]>,
    >(
      contract: 'IERC3156FlashBorrower',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC3156FlashLender['functions'],
      Args extends Head<GitContractTypes.IERC3156FlashLender['functions'][M]>,
    >(
      contract: 'IERC3156FlashLender',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC721['functions'],
      Args extends Head<GitContractTypes.IERC721['functions'][M]>,
    >(
      contract: 'IERC721',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC721Enumerable['functions'],
      Args extends Head<GitContractTypes.IERC721Enumerable['functions'][M]>,
    >(
      contract: 'IERC721Enumerable',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC721Metadata['functions'],
      Args extends Head<GitContractTypes.IERC721Metadata['functions'][M]>,
    >(
      contract: 'IERC721Metadata',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC721Receiver['functions'],
      Args extends Head<GitContractTypes.IERC721Receiver['functions'][M]>,
    >(
      contract: 'IERC721Receiver',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC777['functions'],
      Args extends Head<GitContractTypes.IERC777['functions'][M]>,
    >(
      contract: 'IERC777',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC777Recipient['functions'],
      Args extends Head<GitContractTypes.IERC777Recipient['functions'][M]>,
    >(
      contract: 'IERC777Recipient',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC777Sender['functions'],
      Args extends Head<GitContractTypes.IERC777Sender['functions'][M]>,
    >(
      contract: 'IERC777Sender',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IFxMessageProcessor['functions'],
      Args extends Head<GitContractTypes.IFxMessageProcessor['functions'][M]>,
    >(
      contract: 'IFxMessageProcessor',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IGovernor['functions'],
      Args extends Head<GitContractTypes.IGovernor['functions'][M]>,
    >(
      contract: 'IGovernor',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IGovernorCompatibilityBravo['functions'],
      Args extends Head<GitContractTypes.IGovernorCompatibilityBravo['functions'][M]>,
    >(
      contract: 'IGovernorCompatibilityBravo',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IGovernorTimelock['functions'],
      Args extends Head<GitContractTypes.IGovernorTimelock['functions'][M]>,
    >(
      contract: 'IGovernorTimelock',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IMessageProvider['functions'],
      Args extends Head<GitContractTypes.IMessageProvider['functions'][M]>,
    >(
      contract: 'IMessageProvider',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IOutbox['functions'],
      Args extends Head<GitContractTypes.IOutbox['functions'][M]>,
    >(
      contract: 'IOutbox',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IVotes['functions'],
      Args extends Head<GitContractTypes.IVotes['functions'][M]>,
    >(
      contract: 'IVotes',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.LibArbitrumL2['functions'],
      Args extends Head<GitContractTypes.LibArbitrumL2['functions'][M]>,
    >(
      contract: 'LibArbitrumL2',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.MinimalForwarder['functions'],
      Args extends Head<GitContractTypes.MinimalForwarder['functions'][M]>,
    >(
      contract: 'MinimalForwarder',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Multicall['functions'],
      Args extends Head<GitContractTypes.Multicall['functions'][M]>,
    >(
      contract: 'Multicall',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.PaymentSplitter['functions'],
      Args extends Head<GitContractTypes.PaymentSplitter['functions'][M]>,
    >(
      contract: 'PaymentSplitter',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Proxy['functions'],
      Args extends Head<GitContractTypes.Proxy['functions'][M]>,
    >(
      contract: 'Proxy',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ProxyAdmin['functions'],
      Args extends Head<GitContractTypes.ProxyAdmin['functions'][M]>,
    >(
      contract: 'ProxyAdmin',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.PullPayment['functions'],
      Args extends Head<GitContractTypes.PullPayment['functions'][M]>,
    >(
      contract: 'PullPayment',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.RefundEscrow['functions'],
      Args extends Head<GitContractTypes.RefundEscrow['functions'][M]>,
    >(
      contract: 'RefundEscrow',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.TimelockController['functions'],
      Args extends Head<GitContractTypes.TimelockController['functions'][M]>,
    >(
      contract: 'TimelockController',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.TokenTimelock['functions'],
      Args extends Head<GitContractTypes.TokenTimelock['functions'][M]>,
    >(
      contract: 'TokenTimelock',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.TransparentUpgradeableProxy['functions'],
      Args extends Head<GitContractTypes.TransparentUpgradeableProxy['functions'][M]>,
    >(
      contract: 'TransparentUpgradeableProxy',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.UpgradeableBeacon['functions'],
      Args extends Head<GitContractTypes.UpgradeableBeacon['functions'][M]>,
    >(
      contract: 'UpgradeableBeacon',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.VestingWallet['functions'],
      Args extends Head<GitContractTypes.VestingWallet['functions'][M]>,
    >(
      contract: 'VestingWallet',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Votes['functions'],
      Args extends Head<GitContractTypes.Votes['functions'][M]>,
    >(
      contract: 'Votes',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.UniswapV2Migrator['functions'],
      Args extends Head<GitContractTypes.UniswapV2Migrator['functions'][M]>,
    >(
      contract: 'UniswapV2Migrator',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.UniswapV2Router01['functions'],
      Args extends Head<GitContractTypes.UniswapV2Router01['functions'][M]>,
    >(
      contract: 'UniswapV2Router01',
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
}


// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------

export interface HardhatExecuteWithNameOverloads {
  <
      M extends keyof GitContractTypes.KeeperCompatibleInterface['functions'],
      Args extends Head<GitContractTypes.KeeperCompatibleInterface['functions'][M]>,
    >(
      contract: 'KeeperCompatibleInterface',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.KeeperBase['functions'],
      Args extends Head<GitContractTypes.KeeperBase['functions'][M]>,
    >(
      contract: 'KeeperBase',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.KeeperCompatible['functions'],
      Args extends Head<GitContractTypes.KeeperCompatible['functions'][M]>,
    >(
      contract: 'KeeperCompatible',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIOracle['functions'],
      Args extends Head<GitContractTypes.CVIOracle['functions'][M]>,
    >(
      contract: 'CVIOracle',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ElasticToken['functions'],
      Args extends Head<GitContractTypes.ElasticToken['functions'][M]>,
    >(
      contract: 'ElasticToken',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IUniswapV2Factory['functions'],
      Args extends Head<GitContractTypes.IUniswapV2Factory['functions'][M]>,
    >(
      contract: 'IUniswapV2Factory',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IUniswapV2Pair['functions'],
      Args extends Head<GitContractTypes.IUniswapV2Pair['functions'][M]>,
    >(
      contract: 'IUniswapV2Pair',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IUniswapV2Router01['functions'],
      Args extends Head<GitContractTypes.IUniswapV2Router01['functions'][M]>,
    >(
      contract: 'IUniswapV2Router01',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IUniswapV2Router02['functions'],
      Args extends Head<GitContractTypes.IUniswapV2Router02['functions'][M]>,
    >(
      contract: 'IUniswapV2Router02',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.WETH9['functions'],
      Args extends Head<GitContractTypes.WETH9['functions'][M]>,
    >(
      contract: 'WETH9',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.FeesCalculator['functions'],
      Args extends Head<GitContractTypes.FeesCalculator['functions'][M]>,
    >(
      contract: 'FeesCalculator',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GOVI['functions'],
      Args extends Head<GitContractTypes.GOVI['functions'][M]>,
    >(
      contract: 'GOVI',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.AggregatorInterface['functions'],
      Args extends Head<GitContractTypes.AggregatorInterface['functions'][M]>,
    >(
      contract: 'AggregatorInterface',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.AggregatorV2V3Interface['functions'],
      Args extends Head<GitContractTypes.AggregatorV2V3Interface['functions'][M]>,
    >(
      contract: 'AggregatorV2V3Interface',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.AggregatorV3Interface['functions'],
      Args extends Head<GitContractTypes.AggregatorV3Interface['functions'][M]>,
    >(
      contract: 'AggregatorV3Interface',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ICVIOracle['functions'],
      Args extends Head<GitContractTypes.ICVIOracle['functions'][M]>,
    >(
      contract: 'ICVIOracle',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IElasticToken['functions'],
      Args extends Head<GitContractTypes.IElasticToken['functions'][M]>,
    >(
      contract: 'IElasticToken',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IFeesCalculator['functions'],
      Args extends Head<GitContractTypes.IFeesCalculator['functions'][M]>,
    >(
      contract: 'IFeesCalculator',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IFeesCollector['functions'],
      Args extends Head<GitContractTypes.IFeesCollector['functions'][M]>,
    >(
      contract: 'IFeesCollector',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IFeesCollectorManagement['functions'],
      Args extends Head<GitContractTypes.IFeesCollectorManagement['functions'][M]>,
    >(
      contract: 'IFeesCollectorManagement',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IInbox['functions'],
      Args extends Head<GitContractTypes.IInbox['functions'][M]>,
    >(
      contract: 'IInbox',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IKeepersFeeVault['functions'],
      Args extends Head<GitContractTypes.IKeepersFeeVault['functions'][M]>,
    >(
      contract: 'IKeepersFeeVault',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILiquidation['functions'],
      Args extends Head<GitContractTypes.ILiquidation['functions'][M]>,
    >(
      contract: 'ILiquidation',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IPlatform['functions'],
      Args extends Head<GitContractTypes.IPlatform['functions'][M]>,
    >(
      contract: 'IPlatform',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IPlatformHelper['functions'],
      Args extends Head<GitContractTypes.IPlatformHelper['functions'][M]>,
    >(
      contract: 'IPlatformHelper',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IPositionRewards['functions'],
      Args extends Head<GitContractTypes.IPositionRewards['functions'][M]>,
    >(
      contract: 'IPositionRewards',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IRebaser['functions'],
      Args extends Head<GitContractTypes.IRebaser['functions'][M]>,
    >(
      contract: 'IRebaser',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IRequestFeesCalculator['functions'],
      Args extends Head<GitContractTypes.IRequestFeesCalculator['functions'][M]>,
    >(
      contract: 'IRequestFeesCalculator',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IRequestFulfiller['functions'],
      Args extends Head<GitContractTypes.IRequestFulfiller['functions'][M]>,
    >(
      contract: 'IRequestFulfiller',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IRequestManager['functions'],
      Args extends Head<GitContractTypes.IRequestManager['functions'][M]>,
    >(
      contract: 'IRequestManager',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IRewardsCollector['functions'],
      Args extends Head<GitContractTypes.IRewardsCollector['functions'][M]>,
    >(
      contract: 'IRewardsCollector',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IStaking['functions'],
      Args extends Head<GitContractTypes.IStaking['functions'][M]>,
    >(
      contract: 'IStaking',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IStakingVault['functions'],
      Args extends Head<GitContractTypes.IStakingVault['functions'][M]>,
    >(
      contract: 'IStakingVault',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IThetaVault['functions'],
      Args extends Head<GitContractTypes.IThetaVault['functions'][M]>,
    >(
      contract: 'IThetaVault',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IThetaVaultInfo['functions'],
      Args extends Head<GitContractTypes.IThetaVaultInfo['functions'][M]>,
    >(
      contract: 'IThetaVaultInfo',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ITreasury['functions'],
      Args extends Head<GitContractTypes.ITreasury['functions'][M]>,
    >(
      contract: 'ITreasury',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IVolatilityToken['functions'],
      Args extends Head<GitContractTypes.IVolatilityToken['functions'][M]>,
    >(
      contract: 'IVolatilityToken',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IWETH['functions'],
      Args extends Head<GitContractTypes.IWETH['functions'][M]>,
    >(
      contract: 'IWETH',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.KeepersFeeVault['functions'],
      Args extends Head<GitContractTypes.KeepersFeeVault['functions'][M]>,
    >(
      contract: 'KeepersFeeVault',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Liquidation['functions'],
      Args extends Head<GitContractTypes.Liquidation['functions'][M]>,
    >(
      contract: 'Liquidation',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Platform['functions'],
      Args extends Head<GitContractTypes.Platform['functions'][M]>,
    >(
      contract: 'Platform',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.PlatformHelper['functions'],
      Args extends Head<GitContractTypes.PlatformHelper['functions'][M]>,
    >(
      contract: 'PlatformHelper',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.PositionRewards['functions'],
      Args extends Head<GitContractTypes.PositionRewards['functions'][M]>,
    >(
      contract: 'PositionRewards',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Rebaser['functions'],
      Args extends Head<GitContractTypes.Rebaser['functions'][M]>,
    >(
      contract: 'Rebaser',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.RequestFeesCalculator['functions'],
      Args extends Head<GitContractTypes.RequestFeesCalculator['functions'][M]>,
    >(
      contract: 'RequestFeesCalculator',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.RequestFulfiller['functions'],
      Args extends Head<GitContractTypes.RequestFulfiller['functions'][M]>,
    >(
      contract: 'RequestFulfiller',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.FeesCollector['functions'],
      Args extends Head<GitContractTypes.FeesCollector['functions'][M]>,
    >(
      contract: 'FeesCollector',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Staking['functions'],
      Args extends Head<GitContractTypes.Staking['functions'][M]>,
    >(
      contract: 'Staking',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.COTIETHSLPStakingRewards['functions'],
      Args extends Head<GitContractTypes.COTIETHSLPStakingRewards['functions'][M]>,
    >(
      contract: 'COTIETHSLPStakingRewards',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.COTIETHStakingRewards['functions'],
      Args extends Head<GitContractTypes.COTIETHStakingRewards['functions'][M]>,
    >(
      contract: 'COTIETHStakingRewards',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVOLUSDCLPStakingRewards['functions'],
      Args extends Head<GitContractTypes.CVOLUSDCLPStakingRewards['functions'][M]>,
    >(
      contract: 'CVOLUSDCLPStakingRewards',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ETHLPStakingRewards['functions'],
      Args extends Head<GitContractTypes.ETHLPStakingRewards['functions'][M]>,
    >(
      contract: 'ETHLPStakingRewards',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ETHVOL_USDCLPStakingRewards['functions'],
      Args extends Head<GitContractTypes.ETHVOL_USDCLPStakingRewards['functions'][M]>,
    >(
      contract: 'ETHVOL_USDCLPStakingRewards',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ETHVOLUSDCLPStakingRewards['functions'],
      Args extends Head<GitContractTypes.ETHVOLUSDCLPStakingRewards['functions'][M]>,
    >(
      contract: 'ETHVOLUSDCLPStakingRewards',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GOVIETHSLPStakingRewards['functions'],
      Args extends Head<GitContractTypes.GOVIETHSLPStakingRewards['functions'][M]>,
    >(
      contract: 'GOVIETHSLPStakingRewards',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GOVIETHStakingRewards['functions'],
      Args extends Head<GitContractTypes.GOVIETHStakingRewards['functions'][M]>,
    >(
      contract: 'GOVIETHStakingRewards',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.USDCLPStakingRewards['functions'],
      Args extends Head<GitContractTypes.USDCLPStakingRewards['functions'][M]>,
    >(
      contract: 'USDCLPStakingRewards',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.USDTLPStakingRewards['functions'],
      Args extends Head<GitContractTypes.USDTLPStakingRewards['functions'][M]>,
    >(
      contract: 'USDTLPStakingRewards',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IStakingRewards['functions'],
      Args extends Head<GitContractTypes.IStakingRewards['functions'][M]>,
    >(
      contract: 'IStakingRewards',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Owned['functions'],
      Args extends Head<GitContractTypes.Owned['functions'][M]>,
    >(
      contract: 'Owned',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Pausable['functions'],
      Args extends Head<GitContractTypes.Pausable['functions'][M]>,
    >(
      contract: 'Pausable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.RewardsDistributionRecipient['functions'],
      Args extends Head<GitContractTypes.RewardsDistributionRecipient['functions'][M]>,
    >(
      contract: 'RewardsDistributionRecipient',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.StakingRewards['functions'],
      Args extends Head<GitContractTypes.StakingRewards['functions'][M]>,
    >(
      contract: 'StakingRewards',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.StakingVault['functions'],
      Args extends Head<GitContractTypes.StakingVault['functions'][M]>,
    >(
      contract: 'StakingVault',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Treasury['functions'],
      Args extends Head<GitContractTypes.Treasury['functions'][M]>,
    >(
      contract: 'Treasury',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIFeedOracle['functions'],
      Args extends Head<GitContractTypes.CVIFeedOracle['functions'][M]>,
    >(
      contract: 'CVIFeedOracle',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.FakeERC20['functions'],
      Args extends Head<GitContractTypes.FakeERC20['functions'][M]>,
    >(
      contract: 'FakeERC20',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.FakePriceProvider['functions'],
      Args extends Head<GitContractTypes.FakePriceProvider['functions'][M]>,
    >(
      contract: 'FakePriceProvider',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC20['functions'],
      Args extends Head<GitContractTypes.IERC20['functions'][M]>,
    >(
      contract: 'IERC20',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IUniswapV2Callee['functions'],
      Args extends Head<GitContractTypes.IUniswapV2Callee['functions'][M]>,
    >(
      contract: 'IUniswapV2Callee',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IUniswapV2ERC20['functions'],
      Args extends Head<GitContractTypes.IUniswapV2ERC20['functions'][M]>,
    >(
      contract: 'IUniswapV2ERC20',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.UniswapV2ERC20['functions'],
      Args extends Head<GitContractTypes.UniswapV2ERC20['functions'][M]>,
    >(
      contract: 'UniswapV2ERC20',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.UniswapV2Factory['functions'],
      Args extends Head<GitContractTypes.UniswapV2Factory['functions'][M]>,
    >(
      contract: 'UniswapV2Factory',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.UniswapV2Pair['functions'],
      Args extends Head<GitContractTypes.UniswapV2Pair['functions'][M]>,
    >(
      contract: 'UniswapV2Pair',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.UniswapV2Router02['functions'],
      Args extends Head<GitContractTypes.UniswapV2Router02['functions'][M]>,
    >(
      contract: 'UniswapV2Router02',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ThetaVault['functions'],
      Args extends Head<GitContractTypes.ThetaVault['functions'][M]>,
    >(
      contract: 'ThetaVault',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ThetaVaultRequestFulfiller['functions'],
      Args extends Head<GitContractTypes.ThetaVaultRequestFulfiller['functions'][M]>,
    >(
      contract: 'ThetaVaultRequestFulfiller',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.VolatilityToken['functions'],
      Args extends Head<GitContractTypes.VolatilityToken['functions'][M]>,
    >(
      contract: 'VolatilityToken',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.VolTokenRequestFulfiller['functions'],
      Args extends Head<GitContractTypes.VolTokenRequestFulfiller['functions'][M]>,
    >(
      contract: 'VolTokenRequestFulfiller',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.BaseController['functions'],
      Args extends Head<GitContractTypes.BaseController['functions'][M]>,
    >(
      contract: 'BaseController',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionConfig['functions'],
      Args extends Head<GitContractTypes.ILProtectionConfig['functions'][M]>,
    >(
      contract: 'ILProtectionConfig',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionController['functions'],
      Args extends Head<GitContractTypes.ILProtectionController['functions'][M]>,
    >(
      contract: 'ILProtectionController',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionDiscountNFTController['functions'],
      Args extends Head<GitContractTypes.ILProtectionDiscountNFTController['functions'][M]>,
    >(
      contract: 'ILProtectionDiscountNFTController',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionNFT['functions'],
      Args extends Head<GitContractTypes.ILProtectionNFT['functions'][M]>,
    >(
      contract: 'ILProtectionNFT',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILiquidityController['functions'],
      Args extends Head<GitContractTypes.ILiquidityController['functions'][M]>,
    >(
      contract: 'ILiquidityController',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionConfigInterface['functions'],
      Args extends Head<GitContractTypes.ILProtectionConfigInterface['functions'][M]>,
    >(
      contract: 'ILProtectionConfigInterface',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionControllerInterface['functions'],
      Args extends Head<GitContractTypes.ILProtectionControllerInterface['functions'][M]>,
    >(
      contract: 'ILProtectionControllerInterface',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionDiscountNFTControllerInterface['functions'],
      Args extends Head<GitContractTypes.ILProtectionDiscountNFTControllerInterface['functions'][M]>,
    >(
      contract: 'ILProtectionDiscountNFTControllerInterface',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionDiscountNFTInterface['functions'],
      Args extends Head<GitContractTypes.ILProtectionDiscountNFTInterface['functions'][M]>,
    >(
      contract: 'ILProtectionDiscountNFTInterface',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionNFTInterface['functions'],
      Args extends Head<GitContractTypes.ILProtectionNFTInterface['functions'][M]>,
    >(
      contract: 'ILProtectionNFTInterface',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ITokenPairRepository['functions'],
      Args extends Head<GitContractTypes.ITokenPairRepository['functions'][M]>,
    >(
      contract: 'ITokenPairRepository',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ITreasuryController['functions'],
      Args extends Head<GitContractTypes.ITreasuryController['functions'][M]>,
    >(
      contract: 'ITreasuryController',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILUtils['functions'],
      Args extends Head<GitContractTypes.ILUtils['functions'][M]>,
    >(
      contract: 'ILUtils',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.MathUtils['functions'],
      Args extends Head<GitContractTypes.MathUtils['functions'][M]>,
    >(
      contract: 'MathUtils',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.PremiumCalculator['functions'],
      Args extends Head<GitContractTypes.PremiumCalculator['functions'][M]>,
    >(
      contract: 'PremiumCalculator',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.LiquidityController['functions'],
      Args extends Head<GitContractTypes.LiquidityController['functions'][M]>,
    >(
      contract: 'LiquidityController',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ILProtectionDiscountNFT['functions'],
      Args extends Head<GitContractTypes.ILProtectionDiscountNFT['functions'][M]>,
    >(
      contract: 'ILProtectionDiscountNFT',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ETHUSDOracle['functions'],
      Args extends Head<GitContractTypes.ETHUSDOracle['functions'][M]>,
    >(
      contract: 'ETHUSDOracle',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.LINKUSDOracle['functions'],
      Args extends Head<GitContractTypes.LINKUSDOracle['functions'][M]>,
    >(
      contract: 'LINKUSDOracle',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.USDUSDOracle['functions'],
      Args extends Head<GitContractTypes.USDUSDOracle['functions'][M]>,
    >(
      contract: 'USDUSDOracle',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.USDC['functions'],
      Args extends Head<GitContractTypes.USDC['functions'][M]>,
    >(
      contract: 'USDC',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.TokenPairRepository['functions'],
      Args extends Head<GitContractTypes.TokenPairRepository['functions'][M]>,
    >(
      contract: 'TokenPairRepository',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.TreasuryController['functions'],
      Args extends Head<GitContractTypes.TreasuryController['functions'][M]>,
    >(
      contract: 'TreasuryController',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.EsGOVI['functions'],
      Args extends Head<GitContractTypes.EsGOVI['functions'][M]>,
    >(
      contract: 'EsGOVI',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.EsGOVIRewardTrackerDistributor['functions'],
      Args extends Head<GitContractTypes.EsGOVIRewardTrackerDistributor['functions'][M]>,
    >(
      contract: 'EsGOVIRewardTrackerDistributor',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GOVIRewardTrackerDistributor['functions'],
      Args extends Head<GitContractTypes.GOVIRewardTrackerDistributor['functions'][M]>,
    >(
      contract: 'GOVIRewardTrackerDistributor',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ThetaVaultRewardTrackerDistributor['functions'],
      Args extends Head<GitContractTypes.ThetaVaultRewardTrackerDistributor['functions'][M]>,
    >(
      contract: 'ThetaVaultRewardTrackerDistributor',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.EsGOVIRewardTracker['functions'],
      Args extends Head<GitContractTypes.EsGOVIRewardTracker['functions'][M]>,
    >(
      contract: 'EsGOVIRewardTracker',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GOVIRewardTracker['functions'],
      Args extends Head<GitContractTypes.GOVIRewardTracker['functions'][M]>,
    >(
      contract: 'GOVIRewardTracker',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ThetaVaultRewardTracker['functions'],
      Args extends Head<GitContractTypes.ThetaVaultRewardTracker['functions'][M]>,
    >(
      contract: 'ThetaVaultRewardTracker',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GOVIVester['functions'],
      Args extends Head<GitContractTypes.GOVIVester['functions'][M]>,
    >(
      contract: 'GOVIVester',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ThetaVaultVester['functions'],
      Args extends Head<GitContractTypes.ThetaVaultVester['functions'][M]>,
    >(
      contract: 'ThetaVaultVester',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IMintable['functions'],
      Args extends Head<GitContractTypes.IMintable['functions'][M]>,
    >(
      contract: 'IMintable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IRewardDistributor['functions'],
      Args extends Head<GitContractTypes.IRewardDistributor['functions'][M]>,
    >(
      contract: 'IRewardDistributor',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IRewardRouter['functions'],
      Args extends Head<GitContractTypes.IRewardRouter['functions'][M]>,
    >(
      contract: 'IRewardRouter',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IRewardTracker['functions'],
      Args extends Head<GitContractTypes.IRewardTracker['functions'][M]>,
    >(
      contract: 'IRewardTracker',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IVester['functions'],
      Args extends Head<GitContractTypes.IVester['functions'][M]>,
    >(
      contract: 'IVester',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.RewardDistributor['functions'],
      Args extends Head<GitContractTypes.RewardDistributor['functions'][M]>,
    >(
      contract: 'RewardDistributor',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.RewardRouter['functions'],
      Args extends Head<GitContractTypes.RewardRouter['functions'][M]>,
    >(
      contract: 'RewardRouter',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.RewardTracker['functions'],
      Args extends Head<GitContractTypes.RewardTracker['functions'][M]>,
    >(
      contract: 'RewardTracker',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.FakeCVIUSDCThetaVault['functions'],
      Args extends Head<GitContractTypes.FakeCVIUSDCThetaVault['functions'][M]>,
    >(
      contract: 'FakeCVIUSDCThetaVault',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.FakeGOVI['functions'],
      Args extends Head<GitContractTypes.FakeGOVI['functions'][M]>,
    >(
      contract: 'FakeGOVI',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Vester['functions'],
      Args extends Head<GitContractTypes.Vester['functions'][M]>,
    >(
      contract: 'Vester',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.AccessControlUpgradeable['functions'],
      Args extends Head<GitContractTypes.AccessControlUpgradeable['functions'][M]>,
    >(
      contract: 'AccessControlUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IAccessControlUpgradeable['functions'],
      Args extends Head<GitContractTypes.IAccessControlUpgradeable['functions'][M]>,
    >(
      contract: 'IAccessControlUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.OwnableUpgradeable['functions'],
      Args extends Head<GitContractTypes.OwnableUpgradeable['functions'][M]>,
    >(
      contract: 'OwnableUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Initializable['functions'],
      Args extends Head<GitContractTypes.Initializable['functions'][M]>,
    >(
      contract: 'Initializable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ReentrancyGuardUpgradeable['functions'],
      Args extends Head<GitContractTypes.ReentrancyGuardUpgradeable['functions'][M]>,
    >(
      contract: 'ReentrancyGuardUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20Upgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20Upgradeable['functions'][M]>,
    >(
      contract: 'ERC20Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC20MetadataUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC20MetadataUpgradeable['functions'][M]>,
    >(
      contract: 'IERC20MetadataUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC20Upgradeable['functions'],
      Args extends Head<GitContractTypes.IERC20Upgradeable['functions'][M]>,
    >(
      contract: 'IERC20Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721Upgradeable['functions'],
      Args extends Head<GitContractTypes.ERC721Upgradeable['functions'][M]>,
    >(
      contract: 'ERC721Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721EnumerableUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC721EnumerableUpgradeable['functions'][M]>,
    >(
      contract: 'ERC721EnumerableUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC721EnumerableUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC721EnumerableUpgradeable['functions'][M]>,
    >(
      contract: 'IERC721EnumerableUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC721MetadataUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC721MetadataUpgradeable['functions'][M]>,
    >(
      contract: 'IERC721MetadataUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC721ReceiverUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC721ReceiverUpgradeable['functions'][M]>,
    >(
      contract: 'IERC721ReceiverUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC721Upgradeable['functions'],
      Args extends Head<GitContractTypes.IERC721Upgradeable['functions'][M]>,
    >(
      contract: 'IERC721Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ContextUpgradeable['functions'],
      Args extends Head<GitContractTypes.ContextUpgradeable['functions'][M]>,
    >(
      contract: 'ContextUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC165Upgradeable['functions'],
      Args extends Head<GitContractTypes.ERC165Upgradeable['functions'][M]>,
    >(
      contract: 'ERC165Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC165Upgradeable['functions'],
      Args extends Head<GitContractTypes.IERC165Upgradeable['functions'][M]>,
    >(
      contract: 'IERC165Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.AccessControl['functions'],
      Args extends Head<GitContractTypes.AccessControl['functions'][M]>,
    >(
      contract: 'AccessControl',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IAccessControl['functions'],
      Args extends Head<GitContractTypes.IAccessControl['functions'][M]>,
    >(
      contract: 'IAccessControl',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Ownable['functions'],
      Args extends Head<GitContractTypes.Ownable['functions'][M]>,
    >(
      contract: 'Ownable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20['functions'],
      Args extends Head<GitContractTypes.ERC20['functions'][M]>,
    >(
      contract: 'ERC20',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC20Metadata['functions'],
      Args extends Head<GitContractTypes.IERC20Metadata['functions'][M]>,
    >(
      contract: 'IERC20Metadata',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC165['functions'],
      Args extends Head<GitContractTypes.ERC165['functions'][M]>,
    >(
      contract: 'ERC165',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC165['functions'],
      Args extends Head<GitContractTypes.IERC165['functions'][M]>,
    >(
      contract: 'IERC165',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIDeviationOracle['functions'],
      Args extends Head<GitContractTypes.CVIDeviationOracle['functions'][M]>,
    >(
      contract: 'CVIDeviationOracle',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIFakeFeedOracle['functions'],
      Args extends Head<GitContractTypes.CVIFakeFeedOracle['functions'][M]>,
    >(
      contract: 'CVIFakeFeedOracle',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIOracle2X['functions'],
      Args extends Head<GitContractTypes.CVIOracle2X['functions'][M]>,
    >(
      contract: 'CVIOracle2X',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ETHVIOracle['functions'],
      Args extends Head<GitContractTypes.ETHVIOracle['functions'][M]>,
    >(
      contract: 'ETHVIOracle',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCFeesCalculator['functions'],
      Args extends Head<GitContractTypes.CVIUSDCFeesCalculator['functions'][M]>,
    >(
      contract: 'CVIUSDCFeesCalculator',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCFeesCalculator2X['functions'],
      Args extends Head<GitContractTypes.CVIUSDCFeesCalculator2X['functions'][M]>,
    >(
      contract: 'CVIUSDCFeesCalculator2X',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCLiquidation['functions'],
      Args extends Head<GitContractTypes.CVIUSDCLiquidation['functions'][M]>,
    >(
      contract: 'CVIUSDCLiquidation',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCLiquidation2X['functions'],
      Args extends Head<GitContractTypes.CVIUSDCLiquidation2X['functions'][M]>,
    >(
      contract: 'CVIUSDCLiquidation2X',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCPlatform['functions'],
      Args extends Head<GitContractTypes.CVIUSDCPlatform['functions'][M]>,
    >(
      contract: 'CVIUSDCPlatform',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCPlatform2X['functions'],
      Args extends Head<GitContractTypes.CVIUSDCPlatform2X['functions'][M]>,
    >(
      contract: 'CVIUSDCPlatform2X',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCPositionRewards['functions'],
      Args extends Head<GitContractTypes.CVIUSDCPositionRewards['functions'][M]>,
    >(
      contract: 'CVIUSDCPositionRewards',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.StakingV2['functions'],
      Args extends Head<GitContractTypes.StakingV2['functions'][M]>,
    >(
      contract: 'StakingV2',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCLPStakingRewards['functions'],
      Args extends Head<GitContractTypes.CVIUSDCLPStakingRewards['functions'][M]>,
    >(
      contract: 'CVIUSDCLPStakingRewards',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCThetaVault['functions'],
      Args extends Head<GitContractTypes.CVIUSDCThetaVault['functions'][M]>,
    >(
      contract: 'CVIUSDCThetaVault',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCThetaVault2X['functions'],
      Args extends Head<GitContractTypes.CVIUSDCThetaVault2X['functions'][M]>,
    >(
      contract: 'CVIUSDCThetaVault2X',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCThetaVaultRequestFulfiller['functions'],
      Args extends Head<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller['functions'][M]>,
    >(
      contract: 'CVIUSDCThetaVaultRequestFulfiller',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X['functions'],
      Args extends Head<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X['functions'][M]>,
    >(
      contract: 'CVIUSDCThetaVaultRequestFulfiller2X',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.WETH['functions'],
      Args extends Head<GitContractTypes.WETH['functions'][M]>,
    >(
      contract: 'WETH',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCRebaser['functions'],
      Args extends Head<GitContractTypes.CVIUSDCRebaser['functions'][M]>,
    >(
      contract: 'CVIUSDCRebaser',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCRebaser2X['functions'],
      Args extends Head<GitContractTypes.CVIUSDCRebaser2X['functions'][M]>,
    >(
      contract: 'CVIUSDCRebaser2X',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCRequestFeesCalculator['functions'],
      Args extends Head<GitContractTypes.CVIUSDCRequestFeesCalculator['functions'][M]>,
    >(
      contract: 'CVIUSDCRequestFeesCalculator',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCRequestFeesCalculator2X['functions'],
      Args extends Head<GitContractTypes.CVIUSDCRequestFeesCalculator2X['functions'][M]>,
    >(
      contract: 'CVIUSDCRequestFeesCalculator2X',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCVolatilityToken['functions'],
      Args extends Head<GitContractTypes.CVIUSDCVolatilityToken['functions'][M]>,
    >(
      contract: 'CVIUSDCVolatilityToken',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCVolatilityToken2X['functions'],
      Args extends Head<GitContractTypes.CVIUSDCVolatilityToken2X['functions'][M]>,
    >(
      contract: 'CVIUSDCVolatilityToken2X',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCVolTokenRequestFulfiller['functions'],
      Args extends Head<GitContractTypes.CVIUSDCVolTokenRequestFulfiller['functions'][M]>,
    >(
      contract: 'CVIUSDCVolTokenRequestFulfiller',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X['functions'],
      Args extends Head<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X['functions'][M]>,
    >(
      contract: 'CVIUSDCVolTokenRequestFulfiller2X',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.AccessControlCrossChainUpgradeable['functions'],
      Args extends Head<GitContractTypes.AccessControlCrossChainUpgradeable['functions'][M]>,
    >(
      contract: 'AccessControlCrossChainUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.AccessControlEnumerableUpgradeable['functions'],
      Args extends Head<GitContractTypes.AccessControlEnumerableUpgradeable['functions'][M]>,
    >(
      contract: 'AccessControlEnumerableUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ConditionalEscrowUpgradeable['functions'],
      Args extends Head<GitContractTypes.ConditionalEscrowUpgradeable['functions'][M]>,
    >(
      contract: 'ConditionalEscrowUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CrossChainEnabledAMBUpgradeable['functions'],
      Args extends Head<GitContractTypes.CrossChainEnabledAMBUpgradeable['functions'][M]>,
    >(
      contract: 'CrossChainEnabledAMBUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable['functions'],
      Args extends Head<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable['functions'][M]>,
    >(
      contract: 'CrossChainEnabledArbitrumL1Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable['functions'],
      Args extends Head<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable['functions'][M]>,
    >(
      contract: 'CrossChainEnabledArbitrumL2Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CrossChainEnabledOptimismUpgradeable['functions'],
      Args extends Head<GitContractTypes.CrossChainEnabledOptimismUpgradeable['functions'][M]>,
    >(
      contract: 'CrossChainEnabledOptimismUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CrossChainEnabledPolygonChildUpgradeable['functions'],
      Args extends Head<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable['functions'][M]>,
    >(
      contract: 'CrossChainEnabledPolygonChildUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CrossChainEnabledUpgradeable['functions'],
      Args extends Head<GitContractTypes.CrossChainEnabledUpgradeable['functions'][M]>,
    >(
      contract: 'CrossChainEnabledUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.DoubleEndedQueueUpgradeable['functions'],
      Args extends Head<GitContractTypes.DoubleEndedQueueUpgradeable['functions'][M]>,
    >(
      contract: 'DoubleEndedQueueUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.EIP712Upgradeable['functions'],
      Args extends Head<GitContractTypes.EIP712Upgradeable['functions'][M]>,
    >(
      contract: 'EIP712Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155BurnableUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1155BurnableUpgradeable['functions'][M]>,
    >(
      contract: 'ERC1155BurnableUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155HolderUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1155HolderUpgradeable['functions'][M]>,
    >(
      contract: 'ERC1155HolderUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155PausableUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1155PausableUpgradeable['functions'][M]>,
    >(
      contract: 'ERC1155PausableUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155PresetMinterPauserUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1155PresetMinterPauserUpgradeable['functions'][M]>,
    >(
      contract: 'ERC1155PresetMinterPauserUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155ReceiverUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1155ReceiverUpgradeable['functions'][M]>,
    >(
      contract: 'ERC1155ReceiverUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155SupplyUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1155SupplyUpgradeable['functions'][M]>,
    >(
      contract: 'ERC1155SupplyUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155Upgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1155Upgradeable['functions'][M]>,
    >(
      contract: 'ERC1155Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155URIStorageUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1155URIStorageUpgradeable['functions'][M]>,
    >(
      contract: 'ERC1155URIStorageUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC165StorageUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC165StorageUpgradeable['functions'][M]>,
    >(
      contract: 'ERC165StorageUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1820ImplementerUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1820ImplementerUpgradeable['functions'][M]>,
    >(
      contract: 'ERC1820ImplementerUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1967UpgradeUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC1967UpgradeUpgradeable['functions'][M]>,
    >(
      contract: 'ERC1967UpgradeUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20BurnableUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20BurnableUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20BurnableUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20CappedUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20CappedUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20CappedUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20FlashMintUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20FlashMintUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20FlashMintUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20PausableUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20PausableUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20PausableUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20PermitUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20PermitUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20PermitUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20PresetFixedSupplyUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20PresetFixedSupplyUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20PresetFixedSupplyUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20PresetMinterPauserUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20PresetMinterPauserUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20PresetMinterPauserUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20SnapshotUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20SnapshotUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20SnapshotUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20VotesCompUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20VotesCompUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20VotesCompUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20VotesUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20VotesUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20VotesUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20WrapperUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC20WrapperUpgradeable['functions'][M]>,
    >(
      contract: 'ERC20WrapperUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC2771ContextUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC2771ContextUpgradeable['functions'][M]>,
    >(
      contract: 'ERC2771ContextUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC2981Upgradeable['functions'],
      Args extends Head<GitContractTypes.ERC2981Upgradeable['functions'][M]>,
    >(
      contract: 'ERC2981Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721BurnableUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC721BurnableUpgradeable['functions'][M]>,
    >(
      contract: 'ERC721BurnableUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721HolderUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC721HolderUpgradeable['functions'][M]>,
    >(
      contract: 'ERC721HolderUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721PausableUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC721PausableUpgradeable['functions'][M]>,
    >(
      contract: 'ERC721PausableUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable['functions'][M]>,
    >(
      contract: 'ERC721PresetMinterPauserAutoIdUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721RoyaltyUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC721RoyaltyUpgradeable['functions'][M]>,
    >(
      contract: 'ERC721RoyaltyUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721URIStorageUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC721URIStorageUpgradeable['functions'][M]>,
    >(
      contract: 'ERC721URIStorageUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721VotesUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC721VotesUpgradeable['functions'][M]>,
    >(
      contract: 'ERC721VotesUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC777PresetFixedSupplyUpgradeable['functions'],
      Args extends Head<GitContractTypes.ERC777PresetFixedSupplyUpgradeable['functions'][M]>,
    >(
      contract: 'ERC777PresetFixedSupplyUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC777Upgradeable['functions'],
      Args extends Head<GitContractTypes.ERC777Upgradeable['functions'][M]>,
    >(
      contract: 'ERC777Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.EscrowUpgradeable['functions'],
      Args extends Head<GitContractTypes.EscrowUpgradeable['functions'][M]>,
    >(
      contract: 'EscrowUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorCompatibilityBravoUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorCompatibilityBravoUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorCompatibilityBravoUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorCountingSimpleUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorCountingSimpleUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorCountingSimpleUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorPreventLateQuorumUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorPreventLateQuorumUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorPreventLateQuorumUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorProposalThresholdUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorProposalThresholdUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorProposalThresholdUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorSettingsUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorSettingsUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorSettingsUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorTimelockCompoundUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorTimelockCompoundUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorTimelockCompoundUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorTimelockControlUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorTimelockControlUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorTimelockControlUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorVotesCompUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorVotesCompUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorVotesCompUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorVotesQuorumFractionUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorVotesQuorumFractionUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorVotesQuorumFractionUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorVotesUpgradeable['functions'],
      Args extends Head<GitContractTypes.GovernorVotesUpgradeable['functions'][M]>,
    >(
      contract: 'GovernorVotesUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IAccessControlEnumerableUpgradeable['functions'],
      Args extends Head<GitContractTypes.IAccessControlEnumerableUpgradeable['functions'][M]>,
    >(
      contract: 'IAccessControlEnumerableUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IAMBUpgradeable['functions'],
      Args extends Head<GitContractTypes.IAMBUpgradeable['functions'][M]>,
    >(
      contract: 'IAMBUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IArbSysUpgradeable['functions'],
      Args extends Head<GitContractTypes.IArbSysUpgradeable['functions'][M]>,
    >(
      contract: 'IArbSysUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IBeaconUpgradeable['functions'],
      Args extends Head<GitContractTypes.IBeaconUpgradeable['functions'][M]>,
    >(
      contract: 'IBeaconUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IBridgeUpgradeable['functions'],
      Args extends Head<GitContractTypes.IBridgeUpgradeable['functions'][M]>,
    >(
      contract: 'IBridgeUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ICompoundTimelockUpgradeable['functions'],
      Args extends Head<GitContractTypes.ICompoundTimelockUpgradeable['functions'][M]>,
    >(
      contract: 'ICompoundTimelockUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ICrossDomainMessengerUpgradeable['functions'],
      Args extends Head<GitContractTypes.ICrossDomainMessengerUpgradeable['functions'][M]>,
    >(
      contract: 'ICrossDomainMessengerUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1155MetadataURIUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1155MetadataURIUpgradeable['functions'][M]>,
    >(
      contract: 'IERC1155MetadataURIUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1155ReceiverUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1155ReceiverUpgradeable['functions'][M]>,
    >(
      contract: 'IERC1155ReceiverUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1155Upgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1155Upgradeable['functions'][M]>,
    >(
      contract: 'IERC1155Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1271Upgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1271Upgradeable['functions'][M]>,
    >(
      contract: 'IERC1271Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1363ReceiverUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1363ReceiverUpgradeable['functions'][M]>,
    >(
      contract: 'IERC1363ReceiverUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1363SpenderUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1363SpenderUpgradeable['functions'][M]>,
    >(
      contract: 'IERC1363SpenderUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1363Upgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1363Upgradeable['functions'][M]>,
    >(
      contract: 'IERC1363Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1820ImplementerUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1820ImplementerUpgradeable['functions'][M]>,
    >(
      contract: 'IERC1820ImplementerUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1820RegistryUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1820RegistryUpgradeable['functions'][M]>,
    >(
      contract: 'IERC1820RegistryUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1822ProxiableUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC1822ProxiableUpgradeable['functions'][M]>,
    >(
      contract: 'IERC1822ProxiableUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC20PermitUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC20PermitUpgradeable['functions'][M]>,
    >(
      contract: 'IERC20PermitUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC2612Upgradeable['functions'],
      Args extends Head<GitContractTypes.IERC2612Upgradeable['functions'][M]>,
    >(
      contract: 'IERC2612Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC2981Upgradeable['functions'],
      Args extends Head<GitContractTypes.IERC2981Upgradeable['functions'][M]>,
    >(
      contract: 'IERC2981Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC3156FlashBorrowerUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC3156FlashBorrowerUpgradeable['functions'][M]>,
    >(
      contract: 'IERC3156FlashBorrowerUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC3156FlashLenderUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC3156FlashLenderUpgradeable['functions'][M]>,
    >(
      contract: 'IERC3156FlashLenderUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC777RecipientUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC777RecipientUpgradeable['functions'][M]>,
    >(
      contract: 'IERC777RecipientUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC777SenderUpgradeable['functions'],
      Args extends Head<GitContractTypes.IERC777SenderUpgradeable['functions'][M]>,
    >(
      contract: 'IERC777SenderUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC777Upgradeable['functions'],
      Args extends Head<GitContractTypes.IERC777Upgradeable['functions'][M]>,
    >(
      contract: 'IERC777Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IFxMessageProcessorUpgradeable['functions'],
      Args extends Head<GitContractTypes.IFxMessageProcessorUpgradeable['functions'][M]>,
    >(
      contract: 'IFxMessageProcessorUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IGovernorCompatibilityBravoUpgradeable['functions'],
      Args extends Head<GitContractTypes.IGovernorCompatibilityBravoUpgradeable['functions'][M]>,
    >(
      contract: 'IGovernorCompatibilityBravoUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IGovernorTimelockUpgradeable['functions'],
      Args extends Head<GitContractTypes.IGovernorTimelockUpgradeable['functions'][M]>,
    >(
      contract: 'IGovernorTimelockUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IGovernorUpgradeable['functions'],
      Args extends Head<GitContractTypes.IGovernorUpgradeable['functions'][M]>,
    >(
      contract: 'IGovernorUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IInboxUpgradeable['functions'],
      Args extends Head<GitContractTypes.IInboxUpgradeable['functions'][M]>,
    >(
      contract: 'IInboxUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IMessageProviderUpgradeable['functions'],
      Args extends Head<GitContractTypes.IMessageProviderUpgradeable['functions'][M]>,
    >(
      contract: 'IMessageProviderUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IOutboxUpgradeable['functions'],
      Args extends Head<GitContractTypes.IOutboxUpgradeable['functions'][M]>,
    >(
      contract: 'IOutboxUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IVotesUpgradeable['functions'],
      Args extends Head<GitContractTypes.IVotesUpgradeable['functions'][M]>,
    >(
      contract: 'IVotesUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.LibArbitrumL2Upgradeable['functions'],
      Args extends Head<GitContractTypes.LibArbitrumL2Upgradeable['functions'][M]>,
    >(
      contract: 'LibArbitrumL2Upgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.MinimalForwarderUpgradeable['functions'],
      Args extends Head<GitContractTypes.MinimalForwarderUpgradeable['functions'][M]>,
    >(
      contract: 'MinimalForwarderUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.MulticallUpgradeable['functions'],
      Args extends Head<GitContractTypes.MulticallUpgradeable['functions'][M]>,
    >(
      contract: 'MulticallUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.PausableUpgradeable['functions'],
      Args extends Head<GitContractTypes.PausableUpgradeable['functions'][M]>,
    >(
      contract: 'PausableUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.PaymentSplitterUpgradeable['functions'],
      Args extends Head<GitContractTypes.PaymentSplitterUpgradeable['functions'][M]>,
    >(
      contract: 'PaymentSplitterUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.PullPaymentUpgradeable['functions'],
      Args extends Head<GitContractTypes.PullPaymentUpgradeable['functions'][M]>,
    >(
      contract: 'PullPaymentUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.RefundEscrowUpgradeable['functions'],
      Args extends Head<GitContractTypes.RefundEscrowUpgradeable['functions'][M]>,
    >(
      contract: 'RefundEscrowUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.TimelockControllerUpgradeable['functions'],
      Args extends Head<GitContractTypes.TimelockControllerUpgradeable['functions'][M]>,
    >(
      contract: 'TimelockControllerUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.TimelockControllerWith46MigrationUpgradeable['functions'],
      Args extends Head<GitContractTypes.TimelockControllerWith46MigrationUpgradeable['functions'][M]>,
    >(
      contract: 'TimelockControllerWith46MigrationUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.TokenTimelockUpgradeable['functions'],
      Args extends Head<GitContractTypes.TokenTimelockUpgradeable['functions'][M]>,
    >(
      contract: 'TokenTimelockUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.UUPSUpgradeable['functions'],
      Args extends Head<GitContractTypes.UUPSUpgradeable['functions'][M]>,
    >(
      contract: 'UUPSUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.VestingWalletUpgradeable['functions'],
      Args extends Head<GitContractTypes.VestingWalletUpgradeable['functions'][M]>,
    >(
      contract: 'VestingWalletUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.VotesUpgradeable['functions'],
      Args extends Head<GitContractTypes.VotesUpgradeable['functions'][M]>,
    >(
      contract: 'VotesUpgradeable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.AccessControlCrossChain['functions'],
      Args extends Head<GitContractTypes.AccessControlCrossChain['functions'][M]>,
    >(
      contract: 'AccessControlCrossChain',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.AccessControlEnumerable['functions'],
      Args extends Head<GitContractTypes.AccessControlEnumerable['functions'][M]>,
    >(
      contract: 'AccessControlEnumerable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.BeaconProxy['functions'],
      Args extends Head<GitContractTypes.BeaconProxy['functions'][M]>,
    >(
      contract: 'BeaconProxy',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ConditionalEscrow['functions'],
      Args extends Head<GitContractTypes.ConditionalEscrow['functions'][M]>,
    >(
      contract: 'ConditionalEscrow',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CrossChainEnabledAMB['functions'],
      Args extends Head<GitContractTypes.CrossChainEnabledAMB['functions'][M]>,
    >(
      contract: 'CrossChainEnabledAMB',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.CrossChainEnabledPolygonChild['functions'],
      Args extends Head<GitContractTypes.CrossChainEnabledPolygonChild['functions'][M]>,
    >(
      contract: 'CrossChainEnabledPolygonChild',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.DoubleEndedQueue['functions'],
      Args extends Head<GitContractTypes.DoubleEndedQueue['functions'][M]>,
    >(
      contract: 'DoubleEndedQueue',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155['functions'],
      Args extends Head<GitContractTypes.ERC1155['functions'][M]>,
    >(
      contract: 'ERC1155',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155Burnable['functions'],
      Args extends Head<GitContractTypes.ERC1155Burnable['functions'][M]>,
    >(
      contract: 'ERC1155Burnable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155Holder['functions'],
      Args extends Head<GitContractTypes.ERC1155Holder['functions'][M]>,
    >(
      contract: 'ERC1155Holder',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155Pausable['functions'],
      Args extends Head<GitContractTypes.ERC1155Pausable['functions'][M]>,
    >(
      contract: 'ERC1155Pausable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155PresetMinterPauser['functions'],
      Args extends Head<GitContractTypes.ERC1155PresetMinterPauser['functions'][M]>,
    >(
      contract: 'ERC1155PresetMinterPauser',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155Receiver['functions'],
      Args extends Head<GitContractTypes.ERC1155Receiver['functions'][M]>,
    >(
      contract: 'ERC1155Receiver',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155Supply['functions'],
      Args extends Head<GitContractTypes.ERC1155Supply['functions'][M]>,
    >(
      contract: 'ERC1155Supply',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1155URIStorage['functions'],
      Args extends Head<GitContractTypes.ERC1155URIStorage['functions'][M]>,
    >(
      contract: 'ERC1155URIStorage',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC165Storage['functions'],
      Args extends Head<GitContractTypes.ERC165Storage['functions'][M]>,
    >(
      contract: 'ERC165Storage',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1820Implementer['functions'],
      Args extends Head<GitContractTypes.ERC1820Implementer['functions'][M]>,
    >(
      contract: 'ERC1820Implementer',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1967Proxy['functions'],
      Args extends Head<GitContractTypes.ERC1967Proxy['functions'][M]>,
    >(
      contract: 'ERC1967Proxy',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC1967Upgrade['functions'],
      Args extends Head<GitContractTypes.ERC1967Upgrade['functions'][M]>,
    >(
      contract: 'ERC1967Upgrade',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20Burnable['functions'],
      Args extends Head<GitContractTypes.ERC20Burnable['functions'][M]>,
    >(
      contract: 'ERC20Burnable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20Capped['functions'],
      Args extends Head<GitContractTypes.ERC20Capped['functions'][M]>,
    >(
      contract: 'ERC20Capped',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20FlashMint['functions'],
      Args extends Head<GitContractTypes.ERC20FlashMint['functions'][M]>,
    >(
      contract: 'ERC20FlashMint',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20Pausable['functions'],
      Args extends Head<GitContractTypes.ERC20Pausable['functions'][M]>,
    >(
      contract: 'ERC20Pausable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20Permit['functions'],
      Args extends Head<GitContractTypes.ERC20Permit['functions'][M]>,
    >(
      contract: 'ERC20Permit',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20PresetFixedSupply['functions'],
      Args extends Head<GitContractTypes.ERC20PresetFixedSupply['functions'][M]>,
    >(
      contract: 'ERC20PresetFixedSupply',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20PresetMinterPauser['functions'],
      Args extends Head<GitContractTypes.ERC20PresetMinterPauser['functions'][M]>,
    >(
      contract: 'ERC20PresetMinterPauser',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20Snapshot['functions'],
      Args extends Head<GitContractTypes.ERC20Snapshot['functions'][M]>,
    >(
      contract: 'ERC20Snapshot',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20Votes['functions'],
      Args extends Head<GitContractTypes.ERC20Votes['functions'][M]>,
    >(
      contract: 'ERC20Votes',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20VotesComp['functions'],
      Args extends Head<GitContractTypes.ERC20VotesComp['functions'][M]>,
    >(
      contract: 'ERC20VotesComp',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC20Wrapper['functions'],
      Args extends Head<GitContractTypes.ERC20Wrapper['functions'][M]>,
    >(
      contract: 'ERC20Wrapper',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC2771Context['functions'],
      Args extends Head<GitContractTypes.ERC2771Context['functions'][M]>,
    >(
      contract: 'ERC2771Context',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC2981['functions'],
      Args extends Head<GitContractTypes.ERC2981['functions'][M]>,
    >(
      contract: 'ERC2981',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721['functions'],
      Args extends Head<GitContractTypes.ERC721['functions'][M]>,
    >(
      contract: 'ERC721',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721Burnable['functions'],
      Args extends Head<GitContractTypes.ERC721Burnable['functions'][M]>,
    >(
      contract: 'ERC721Burnable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721Enumerable['functions'],
      Args extends Head<GitContractTypes.ERC721Enumerable['functions'][M]>,
    >(
      contract: 'ERC721Enumerable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721Holder['functions'],
      Args extends Head<GitContractTypes.ERC721Holder['functions'][M]>,
    >(
      contract: 'ERC721Holder',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721Pausable['functions'],
      Args extends Head<GitContractTypes.ERC721Pausable['functions'][M]>,
    >(
      contract: 'ERC721Pausable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721PresetMinterPauserAutoId['functions'],
      Args extends Head<GitContractTypes.ERC721PresetMinterPauserAutoId['functions'][M]>,
    >(
      contract: 'ERC721PresetMinterPauserAutoId',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721Royalty['functions'],
      Args extends Head<GitContractTypes.ERC721Royalty['functions'][M]>,
    >(
      contract: 'ERC721Royalty',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721URIStorage['functions'],
      Args extends Head<GitContractTypes.ERC721URIStorage['functions'][M]>,
    >(
      contract: 'ERC721URIStorage',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC721Votes['functions'],
      Args extends Head<GitContractTypes.ERC721Votes['functions'][M]>,
    >(
      contract: 'ERC721Votes',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC777['functions'],
      Args extends Head<GitContractTypes.ERC777['functions'][M]>,
    >(
      contract: 'ERC777',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ERC777PresetFixedSupply['functions'],
      Args extends Head<GitContractTypes.ERC777PresetFixedSupply['functions'][M]>,
    >(
      contract: 'ERC777PresetFixedSupply',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Escrow['functions'],
      Args extends Head<GitContractTypes.Escrow['functions'][M]>,
    >(
      contract: 'Escrow',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Governor['functions'],
      Args extends Head<GitContractTypes.Governor['functions'][M]>,
    >(
      contract: 'Governor',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorCompatibilityBravo['functions'],
      Args extends Head<GitContractTypes.GovernorCompatibilityBravo['functions'][M]>,
    >(
      contract: 'GovernorCompatibilityBravo',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorCountingSimple['functions'],
      Args extends Head<GitContractTypes.GovernorCountingSimple['functions'][M]>,
    >(
      contract: 'GovernorCountingSimple',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorPreventLateQuorum['functions'],
      Args extends Head<GitContractTypes.GovernorPreventLateQuorum['functions'][M]>,
    >(
      contract: 'GovernorPreventLateQuorum',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorProposalThreshold['functions'],
      Args extends Head<GitContractTypes.GovernorProposalThreshold['functions'][M]>,
    >(
      contract: 'GovernorProposalThreshold',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorSettings['functions'],
      Args extends Head<GitContractTypes.GovernorSettings['functions'][M]>,
    >(
      contract: 'GovernorSettings',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorTimelockCompound['functions'],
      Args extends Head<GitContractTypes.GovernorTimelockCompound['functions'][M]>,
    >(
      contract: 'GovernorTimelockCompound',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorTimelockControl['functions'],
      Args extends Head<GitContractTypes.GovernorTimelockControl['functions'][M]>,
    >(
      contract: 'GovernorTimelockControl',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorVotes['functions'],
      Args extends Head<GitContractTypes.GovernorVotes['functions'][M]>,
    >(
      contract: 'GovernorVotes',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorVotesComp['functions'],
      Args extends Head<GitContractTypes.GovernorVotesComp['functions'][M]>,
    >(
      contract: 'GovernorVotesComp',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.GovernorVotesQuorumFraction['functions'],
      Args extends Head<GitContractTypes.GovernorVotesQuorumFraction['functions'][M]>,
    >(
      contract: 'GovernorVotesQuorumFraction',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IAccessControlEnumerable['functions'],
      Args extends Head<GitContractTypes.IAccessControlEnumerable['functions'][M]>,
    >(
      contract: 'IAccessControlEnumerable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IAMB['functions'],
      Args extends Head<GitContractTypes.IAMB['functions'][M]>,
    >(
      contract: 'IAMB',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IArbSys['functions'],
      Args extends Head<GitContractTypes.IArbSys['functions'][M]>,
    >(
      contract: 'IArbSys',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IBeacon['functions'],
      Args extends Head<GitContractTypes.IBeacon['functions'][M]>,
    >(
      contract: 'IBeacon',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IBridge['functions'],
      Args extends Head<GitContractTypes.IBridge['functions'][M]>,
    >(
      contract: 'IBridge',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ICompoundTimelock['functions'],
      Args extends Head<GitContractTypes.ICompoundTimelock['functions'][M]>,
    >(
      contract: 'ICompoundTimelock',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ICrossDomainMessenger['functions'],
      Args extends Head<GitContractTypes.ICrossDomainMessenger['functions'][M]>,
    >(
      contract: 'ICrossDomainMessenger',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1155['functions'],
      Args extends Head<GitContractTypes.IERC1155['functions'][M]>,
    >(
      contract: 'IERC1155',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1155MetadataURI['functions'],
      Args extends Head<GitContractTypes.IERC1155MetadataURI['functions'][M]>,
    >(
      contract: 'IERC1155MetadataURI',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1155Receiver['functions'],
      Args extends Head<GitContractTypes.IERC1155Receiver['functions'][M]>,
    >(
      contract: 'IERC1155Receiver',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1271['functions'],
      Args extends Head<GitContractTypes.IERC1271['functions'][M]>,
    >(
      contract: 'IERC1271',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1363['functions'],
      Args extends Head<GitContractTypes.IERC1363['functions'][M]>,
    >(
      contract: 'IERC1363',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1363Receiver['functions'],
      Args extends Head<GitContractTypes.IERC1363Receiver['functions'][M]>,
    >(
      contract: 'IERC1363Receiver',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1363Spender['functions'],
      Args extends Head<GitContractTypes.IERC1363Spender['functions'][M]>,
    >(
      contract: 'IERC1363Spender',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1820Implementer['functions'],
      Args extends Head<GitContractTypes.IERC1820Implementer['functions'][M]>,
    >(
      contract: 'IERC1820Implementer',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1820Registry['functions'],
      Args extends Head<GitContractTypes.IERC1820Registry['functions'][M]>,
    >(
      contract: 'IERC1820Registry',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC1822Proxiable['functions'],
      Args extends Head<GitContractTypes.IERC1822Proxiable['functions'][M]>,
    >(
      contract: 'IERC1822Proxiable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC20Permit['functions'],
      Args extends Head<GitContractTypes.IERC20Permit['functions'][M]>,
    >(
      contract: 'IERC20Permit',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC2612['functions'],
      Args extends Head<GitContractTypes.IERC2612['functions'][M]>,
    >(
      contract: 'IERC2612',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC2981['functions'],
      Args extends Head<GitContractTypes.IERC2981['functions'][M]>,
    >(
      contract: 'IERC2981',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC3156FlashBorrower['functions'],
      Args extends Head<GitContractTypes.IERC3156FlashBorrower['functions'][M]>,
    >(
      contract: 'IERC3156FlashBorrower',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC3156FlashLender['functions'],
      Args extends Head<GitContractTypes.IERC3156FlashLender['functions'][M]>,
    >(
      contract: 'IERC3156FlashLender',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC721['functions'],
      Args extends Head<GitContractTypes.IERC721['functions'][M]>,
    >(
      contract: 'IERC721',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC721Enumerable['functions'],
      Args extends Head<GitContractTypes.IERC721Enumerable['functions'][M]>,
    >(
      contract: 'IERC721Enumerable',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC721Metadata['functions'],
      Args extends Head<GitContractTypes.IERC721Metadata['functions'][M]>,
    >(
      contract: 'IERC721Metadata',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC721Receiver['functions'],
      Args extends Head<GitContractTypes.IERC721Receiver['functions'][M]>,
    >(
      contract: 'IERC721Receiver',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC777['functions'],
      Args extends Head<GitContractTypes.IERC777['functions'][M]>,
    >(
      contract: 'IERC777',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC777Recipient['functions'],
      Args extends Head<GitContractTypes.IERC777Recipient['functions'][M]>,
    >(
      contract: 'IERC777Recipient',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IERC777Sender['functions'],
      Args extends Head<GitContractTypes.IERC777Sender['functions'][M]>,
    >(
      contract: 'IERC777Sender',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IFxMessageProcessor['functions'],
      Args extends Head<GitContractTypes.IFxMessageProcessor['functions'][M]>,
    >(
      contract: 'IFxMessageProcessor',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IGovernor['functions'],
      Args extends Head<GitContractTypes.IGovernor['functions'][M]>,
    >(
      contract: 'IGovernor',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IGovernorCompatibilityBravo['functions'],
      Args extends Head<GitContractTypes.IGovernorCompatibilityBravo['functions'][M]>,
    >(
      contract: 'IGovernorCompatibilityBravo',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IGovernorTimelock['functions'],
      Args extends Head<GitContractTypes.IGovernorTimelock['functions'][M]>,
    >(
      contract: 'IGovernorTimelock',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IMessageProvider['functions'],
      Args extends Head<GitContractTypes.IMessageProvider['functions'][M]>,
    >(
      contract: 'IMessageProvider',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IOutbox['functions'],
      Args extends Head<GitContractTypes.IOutbox['functions'][M]>,
    >(
      contract: 'IOutbox',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.IVotes['functions'],
      Args extends Head<GitContractTypes.IVotes['functions'][M]>,
    >(
      contract: 'IVotes',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.LibArbitrumL2['functions'],
      Args extends Head<GitContractTypes.LibArbitrumL2['functions'][M]>,
    >(
      contract: 'LibArbitrumL2',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.MinimalForwarder['functions'],
      Args extends Head<GitContractTypes.MinimalForwarder['functions'][M]>,
    >(
      contract: 'MinimalForwarder',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Multicall['functions'],
      Args extends Head<GitContractTypes.Multicall['functions'][M]>,
    >(
      contract: 'Multicall',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.PaymentSplitter['functions'],
      Args extends Head<GitContractTypes.PaymentSplitter['functions'][M]>,
    >(
      contract: 'PaymentSplitter',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Proxy['functions'],
      Args extends Head<GitContractTypes.Proxy['functions'][M]>,
    >(
      contract: 'Proxy',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.ProxyAdmin['functions'],
      Args extends Head<GitContractTypes.ProxyAdmin['functions'][M]>,
    >(
      contract: 'ProxyAdmin',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.PullPayment['functions'],
      Args extends Head<GitContractTypes.PullPayment['functions'][M]>,
    >(
      contract: 'PullPayment',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.RefundEscrow['functions'],
      Args extends Head<GitContractTypes.RefundEscrow['functions'][M]>,
    >(
      contract: 'RefundEscrow',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.TimelockController['functions'],
      Args extends Head<GitContractTypes.TimelockController['functions'][M]>,
    >(
      contract: 'TimelockController',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.TokenTimelock['functions'],
      Args extends Head<GitContractTypes.TokenTimelock['functions'][M]>,
    >(
      contract: 'TokenTimelock',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.TransparentUpgradeableProxy['functions'],
      Args extends Head<GitContractTypes.TransparentUpgradeableProxy['functions'][M]>,
    >(
      contract: 'TransparentUpgradeableProxy',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.UpgradeableBeacon['functions'],
      Args extends Head<GitContractTypes.UpgradeableBeacon['functions'][M]>,
    >(
      contract: 'UpgradeableBeacon',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.VestingWallet['functions'],
      Args extends Head<GitContractTypes.VestingWallet['functions'][M]>,
    >(
      contract: 'VestingWallet',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.Votes['functions'],
      Args extends Head<GitContractTypes.Votes['functions'][M]>,
    >(
      contract: 'Votes',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.UniswapV2Migrator['functions'],
      Args extends Head<GitContractTypes.UniswapV2Migrator['functions'][M]>,
    >(
      contract: 'UniswapV2Migrator',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
  <
      M extends keyof GitContractTypes.UniswapV2Router01['functions'],
      Args extends Head<GitContractTypes.UniswapV2Router01['functions'][M]>,
    >(
      contract: 'UniswapV2Router01',
      contractName: string,
      method: M,
      options: Omit<TxOptions, 'from'> & { from?: string },
      ...args: Args
    ): Promise<Receipt | void>
}


// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------

export interface HardhatReadOverloads {
  <
      M extends keyof GitContractTypes.KeeperCompatibleInterface['callStatic'],
      Args extends Head<GitContractTypes.KeeperCompatibleInterface['callStatic'][M]>
    >(
      contract: 'KeeperCompatibleInterface',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.KeeperCompatibleInterface['callStatic'][M]>
  <
      M extends keyof GitContractTypes.KeeperBase['callStatic'],
      Args extends Head<GitContractTypes.KeeperBase['callStatic'][M]>
    >(
      contract: 'KeeperBase',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.KeeperBase['callStatic'][M]>
  <
      M extends keyof GitContractTypes.KeeperCompatible['callStatic'],
      Args extends Head<GitContractTypes.KeeperCompatible['callStatic'][M]>
    >(
      contract: 'KeeperCompatible',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.KeeperCompatible['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIOracle['callStatic'],
      Args extends Head<GitContractTypes.CVIOracle['callStatic'][M]>
    >(
      contract: 'CVIOracle',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIOracle['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ElasticToken['callStatic'],
      Args extends Head<GitContractTypes.ElasticToken['callStatic'][M]>
    >(
      contract: 'ElasticToken',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ElasticToken['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IUniswapV2Factory['callStatic'],
      Args extends Head<GitContractTypes.IUniswapV2Factory['callStatic'][M]>
    >(
      contract: 'IUniswapV2Factory',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IUniswapV2Factory['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IUniswapV2Pair['callStatic'],
      Args extends Head<GitContractTypes.IUniswapV2Pair['callStatic'][M]>
    >(
      contract: 'IUniswapV2Pair',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IUniswapV2Pair['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IUniswapV2Router01['callStatic'],
      Args extends Head<GitContractTypes.IUniswapV2Router01['callStatic'][M]>
    >(
      contract: 'IUniswapV2Router01',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IUniswapV2Router01['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IUniswapV2Router02['callStatic'],
      Args extends Head<GitContractTypes.IUniswapV2Router02['callStatic'][M]>
    >(
      contract: 'IUniswapV2Router02',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IUniswapV2Router02['callStatic'][M]>
  <
      M extends keyof GitContractTypes.WETH9['callStatic'],
      Args extends Head<GitContractTypes.WETH9['callStatic'][M]>
    >(
      contract: 'WETH9',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.WETH9['callStatic'][M]>
  <
      M extends keyof GitContractTypes.FeesCalculator['callStatic'],
      Args extends Head<GitContractTypes.FeesCalculator['callStatic'][M]>
    >(
      contract: 'FeesCalculator',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.FeesCalculator['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GOVI['callStatic'],
      Args extends Head<GitContractTypes.GOVI['callStatic'][M]>
    >(
      contract: 'GOVI',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GOVI['callStatic'][M]>
  <
      M extends keyof GitContractTypes.AggregatorInterface['callStatic'],
      Args extends Head<GitContractTypes.AggregatorInterface['callStatic'][M]>
    >(
      contract: 'AggregatorInterface',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.AggregatorInterface['callStatic'][M]>
  <
      M extends keyof GitContractTypes.AggregatorV2V3Interface['callStatic'],
      Args extends Head<GitContractTypes.AggregatorV2V3Interface['callStatic'][M]>
    >(
      contract: 'AggregatorV2V3Interface',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.AggregatorV2V3Interface['callStatic'][M]>
  <
      M extends keyof GitContractTypes.AggregatorV3Interface['callStatic'],
      Args extends Head<GitContractTypes.AggregatorV3Interface['callStatic'][M]>
    >(
      contract: 'AggregatorV3Interface',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.AggregatorV3Interface['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ICVIOracle['callStatic'],
      Args extends Head<GitContractTypes.ICVIOracle['callStatic'][M]>
    >(
      contract: 'ICVIOracle',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ICVIOracle['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IElasticToken['callStatic'],
      Args extends Head<GitContractTypes.IElasticToken['callStatic'][M]>
    >(
      contract: 'IElasticToken',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IElasticToken['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IFeesCalculator['callStatic'],
      Args extends Head<GitContractTypes.IFeesCalculator['callStatic'][M]>
    >(
      contract: 'IFeesCalculator',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IFeesCalculator['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IFeesCollector['callStatic'],
      Args extends Head<GitContractTypes.IFeesCollector['callStatic'][M]>
    >(
      contract: 'IFeesCollector',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IFeesCollector['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IFeesCollectorManagement['callStatic'],
      Args extends Head<GitContractTypes.IFeesCollectorManagement['callStatic'][M]>
    >(
      contract: 'IFeesCollectorManagement',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IFeesCollectorManagement['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IInbox['callStatic'],
      Args extends Head<GitContractTypes.IInbox['callStatic'][M]>
    >(
      contract: 'IInbox',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IInbox['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IKeepersFeeVault['callStatic'],
      Args extends Head<GitContractTypes.IKeepersFeeVault['callStatic'][M]>
    >(
      contract: 'IKeepersFeeVault',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IKeepersFeeVault['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILiquidation['callStatic'],
      Args extends Head<GitContractTypes.ILiquidation['callStatic'][M]>
    >(
      contract: 'ILiquidation',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILiquidation['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IPlatform['callStatic'],
      Args extends Head<GitContractTypes.IPlatform['callStatic'][M]>
    >(
      contract: 'IPlatform',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IPlatform['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IPlatformHelper['callStatic'],
      Args extends Head<GitContractTypes.IPlatformHelper['callStatic'][M]>
    >(
      contract: 'IPlatformHelper',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IPlatformHelper['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IPositionRewards['callStatic'],
      Args extends Head<GitContractTypes.IPositionRewards['callStatic'][M]>
    >(
      contract: 'IPositionRewards',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IPositionRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IRebaser['callStatic'],
      Args extends Head<GitContractTypes.IRebaser['callStatic'][M]>
    >(
      contract: 'IRebaser',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IRebaser['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IRequestFeesCalculator['callStatic'],
      Args extends Head<GitContractTypes.IRequestFeesCalculator['callStatic'][M]>
    >(
      contract: 'IRequestFeesCalculator',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IRequestFeesCalculator['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IRequestFulfiller['callStatic'],
      Args extends Head<GitContractTypes.IRequestFulfiller['callStatic'][M]>
    >(
      contract: 'IRequestFulfiller',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IRequestFulfiller['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IRequestManager['callStatic'],
      Args extends Head<GitContractTypes.IRequestManager['callStatic'][M]>
    >(
      contract: 'IRequestManager',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IRequestManager['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IRewardsCollector['callStatic'],
      Args extends Head<GitContractTypes.IRewardsCollector['callStatic'][M]>
    >(
      contract: 'IRewardsCollector',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IRewardsCollector['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IStaking['callStatic'],
      Args extends Head<GitContractTypes.IStaking['callStatic'][M]>
    >(
      contract: 'IStaking',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IStaking['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IStakingVault['callStatic'],
      Args extends Head<GitContractTypes.IStakingVault['callStatic'][M]>
    >(
      contract: 'IStakingVault',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IStakingVault['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IThetaVault['callStatic'],
      Args extends Head<GitContractTypes.IThetaVault['callStatic'][M]>
    >(
      contract: 'IThetaVault',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IThetaVault['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IThetaVaultInfo['callStatic'],
      Args extends Head<GitContractTypes.IThetaVaultInfo['callStatic'][M]>
    >(
      contract: 'IThetaVaultInfo',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IThetaVaultInfo['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ITreasury['callStatic'],
      Args extends Head<GitContractTypes.ITreasury['callStatic'][M]>
    >(
      contract: 'ITreasury',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ITreasury['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IVolatilityToken['callStatic'],
      Args extends Head<GitContractTypes.IVolatilityToken['callStatic'][M]>
    >(
      contract: 'IVolatilityToken',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IVolatilityToken['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IWETH['callStatic'],
      Args extends Head<GitContractTypes.IWETH['callStatic'][M]>
    >(
      contract: 'IWETH',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IWETH['callStatic'][M]>
  <
      M extends keyof GitContractTypes.KeepersFeeVault['callStatic'],
      Args extends Head<GitContractTypes.KeepersFeeVault['callStatic'][M]>
    >(
      contract: 'KeepersFeeVault',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.KeepersFeeVault['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Liquidation['callStatic'],
      Args extends Head<GitContractTypes.Liquidation['callStatic'][M]>
    >(
      contract: 'Liquidation',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Liquidation['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Platform['callStatic'],
      Args extends Head<GitContractTypes.Platform['callStatic'][M]>
    >(
      contract: 'Platform',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Platform['callStatic'][M]>
  <
      M extends keyof GitContractTypes.PlatformHelper['callStatic'],
      Args extends Head<GitContractTypes.PlatformHelper['callStatic'][M]>
    >(
      contract: 'PlatformHelper',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.PlatformHelper['callStatic'][M]>
  <
      M extends keyof GitContractTypes.PositionRewards['callStatic'],
      Args extends Head<GitContractTypes.PositionRewards['callStatic'][M]>
    >(
      contract: 'PositionRewards',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.PositionRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Rebaser['callStatic'],
      Args extends Head<GitContractTypes.Rebaser['callStatic'][M]>
    >(
      contract: 'Rebaser',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Rebaser['callStatic'][M]>
  <
      M extends keyof GitContractTypes.RequestFeesCalculator['callStatic'],
      Args extends Head<GitContractTypes.RequestFeesCalculator['callStatic'][M]>
    >(
      contract: 'RequestFeesCalculator',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.RequestFeesCalculator['callStatic'][M]>
  <
      M extends keyof GitContractTypes.RequestFulfiller['callStatic'],
      Args extends Head<GitContractTypes.RequestFulfiller['callStatic'][M]>
    >(
      contract: 'RequestFulfiller',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.RequestFulfiller['callStatic'][M]>
  <
      M extends keyof GitContractTypes.FeesCollector['callStatic'],
      Args extends Head<GitContractTypes.FeesCollector['callStatic'][M]>
    >(
      contract: 'FeesCollector',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.FeesCollector['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Staking['callStatic'],
      Args extends Head<GitContractTypes.Staking['callStatic'][M]>
    >(
      contract: 'Staking',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Staking['callStatic'][M]>
  <
      M extends keyof GitContractTypes.COTIETHSLPStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.COTIETHSLPStakingRewards['callStatic'][M]>
    >(
      contract: 'COTIETHSLPStakingRewards',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.COTIETHSLPStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.COTIETHStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.COTIETHStakingRewards['callStatic'][M]>
    >(
      contract: 'COTIETHStakingRewards',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.COTIETHStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVOLUSDCLPStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.CVOLUSDCLPStakingRewards['callStatic'][M]>
    >(
      contract: 'CVOLUSDCLPStakingRewards',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVOLUSDCLPStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ETHLPStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.ETHLPStakingRewards['callStatic'][M]>
    >(
      contract: 'ETHLPStakingRewards',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ETHLPStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ETHVOL_USDCLPStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.ETHVOL_USDCLPStakingRewards['callStatic'][M]>
    >(
      contract: 'ETHVOL_USDCLPStakingRewards',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ETHVOL_USDCLPStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ETHVOLUSDCLPStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.ETHVOLUSDCLPStakingRewards['callStatic'][M]>
    >(
      contract: 'ETHVOLUSDCLPStakingRewards',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ETHVOLUSDCLPStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GOVIETHSLPStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.GOVIETHSLPStakingRewards['callStatic'][M]>
    >(
      contract: 'GOVIETHSLPStakingRewards',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GOVIETHSLPStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GOVIETHStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.GOVIETHStakingRewards['callStatic'][M]>
    >(
      contract: 'GOVIETHStakingRewards',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GOVIETHStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.USDCLPStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.USDCLPStakingRewards['callStatic'][M]>
    >(
      contract: 'USDCLPStakingRewards',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.USDCLPStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.USDTLPStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.USDTLPStakingRewards['callStatic'][M]>
    >(
      contract: 'USDTLPStakingRewards',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.USDTLPStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.IStakingRewards['callStatic'][M]>
    >(
      contract: 'IStakingRewards',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Owned['callStatic'],
      Args extends Head<GitContractTypes.Owned['callStatic'][M]>
    >(
      contract: 'Owned',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Owned['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Pausable['callStatic'],
      Args extends Head<GitContractTypes.Pausable['callStatic'][M]>
    >(
      contract: 'Pausable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Pausable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.RewardsDistributionRecipient['callStatic'],
      Args extends Head<GitContractTypes.RewardsDistributionRecipient['callStatic'][M]>
    >(
      contract: 'RewardsDistributionRecipient',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.RewardsDistributionRecipient['callStatic'][M]>
  <
      M extends keyof GitContractTypes.StakingRewards['callStatic'],
      Args extends Head<GitContractTypes.StakingRewards['callStatic'][M]>
    >(
      contract: 'StakingRewards',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.StakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.StakingVault['callStatic'],
      Args extends Head<GitContractTypes.StakingVault['callStatic'][M]>
    >(
      contract: 'StakingVault',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.StakingVault['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Treasury['callStatic'],
      Args extends Head<GitContractTypes.Treasury['callStatic'][M]>
    >(
      contract: 'Treasury',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Treasury['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIFeedOracle['callStatic'],
      Args extends Head<GitContractTypes.CVIFeedOracle['callStatic'][M]>
    >(
      contract: 'CVIFeedOracle',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIFeedOracle['callStatic'][M]>
  <
      M extends keyof GitContractTypes.FakeERC20['callStatic'],
      Args extends Head<GitContractTypes.FakeERC20['callStatic'][M]>
    >(
      contract: 'FakeERC20',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.FakeERC20['callStatic'][M]>
  <
      M extends keyof GitContractTypes.FakePriceProvider['callStatic'],
      Args extends Head<GitContractTypes.FakePriceProvider['callStatic'][M]>
    >(
      contract: 'FakePriceProvider',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.FakePriceProvider['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC20['callStatic'],
      Args extends Head<GitContractTypes.IERC20['callStatic'][M]>
    >(
      contract: 'IERC20',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC20['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IUniswapV2Callee['callStatic'],
      Args extends Head<GitContractTypes.IUniswapV2Callee['callStatic'][M]>
    >(
      contract: 'IUniswapV2Callee',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IUniswapV2Callee['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IUniswapV2ERC20['callStatic'],
      Args extends Head<GitContractTypes.IUniswapV2ERC20['callStatic'][M]>
    >(
      contract: 'IUniswapV2ERC20',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IUniswapV2ERC20['callStatic'][M]>
  <
      M extends keyof GitContractTypes.UniswapV2ERC20['callStatic'],
      Args extends Head<GitContractTypes.UniswapV2ERC20['callStatic'][M]>
    >(
      contract: 'UniswapV2ERC20',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.UniswapV2ERC20['callStatic'][M]>
  <
      M extends keyof GitContractTypes.UniswapV2Factory['callStatic'],
      Args extends Head<GitContractTypes.UniswapV2Factory['callStatic'][M]>
    >(
      contract: 'UniswapV2Factory',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.UniswapV2Factory['callStatic'][M]>
  <
      M extends keyof GitContractTypes.UniswapV2Pair['callStatic'],
      Args extends Head<GitContractTypes.UniswapV2Pair['callStatic'][M]>
    >(
      contract: 'UniswapV2Pair',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.UniswapV2Pair['callStatic'][M]>
  <
      M extends keyof GitContractTypes.UniswapV2Router02['callStatic'],
      Args extends Head<GitContractTypes.UniswapV2Router02['callStatic'][M]>
    >(
      contract: 'UniswapV2Router02',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.UniswapV2Router02['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ThetaVault['callStatic'],
      Args extends Head<GitContractTypes.ThetaVault['callStatic'][M]>
    >(
      contract: 'ThetaVault',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ThetaVault['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ThetaVaultRequestFulfiller['callStatic'],
      Args extends Head<GitContractTypes.ThetaVaultRequestFulfiller['callStatic'][M]>
    >(
      contract: 'ThetaVaultRequestFulfiller',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ThetaVaultRequestFulfiller['callStatic'][M]>
  <
      M extends keyof GitContractTypes.VolatilityToken['callStatic'],
      Args extends Head<GitContractTypes.VolatilityToken['callStatic'][M]>
    >(
      contract: 'VolatilityToken',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.VolatilityToken['callStatic'][M]>
  <
      M extends keyof GitContractTypes.VolTokenRequestFulfiller['callStatic'],
      Args extends Head<GitContractTypes.VolTokenRequestFulfiller['callStatic'][M]>
    >(
      contract: 'VolTokenRequestFulfiller',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.VolTokenRequestFulfiller['callStatic'][M]>
  <
      M extends keyof GitContractTypes.BaseController['callStatic'],
      Args extends Head<GitContractTypes.BaseController['callStatic'][M]>
    >(
      contract: 'BaseController',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.BaseController['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionConfig['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionConfig['callStatic'][M]>
    >(
      contract: 'ILProtectionConfig',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionConfig['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionController['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionController['callStatic'][M]>
    >(
      contract: 'ILProtectionController',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionController['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionDiscountNFTController['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionDiscountNFTController['callStatic'][M]>
    >(
      contract: 'ILProtectionDiscountNFTController',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionDiscountNFTController['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionNFT['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionNFT['callStatic'][M]>
    >(
      contract: 'ILProtectionNFT',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionNFT['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILiquidityController['callStatic'],
      Args extends Head<GitContractTypes.ILiquidityController['callStatic'][M]>
    >(
      contract: 'ILiquidityController',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILiquidityController['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionConfigInterface['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionConfigInterface['callStatic'][M]>
    >(
      contract: 'ILProtectionConfigInterface',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionConfigInterface['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionControllerInterface['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionControllerInterface['callStatic'][M]>
    >(
      contract: 'ILProtectionControllerInterface',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionControllerInterface['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionDiscountNFTControllerInterface['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionDiscountNFTControllerInterface['callStatic'][M]>
    >(
      contract: 'ILProtectionDiscountNFTControllerInterface',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionDiscountNFTControllerInterface['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionDiscountNFTInterface['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionDiscountNFTInterface['callStatic'][M]>
    >(
      contract: 'ILProtectionDiscountNFTInterface',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionDiscountNFTInterface['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionNFTInterface['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionNFTInterface['callStatic'][M]>
    >(
      contract: 'ILProtectionNFTInterface',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionNFTInterface['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ITokenPairRepository['callStatic'],
      Args extends Head<GitContractTypes.ITokenPairRepository['callStatic'][M]>
    >(
      contract: 'ITokenPairRepository',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ITokenPairRepository['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ITreasuryController['callStatic'],
      Args extends Head<GitContractTypes.ITreasuryController['callStatic'][M]>
    >(
      contract: 'ITreasuryController',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ITreasuryController['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILUtils['callStatic'],
      Args extends Head<GitContractTypes.ILUtils['callStatic'][M]>
    >(
      contract: 'ILUtils',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILUtils['callStatic'][M]>
  <
      M extends keyof GitContractTypes.MathUtils['callStatic'],
      Args extends Head<GitContractTypes.MathUtils['callStatic'][M]>
    >(
      contract: 'MathUtils',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.MathUtils['callStatic'][M]>
  <
      M extends keyof GitContractTypes.PremiumCalculator['callStatic'],
      Args extends Head<GitContractTypes.PremiumCalculator['callStatic'][M]>
    >(
      contract: 'PremiumCalculator',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.PremiumCalculator['callStatic'][M]>
  <
      M extends keyof GitContractTypes.LiquidityController['callStatic'],
      Args extends Head<GitContractTypes.LiquidityController['callStatic'][M]>
    >(
      contract: 'LiquidityController',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.LiquidityController['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionDiscountNFT['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionDiscountNFT['callStatic'][M]>
    >(
      contract: 'ILProtectionDiscountNFT',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionDiscountNFT['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ETHUSDOracle['callStatic'],
      Args extends Head<GitContractTypes.ETHUSDOracle['callStatic'][M]>
    >(
      contract: 'ETHUSDOracle',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ETHUSDOracle['callStatic'][M]>
  <
      M extends keyof GitContractTypes.LINKUSDOracle['callStatic'],
      Args extends Head<GitContractTypes.LINKUSDOracle['callStatic'][M]>
    >(
      contract: 'LINKUSDOracle',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.LINKUSDOracle['callStatic'][M]>
  <
      M extends keyof GitContractTypes.USDUSDOracle['callStatic'],
      Args extends Head<GitContractTypes.USDUSDOracle['callStatic'][M]>
    >(
      contract: 'USDUSDOracle',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.USDUSDOracle['callStatic'][M]>
  <
      M extends keyof GitContractTypes.USDC['callStatic'],
      Args extends Head<GitContractTypes.USDC['callStatic'][M]>
    >(
      contract: 'USDC',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.USDC['callStatic'][M]>
  <
      M extends keyof GitContractTypes.TokenPairRepository['callStatic'],
      Args extends Head<GitContractTypes.TokenPairRepository['callStatic'][M]>
    >(
      contract: 'TokenPairRepository',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.TokenPairRepository['callStatic'][M]>
  <
      M extends keyof GitContractTypes.TreasuryController['callStatic'],
      Args extends Head<GitContractTypes.TreasuryController['callStatic'][M]>
    >(
      contract: 'TreasuryController',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.TreasuryController['callStatic'][M]>
  <
      M extends keyof GitContractTypes.EsGOVI['callStatic'],
      Args extends Head<GitContractTypes.EsGOVI['callStatic'][M]>
    >(
      contract: 'EsGOVI',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.EsGOVI['callStatic'][M]>
  <
      M extends keyof GitContractTypes.EsGOVIRewardTrackerDistributor['callStatic'],
      Args extends Head<GitContractTypes.EsGOVIRewardTrackerDistributor['callStatic'][M]>
    >(
      contract: 'EsGOVIRewardTrackerDistributor',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.EsGOVIRewardTrackerDistributor['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GOVIRewardTrackerDistributor['callStatic'],
      Args extends Head<GitContractTypes.GOVIRewardTrackerDistributor['callStatic'][M]>
    >(
      contract: 'GOVIRewardTrackerDistributor',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GOVIRewardTrackerDistributor['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ThetaVaultRewardTrackerDistributor['callStatic'],
      Args extends Head<GitContractTypes.ThetaVaultRewardTrackerDistributor['callStatic'][M]>
    >(
      contract: 'ThetaVaultRewardTrackerDistributor',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ThetaVaultRewardTrackerDistributor['callStatic'][M]>
  <
      M extends keyof GitContractTypes.EsGOVIRewardTracker['callStatic'],
      Args extends Head<GitContractTypes.EsGOVIRewardTracker['callStatic'][M]>
    >(
      contract: 'EsGOVIRewardTracker',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.EsGOVIRewardTracker['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GOVIRewardTracker['callStatic'],
      Args extends Head<GitContractTypes.GOVIRewardTracker['callStatic'][M]>
    >(
      contract: 'GOVIRewardTracker',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GOVIRewardTracker['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ThetaVaultRewardTracker['callStatic'],
      Args extends Head<GitContractTypes.ThetaVaultRewardTracker['callStatic'][M]>
    >(
      contract: 'ThetaVaultRewardTracker',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ThetaVaultRewardTracker['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GOVIVester['callStatic'],
      Args extends Head<GitContractTypes.GOVIVester['callStatic'][M]>
    >(
      contract: 'GOVIVester',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GOVIVester['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ThetaVaultVester['callStatic'],
      Args extends Head<GitContractTypes.ThetaVaultVester['callStatic'][M]>
    >(
      contract: 'ThetaVaultVester',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ThetaVaultVester['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IMintable['callStatic'],
      Args extends Head<GitContractTypes.IMintable['callStatic'][M]>
    >(
      contract: 'IMintable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IMintable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IRewardDistributor['callStatic'],
      Args extends Head<GitContractTypes.IRewardDistributor['callStatic'][M]>
    >(
      contract: 'IRewardDistributor',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IRewardDistributor['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IRewardRouter['callStatic'],
      Args extends Head<GitContractTypes.IRewardRouter['callStatic'][M]>
    >(
      contract: 'IRewardRouter',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IRewardRouter['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IRewardTracker['callStatic'],
      Args extends Head<GitContractTypes.IRewardTracker['callStatic'][M]>
    >(
      contract: 'IRewardTracker',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IRewardTracker['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IVester['callStatic'],
      Args extends Head<GitContractTypes.IVester['callStatic'][M]>
    >(
      contract: 'IVester',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IVester['callStatic'][M]>
  <
      M extends keyof GitContractTypes.RewardDistributor['callStatic'],
      Args extends Head<GitContractTypes.RewardDistributor['callStatic'][M]>
    >(
      contract: 'RewardDistributor',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.RewardDistributor['callStatic'][M]>
  <
      M extends keyof GitContractTypes.RewardRouter['callStatic'],
      Args extends Head<GitContractTypes.RewardRouter['callStatic'][M]>
    >(
      contract: 'RewardRouter',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.RewardRouter['callStatic'][M]>
  <
      M extends keyof GitContractTypes.RewardTracker['callStatic'],
      Args extends Head<GitContractTypes.RewardTracker['callStatic'][M]>
    >(
      contract: 'RewardTracker',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.RewardTracker['callStatic'][M]>
  <
      M extends keyof GitContractTypes.FakeCVIUSDCThetaVault['callStatic'],
      Args extends Head<GitContractTypes.FakeCVIUSDCThetaVault['callStatic'][M]>
    >(
      contract: 'FakeCVIUSDCThetaVault',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.FakeCVIUSDCThetaVault['callStatic'][M]>
  <
      M extends keyof GitContractTypes.FakeGOVI['callStatic'],
      Args extends Head<GitContractTypes.FakeGOVI['callStatic'][M]>
    >(
      contract: 'FakeGOVI',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.FakeGOVI['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Vester['callStatic'],
      Args extends Head<GitContractTypes.Vester['callStatic'][M]>
    >(
      contract: 'Vester',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Vester['callStatic'][M]>
  <
      M extends keyof GitContractTypes.AccessControlUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.AccessControlUpgradeable['callStatic'][M]>
    >(
      contract: 'AccessControlUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.AccessControlUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IAccessControlUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IAccessControlUpgradeable['callStatic'][M]>
    >(
      contract: 'IAccessControlUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IAccessControlUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.OwnableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.OwnableUpgradeable['callStatic'][M]>
    >(
      contract: 'OwnableUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.OwnableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Initializable['callStatic'],
      Args extends Head<GitContractTypes.Initializable['callStatic'][M]>
    >(
      contract: 'Initializable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Initializable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ReentrancyGuardUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ReentrancyGuardUpgradeable['callStatic'][M]>
    >(
      contract: 'ReentrancyGuardUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ReentrancyGuardUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20Upgradeable['callStatic'][M]>
    >(
      contract: 'ERC20Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC20MetadataUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC20MetadataUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC20MetadataUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC20MetadataUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC20Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC20Upgradeable['callStatic'][M]>
    >(
      contract: 'IERC20Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC20Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC721Upgradeable['callStatic'][M]>
    >(
      contract: 'ERC721Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721EnumerableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC721EnumerableUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC721EnumerableUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721EnumerableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC721EnumerableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC721EnumerableUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC721EnumerableUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC721EnumerableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC721MetadataUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC721MetadataUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC721MetadataUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC721MetadataUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC721ReceiverUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC721ReceiverUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC721ReceiverUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC721ReceiverUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC721Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC721Upgradeable['callStatic'][M]>
    >(
      contract: 'IERC721Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC721Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ContextUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ContextUpgradeable['callStatic'][M]>
    >(
      contract: 'ContextUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ContextUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC165Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC165Upgradeable['callStatic'][M]>
    >(
      contract: 'ERC165Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC165Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC165Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC165Upgradeable['callStatic'][M]>
    >(
      contract: 'IERC165Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC165Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.AccessControl['callStatic'],
      Args extends Head<GitContractTypes.AccessControl['callStatic'][M]>
    >(
      contract: 'AccessControl',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.AccessControl['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IAccessControl['callStatic'],
      Args extends Head<GitContractTypes.IAccessControl['callStatic'][M]>
    >(
      contract: 'IAccessControl',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IAccessControl['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Ownable['callStatic'],
      Args extends Head<GitContractTypes.Ownable['callStatic'][M]>
    >(
      contract: 'Ownable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Ownable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20['callStatic'],
      Args extends Head<GitContractTypes.ERC20['callStatic'][M]>
    >(
      contract: 'ERC20',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC20Metadata['callStatic'],
      Args extends Head<GitContractTypes.IERC20Metadata['callStatic'][M]>
    >(
      contract: 'IERC20Metadata',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC20Metadata['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC165['callStatic'],
      Args extends Head<GitContractTypes.ERC165['callStatic'][M]>
    >(
      contract: 'ERC165',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC165['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC165['callStatic'],
      Args extends Head<GitContractTypes.IERC165['callStatic'][M]>
    >(
      contract: 'IERC165',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC165['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIDeviationOracle['callStatic'],
      Args extends Head<GitContractTypes.CVIDeviationOracle['callStatic'][M]>
    >(
      contract: 'CVIDeviationOracle',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIDeviationOracle['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIFakeFeedOracle['callStatic'],
      Args extends Head<GitContractTypes.CVIFakeFeedOracle['callStatic'][M]>
    >(
      contract: 'CVIFakeFeedOracle',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIFakeFeedOracle['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIOracle2X['callStatic'],
      Args extends Head<GitContractTypes.CVIOracle2X['callStatic'][M]>
    >(
      contract: 'CVIOracle2X',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIOracle2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ETHVIOracle['callStatic'],
      Args extends Head<GitContractTypes.ETHVIOracle['callStatic'][M]>
    >(
      contract: 'ETHVIOracle',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ETHVIOracle['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCFeesCalculator['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCFeesCalculator['callStatic'][M]>
    >(
      contract: 'CVIUSDCFeesCalculator',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCFeesCalculator['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCFeesCalculator2X['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCFeesCalculator2X['callStatic'][M]>
    >(
      contract: 'CVIUSDCFeesCalculator2X',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCFeesCalculator2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCLiquidation['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCLiquidation['callStatic'][M]>
    >(
      contract: 'CVIUSDCLiquidation',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCLiquidation['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCLiquidation2X['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCLiquidation2X['callStatic'][M]>
    >(
      contract: 'CVIUSDCLiquidation2X',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCLiquidation2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCPlatform['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCPlatform['callStatic'][M]>
    >(
      contract: 'CVIUSDCPlatform',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCPlatform['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCPlatform2X['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCPlatform2X['callStatic'][M]>
    >(
      contract: 'CVIUSDCPlatform2X',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCPlatform2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCPositionRewards['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCPositionRewards['callStatic'][M]>
    >(
      contract: 'CVIUSDCPositionRewards',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCPositionRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.StakingV2['callStatic'],
      Args extends Head<GitContractTypes.StakingV2['callStatic'][M]>
    >(
      contract: 'StakingV2',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.StakingV2['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCLPStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCLPStakingRewards['callStatic'][M]>
    >(
      contract: 'CVIUSDCLPStakingRewards',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCLPStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCThetaVault['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCThetaVault['callStatic'][M]>
    >(
      contract: 'CVIUSDCThetaVault',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCThetaVault['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCThetaVault2X['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCThetaVault2X['callStatic'][M]>
    >(
      contract: 'CVIUSDCThetaVault2X',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCThetaVault2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCThetaVaultRequestFulfiller['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller['callStatic'][M]>
    >(
      contract: 'CVIUSDCThetaVaultRequestFulfiller',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X['callStatic'][M]>
    >(
      contract: 'CVIUSDCThetaVaultRequestFulfiller2X',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.WETH['callStatic'],
      Args extends Head<GitContractTypes.WETH['callStatic'][M]>
    >(
      contract: 'WETH',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.WETH['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCRebaser['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCRebaser['callStatic'][M]>
    >(
      contract: 'CVIUSDCRebaser',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCRebaser['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCRebaser2X['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCRebaser2X['callStatic'][M]>
    >(
      contract: 'CVIUSDCRebaser2X',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCRebaser2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCRequestFeesCalculator['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCRequestFeesCalculator['callStatic'][M]>
    >(
      contract: 'CVIUSDCRequestFeesCalculator',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCRequestFeesCalculator['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCRequestFeesCalculator2X['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCRequestFeesCalculator2X['callStatic'][M]>
    >(
      contract: 'CVIUSDCRequestFeesCalculator2X',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCRequestFeesCalculator2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCVolatilityToken['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCVolatilityToken['callStatic'][M]>
    >(
      contract: 'CVIUSDCVolatilityToken',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCVolatilityToken['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCVolatilityToken2X['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCVolatilityToken2X['callStatic'][M]>
    >(
      contract: 'CVIUSDCVolatilityToken2X',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCVolatilityToken2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCVolTokenRequestFulfiller['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCVolTokenRequestFulfiller['callStatic'][M]>
    >(
      contract: 'CVIUSDCVolTokenRequestFulfiller',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCVolTokenRequestFulfiller['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X['callStatic'][M]>
    >(
      contract: 'CVIUSDCVolTokenRequestFulfiller2X',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.AccessControlCrossChainUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.AccessControlCrossChainUpgradeable['callStatic'][M]>
    >(
      contract: 'AccessControlCrossChainUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.AccessControlCrossChainUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.AccessControlEnumerableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.AccessControlEnumerableUpgradeable['callStatic'][M]>
    >(
      contract: 'AccessControlEnumerableUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.AccessControlEnumerableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ConditionalEscrowUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ConditionalEscrowUpgradeable['callStatic'][M]>
    >(
      contract: 'ConditionalEscrowUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ConditionalEscrowUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CrossChainEnabledAMBUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.CrossChainEnabledAMBUpgradeable['callStatic'][M]>
    >(
      contract: 'CrossChainEnabledAMBUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CrossChainEnabledAMBUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable['callStatic'][M]>
    >(
      contract: 'CrossChainEnabledArbitrumL1Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable['callStatic'][M]>
    >(
      contract: 'CrossChainEnabledArbitrumL2Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CrossChainEnabledOptimismUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.CrossChainEnabledOptimismUpgradeable['callStatic'][M]>
    >(
      contract: 'CrossChainEnabledOptimismUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CrossChainEnabledOptimismUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CrossChainEnabledPolygonChildUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable['callStatic'][M]>
    >(
      contract: 'CrossChainEnabledPolygonChildUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CrossChainEnabledUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.CrossChainEnabledUpgradeable['callStatic'][M]>
    >(
      contract: 'CrossChainEnabledUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CrossChainEnabledUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.DoubleEndedQueueUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.DoubleEndedQueueUpgradeable['callStatic'][M]>
    >(
      contract: 'DoubleEndedQueueUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.DoubleEndedQueueUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.EIP712Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.EIP712Upgradeable['callStatic'][M]>
    >(
      contract: 'EIP712Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.EIP712Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155BurnableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155BurnableUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC1155BurnableUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155BurnableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155HolderUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155HolderUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC1155HolderUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155HolderUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155PausableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155PausableUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC1155PausableUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155PausableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155PresetMinterPauserUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155PresetMinterPauserUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC1155PresetMinterPauserUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155PresetMinterPauserUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155ReceiverUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155ReceiverUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC1155ReceiverUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155ReceiverUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155SupplyUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155SupplyUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC1155SupplyUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155SupplyUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155Upgradeable['callStatic'][M]>
    >(
      contract: 'ERC1155Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155URIStorageUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155URIStorageUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC1155URIStorageUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155URIStorageUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC165StorageUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC165StorageUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC165StorageUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC165StorageUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1820ImplementerUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1820ImplementerUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC1820ImplementerUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1820ImplementerUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1967UpgradeUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1967UpgradeUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC1967UpgradeUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1967UpgradeUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20BurnableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20BurnableUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20BurnableUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20BurnableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20CappedUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20CappedUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20CappedUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20CappedUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20FlashMintUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20FlashMintUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20FlashMintUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20FlashMintUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20PausableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20PausableUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20PausableUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20PausableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20PermitUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20PermitUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20PermitUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20PermitUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20PresetFixedSupplyUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20PresetFixedSupplyUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20PresetFixedSupplyUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20PresetFixedSupplyUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20PresetMinterPauserUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20PresetMinterPauserUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20PresetMinterPauserUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20PresetMinterPauserUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20SnapshotUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20SnapshotUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20SnapshotUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20SnapshotUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20VotesCompUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20VotesCompUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20VotesCompUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20VotesCompUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20VotesUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20VotesUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20VotesUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20VotesUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20WrapperUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20WrapperUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20WrapperUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20WrapperUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC2771ContextUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC2771ContextUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC2771ContextUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC2771ContextUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC2981Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC2981Upgradeable['callStatic'][M]>
    >(
      contract: 'ERC2981Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC2981Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721BurnableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC721BurnableUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC721BurnableUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721BurnableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721HolderUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC721HolderUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC721HolderUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721HolderUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721PausableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC721PausableUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC721PausableUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721PausableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC721PresetMinterPauserAutoIdUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721RoyaltyUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC721RoyaltyUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC721RoyaltyUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721RoyaltyUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721URIStorageUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC721URIStorageUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC721URIStorageUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721URIStorageUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721VotesUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC721VotesUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC721VotesUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721VotesUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC777PresetFixedSupplyUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC777PresetFixedSupplyUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC777PresetFixedSupplyUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC777PresetFixedSupplyUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC777Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC777Upgradeable['callStatic'][M]>
    >(
      contract: 'ERC777Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC777Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.EscrowUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.EscrowUpgradeable['callStatic'][M]>
    >(
      contract: 'EscrowUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.EscrowUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorCompatibilityBravoUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorCompatibilityBravoUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorCompatibilityBravoUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorCompatibilityBravoUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorCountingSimpleUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorCountingSimpleUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorCountingSimpleUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorCountingSimpleUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorPreventLateQuorumUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorPreventLateQuorumUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorPreventLateQuorumUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorPreventLateQuorumUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorProposalThresholdUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorProposalThresholdUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorProposalThresholdUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorProposalThresholdUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorSettingsUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorSettingsUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorSettingsUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorSettingsUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorTimelockCompoundUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorTimelockCompoundUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorTimelockCompoundUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorTimelockCompoundUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorTimelockControlUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorTimelockControlUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorTimelockControlUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorTimelockControlUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorVotesCompUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorVotesCompUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorVotesCompUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorVotesCompUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorVotesQuorumFractionUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorVotesQuorumFractionUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorVotesQuorumFractionUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorVotesQuorumFractionUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorVotesUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorVotesUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorVotesUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorVotesUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IAccessControlEnumerableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IAccessControlEnumerableUpgradeable['callStatic'][M]>
    >(
      contract: 'IAccessControlEnumerableUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IAccessControlEnumerableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IAMBUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IAMBUpgradeable['callStatic'][M]>
    >(
      contract: 'IAMBUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IAMBUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IArbSysUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IArbSysUpgradeable['callStatic'][M]>
    >(
      contract: 'IArbSysUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IArbSysUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IBeaconUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IBeaconUpgradeable['callStatic'][M]>
    >(
      contract: 'IBeaconUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IBeaconUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IBridgeUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IBridgeUpgradeable['callStatic'][M]>
    >(
      contract: 'IBridgeUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IBridgeUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ICompoundTimelockUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ICompoundTimelockUpgradeable['callStatic'][M]>
    >(
      contract: 'ICompoundTimelockUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ICompoundTimelockUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ICrossDomainMessengerUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ICrossDomainMessengerUpgradeable['callStatic'][M]>
    >(
      contract: 'ICrossDomainMessengerUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ICrossDomainMessengerUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1155MetadataURIUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1155MetadataURIUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC1155MetadataURIUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1155MetadataURIUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1155ReceiverUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1155ReceiverUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC1155ReceiverUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1155ReceiverUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1155Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1155Upgradeable['callStatic'][M]>
    >(
      contract: 'IERC1155Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1155Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1271Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1271Upgradeable['callStatic'][M]>
    >(
      contract: 'IERC1271Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1271Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1363ReceiverUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1363ReceiverUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC1363ReceiverUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1363ReceiverUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1363SpenderUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1363SpenderUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC1363SpenderUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1363SpenderUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1363Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1363Upgradeable['callStatic'][M]>
    >(
      contract: 'IERC1363Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1363Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1820ImplementerUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1820ImplementerUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC1820ImplementerUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1820ImplementerUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1820RegistryUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1820RegistryUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC1820RegistryUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1820RegistryUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1822ProxiableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1822ProxiableUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC1822ProxiableUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1822ProxiableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC20PermitUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC20PermitUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC20PermitUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC20PermitUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC2612Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC2612Upgradeable['callStatic'][M]>
    >(
      contract: 'IERC2612Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC2612Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC2981Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC2981Upgradeable['callStatic'][M]>
    >(
      contract: 'IERC2981Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC2981Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC3156FlashBorrowerUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC3156FlashBorrowerUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC3156FlashBorrowerUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC3156FlashBorrowerUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC3156FlashLenderUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC3156FlashLenderUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC3156FlashLenderUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC3156FlashLenderUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC777RecipientUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC777RecipientUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC777RecipientUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC777RecipientUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC777SenderUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC777SenderUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC777SenderUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC777SenderUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC777Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC777Upgradeable['callStatic'][M]>
    >(
      contract: 'IERC777Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC777Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IFxMessageProcessorUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IFxMessageProcessorUpgradeable['callStatic'][M]>
    >(
      contract: 'IFxMessageProcessorUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IFxMessageProcessorUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IGovernorCompatibilityBravoUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IGovernorCompatibilityBravoUpgradeable['callStatic'][M]>
    >(
      contract: 'IGovernorCompatibilityBravoUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IGovernorCompatibilityBravoUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IGovernorTimelockUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IGovernorTimelockUpgradeable['callStatic'][M]>
    >(
      contract: 'IGovernorTimelockUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IGovernorTimelockUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IGovernorUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IGovernorUpgradeable['callStatic'][M]>
    >(
      contract: 'IGovernorUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IGovernorUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IInboxUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IInboxUpgradeable['callStatic'][M]>
    >(
      contract: 'IInboxUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IInboxUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IMessageProviderUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IMessageProviderUpgradeable['callStatic'][M]>
    >(
      contract: 'IMessageProviderUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IMessageProviderUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IOutboxUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IOutboxUpgradeable['callStatic'][M]>
    >(
      contract: 'IOutboxUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IOutboxUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IVotesUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IVotesUpgradeable['callStatic'][M]>
    >(
      contract: 'IVotesUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IVotesUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.LibArbitrumL2Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.LibArbitrumL2Upgradeable['callStatic'][M]>
    >(
      contract: 'LibArbitrumL2Upgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.LibArbitrumL2Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.MinimalForwarderUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.MinimalForwarderUpgradeable['callStatic'][M]>
    >(
      contract: 'MinimalForwarderUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.MinimalForwarderUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.MulticallUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.MulticallUpgradeable['callStatic'][M]>
    >(
      contract: 'MulticallUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.MulticallUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.PausableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.PausableUpgradeable['callStatic'][M]>
    >(
      contract: 'PausableUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.PausableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.PaymentSplitterUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.PaymentSplitterUpgradeable['callStatic'][M]>
    >(
      contract: 'PaymentSplitterUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.PaymentSplitterUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.PullPaymentUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.PullPaymentUpgradeable['callStatic'][M]>
    >(
      contract: 'PullPaymentUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.PullPaymentUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.RefundEscrowUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.RefundEscrowUpgradeable['callStatic'][M]>
    >(
      contract: 'RefundEscrowUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.RefundEscrowUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.TimelockControllerUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.TimelockControllerUpgradeable['callStatic'][M]>
    >(
      contract: 'TimelockControllerUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.TimelockControllerUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.TimelockControllerWith46MigrationUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.TimelockControllerWith46MigrationUpgradeable['callStatic'][M]>
    >(
      contract: 'TimelockControllerWith46MigrationUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.TimelockControllerWith46MigrationUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.TokenTimelockUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.TokenTimelockUpgradeable['callStatic'][M]>
    >(
      contract: 'TokenTimelockUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.TokenTimelockUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.UUPSUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.UUPSUpgradeable['callStatic'][M]>
    >(
      contract: 'UUPSUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.UUPSUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.VestingWalletUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.VestingWalletUpgradeable['callStatic'][M]>
    >(
      contract: 'VestingWalletUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.VestingWalletUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.VotesUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.VotesUpgradeable['callStatic'][M]>
    >(
      contract: 'VotesUpgradeable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.VotesUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.AccessControlCrossChain['callStatic'],
      Args extends Head<GitContractTypes.AccessControlCrossChain['callStatic'][M]>
    >(
      contract: 'AccessControlCrossChain',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.AccessControlCrossChain['callStatic'][M]>
  <
      M extends keyof GitContractTypes.AccessControlEnumerable['callStatic'],
      Args extends Head<GitContractTypes.AccessControlEnumerable['callStatic'][M]>
    >(
      contract: 'AccessControlEnumerable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.AccessControlEnumerable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.BeaconProxy['callStatic'],
      Args extends Head<GitContractTypes.BeaconProxy['callStatic'][M]>
    >(
      contract: 'BeaconProxy',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.BeaconProxy['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ConditionalEscrow['callStatic'],
      Args extends Head<GitContractTypes.ConditionalEscrow['callStatic'][M]>
    >(
      contract: 'ConditionalEscrow',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ConditionalEscrow['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CrossChainEnabledAMB['callStatic'],
      Args extends Head<GitContractTypes.CrossChainEnabledAMB['callStatic'][M]>
    >(
      contract: 'CrossChainEnabledAMB',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CrossChainEnabledAMB['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CrossChainEnabledPolygonChild['callStatic'],
      Args extends Head<GitContractTypes.CrossChainEnabledPolygonChild['callStatic'][M]>
    >(
      contract: 'CrossChainEnabledPolygonChild',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CrossChainEnabledPolygonChild['callStatic'][M]>
  <
      M extends keyof GitContractTypes.DoubleEndedQueue['callStatic'],
      Args extends Head<GitContractTypes.DoubleEndedQueue['callStatic'][M]>
    >(
      contract: 'DoubleEndedQueue',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.DoubleEndedQueue['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155['callStatic'],
      Args extends Head<GitContractTypes.ERC1155['callStatic'][M]>
    >(
      contract: 'ERC1155',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155Burnable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155Burnable['callStatic'][M]>
    >(
      contract: 'ERC1155Burnable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155Burnable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155Holder['callStatic'],
      Args extends Head<GitContractTypes.ERC1155Holder['callStatic'][M]>
    >(
      contract: 'ERC1155Holder',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155Holder['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155Pausable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155Pausable['callStatic'][M]>
    >(
      contract: 'ERC1155Pausable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155Pausable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155PresetMinterPauser['callStatic'],
      Args extends Head<GitContractTypes.ERC1155PresetMinterPauser['callStatic'][M]>
    >(
      contract: 'ERC1155PresetMinterPauser',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155PresetMinterPauser['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155Receiver['callStatic'],
      Args extends Head<GitContractTypes.ERC1155Receiver['callStatic'][M]>
    >(
      contract: 'ERC1155Receiver',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155Receiver['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155Supply['callStatic'],
      Args extends Head<GitContractTypes.ERC1155Supply['callStatic'][M]>
    >(
      contract: 'ERC1155Supply',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155Supply['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155URIStorage['callStatic'],
      Args extends Head<GitContractTypes.ERC1155URIStorage['callStatic'][M]>
    >(
      contract: 'ERC1155URIStorage',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155URIStorage['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC165Storage['callStatic'],
      Args extends Head<GitContractTypes.ERC165Storage['callStatic'][M]>
    >(
      contract: 'ERC165Storage',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC165Storage['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1820Implementer['callStatic'],
      Args extends Head<GitContractTypes.ERC1820Implementer['callStatic'][M]>
    >(
      contract: 'ERC1820Implementer',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1820Implementer['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1967Proxy['callStatic'],
      Args extends Head<GitContractTypes.ERC1967Proxy['callStatic'][M]>
    >(
      contract: 'ERC1967Proxy',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1967Proxy['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1967Upgrade['callStatic'],
      Args extends Head<GitContractTypes.ERC1967Upgrade['callStatic'][M]>
    >(
      contract: 'ERC1967Upgrade',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1967Upgrade['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20Burnable['callStatic'],
      Args extends Head<GitContractTypes.ERC20Burnable['callStatic'][M]>
    >(
      contract: 'ERC20Burnable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20Burnable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20Capped['callStatic'],
      Args extends Head<GitContractTypes.ERC20Capped['callStatic'][M]>
    >(
      contract: 'ERC20Capped',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20Capped['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20FlashMint['callStatic'],
      Args extends Head<GitContractTypes.ERC20FlashMint['callStatic'][M]>
    >(
      contract: 'ERC20FlashMint',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20FlashMint['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20Pausable['callStatic'],
      Args extends Head<GitContractTypes.ERC20Pausable['callStatic'][M]>
    >(
      contract: 'ERC20Pausable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20Pausable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20Permit['callStatic'],
      Args extends Head<GitContractTypes.ERC20Permit['callStatic'][M]>
    >(
      contract: 'ERC20Permit',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20Permit['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20PresetFixedSupply['callStatic'],
      Args extends Head<GitContractTypes.ERC20PresetFixedSupply['callStatic'][M]>
    >(
      contract: 'ERC20PresetFixedSupply',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20PresetFixedSupply['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20PresetMinterPauser['callStatic'],
      Args extends Head<GitContractTypes.ERC20PresetMinterPauser['callStatic'][M]>
    >(
      contract: 'ERC20PresetMinterPauser',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20PresetMinterPauser['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20Snapshot['callStatic'],
      Args extends Head<GitContractTypes.ERC20Snapshot['callStatic'][M]>
    >(
      contract: 'ERC20Snapshot',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20Snapshot['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20Votes['callStatic'],
      Args extends Head<GitContractTypes.ERC20Votes['callStatic'][M]>
    >(
      contract: 'ERC20Votes',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20Votes['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20VotesComp['callStatic'],
      Args extends Head<GitContractTypes.ERC20VotesComp['callStatic'][M]>
    >(
      contract: 'ERC20VotesComp',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20VotesComp['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20Wrapper['callStatic'],
      Args extends Head<GitContractTypes.ERC20Wrapper['callStatic'][M]>
    >(
      contract: 'ERC20Wrapper',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20Wrapper['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC2771Context['callStatic'],
      Args extends Head<GitContractTypes.ERC2771Context['callStatic'][M]>
    >(
      contract: 'ERC2771Context',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC2771Context['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC2981['callStatic'],
      Args extends Head<GitContractTypes.ERC2981['callStatic'][M]>
    >(
      contract: 'ERC2981',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC2981['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721['callStatic'],
      Args extends Head<GitContractTypes.ERC721['callStatic'][M]>
    >(
      contract: 'ERC721',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721Burnable['callStatic'],
      Args extends Head<GitContractTypes.ERC721Burnable['callStatic'][M]>
    >(
      contract: 'ERC721Burnable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721Burnable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721Enumerable['callStatic'],
      Args extends Head<GitContractTypes.ERC721Enumerable['callStatic'][M]>
    >(
      contract: 'ERC721Enumerable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721Enumerable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721Holder['callStatic'],
      Args extends Head<GitContractTypes.ERC721Holder['callStatic'][M]>
    >(
      contract: 'ERC721Holder',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721Holder['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721Pausable['callStatic'],
      Args extends Head<GitContractTypes.ERC721Pausable['callStatic'][M]>
    >(
      contract: 'ERC721Pausable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721Pausable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721PresetMinterPauserAutoId['callStatic'],
      Args extends Head<GitContractTypes.ERC721PresetMinterPauserAutoId['callStatic'][M]>
    >(
      contract: 'ERC721PresetMinterPauserAutoId',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721PresetMinterPauserAutoId['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721Royalty['callStatic'],
      Args extends Head<GitContractTypes.ERC721Royalty['callStatic'][M]>
    >(
      contract: 'ERC721Royalty',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721Royalty['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721URIStorage['callStatic'],
      Args extends Head<GitContractTypes.ERC721URIStorage['callStatic'][M]>
    >(
      contract: 'ERC721URIStorage',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721URIStorage['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721Votes['callStatic'],
      Args extends Head<GitContractTypes.ERC721Votes['callStatic'][M]>
    >(
      contract: 'ERC721Votes',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721Votes['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC777['callStatic'],
      Args extends Head<GitContractTypes.ERC777['callStatic'][M]>
    >(
      contract: 'ERC777',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC777['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC777PresetFixedSupply['callStatic'],
      Args extends Head<GitContractTypes.ERC777PresetFixedSupply['callStatic'][M]>
    >(
      contract: 'ERC777PresetFixedSupply',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC777PresetFixedSupply['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Escrow['callStatic'],
      Args extends Head<GitContractTypes.Escrow['callStatic'][M]>
    >(
      contract: 'Escrow',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Escrow['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Governor['callStatic'],
      Args extends Head<GitContractTypes.Governor['callStatic'][M]>
    >(
      contract: 'Governor',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Governor['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorCompatibilityBravo['callStatic'],
      Args extends Head<GitContractTypes.GovernorCompatibilityBravo['callStatic'][M]>
    >(
      contract: 'GovernorCompatibilityBravo',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorCompatibilityBravo['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorCountingSimple['callStatic'],
      Args extends Head<GitContractTypes.GovernorCountingSimple['callStatic'][M]>
    >(
      contract: 'GovernorCountingSimple',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorCountingSimple['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorPreventLateQuorum['callStatic'],
      Args extends Head<GitContractTypes.GovernorPreventLateQuorum['callStatic'][M]>
    >(
      contract: 'GovernorPreventLateQuorum',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorPreventLateQuorum['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorProposalThreshold['callStatic'],
      Args extends Head<GitContractTypes.GovernorProposalThreshold['callStatic'][M]>
    >(
      contract: 'GovernorProposalThreshold',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorProposalThreshold['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorSettings['callStatic'],
      Args extends Head<GitContractTypes.GovernorSettings['callStatic'][M]>
    >(
      contract: 'GovernorSettings',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorSettings['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorTimelockCompound['callStatic'],
      Args extends Head<GitContractTypes.GovernorTimelockCompound['callStatic'][M]>
    >(
      contract: 'GovernorTimelockCompound',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorTimelockCompound['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorTimelockControl['callStatic'],
      Args extends Head<GitContractTypes.GovernorTimelockControl['callStatic'][M]>
    >(
      contract: 'GovernorTimelockControl',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorTimelockControl['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorVotes['callStatic'],
      Args extends Head<GitContractTypes.GovernorVotes['callStatic'][M]>
    >(
      contract: 'GovernorVotes',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorVotes['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorVotesComp['callStatic'],
      Args extends Head<GitContractTypes.GovernorVotesComp['callStatic'][M]>
    >(
      contract: 'GovernorVotesComp',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorVotesComp['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorVotesQuorumFraction['callStatic'],
      Args extends Head<GitContractTypes.GovernorVotesQuorumFraction['callStatic'][M]>
    >(
      contract: 'GovernorVotesQuorumFraction',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorVotesQuorumFraction['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IAccessControlEnumerable['callStatic'],
      Args extends Head<GitContractTypes.IAccessControlEnumerable['callStatic'][M]>
    >(
      contract: 'IAccessControlEnumerable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IAccessControlEnumerable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IAMB['callStatic'],
      Args extends Head<GitContractTypes.IAMB['callStatic'][M]>
    >(
      contract: 'IAMB',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IAMB['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IArbSys['callStatic'],
      Args extends Head<GitContractTypes.IArbSys['callStatic'][M]>
    >(
      contract: 'IArbSys',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IArbSys['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IBeacon['callStatic'],
      Args extends Head<GitContractTypes.IBeacon['callStatic'][M]>
    >(
      contract: 'IBeacon',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IBeacon['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IBridge['callStatic'],
      Args extends Head<GitContractTypes.IBridge['callStatic'][M]>
    >(
      contract: 'IBridge',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IBridge['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ICompoundTimelock['callStatic'],
      Args extends Head<GitContractTypes.ICompoundTimelock['callStatic'][M]>
    >(
      contract: 'ICompoundTimelock',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ICompoundTimelock['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ICrossDomainMessenger['callStatic'],
      Args extends Head<GitContractTypes.ICrossDomainMessenger['callStatic'][M]>
    >(
      contract: 'ICrossDomainMessenger',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ICrossDomainMessenger['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1155['callStatic'],
      Args extends Head<GitContractTypes.IERC1155['callStatic'][M]>
    >(
      contract: 'IERC1155',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1155['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1155MetadataURI['callStatic'],
      Args extends Head<GitContractTypes.IERC1155MetadataURI['callStatic'][M]>
    >(
      contract: 'IERC1155MetadataURI',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1155MetadataURI['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1155Receiver['callStatic'],
      Args extends Head<GitContractTypes.IERC1155Receiver['callStatic'][M]>
    >(
      contract: 'IERC1155Receiver',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1155Receiver['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1271['callStatic'],
      Args extends Head<GitContractTypes.IERC1271['callStatic'][M]>
    >(
      contract: 'IERC1271',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1271['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1363['callStatic'],
      Args extends Head<GitContractTypes.IERC1363['callStatic'][M]>
    >(
      contract: 'IERC1363',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1363['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1363Receiver['callStatic'],
      Args extends Head<GitContractTypes.IERC1363Receiver['callStatic'][M]>
    >(
      contract: 'IERC1363Receiver',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1363Receiver['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1363Spender['callStatic'],
      Args extends Head<GitContractTypes.IERC1363Spender['callStatic'][M]>
    >(
      contract: 'IERC1363Spender',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1363Spender['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1820Implementer['callStatic'],
      Args extends Head<GitContractTypes.IERC1820Implementer['callStatic'][M]>
    >(
      contract: 'IERC1820Implementer',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1820Implementer['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1820Registry['callStatic'],
      Args extends Head<GitContractTypes.IERC1820Registry['callStatic'][M]>
    >(
      contract: 'IERC1820Registry',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1820Registry['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1822Proxiable['callStatic'],
      Args extends Head<GitContractTypes.IERC1822Proxiable['callStatic'][M]>
    >(
      contract: 'IERC1822Proxiable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1822Proxiable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC20Permit['callStatic'],
      Args extends Head<GitContractTypes.IERC20Permit['callStatic'][M]>
    >(
      contract: 'IERC20Permit',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC20Permit['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC2612['callStatic'],
      Args extends Head<GitContractTypes.IERC2612['callStatic'][M]>
    >(
      contract: 'IERC2612',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC2612['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC2981['callStatic'],
      Args extends Head<GitContractTypes.IERC2981['callStatic'][M]>
    >(
      contract: 'IERC2981',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC2981['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC3156FlashBorrower['callStatic'],
      Args extends Head<GitContractTypes.IERC3156FlashBorrower['callStatic'][M]>
    >(
      contract: 'IERC3156FlashBorrower',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC3156FlashBorrower['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC3156FlashLender['callStatic'],
      Args extends Head<GitContractTypes.IERC3156FlashLender['callStatic'][M]>
    >(
      contract: 'IERC3156FlashLender',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC3156FlashLender['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC721['callStatic'],
      Args extends Head<GitContractTypes.IERC721['callStatic'][M]>
    >(
      contract: 'IERC721',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC721['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC721Enumerable['callStatic'],
      Args extends Head<GitContractTypes.IERC721Enumerable['callStatic'][M]>
    >(
      contract: 'IERC721Enumerable',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC721Enumerable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC721Metadata['callStatic'],
      Args extends Head<GitContractTypes.IERC721Metadata['callStatic'][M]>
    >(
      contract: 'IERC721Metadata',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC721Metadata['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC721Receiver['callStatic'],
      Args extends Head<GitContractTypes.IERC721Receiver['callStatic'][M]>
    >(
      contract: 'IERC721Receiver',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC721Receiver['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC777['callStatic'],
      Args extends Head<GitContractTypes.IERC777['callStatic'][M]>
    >(
      contract: 'IERC777',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC777['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC777Recipient['callStatic'],
      Args extends Head<GitContractTypes.IERC777Recipient['callStatic'][M]>
    >(
      contract: 'IERC777Recipient',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC777Recipient['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC777Sender['callStatic'],
      Args extends Head<GitContractTypes.IERC777Sender['callStatic'][M]>
    >(
      contract: 'IERC777Sender',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC777Sender['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IFxMessageProcessor['callStatic'],
      Args extends Head<GitContractTypes.IFxMessageProcessor['callStatic'][M]>
    >(
      contract: 'IFxMessageProcessor',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IFxMessageProcessor['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IGovernor['callStatic'],
      Args extends Head<GitContractTypes.IGovernor['callStatic'][M]>
    >(
      contract: 'IGovernor',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IGovernor['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IGovernorCompatibilityBravo['callStatic'],
      Args extends Head<GitContractTypes.IGovernorCompatibilityBravo['callStatic'][M]>
    >(
      contract: 'IGovernorCompatibilityBravo',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IGovernorCompatibilityBravo['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IGovernorTimelock['callStatic'],
      Args extends Head<GitContractTypes.IGovernorTimelock['callStatic'][M]>
    >(
      contract: 'IGovernorTimelock',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IGovernorTimelock['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IMessageProvider['callStatic'],
      Args extends Head<GitContractTypes.IMessageProvider['callStatic'][M]>
    >(
      contract: 'IMessageProvider',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IMessageProvider['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IOutbox['callStatic'],
      Args extends Head<GitContractTypes.IOutbox['callStatic'][M]>
    >(
      contract: 'IOutbox',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IOutbox['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IVotes['callStatic'],
      Args extends Head<GitContractTypes.IVotes['callStatic'][M]>
    >(
      contract: 'IVotes',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IVotes['callStatic'][M]>
  <
      M extends keyof GitContractTypes.LibArbitrumL2['callStatic'],
      Args extends Head<GitContractTypes.LibArbitrumL2['callStatic'][M]>
    >(
      contract: 'LibArbitrumL2',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.LibArbitrumL2['callStatic'][M]>
  <
      M extends keyof GitContractTypes.MinimalForwarder['callStatic'],
      Args extends Head<GitContractTypes.MinimalForwarder['callStatic'][M]>
    >(
      contract: 'MinimalForwarder',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.MinimalForwarder['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Multicall['callStatic'],
      Args extends Head<GitContractTypes.Multicall['callStatic'][M]>
    >(
      contract: 'Multicall',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Multicall['callStatic'][M]>
  <
      M extends keyof GitContractTypes.PaymentSplitter['callStatic'],
      Args extends Head<GitContractTypes.PaymentSplitter['callStatic'][M]>
    >(
      contract: 'PaymentSplitter',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.PaymentSplitter['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Proxy['callStatic'],
      Args extends Head<GitContractTypes.Proxy['callStatic'][M]>
    >(
      contract: 'Proxy',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Proxy['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ProxyAdmin['callStatic'],
      Args extends Head<GitContractTypes.ProxyAdmin['callStatic'][M]>
    >(
      contract: 'ProxyAdmin',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ProxyAdmin['callStatic'][M]>
  <
      M extends keyof GitContractTypes.PullPayment['callStatic'],
      Args extends Head<GitContractTypes.PullPayment['callStatic'][M]>
    >(
      contract: 'PullPayment',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.PullPayment['callStatic'][M]>
  <
      M extends keyof GitContractTypes.RefundEscrow['callStatic'],
      Args extends Head<GitContractTypes.RefundEscrow['callStatic'][M]>
    >(
      contract: 'RefundEscrow',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.RefundEscrow['callStatic'][M]>
  <
      M extends keyof GitContractTypes.TimelockController['callStatic'],
      Args extends Head<GitContractTypes.TimelockController['callStatic'][M]>
    >(
      contract: 'TimelockController',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.TimelockController['callStatic'][M]>
  <
      M extends keyof GitContractTypes.TokenTimelock['callStatic'],
      Args extends Head<GitContractTypes.TokenTimelock['callStatic'][M]>
    >(
      contract: 'TokenTimelock',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.TokenTimelock['callStatic'][M]>
  <
      M extends keyof GitContractTypes.TransparentUpgradeableProxy['callStatic'],
      Args extends Head<GitContractTypes.TransparentUpgradeableProxy['callStatic'][M]>
    >(
      contract: 'TransparentUpgradeableProxy',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.TransparentUpgradeableProxy['callStatic'][M]>
  <
      M extends keyof GitContractTypes.UpgradeableBeacon['callStatic'],
      Args extends Head<GitContractTypes.UpgradeableBeacon['callStatic'][M]>
    >(
      contract: 'UpgradeableBeacon',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.UpgradeableBeacon['callStatic'][M]>
  <
      M extends keyof GitContractTypes.VestingWallet['callStatic'],
      Args extends Head<GitContractTypes.VestingWallet['callStatic'][M]>
    >(
      contract: 'VestingWallet',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.VestingWallet['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Votes['callStatic'],
      Args extends Head<GitContractTypes.Votes['callStatic'][M]>
    >(
      contract: 'Votes',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Votes['callStatic'][M]>
  <
      M extends keyof GitContractTypes.UniswapV2Migrator['callStatic'],
      Args extends Head<GitContractTypes.UniswapV2Migrator['callStatic'][M]>
    >(
      contract: 'UniswapV2Migrator',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.UniswapV2Migrator['callStatic'][M]>
  <
      M extends keyof GitContractTypes.UniswapV2Router01['callStatic'],
      Args extends Head<GitContractTypes.UniswapV2Router01['callStatic'][M]>
    >(
      contract: 'UniswapV2Router01',
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.UniswapV2Router01['callStatic'][M]>
}


// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------

export interface HardhatGrantRoleIfNotSetOverloads {
  (
      contract: 'KeeperCompatibleInterface',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'KeeperBase',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'KeeperCompatible',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIOracle',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ElasticToken',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IUniswapV2Factory',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IUniswapV2Pair',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IUniswapV2Router01',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IUniswapV2Router02',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'WETH9',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'FeesCalculator',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GOVI',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'AggregatorInterface',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'AggregatorV2V3Interface',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'AggregatorV3Interface',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ICVIOracle',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IElasticToken',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IFeesCalculator',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IFeesCollector',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IFeesCollectorManagement',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IInbox',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IKeepersFeeVault',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ILiquidation',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IPlatform',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IPlatformHelper',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IPositionRewards',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IRebaser',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IRequestFeesCalculator',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IRequestFulfiller',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IRequestManager',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IRewardsCollector',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IStaking',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IStakingVault',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IThetaVault',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IThetaVaultInfo',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ITreasury',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IVolatilityToken',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IWETH',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'KeepersFeeVault',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'Liquidation',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'Platform',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'PlatformHelper',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'PositionRewards',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'Rebaser',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'RequestFeesCalculator',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'RequestFulfiller',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'FeesCollector',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'Staking',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'COTIETHSLPStakingRewards',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'COTIETHStakingRewards',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVOLUSDCLPStakingRewards',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ETHLPStakingRewards',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ETHVOL_USDCLPStakingRewards',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ETHVOLUSDCLPStakingRewards',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GOVIETHSLPStakingRewards',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GOVIETHStakingRewards',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'USDCLPStakingRewards',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'USDTLPStakingRewards',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IStakingRewards',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'Owned',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'Pausable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'RewardsDistributionRecipient',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'StakingRewards',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'StakingVault',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'Treasury',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIFeedOracle',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'FakeERC20',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'FakePriceProvider',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC20',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IUniswapV2Callee',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IUniswapV2ERC20',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'UniswapV2ERC20',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'UniswapV2Factory',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'UniswapV2Pair',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'UniswapV2Router02',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ThetaVault',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ThetaVaultRequestFulfiller',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'VolatilityToken',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'VolTokenRequestFulfiller',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'BaseController',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ILProtectionConfig',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ILProtectionController',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ILProtectionDiscountNFTController',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ILProtectionNFT',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ILiquidityController',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ILProtectionConfigInterface',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ILProtectionControllerInterface',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ILProtectionDiscountNFTControllerInterface',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ILProtectionDiscountNFTInterface',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ILProtectionNFTInterface',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ITokenPairRepository',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ITreasuryController',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ILUtils',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'MathUtils',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'PremiumCalculator',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'LiquidityController',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ILProtectionDiscountNFT',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ETHUSDOracle',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'LINKUSDOracle',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'USDUSDOracle',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'USDC',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'TokenPairRepository',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'TreasuryController',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'EsGOVI',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'EsGOVIRewardTrackerDistributor',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GOVIRewardTrackerDistributor',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ThetaVaultRewardTrackerDistributor',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'EsGOVIRewardTracker',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GOVIRewardTracker',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ThetaVaultRewardTracker',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GOVIVester',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ThetaVaultVester',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IMintable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IRewardDistributor',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IRewardRouter',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IRewardTracker',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IVester',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'RewardDistributor',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'RewardRouter',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'RewardTracker',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'FakeCVIUSDCThetaVault',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'FakeGOVI',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'Vester',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'AccessControlUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IAccessControlUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'OwnableUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'Initializable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ReentrancyGuardUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC20MetadataUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC20Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC721Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC721EnumerableUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC721EnumerableUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC721MetadataUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC721ReceiverUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC721Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ContextUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC165Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC165Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'AccessControl',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IAccessControl',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'Ownable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC20Metadata',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC165',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC165',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIDeviationOracle',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIFakeFeedOracle',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIOracle2X',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ETHVIOracle',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCFeesCalculator',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCFeesCalculator2X',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCLiquidation',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCLiquidation2X',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCPlatform',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCPlatform2X',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCPositionRewards',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'StakingV2',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCLPStakingRewards',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCThetaVault',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCThetaVault2X',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCThetaVaultRequestFulfiller',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCThetaVaultRequestFulfiller2X',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'WETH',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCRebaser',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCRebaser2X',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCRequestFeesCalculator',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCRequestFeesCalculator2X',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCVolatilityToken',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCVolatilityToken2X',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCVolTokenRequestFulfiller',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CVIUSDCVolTokenRequestFulfiller2X',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'AccessControlCrossChainUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'AccessControlEnumerableUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ConditionalEscrowUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CrossChainEnabledAMBUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CrossChainEnabledArbitrumL1Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CrossChainEnabledArbitrumL2Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CrossChainEnabledOptimismUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CrossChainEnabledPolygonChildUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CrossChainEnabledUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'DoubleEndedQueueUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'EIP712Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1155BurnableUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1155HolderUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1155PausableUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1155PresetMinterPauserUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1155ReceiverUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1155SupplyUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1155Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1155URIStorageUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC165StorageUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1820ImplementerUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1967UpgradeUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20BurnableUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20CappedUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20FlashMintUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20PausableUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20PermitUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20PresetFixedSupplyUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20PresetMinterPauserUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20SnapshotUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20VotesCompUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20VotesUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20WrapperUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC2771ContextUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC2981Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC721BurnableUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC721HolderUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC721PausableUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC721PresetMinterPauserAutoIdUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC721RoyaltyUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC721URIStorageUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC721VotesUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC777PresetFixedSupplyUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC777Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'EscrowUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorCompatibilityBravoUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorCountingSimpleUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorPreventLateQuorumUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorProposalThresholdUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorSettingsUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorTimelockCompoundUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorTimelockControlUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorVotesCompUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorVotesQuorumFractionUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorVotesUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IAccessControlEnumerableUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IAMBUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IArbSysUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IBeaconUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IBridgeUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ICompoundTimelockUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ICrossDomainMessengerUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1155MetadataURIUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1155ReceiverUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1155Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1271Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1363ReceiverUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1363SpenderUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1363Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1820ImplementerUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1820RegistryUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1822ProxiableUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC20PermitUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC2612Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC2981Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC3156FlashBorrowerUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC3156FlashLenderUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC777RecipientUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC777SenderUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC777Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IFxMessageProcessorUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IGovernorCompatibilityBravoUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IGovernorTimelockUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IGovernorUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IInboxUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IMessageProviderUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IOutboxUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IVotesUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'LibArbitrumL2Upgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'MinimalForwarderUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'MulticallUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'PausableUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'PaymentSplitterUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'PullPaymentUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'RefundEscrowUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'TimelockControllerUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'TimelockControllerWith46MigrationUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'TokenTimelockUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'UUPSUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'VestingWalletUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'VotesUpgradeable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'AccessControlCrossChain',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'AccessControlEnumerable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'BeaconProxy',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ConditionalEscrow',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CrossChainEnabledAMB',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'CrossChainEnabledPolygonChild',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'DoubleEndedQueue',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1155',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1155Burnable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1155Holder',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1155Pausable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1155PresetMinterPauser',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1155Receiver',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1155Supply',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1155URIStorage',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC165Storage',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1820Implementer',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1967Proxy',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC1967Upgrade',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20Burnable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20Capped',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20FlashMint',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20Pausable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20Permit',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20PresetFixedSupply',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20PresetMinterPauser',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20Snapshot',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20Votes',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20VotesComp',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC20Wrapper',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC2771Context',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC2981',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC721',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC721Burnable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC721Enumerable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC721Holder',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC721Pausable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC721PresetMinterPauserAutoId',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC721Royalty',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC721URIStorage',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC721Votes',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC777',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ERC777PresetFixedSupply',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'Escrow',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'Governor',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorCompatibilityBravo',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorCountingSimple',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorPreventLateQuorum',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorProposalThreshold',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorSettings',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorTimelockCompound',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorTimelockControl',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorVotes',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorVotesComp',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'GovernorVotesQuorumFraction',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IAccessControlEnumerable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IAMB',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IArbSys',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IBeacon',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IBridge',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ICompoundTimelock',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ICrossDomainMessenger',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1155',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1155MetadataURI',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1155Receiver',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1271',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1363',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1363Receiver',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1363Spender',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1820Implementer',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1820Registry',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC1822Proxiable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC20Permit',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC2612',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC2981',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC3156FlashBorrower',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC3156FlashLender',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC721',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC721Enumerable',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC721Metadata',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC721Receiver',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC777',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC777Recipient',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IERC777Sender',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IFxMessageProcessor',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IGovernor',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IGovernorCompatibilityBravo',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IGovernorTimelock',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IMessageProvider',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IOutbox',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'IVotes',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'LibArbitrumL2',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'MinimalForwarder',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'Multicall',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'PaymentSplitter',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'Proxy',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'ProxyAdmin',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'PullPayment',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'RefundEscrow',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'TimelockController',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'TokenTimelock',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'TransparentUpgradeableProxy',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'UpgradeableBeacon',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'VestingWallet',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'Votes',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'UniswapV2Migrator',
      roleAddress: string,
      role: string
    ): Promise<void>
  (
      contract: 'UniswapV2Router01',
      roleAddress: string,
      role: string
    ): Promise<void>
}


// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------

export interface HardhatReadWithNameOverloads {
  <
      M extends keyof GitContractTypes.KeeperCompatibleInterface['callStatic'],
      Args extends Head<GitContractTypes.KeeperCompatibleInterface['callStatic'][M]>
    >(
      contract: 'KeeperCompatibleInterface',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.KeeperCompatibleInterface['callStatic'][M]>
  <
      M extends keyof GitContractTypes.KeeperBase['callStatic'],
      Args extends Head<GitContractTypes.KeeperBase['callStatic'][M]>
    >(
      contract: 'KeeperBase',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.KeeperBase['callStatic'][M]>
  <
      M extends keyof GitContractTypes.KeeperCompatible['callStatic'],
      Args extends Head<GitContractTypes.KeeperCompatible['callStatic'][M]>
    >(
      contract: 'KeeperCompatible',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.KeeperCompatible['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIOracle['callStatic'],
      Args extends Head<GitContractTypes.CVIOracle['callStatic'][M]>
    >(
      contract: 'CVIOracle',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIOracle['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ElasticToken['callStatic'],
      Args extends Head<GitContractTypes.ElasticToken['callStatic'][M]>
    >(
      contract: 'ElasticToken',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ElasticToken['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IUniswapV2Factory['callStatic'],
      Args extends Head<GitContractTypes.IUniswapV2Factory['callStatic'][M]>
    >(
      contract: 'IUniswapV2Factory',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IUniswapV2Factory['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IUniswapV2Pair['callStatic'],
      Args extends Head<GitContractTypes.IUniswapV2Pair['callStatic'][M]>
    >(
      contract: 'IUniswapV2Pair',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IUniswapV2Pair['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IUniswapV2Router01['callStatic'],
      Args extends Head<GitContractTypes.IUniswapV2Router01['callStatic'][M]>
    >(
      contract: 'IUniswapV2Router01',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IUniswapV2Router01['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IUniswapV2Router02['callStatic'],
      Args extends Head<GitContractTypes.IUniswapV2Router02['callStatic'][M]>
    >(
      contract: 'IUniswapV2Router02',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IUniswapV2Router02['callStatic'][M]>
  <
      M extends keyof GitContractTypes.WETH9['callStatic'],
      Args extends Head<GitContractTypes.WETH9['callStatic'][M]>
    >(
      contract: 'WETH9',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.WETH9['callStatic'][M]>
  <
      M extends keyof GitContractTypes.FeesCalculator['callStatic'],
      Args extends Head<GitContractTypes.FeesCalculator['callStatic'][M]>
    >(
      contract: 'FeesCalculator',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.FeesCalculator['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GOVI['callStatic'],
      Args extends Head<GitContractTypes.GOVI['callStatic'][M]>
    >(
      contract: 'GOVI',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GOVI['callStatic'][M]>
  <
      M extends keyof GitContractTypes.AggregatorInterface['callStatic'],
      Args extends Head<GitContractTypes.AggregatorInterface['callStatic'][M]>
    >(
      contract: 'AggregatorInterface',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.AggregatorInterface['callStatic'][M]>
  <
      M extends keyof GitContractTypes.AggregatorV2V3Interface['callStatic'],
      Args extends Head<GitContractTypes.AggregatorV2V3Interface['callStatic'][M]>
    >(
      contract: 'AggregatorV2V3Interface',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.AggregatorV2V3Interface['callStatic'][M]>
  <
      M extends keyof GitContractTypes.AggregatorV3Interface['callStatic'],
      Args extends Head<GitContractTypes.AggregatorV3Interface['callStatic'][M]>
    >(
      contract: 'AggregatorV3Interface',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.AggregatorV3Interface['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ICVIOracle['callStatic'],
      Args extends Head<GitContractTypes.ICVIOracle['callStatic'][M]>
    >(
      contract: 'ICVIOracle',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ICVIOracle['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IElasticToken['callStatic'],
      Args extends Head<GitContractTypes.IElasticToken['callStatic'][M]>
    >(
      contract: 'IElasticToken',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IElasticToken['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IFeesCalculator['callStatic'],
      Args extends Head<GitContractTypes.IFeesCalculator['callStatic'][M]>
    >(
      contract: 'IFeesCalculator',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IFeesCalculator['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IFeesCollector['callStatic'],
      Args extends Head<GitContractTypes.IFeesCollector['callStatic'][M]>
    >(
      contract: 'IFeesCollector',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IFeesCollector['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IFeesCollectorManagement['callStatic'],
      Args extends Head<GitContractTypes.IFeesCollectorManagement['callStatic'][M]>
    >(
      contract: 'IFeesCollectorManagement',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IFeesCollectorManagement['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IInbox['callStatic'],
      Args extends Head<GitContractTypes.IInbox['callStatic'][M]>
    >(
      contract: 'IInbox',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IInbox['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IKeepersFeeVault['callStatic'],
      Args extends Head<GitContractTypes.IKeepersFeeVault['callStatic'][M]>
    >(
      contract: 'IKeepersFeeVault',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IKeepersFeeVault['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILiquidation['callStatic'],
      Args extends Head<GitContractTypes.ILiquidation['callStatic'][M]>
    >(
      contract: 'ILiquidation',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILiquidation['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IPlatform['callStatic'],
      Args extends Head<GitContractTypes.IPlatform['callStatic'][M]>
    >(
      contract: 'IPlatform',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IPlatform['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IPlatformHelper['callStatic'],
      Args extends Head<GitContractTypes.IPlatformHelper['callStatic'][M]>
    >(
      contract: 'IPlatformHelper',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IPlatformHelper['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IPositionRewards['callStatic'],
      Args extends Head<GitContractTypes.IPositionRewards['callStatic'][M]>
    >(
      contract: 'IPositionRewards',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IPositionRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IRebaser['callStatic'],
      Args extends Head<GitContractTypes.IRebaser['callStatic'][M]>
    >(
      contract: 'IRebaser',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IRebaser['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IRequestFeesCalculator['callStatic'],
      Args extends Head<GitContractTypes.IRequestFeesCalculator['callStatic'][M]>
    >(
      contract: 'IRequestFeesCalculator',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IRequestFeesCalculator['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IRequestFulfiller['callStatic'],
      Args extends Head<GitContractTypes.IRequestFulfiller['callStatic'][M]>
    >(
      contract: 'IRequestFulfiller',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IRequestFulfiller['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IRequestManager['callStatic'],
      Args extends Head<GitContractTypes.IRequestManager['callStatic'][M]>
    >(
      contract: 'IRequestManager',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IRequestManager['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IRewardsCollector['callStatic'],
      Args extends Head<GitContractTypes.IRewardsCollector['callStatic'][M]>
    >(
      contract: 'IRewardsCollector',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IRewardsCollector['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IStaking['callStatic'],
      Args extends Head<GitContractTypes.IStaking['callStatic'][M]>
    >(
      contract: 'IStaking',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IStaking['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IStakingVault['callStatic'],
      Args extends Head<GitContractTypes.IStakingVault['callStatic'][M]>
    >(
      contract: 'IStakingVault',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IStakingVault['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IThetaVault['callStatic'],
      Args extends Head<GitContractTypes.IThetaVault['callStatic'][M]>
    >(
      contract: 'IThetaVault',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IThetaVault['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IThetaVaultInfo['callStatic'],
      Args extends Head<GitContractTypes.IThetaVaultInfo['callStatic'][M]>
    >(
      contract: 'IThetaVaultInfo',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IThetaVaultInfo['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ITreasury['callStatic'],
      Args extends Head<GitContractTypes.ITreasury['callStatic'][M]>
    >(
      contract: 'ITreasury',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ITreasury['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IVolatilityToken['callStatic'],
      Args extends Head<GitContractTypes.IVolatilityToken['callStatic'][M]>
    >(
      contract: 'IVolatilityToken',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IVolatilityToken['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IWETH['callStatic'],
      Args extends Head<GitContractTypes.IWETH['callStatic'][M]>
    >(
      contract: 'IWETH',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IWETH['callStatic'][M]>
  <
      M extends keyof GitContractTypes.KeepersFeeVault['callStatic'],
      Args extends Head<GitContractTypes.KeepersFeeVault['callStatic'][M]>
    >(
      contract: 'KeepersFeeVault',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.KeepersFeeVault['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Liquidation['callStatic'],
      Args extends Head<GitContractTypes.Liquidation['callStatic'][M]>
    >(
      contract: 'Liquidation',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Liquidation['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Platform['callStatic'],
      Args extends Head<GitContractTypes.Platform['callStatic'][M]>
    >(
      contract: 'Platform',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Platform['callStatic'][M]>
  <
      M extends keyof GitContractTypes.PlatformHelper['callStatic'],
      Args extends Head<GitContractTypes.PlatformHelper['callStatic'][M]>
    >(
      contract: 'PlatformHelper',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.PlatformHelper['callStatic'][M]>
  <
      M extends keyof GitContractTypes.PositionRewards['callStatic'],
      Args extends Head<GitContractTypes.PositionRewards['callStatic'][M]>
    >(
      contract: 'PositionRewards',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.PositionRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Rebaser['callStatic'],
      Args extends Head<GitContractTypes.Rebaser['callStatic'][M]>
    >(
      contract: 'Rebaser',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Rebaser['callStatic'][M]>
  <
      M extends keyof GitContractTypes.RequestFeesCalculator['callStatic'],
      Args extends Head<GitContractTypes.RequestFeesCalculator['callStatic'][M]>
    >(
      contract: 'RequestFeesCalculator',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.RequestFeesCalculator['callStatic'][M]>
  <
      M extends keyof GitContractTypes.RequestFulfiller['callStatic'],
      Args extends Head<GitContractTypes.RequestFulfiller['callStatic'][M]>
    >(
      contract: 'RequestFulfiller',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.RequestFulfiller['callStatic'][M]>
  <
      M extends keyof GitContractTypes.FeesCollector['callStatic'],
      Args extends Head<GitContractTypes.FeesCollector['callStatic'][M]>
    >(
      contract: 'FeesCollector',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.FeesCollector['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Staking['callStatic'],
      Args extends Head<GitContractTypes.Staking['callStatic'][M]>
    >(
      contract: 'Staking',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Staking['callStatic'][M]>
  <
      M extends keyof GitContractTypes.COTIETHSLPStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.COTIETHSLPStakingRewards['callStatic'][M]>
    >(
      contract: 'COTIETHSLPStakingRewards',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.COTIETHSLPStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.COTIETHStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.COTIETHStakingRewards['callStatic'][M]>
    >(
      contract: 'COTIETHStakingRewards',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.COTIETHStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVOLUSDCLPStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.CVOLUSDCLPStakingRewards['callStatic'][M]>
    >(
      contract: 'CVOLUSDCLPStakingRewards',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVOLUSDCLPStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ETHLPStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.ETHLPStakingRewards['callStatic'][M]>
    >(
      contract: 'ETHLPStakingRewards',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ETHLPStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ETHVOL_USDCLPStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.ETHVOL_USDCLPStakingRewards['callStatic'][M]>
    >(
      contract: 'ETHVOL_USDCLPStakingRewards',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ETHVOL_USDCLPStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ETHVOLUSDCLPStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.ETHVOLUSDCLPStakingRewards['callStatic'][M]>
    >(
      contract: 'ETHVOLUSDCLPStakingRewards',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ETHVOLUSDCLPStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GOVIETHSLPStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.GOVIETHSLPStakingRewards['callStatic'][M]>
    >(
      contract: 'GOVIETHSLPStakingRewards',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GOVIETHSLPStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GOVIETHStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.GOVIETHStakingRewards['callStatic'][M]>
    >(
      contract: 'GOVIETHStakingRewards',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GOVIETHStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.USDCLPStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.USDCLPStakingRewards['callStatic'][M]>
    >(
      contract: 'USDCLPStakingRewards',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.USDCLPStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.USDTLPStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.USDTLPStakingRewards['callStatic'][M]>
    >(
      contract: 'USDTLPStakingRewards',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.USDTLPStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.IStakingRewards['callStatic'][M]>
    >(
      contract: 'IStakingRewards',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Owned['callStatic'],
      Args extends Head<GitContractTypes.Owned['callStatic'][M]>
    >(
      contract: 'Owned',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Owned['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Pausable['callStatic'],
      Args extends Head<GitContractTypes.Pausable['callStatic'][M]>
    >(
      contract: 'Pausable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Pausable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.RewardsDistributionRecipient['callStatic'],
      Args extends Head<GitContractTypes.RewardsDistributionRecipient['callStatic'][M]>
    >(
      contract: 'RewardsDistributionRecipient',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.RewardsDistributionRecipient['callStatic'][M]>
  <
      M extends keyof GitContractTypes.StakingRewards['callStatic'],
      Args extends Head<GitContractTypes.StakingRewards['callStatic'][M]>
    >(
      contract: 'StakingRewards',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.StakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.StakingVault['callStatic'],
      Args extends Head<GitContractTypes.StakingVault['callStatic'][M]>
    >(
      contract: 'StakingVault',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.StakingVault['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Treasury['callStatic'],
      Args extends Head<GitContractTypes.Treasury['callStatic'][M]>
    >(
      contract: 'Treasury',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Treasury['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIFeedOracle['callStatic'],
      Args extends Head<GitContractTypes.CVIFeedOracle['callStatic'][M]>
    >(
      contract: 'CVIFeedOracle',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIFeedOracle['callStatic'][M]>
  <
      M extends keyof GitContractTypes.FakeERC20['callStatic'],
      Args extends Head<GitContractTypes.FakeERC20['callStatic'][M]>
    >(
      contract: 'FakeERC20',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.FakeERC20['callStatic'][M]>
  <
      M extends keyof GitContractTypes.FakePriceProvider['callStatic'],
      Args extends Head<GitContractTypes.FakePriceProvider['callStatic'][M]>
    >(
      contract: 'FakePriceProvider',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.FakePriceProvider['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC20['callStatic'],
      Args extends Head<GitContractTypes.IERC20['callStatic'][M]>
    >(
      contract: 'IERC20',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC20['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IUniswapV2Callee['callStatic'],
      Args extends Head<GitContractTypes.IUniswapV2Callee['callStatic'][M]>
    >(
      contract: 'IUniswapV2Callee',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IUniswapV2Callee['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IUniswapV2ERC20['callStatic'],
      Args extends Head<GitContractTypes.IUniswapV2ERC20['callStatic'][M]>
    >(
      contract: 'IUniswapV2ERC20',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IUniswapV2ERC20['callStatic'][M]>
  <
      M extends keyof GitContractTypes.UniswapV2ERC20['callStatic'],
      Args extends Head<GitContractTypes.UniswapV2ERC20['callStatic'][M]>
    >(
      contract: 'UniswapV2ERC20',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.UniswapV2ERC20['callStatic'][M]>
  <
      M extends keyof GitContractTypes.UniswapV2Factory['callStatic'],
      Args extends Head<GitContractTypes.UniswapV2Factory['callStatic'][M]>
    >(
      contract: 'UniswapV2Factory',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.UniswapV2Factory['callStatic'][M]>
  <
      M extends keyof GitContractTypes.UniswapV2Pair['callStatic'],
      Args extends Head<GitContractTypes.UniswapV2Pair['callStatic'][M]>
    >(
      contract: 'UniswapV2Pair',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.UniswapV2Pair['callStatic'][M]>
  <
      M extends keyof GitContractTypes.UniswapV2Router02['callStatic'],
      Args extends Head<GitContractTypes.UniswapV2Router02['callStatic'][M]>
    >(
      contract: 'UniswapV2Router02',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.UniswapV2Router02['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ThetaVault['callStatic'],
      Args extends Head<GitContractTypes.ThetaVault['callStatic'][M]>
    >(
      contract: 'ThetaVault',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ThetaVault['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ThetaVaultRequestFulfiller['callStatic'],
      Args extends Head<GitContractTypes.ThetaVaultRequestFulfiller['callStatic'][M]>
    >(
      contract: 'ThetaVaultRequestFulfiller',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ThetaVaultRequestFulfiller['callStatic'][M]>
  <
      M extends keyof GitContractTypes.VolatilityToken['callStatic'],
      Args extends Head<GitContractTypes.VolatilityToken['callStatic'][M]>
    >(
      contract: 'VolatilityToken',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.VolatilityToken['callStatic'][M]>
  <
      M extends keyof GitContractTypes.VolTokenRequestFulfiller['callStatic'],
      Args extends Head<GitContractTypes.VolTokenRequestFulfiller['callStatic'][M]>
    >(
      contract: 'VolTokenRequestFulfiller',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.VolTokenRequestFulfiller['callStatic'][M]>
  <
      M extends keyof GitContractTypes.BaseController['callStatic'],
      Args extends Head<GitContractTypes.BaseController['callStatic'][M]>
    >(
      contract: 'BaseController',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.BaseController['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionConfig['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionConfig['callStatic'][M]>
    >(
      contract: 'ILProtectionConfig',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionConfig['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionController['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionController['callStatic'][M]>
    >(
      contract: 'ILProtectionController',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionController['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionDiscountNFTController['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionDiscountNFTController['callStatic'][M]>
    >(
      contract: 'ILProtectionDiscountNFTController',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionDiscountNFTController['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionNFT['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionNFT['callStatic'][M]>
    >(
      contract: 'ILProtectionNFT',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionNFT['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILiquidityController['callStatic'],
      Args extends Head<GitContractTypes.ILiquidityController['callStatic'][M]>
    >(
      contract: 'ILiquidityController',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILiquidityController['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionConfigInterface['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionConfigInterface['callStatic'][M]>
    >(
      contract: 'ILProtectionConfigInterface',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionConfigInterface['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionControllerInterface['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionControllerInterface['callStatic'][M]>
    >(
      contract: 'ILProtectionControllerInterface',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionControllerInterface['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionDiscountNFTControllerInterface['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionDiscountNFTControllerInterface['callStatic'][M]>
    >(
      contract: 'ILProtectionDiscountNFTControllerInterface',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionDiscountNFTControllerInterface['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionDiscountNFTInterface['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionDiscountNFTInterface['callStatic'][M]>
    >(
      contract: 'ILProtectionDiscountNFTInterface',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionDiscountNFTInterface['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionNFTInterface['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionNFTInterface['callStatic'][M]>
    >(
      contract: 'ILProtectionNFTInterface',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionNFTInterface['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ITokenPairRepository['callStatic'],
      Args extends Head<GitContractTypes.ITokenPairRepository['callStatic'][M]>
    >(
      contract: 'ITokenPairRepository',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ITokenPairRepository['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ITreasuryController['callStatic'],
      Args extends Head<GitContractTypes.ITreasuryController['callStatic'][M]>
    >(
      contract: 'ITreasuryController',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ITreasuryController['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILUtils['callStatic'],
      Args extends Head<GitContractTypes.ILUtils['callStatic'][M]>
    >(
      contract: 'ILUtils',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILUtils['callStatic'][M]>
  <
      M extends keyof GitContractTypes.MathUtils['callStatic'],
      Args extends Head<GitContractTypes.MathUtils['callStatic'][M]>
    >(
      contract: 'MathUtils',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.MathUtils['callStatic'][M]>
  <
      M extends keyof GitContractTypes.PremiumCalculator['callStatic'],
      Args extends Head<GitContractTypes.PremiumCalculator['callStatic'][M]>
    >(
      contract: 'PremiumCalculator',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.PremiumCalculator['callStatic'][M]>
  <
      M extends keyof GitContractTypes.LiquidityController['callStatic'],
      Args extends Head<GitContractTypes.LiquidityController['callStatic'][M]>
    >(
      contract: 'LiquidityController',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.LiquidityController['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ILProtectionDiscountNFT['callStatic'],
      Args extends Head<GitContractTypes.ILProtectionDiscountNFT['callStatic'][M]>
    >(
      contract: 'ILProtectionDiscountNFT',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ILProtectionDiscountNFT['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ETHUSDOracle['callStatic'],
      Args extends Head<GitContractTypes.ETHUSDOracle['callStatic'][M]>
    >(
      contract: 'ETHUSDOracle',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ETHUSDOracle['callStatic'][M]>
  <
      M extends keyof GitContractTypes.LINKUSDOracle['callStatic'],
      Args extends Head<GitContractTypes.LINKUSDOracle['callStatic'][M]>
    >(
      contract: 'LINKUSDOracle',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.LINKUSDOracle['callStatic'][M]>
  <
      M extends keyof GitContractTypes.USDUSDOracle['callStatic'],
      Args extends Head<GitContractTypes.USDUSDOracle['callStatic'][M]>
    >(
      contract: 'USDUSDOracle',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.USDUSDOracle['callStatic'][M]>
  <
      M extends keyof GitContractTypes.USDC['callStatic'],
      Args extends Head<GitContractTypes.USDC['callStatic'][M]>
    >(
      contract: 'USDC',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.USDC['callStatic'][M]>
  <
      M extends keyof GitContractTypes.TokenPairRepository['callStatic'],
      Args extends Head<GitContractTypes.TokenPairRepository['callStatic'][M]>
    >(
      contract: 'TokenPairRepository',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.TokenPairRepository['callStatic'][M]>
  <
      M extends keyof GitContractTypes.TreasuryController['callStatic'],
      Args extends Head<GitContractTypes.TreasuryController['callStatic'][M]>
    >(
      contract: 'TreasuryController',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.TreasuryController['callStatic'][M]>
  <
      M extends keyof GitContractTypes.EsGOVI['callStatic'],
      Args extends Head<GitContractTypes.EsGOVI['callStatic'][M]>
    >(
      contract: 'EsGOVI',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.EsGOVI['callStatic'][M]>
  <
      M extends keyof GitContractTypes.EsGOVIRewardTrackerDistributor['callStatic'],
      Args extends Head<GitContractTypes.EsGOVIRewardTrackerDistributor['callStatic'][M]>
    >(
      contract: 'EsGOVIRewardTrackerDistributor',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.EsGOVIRewardTrackerDistributor['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GOVIRewardTrackerDistributor['callStatic'],
      Args extends Head<GitContractTypes.GOVIRewardTrackerDistributor['callStatic'][M]>
    >(
      contract: 'GOVIRewardTrackerDistributor',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GOVIRewardTrackerDistributor['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ThetaVaultRewardTrackerDistributor['callStatic'],
      Args extends Head<GitContractTypes.ThetaVaultRewardTrackerDistributor['callStatic'][M]>
    >(
      contract: 'ThetaVaultRewardTrackerDistributor',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ThetaVaultRewardTrackerDistributor['callStatic'][M]>
  <
      M extends keyof GitContractTypes.EsGOVIRewardTracker['callStatic'],
      Args extends Head<GitContractTypes.EsGOVIRewardTracker['callStatic'][M]>
    >(
      contract: 'EsGOVIRewardTracker',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.EsGOVIRewardTracker['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GOVIRewardTracker['callStatic'],
      Args extends Head<GitContractTypes.GOVIRewardTracker['callStatic'][M]>
    >(
      contract: 'GOVIRewardTracker',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GOVIRewardTracker['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ThetaVaultRewardTracker['callStatic'],
      Args extends Head<GitContractTypes.ThetaVaultRewardTracker['callStatic'][M]>
    >(
      contract: 'ThetaVaultRewardTracker',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ThetaVaultRewardTracker['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GOVIVester['callStatic'],
      Args extends Head<GitContractTypes.GOVIVester['callStatic'][M]>
    >(
      contract: 'GOVIVester',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GOVIVester['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ThetaVaultVester['callStatic'],
      Args extends Head<GitContractTypes.ThetaVaultVester['callStatic'][M]>
    >(
      contract: 'ThetaVaultVester',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ThetaVaultVester['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IMintable['callStatic'],
      Args extends Head<GitContractTypes.IMintable['callStatic'][M]>
    >(
      contract: 'IMintable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IMintable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IRewardDistributor['callStatic'],
      Args extends Head<GitContractTypes.IRewardDistributor['callStatic'][M]>
    >(
      contract: 'IRewardDistributor',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IRewardDistributor['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IRewardRouter['callStatic'],
      Args extends Head<GitContractTypes.IRewardRouter['callStatic'][M]>
    >(
      contract: 'IRewardRouter',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IRewardRouter['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IRewardTracker['callStatic'],
      Args extends Head<GitContractTypes.IRewardTracker['callStatic'][M]>
    >(
      contract: 'IRewardTracker',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IRewardTracker['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IVester['callStatic'],
      Args extends Head<GitContractTypes.IVester['callStatic'][M]>
    >(
      contract: 'IVester',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IVester['callStatic'][M]>
  <
      M extends keyof GitContractTypes.RewardDistributor['callStatic'],
      Args extends Head<GitContractTypes.RewardDistributor['callStatic'][M]>
    >(
      contract: 'RewardDistributor',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.RewardDistributor['callStatic'][M]>
  <
      M extends keyof GitContractTypes.RewardRouter['callStatic'],
      Args extends Head<GitContractTypes.RewardRouter['callStatic'][M]>
    >(
      contract: 'RewardRouter',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.RewardRouter['callStatic'][M]>
  <
      M extends keyof GitContractTypes.RewardTracker['callStatic'],
      Args extends Head<GitContractTypes.RewardTracker['callStatic'][M]>
    >(
      contract: 'RewardTracker',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.RewardTracker['callStatic'][M]>
  <
      M extends keyof GitContractTypes.FakeCVIUSDCThetaVault['callStatic'],
      Args extends Head<GitContractTypes.FakeCVIUSDCThetaVault['callStatic'][M]>
    >(
      contract: 'FakeCVIUSDCThetaVault',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.FakeCVIUSDCThetaVault['callStatic'][M]>
  <
      M extends keyof GitContractTypes.FakeGOVI['callStatic'],
      Args extends Head<GitContractTypes.FakeGOVI['callStatic'][M]>
    >(
      contract: 'FakeGOVI',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.FakeGOVI['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Vester['callStatic'],
      Args extends Head<GitContractTypes.Vester['callStatic'][M]>
    >(
      contract: 'Vester',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Vester['callStatic'][M]>
  <
      M extends keyof GitContractTypes.AccessControlUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.AccessControlUpgradeable['callStatic'][M]>
    >(
      contract: 'AccessControlUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.AccessControlUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IAccessControlUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IAccessControlUpgradeable['callStatic'][M]>
    >(
      contract: 'IAccessControlUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IAccessControlUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.OwnableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.OwnableUpgradeable['callStatic'][M]>
    >(
      contract: 'OwnableUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.OwnableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Initializable['callStatic'],
      Args extends Head<GitContractTypes.Initializable['callStatic'][M]>
    >(
      contract: 'Initializable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Initializable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ReentrancyGuardUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ReentrancyGuardUpgradeable['callStatic'][M]>
    >(
      contract: 'ReentrancyGuardUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ReentrancyGuardUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20Upgradeable['callStatic'][M]>
    >(
      contract: 'ERC20Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC20MetadataUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC20MetadataUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC20MetadataUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC20MetadataUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC20Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC20Upgradeable['callStatic'][M]>
    >(
      contract: 'IERC20Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC20Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC721Upgradeable['callStatic'][M]>
    >(
      contract: 'ERC721Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721EnumerableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC721EnumerableUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC721EnumerableUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721EnumerableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC721EnumerableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC721EnumerableUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC721EnumerableUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC721EnumerableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC721MetadataUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC721MetadataUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC721MetadataUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC721MetadataUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC721ReceiverUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC721ReceiverUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC721ReceiverUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC721ReceiverUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC721Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC721Upgradeable['callStatic'][M]>
    >(
      contract: 'IERC721Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC721Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ContextUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ContextUpgradeable['callStatic'][M]>
    >(
      contract: 'ContextUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ContextUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC165Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC165Upgradeable['callStatic'][M]>
    >(
      contract: 'ERC165Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC165Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC165Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC165Upgradeable['callStatic'][M]>
    >(
      contract: 'IERC165Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC165Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.AccessControl['callStatic'],
      Args extends Head<GitContractTypes.AccessControl['callStatic'][M]>
    >(
      contract: 'AccessControl',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.AccessControl['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IAccessControl['callStatic'],
      Args extends Head<GitContractTypes.IAccessControl['callStatic'][M]>
    >(
      contract: 'IAccessControl',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IAccessControl['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Ownable['callStatic'],
      Args extends Head<GitContractTypes.Ownable['callStatic'][M]>
    >(
      contract: 'Ownable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Ownable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20['callStatic'],
      Args extends Head<GitContractTypes.ERC20['callStatic'][M]>
    >(
      contract: 'ERC20',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC20Metadata['callStatic'],
      Args extends Head<GitContractTypes.IERC20Metadata['callStatic'][M]>
    >(
      contract: 'IERC20Metadata',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC20Metadata['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC165['callStatic'],
      Args extends Head<GitContractTypes.ERC165['callStatic'][M]>
    >(
      contract: 'ERC165',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC165['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC165['callStatic'],
      Args extends Head<GitContractTypes.IERC165['callStatic'][M]>
    >(
      contract: 'IERC165',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC165['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIDeviationOracle['callStatic'],
      Args extends Head<GitContractTypes.CVIDeviationOracle['callStatic'][M]>
    >(
      contract: 'CVIDeviationOracle',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIDeviationOracle['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIFakeFeedOracle['callStatic'],
      Args extends Head<GitContractTypes.CVIFakeFeedOracle['callStatic'][M]>
    >(
      contract: 'CVIFakeFeedOracle',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIFakeFeedOracle['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIOracle2X['callStatic'],
      Args extends Head<GitContractTypes.CVIOracle2X['callStatic'][M]>
    >(
      contract: 'CVIOracle2X',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIOracle2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ETHVIOracle['callStatic'],
      Args extends Head<GitContractTypes.ETHVIOracle['callStatic'][M]>
    >(
      contract: 'ETHVIOracle',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ETHVIOracle['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCFeesCalculator['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCFeesCalculator['callStatic'][M]>
    >(
      contract: 'CVIUSDCFeesCalculator',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCFeesCalculator['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCFeesCalculator2X['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCFeesCalculator2X['callStatic'][M]>
    >(
      contract: 'CVIUSDCFeesCalculator2X',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCFeesCalculator2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCLiquidation['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCLiquidation['callStatic'][M]>
    >(
      contract: 'CVIUSDCLiquidation',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCLiquidation['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCLiquidation2X['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCLiquidation2X['callStatic'][M]>
    >(
      contract: 'CVIUSDCLiquidation2X',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCLiquidation2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCPlatform['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCPlatform['callStatic'][M]>
    >(
      contract: 'CVIUSDCPlatform',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCPlatform['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCPlatform2X['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCPlatform2X['callStatic'][M]>
    >(
      contract: 'CVIUSDCPlatform2X',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCPlatform2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCPositionRewards['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCPositionRewards['callStatic'][M]>
    >(
      contract: 'CVIUSDCPositionRewards',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCPositionRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.StakingV2['callStatic'],
      Args extends Head<GitContractTypes.StakingV2['callStatic'][M]>
    >(
      contract: 'StakingV2',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.StakingV2['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCLPStakingRewards['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCLPStakingRewards['callStatic'][M]>
    >(
      contract: 'CVIUSDCLPStakingRewards',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCLPStakingRewards['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCThetaVault['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCThetaVault['callStatic'][M]>
    >(
      contract: 'CVIUSDCThetaVault',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCThetaVault['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCThetaVault2X['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCThetaVault2X['callStatic'][M]>
    >(
      contract: 'CVIUSDCThetaVault2X',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCThetaVault2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCThetaVaultRequestFulfiller['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller['callStatic'][M]>
    >(
      contract: 'CVIUSDCThetaVaultRequestFulfiller',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X['callStatic'][M]>
    >(
      contract: 'CVIUSDCThetaVaultRequestFulfiller2X',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.WETH['callStatic'],
      Args extends Head<GitContractTypes.WETH['callStatic'][M]>
    >(
      contract: 'WETH',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.WETH['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCRebaser['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCRebaser['callStatic'][M]>
    >(
      contract: 'CVIUSDCRebaser',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCRebaser['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCRebaser2X['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCRebaser2X['callStatic'][M]>
    >(
      contract: 'CVIUSDCRebaser2X',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCRebaser2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCRequestFeesCalculator['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCRequestFeesCalculator['callStatic'][M]>
    >(
      contract: 'CVIUSDCRequestFeesCalculator',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCRequestFeesCalculator['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCRequestFeesCalculator2X['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCRequestFeesCalculator2X['callStatic'][M]>
    >(
      contract: 'CVIUSDCRequestFeesCalculator2X',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCRequestFeesCalculator2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCVolatilityToken['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCVolatilityToken['callStatic'][M]>
    >(
      contract: 'CVIUSDCVolatilityToken',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCVolatilityToken['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCVolatilityToken2X['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCVolatilityToken2X['callStatic'][M]>
    >(
      contract: 'CVIUSDCVolatilityToken2X',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCVolatilityToken2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCVolTokenRequestFulfiller['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCVolTokenRequestFulfiller['callStatic'][M]>
    >(
      contract: 'CVIUSDCVolTokenRequestFulfiller',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCVolTokenRequestFulfiller['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X['callStatic'],
      Args extends Head<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X['callStatic'][M]>
    >(
      contract: 'CVIUSDCVolTokenRequestFulfiller2X',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X['callStatic'][M]>
  <
      M extends keyof GitContractTypes.AccessControlCrossChainUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.AccessControlCrossChainUpgradeable['callStatic'][M]>
    >(
      contract: 'AccessControlCrossChainUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.AccessControlCrossChainUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.AccessControlEnumerableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.AccessControlEnumerableUpgradeable['callStatic'][M]>
    >(
      contract: 'AccessControlEnumerableUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.AccessControlEnumerableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ConditionalEscrowUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ConditionalEscrowUpgradeable['callStatic'][M]>
    >(
      contract: 'ConditionalEscrowUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ConditionalEscrowUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CrossChainEnabledAMBUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.CrossChainEnabledAMBUpgradeable['callStatic'][M]>
    >(
      contract: 'CrossChainEnabledAMBUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CrossChainEnabledAMBUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable['callStatic'][M]>
    >(
      contract: 'CrossChainEnabledArbitrumL1Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable['callStatic'][M]>
    >(
      contract: 'CrossChainEnabledArbitrumL2Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CrossChainEnabledOptimismUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.CrossChainEnabledOptimismUpgradeable['callStatic'][M]>
    >(
      contract: 'CrossChainEnabledOptimismUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CrossChainEnabledOptimismUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CrossChainEnabledPolygonChildUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable['callStatic'][M]>
    >(
      contract: 'CrossChainEnabledPolygonChildUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CrossChainEnabledUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.CrossChainEnabledUpgradeable['callStatic'][M]>
    >(
      contract: 'CrossChainEnabledUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CrossChainEnabledUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.DoubleEndedQueueUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.DoubleEndedQueueUpgradeable['callStatic'][M]>
    >(
      contract: 'DoubleEndedQueueUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.DoubleEndedQueueUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.EIP712Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.EIP712Upgradeable['callStatic'][M]>
    >(
      contract: 'EIP712Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.EIP712Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155BurnableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155BurnableUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC1155BurnableUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155BurnableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155HolderUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155HolderUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC1155HolderUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155HolderUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155PausableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155PausableUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC1155PausableUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155PausableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155PresetMinterPauserUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155PresetMinterPauserUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC1155PresetMinterPauserUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155PresetMinterPauserUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155ReceiverUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155ReceiverUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC1155ReceiverUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155ReceiverUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155SupplyUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155SupplyUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC1155SupplyUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155SupplyUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155Upgradeable['callStatic'][M]>
    >(
      contract: 'ERC1155Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155URIStorageUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155URIStorageUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC1155URIStorageUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155URIStorageUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC165StorageUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC165StorageUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC165StorageUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC165StorageUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1820ImplementerUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1820ImplementerUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC1820ImplementerUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1820ImplementerUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1967UpgradeUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC1967UpgradeUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC1967UpgradeUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1967UpgradeUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20BurnableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20BurnableUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20BurnableUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20BurnableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20CappedUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20CappedUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20CappedUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20CappedUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20FlashMintUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20FlashMintUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20FlashMintUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20FlashMintUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20PausableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20PausableUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20PausableUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20PausableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20PermitUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20PermitUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20PermitUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20PermitUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20PresetFixedSupplyUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20PresetFixedSupplyUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20PresetFixedSupplyUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20PresetFixedSupplyUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20PresetMinterPauserUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20PresetMinterPauserUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20PresetMinterPauserUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20PresetMinterPauserUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20SnapshotUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20SnapshotUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20SnapshotUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20SnapshotUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20VotesCompUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20VotesCompUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20VotesCompUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20VotesCompUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20VotesUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20VotesUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20VotesUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20VotesUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20WrapperUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC20WrapperUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC20WrapperUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20WrapperUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC2771ContextUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC2771ContextUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC2771ContextUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC2771ContextUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC2981Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC2981Upgradeable['callStatic'][M]>
    >(
      contract: 'ERC2981Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC2981Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721BurnableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC721BurnableUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC721BurnableUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721BurnableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721HolderUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC721HolderUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC721HolderUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721HolderUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721PausableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC721PausableUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC721PausableUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721PausableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC721PresetMinterPauserAutoIdUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721RoyaltyUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC721RoyaltyUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC721RoyaltyUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721RoyaltyUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721URIStorageUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC721URIStorageUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC721URIStorageUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721URIStorageUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721VotesUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC721VotesUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC721VotesUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721VotesUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC777PresetFixedSupplyUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC777PresetFixedSupplyUpgradeable['callStatic'][M]>
    >(
      contract: 'ERC777PresetFixedSupplyUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC777PresetFixedSupplyUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC777Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.ERC777Upgradeable['callStatic'][M]>
    >(
      contract: 'ERC777Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC777Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.EscrowUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.EscrowUpgradeable['callStatic'][M]>
    >(
      contract: 'EscrowUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.EscrowUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorCompatibilityBravoUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorCompatibilityBravoUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorCompatibilityBravoUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorCompatibilityBravoUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorCountingSimpleUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorCountingSimpleUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorCountingSimpleUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorCountingSimpleUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorPreventLateQuorumUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorPreventLateQuorumUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorPreventLateQuorumUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorPreventLateQuorumUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorProposalThresholdUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorProposalThresholdUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorProposalThresholdUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorProposalThresholdUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorSettingsUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorSettingsUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorSettingsUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorSettingsUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorTimelockCompoundUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorTimelockCompoundUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorTimelockCompoundUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorTimelockCompoundUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorTimelockControlUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorTimelockControlUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorTimelockControlUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorTimelockControlUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorVotesCompUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorVotesCompUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorVotesCompUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorVotesCompUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorVotesQuorumFractionUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorVotesQuorumFractionUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorVotesQuorumFractionUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorVotesQuorumFractionUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorVotesUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.GovernorVotesUpgradeable['callStatic'][M]>
    >(
      contract: 'GovernorVotesUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorVotesUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IAccessControlEnumerableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IAccessControlEnumerableUpgradeable['callStatic'][M]>
    >(
      contract: 'IAccessControlEnumerableUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IAccessControlEnumerableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IAMBUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IAMBUpgradeable['callStatic'][M]>
    >(
      contract: 'IAMBUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IAMBUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IArbSysUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IArbSysUpgradeable['callStatic'][M]>
    >(
      contract: 'IArbSysUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IArbSysUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IBeaconUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IBeaconUpgradeable['callStatic'][M]>
    >(
      contract: 'IBeaconUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IBeaconUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IBridgeUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IBridgeUpgradeable['callStatic'][M]>
    >(
      contract: 'IBridgeUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IBridgeUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ICompoundTimelockUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ICompoundTimelockUpgradeable['callStatic'][M]>
    >(
      contract: 'ICompoundTimelockUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ICompoundTimelockUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ICrossDomainMessengerUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.ICrossDomainMessengerUpgradeable['callStatic'][M]>
    >(
      contract: 'ICrossDomainMessengerUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ICrossDomainMessengerUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1155MetadataURIUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1155MetadataURIUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC1155MetadataURIUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1155MetadataURIUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1155ReceiverUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1155ReceiverUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC1155ReceiverUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1155ReceiverUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1155Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1155Upgradeable['callStatic'][M]>
    >(
      contract: 'IERC1155Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1155Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1271Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1271Upgradeable['callStatic'][M]>
    >(
      contract: 'IERC1271Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1271Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1363ReceiverUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1363ReceiverUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC1363ReceiverUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1363ReceiverUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1363SpenderUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1363SpenderUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC1363SpenderUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1363SpenderUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1363Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1363Upgradeable['callStatic'][M]>
    >(
      contract: 'IERC1363Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1363Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1820ImplementerUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1820ImplementerUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC1820ImplementerUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1820ImplementerUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1820RegistryUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1820RegistryUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC1820RegistryUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1820RegistryUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1822ProxiableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC1822ProxiableUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC1822ProxiableUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1822ProxiableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC20PermitUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC20PermitUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC20PermitUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC20PermitUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC2612Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC2612Upgradeable['callStatic'][M]>
    >(
      contract: 'IERC2612Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC2612Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC2981Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC2981Upgradeable['callStatic'][M]>
    >(
      contract: 'IERC2981Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC2981Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC3156FlashBorrowerUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC3156FlashBorrowerUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC3156FlashBorrowerUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC3156FlashBorrowerUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC3156FlashLenderUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC3156FlashLenderUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC3156FlashLenderUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC3156FlashLenderUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC777RecipientUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC777RecipientUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC777RecipientUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC777RecipientUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC777SenderUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC777SenderUpgradeable['callStatic'][M]>
    >(
      contract: 'IERC777SenderUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC777SenderUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC777Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.IERC777Upgradeable['callStatic'][M]>
    >(
      contract: 'IERC777Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC777Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IFxMessageProcessorUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IFxMessageProcessorUpgradeable['callStatic'][M]>
    >(
      contract: 'IFxMessageProcessorUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IFxMessageProcessorUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IGovernorCompatibilityBravoUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IGovernorCompatibilityBravoUpgradeable['callStatic'][M]>
    >(
      contract: 'IGovernorCompatibilityBravoUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IGovernorCompatibilityBravoUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IGovernorTimelockUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IGovernorTimelockUpgradeable['callStatic'][M]>
    >(
      contract: 'IGovernorTimelockUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IGovernorTimelockUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IGovernorUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IGovernorUpgradeable['callStatic'][M]>
    >(
      contract: 'IGovernorUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IGovernorUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IInboxUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IInboxUpgradeable['callStatic'][M]>
    >(
      contract: 'IInboxUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IInboxUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IMessageProviderUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IMessageProviderUpgradeable['callStatic'][M]>
    >(
      contract: 'IMessageProviderUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IMessageProviderUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IOutboxUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IOutboxUpgradeable['callStatic'][M]>
    >(
      contract: 'IOutboxUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IOutboxUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IVotesUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.IVotesUpgradeable['callStatic'][M]>
    >(
      contract: 'IVotesUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IVotesUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.LibArbitrumL2Upgradeable['callStatic'],
      Args extends Head<GitContractTypes.LibArbitrumL2Upgradeable['callStatic'][M]>
    >(
      contract: 'LibArbitrumL2Upgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.LibArbitrumL2Upgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.MinimalForwarderUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.MinimalForwarderUpgradeable['callStatic'][M]>
    >(
      contract: 'MinimalForwarderUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.MinimalForwarderUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.MulticallUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.MulticallUpgradeable['callStatic'][M]>
    >(
      contract: 'MulticallUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.MulticallUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.PausableUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.PausableUpgradeable['callStatic'][M]>
    >(
      contract: 'PausableUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.PausableUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.PaymentSplitterUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.PaymentSplitterUpgradeable['callStatic'][M]>
    >(
      contract: 'PaymentSplitterUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.PaymentSplitterUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.PullPaymentUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.PullPaymentUpgradeable['callStatic'][M]>
    >(
      contract: 'PullPaymentUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.PullPaymentUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.RefundEscrowUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.RefundEscrowUpgradeable['callStatic'][M]>
    >(
      contract: 'RefundEscrowUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.RefundEscrowUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.TimelockControllerUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.TimelockControllerUpgradeable['callStatic'][M]>
    >(
      contract: 'TimelockControllerUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.TimelockControllerUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.TimelockControllerWith46MigrationUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.TimelockControllerWith46MigrationUpgradeable['callStatic'][M]>
    >(
      contract: 'TimelockControllerWith46MigrationUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.TimelockControllerWith46MigrationUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.TokenTimelockUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.TokenTimelockUpgradeable['callStatic'][M]>
    >(
      contract: 'TokenTimelockUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.TokenTimelockUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.UUPSUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.UUPSUpgradeable['callStatic'][M]>
    >(
      contract: 'UUPSUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.UUPSUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.VestingWalletUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.VestingWalletUpgradeable['callStatic'][M]>
    >(
      contract: 'VestingWalletUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.VestingWalletUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.VotesUpgradeable['callStatic'],
      Args extends Head<GitContractTypes.VotesUpgradeable['callStatic'][M]>
    >(
      contract: 'VotesUpgradeable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.VotesUpgradeable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.AccessControlCrossChain['callStatic'],
      Args extends Head<GitContractTypes.AccessControlCrossChain['callStatic'][M]>
    >(
      contract: 'AccessControlCrossChain',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.AccessControlCrossChain['callStatic'][M]>
  <
      M extends keyof GitContractTypes.AccessControlEnumerable['callStatic'],
      Args extends Head<GitContractTypes.AccessControlEnumerable['callStatic'][M]>
    >(
      contract: 'AccessControlEnumerable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.AccessControlEnumerable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.BeaconProxy['callStatic'],
      Args extends Head<GitContractTypes.BeaconProxy['callStatic'][M]>
    >(
      contract: 'BeaconProxy',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.BeaconProxy['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ConditionalEscrow['callStatic'],
      Args extends Head<GitContractTypes.ConditionalEscrow['callStatic'][M]>
    >(
      contract: 'ConditionalEscrow',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ConditionalEscrow['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CrossChainEnabledAMB['callStatic'],
      Args extends Head<GitContractTypes.CrossChainEnabledAMB['callStatic'][M]>
    >(
      contract: 'CrossChainEnabledAMB',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CrossChainEnabledAMB['callStatic'][M]>
  <
      M extends keyof GitContractTypes.CrossChainEnabledPolygonChild['callStatic'],
      Args extends Head<GitContractTypes.CrossChainEnabledPolygonChild['callStatic'][M]>
    >(
      contract: 'CrossChainEnabledPolygonChild',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.CrossChainEnabledPolygonChild['callStatic'][M]>
  <
      M extends keyof GitContractTypes.DoubleEndedQueue['callStatic'],
      Args extends Head<GitContractTypes.DoubleEndedQueue['callStatic'][M]>
    >(
      contract: 'DoubleEndedQueue',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.DoubleEndedQueue['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155['callStatic'],
      Args extends Head<GitContractTypes.ERC1155['callStatic'][M]>
    >(
      contract: 'ERC1155',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155Burnable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155Burnable['callStatic'][M]>
    >(
      contract: 'ERC1155Burnable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155Burnable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155Holder['callStatic'],
      Args extends Head<GitContractTypes.ERC1155Holder['callStatic'][M]>
    >(
      contract: 'ERC1155Holder',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155Holder['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155Pausable['callStatic'],
      Args extends Head<GitContractTypes.ERC1155Pausable['callStatic'][M]>
    >(
      contract: 'ERC1155Pausable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155Pausable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155PresetMinterPauser['callStatic'],
      Args extends Head<GitContractTypes.ERC1155PresetMinterPauser['callStatic'][M]>
    >(
      contract: 'ERC1155PresetMinterPauser',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155PresetMinterPauser['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155Receiver['callStatic'],
      Args extends Head<GitContractTypes.ERC1155Receiver['callStatic'][M]>
    >(
      contract: 'ERC1155Receiver',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155Receiver['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155Supply['callStatic'],
      Args extends Head<GitContractTypes.ERC1155Supply['callStatic'][M]>
    >(
      contract: 'ERC1155Supply',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155Supply['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1155URIStorage['callStatic'],
      Args extends Head<GitContractTypes.ERC1155URIStorage['callStatic'][M]>
    >(
      contract: 'ERC1155URIStorage',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1155URIStorage['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC165Storage['callStatic'],
      Args extends Head<GitContractTypes.ERC165Storage['callStatic'][M]>
    >(
      contract: 'ERC165Storage',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC165Storage['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1820Implementer['callStatic'],
      Args extends Head<GitContractTypes.ERC1820Implementer['callStatic'][M]>
    >(
      contract: 'ERC1820Implementer',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1820Implementer['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1967Proxy['callStatic'],
      Args extends Head<GitContractTypes.ERC1967Proxy['callStatic'][M]>
    >(
      contract: 'ERC1967Proxy',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1967Proxy['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC1967Upgrade['callStatic'],
      Args extends Head<GitContractTypes.ERC1967Upgrade['callStatic'][M]>
    >(
      contract: 'ERC1967Upgrade',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC1967Upgrade['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20Burnable['callStatic'],
      Args extends Head<GitContractTypes.ERC20Burnable['callStatic'][M]>
    >(
      contract: 'ERC20Burnable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20Burnable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20Capped['callStatic'],
      Args extends Head<GitContractTypes.ERC20Capped['callStatic'][M]>
    >(
      contract: 'ERC20Capped',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20Capped['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20FlashMint['callStatic'],
      Args extends Head<GitContractTypes.ERC20FlashMint['callStatic'][M]>
    >(
      contract: 'ERC20FlashMint',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20FlashMint['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20Pausable['callStatic'],
      Args extends Head<GitContractTypes.ERC20Pausable['callStatic'][M]>
    >(
      contract: 'ERC20Pausable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20Pausable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20Permit['callStatic'],
      Args extends Head<GitContractTypes.ERC20Permit['callStatic'][M]>
    >(
      contract: 'ERC20Permit',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20Permit['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20PresetFixedSupply['callStatic'],
      Args extends Head<GitContractTypes.ERC20PresetFixedSupply['callStatic'][M]>
    >(
      contract: 'ERC20PresetFixedSupply',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20PresetFixedSupply['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20PresetMinterPauser['callStatic'],
      Args extends Head<GitContractTypes.ERC20PresetMinterPauser['callStatic'][M]>
    >(
      contract: 'ERC20PresetMinterPauser',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20PresetMinterPauser['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20Snapshot['callStatic'],
      Args extends Head<GitContractTypes.ERC20Snapshot['callStatic'][M]>
    >(
      contract: 'ERC20Snapshot',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20Snapshot['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20Votes['callStatic'],
      Args extends Head<GitContractTypes.ERC20Votes['callStatic'][M]>
    >(
      contract: 'ERC20Votes',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20Votes['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20VotesComp['callStatic'],
      Args extends Head<GitContractTypes.ERC20VotesComp['callStatic'][M]>
    >(
      contract: 'ERC20VotesComp',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20VotesComp['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC20Wrapper['callStatic'],
      Args extends Head<GitContractTypes.ERC20Wrapper['callStatic'][M]>
    >(
      contract: 'ERC20Wrapper',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC20Wrapper['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC2771Context['callStatic'],
      Args extends Head<GitContractTypes.ERC2771Context['callStatic'][M]>
    >(
      contract: 'ERC2771Context',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC2771Context['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC2981['callStatic'],
      Args extends Head<GitContractTypes.ERC2981['callStatic'][M]>
    >(
      contract: 'ERC2981',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC2981['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721['callStatic'],
      Args extends Head<GitContractTypes.ERC721['callStatic'][M]>
    >(
      contract: 'ERC721',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721Burnable['callStatic'],
      Args extends Head<GitContractTypes.ERC721Burnable['callStatic'][M]>
    >(
      contract: 'ERC721Burnable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721Burnable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721Enumerable['callStatic'],
      Args extends Head<GitContractTypes.ERC721Enumerable['callStatic'][M]>
    >(
      contract: 'ERC721Enumerable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721Enumerable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721Holder['callStatic'],
      Args extends Head<GitContractTypes.ERC721Holder['callStatic'][M]>
    >(
      contract: 'ERC721Holder',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721Holder['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721Pausable['callStatic'],
      Args extends Head<GitContractTypes.ERC721Pausable['callStatic'][M]>
    >(
      contract: 'ERC721Pausable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721Pausable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721PresetMinterPauserAutoId['callStatic'],
      Args extends Head<GitContractTypes.ERC721PresetMinterPauserAutoId['callStatic'][M]>
    >(
      contract: 'ERC721PresetMinterPauserAutoId',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721PresetMinterPauserAutoId['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721Royalty['callStatic'],
      Args extends Head<GitContractTypes.ERC721Royalty['callStatic'][M]>
    >(
      contract: 'ERC721Royalty',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721Royalty['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721URIStorage['callStatic'],
      Args extends Head<GitContractTypes.ERC721URIStorage['callStatic'][M]>
    >(
      contract: 'ERC721URIStorage',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721URIStorage['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC721Votes['callStatic'],
      Args extends Head<GitContractTypes.ERC721Votes['callStatic'][M]>
    >(
      contract: 'ERC721Votes',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC721Votes['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC777['callStatic'],
      Args extends Head<GitContractTypes.ERC777['callStatic'][M]>
    >(
      contract: 'ERC777',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC777['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ERC777PresetFixedSupply['callStatic'],
      Args extends Head<GitContractTypes.ERC777PresetFixedSupply['callStatic'][M]>
    >(
      contract: 'ERC777PresetFixedSupply',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ERC777PresetFixedSupply['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Escrow['callStatic'],
      Args extends Head<GitContractTypes.Escrow['callStatic'][M]>
    >(
      contract: 'Escrow',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Escrow['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Governor['callStatic'],
      Args extends Head<GitContractTypes.Governor['callStatic'][M]>
    >(
      contract: 'Governor',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Governor['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorCompatibilityBravo['callStatic'],
      Args extends Head<GitContractTypes.GovernorCompatibilityBravo['callStatic'][M]>
    >(
      contract: 'GovernorCompatibilityBravo',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorCompatibilityBravo['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorCountingSimple['callStatic'],
      Args extends Head<GitContractTypes.GovernorCountingSimple['callStatic'][M]>
    >(
      contract: 'GovernorCountingSimple',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorCountingSimple['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorPreventLateQuorum['callStatic'],
      Args extends Head<GitContractTypes.GovernorPreventLateQuorum['callStatic'][M]>
    >(
      contract: 'GovernorPreventLateQuorum',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorPreventLateQuorum['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorProposalThreshold['callStatic'],
      Args extends Head<GitContractTypes.GovernorProposalThreshold['callStatic'][M]>
    >(
      contract: 'GovernorProposalThreshold',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorProposalThreshold['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorSettings['callStatic'],
      Args extends Head<GitContractTypes.GovernorSettings['callStatic'][M]>
    >(
      contract: 'GovernorSettings',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorSettings['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorTimelockCompound['callStatic'],
      Args extends Head<GitContractTypes.GovernorTimelockCompound['callStatic'][M]>
    >(
      contract: 'GovernorTimelockCompound',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorTimelockCompound['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorTimelockControl['callStatic'],
      Args extends Head<GitContractTypes.GovernorTimelockControl['callStatic'][M]>
    >(
      contract: 'GovernorTimelockControl',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorTimelockControl['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorVotes['callStatic'],
      Args extends Head<GitContractTypes.GovernorVotes['callStatic'][M]>
    >(
      contract: 'GovernorVotes',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorVotes['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorVotesComp['callStatic'],
      Args extends Head<GitContractTypes.GovernorVotesComp['callStatic'][M]>
    >(
      contract: 'GovernorVotesComp',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorVotesComp['callStatic'][M]>
  <
      M extends keyof GitContractTypes.GovernorVotesQuorumFraction['callStatic'],
      Args extends Head<GitContractTypes.GovernorVotesQuorumFraction['callStatic'][M]>
    >(
      contract: 'GovernorVotesQuorumFraction',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.GovernorVotesQuorumFraction['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IAccessControlEnumerable['callStatic'],
      Args extends Head<GitContractTypes.IAccessControlEnumerable['callStatic'][M]>
    >(
      contract: 'IAccessControlEnumerable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IAccessControlEnumerable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IAMB['callStatic'],
      Args extends Head<GitContractTypes.IAMB['callStatic'][M]>
    >(
      contract: 'IAMB',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IAMB['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IArbSys['callStatic'],
      Args extends Head<GitContractTypes.IArbSys['callStatic'][M]>
    >(
      contract: 'IArbSys',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IArbSys['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IBeacon['callStatic'],
      Args extends Head<GitContractTypes.IBeacon['callStatic'][M]>
    >(
      contract: 'IBeacon',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IBeacon['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IBridge['callStatic'],
      Args extends Head<GitContractTypes.IBridge['callStatic'][M]>
    >(
      contract: 'IBridge',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IBridge['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ICompoundTimelock['callStatic'],
      Args extends Head<GitContractTypes.ICompoundTimelock['callStatic'][M]>
    >(
      contract: 'ICompoundTimelock',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ICompoundTimelock['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ICrossDomainMessenger['callStatic'],
      Args extends Head<GitContractTypes.ICrossDomainMessenger['callStatic'][M]>
    >(
      contract: 'ICrossDomainMessenger',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ICrossDomainMessenger['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1155['callStatic'],
      Args extends Head<GitContractTypes.IERC1155['callStatic'][M]>
    >(
      contract: 'IERC1155',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1155['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1155MetadataURI['callStatic'],
      Args extends Head<GitContractTypes.IERC1155MetadataURI['callStatic'][M]>
    >(
      contract: 'IERC1155MetadataURI',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1155MetadataURI['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1155Receiver['callStatic'],
      Args extends Head<GitContractTypes.IERC1155Receiver['callStatic'][M]>
    >(
      contract: 'IERC1155Receiver',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1155Receiver['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1271['callStatic'],
      Args extends Head<GitContractTypes.IERC1271['callStatic'][M]>
    >(
      contract: 'IERC1271',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1271['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1363['callStatic'],
      Args extends Head<GitContractTypes.IERC1363['callStatic'][M]>
    >(
      contract: 'IERC1363',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1363['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1363Receiver['callStatic'],
      Args extends Head<GitContractTypes.IERC1363Receiver['callStatic'][M]>
    >(
      contract: 'IERC1363Receiver',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1363Receiver['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1363Spender['callStatic'],
      Args extends Head<GitContractTypes.IERC1363Spender['callStatic'][M]>
    >(
      contract: 'IERC1363Spender',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1363Spender['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1820Implementer['callStatic'],
      Args extends Head<GitContractTypes.IERC1820Implementer['callStatic'][M]>
    >(
      contract: 'IERC1820Implementer',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1820Implementer['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1820Registry['callStatic'],
      Args extends Head<GitContractTypes.IERC1820Registry['callStatic'][M]>
    >(
      contract: 'IERC1820Registry',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1820Registry['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC1822Proxiable['callStatic'],
      Args extends Head<GitContractTypes.IERC1822Proxiable['callStatic'][M]>
    >(
      contract: 'IERC1822Proxiable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC1822Proxiable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC20Permit['callStatic'],
      Args extends Head<GitContractTypes.IERC20Permit['callStatic'][M]>
    >(
      contract: 'IERC20Permit',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC20Permit['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC2612['callStatic'],
      Args extends Head<GitContractTypes.IERC2612['callStatic'][M]>
    >(
      contract: 'IERC2612',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC2612['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC2981['callStatic'],
      Args extends Head<GitContractTypes.IERC2981['callStatic'][M]>
    >(
      contract: 'IERC2981',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC2981['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC3156FlashBorrower['callStatic'],
      Args extends Head<GitContractTypes.IERC3156FlashBorrower['callStatic'][M]>
    >(
      contract: 'IERC3156FlashBorrower',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC3156FlashBorrower['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC3156FlashLender['callStatic'],
      Args extends Head<GitContractTypes.IERC3156FlashLender['callStatic'][M]>
    >(
      contract: 'IERC3156FlashLender',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC3156FlashLender['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC721['callStatic'],
      Args extends Head<GitContractTypes.IERC721['callStatic'][M]>
    >(
      contract: 'IERC721',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC721['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC721Enumerable['callStatic'],
      Args extends Head<GitContractTypes.IERC721Enumerable['callStatic'][M]>
    >(
      contract: 'IERC721Enumerable',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC721Enumerable['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC721Metadata['callStatic'],
      Args extends Head<GitContractTypes.IERC721Metadata['callStatic'][M]>
    >(
      contract: 'IERC721Metadata',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC721Metadata['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC721Receiver['callStatic'],
      Args extends Head<GitContractTypes.IERC721Receiver['callStatic'][M]>
    >(
      contract: 'IERC721Receiver',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC721Receiver['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC777['callStatic'],
      Args extends Head<GitContractTypes.IERC777['callStatic'][M]>
    >(
      contract: 'IERC777',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC777['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC777Recipient['callStatic'],
      Args extends Head<GitContractTypes.IERC777Recipient['callStatic'][M]>
    >(
      contract: 'IERC777Recipient',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC777Recipient['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IERC777Sender['callStatic'],
      Args extends Head<GitContractTypes.IERC777Sender['callStatic'][M]>
    >(
      contract: 'IERC777Sender',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IERC777Sender['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IFxMessageProcessor['callStatic'],
      Args extends Head<GitContractTypes.IFxMessageProcessor['callStatic'][M]>
    >(
      contract: 'IFxMessageProcessor',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IFxMessageProcessor['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IGovernor['callStatic'],
      Args extends Head<GitContractTypes.IGovernor['callStatic'][M]>
    >(
      contract: 'IGovernor',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IGovernor['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IGovernorCompatibilityBravo['callStatic'],
      Args extends Head<GitContractTypes.IGovernorCompatibilityBravo['callStatic'][M]>
    >(
      contract: 'IGovernorCompatibilityBravo',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IGovernorCompatibilityBravo['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IGovernorTimelock['callStatic'],
      Args extends Head<GitContractTypes.IGovernorTimelock['callStatic'][M]>
    >(
      contract: 'IGovernorTimelock',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IGovernorTimelock['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IMessageProvider['callStatic'],
      Args extends Head<GitContractTypes.IMessageProvider['callStatic'][M]>
    >(
      contract: 'IMessageProvider',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IMessageProvider['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IOutbox['callStatic'],
      Args extends Head<GitContractTypes.IOutbox['callStatic'][M]>
    >(
      contract: 'IOutbox',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IOutbox['callStatic'][M]>
  <
      M extends keyof GitContractTypes.IVotes['callStatic'],
      Args extends Head<GitContractTypes.IVotes['callStatic'][M]>
    >(
      contract: 'IVotes',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.IVotes['callStatic'][M]>
  <
      M extends keyof GitContractTypes.LibArbitrumL2['callStatic'],
      Args extends Head<GitContractTypes.LibArbitrumL2['callStatic'][M]>
    >(
      contract: 'LibArbitrumL2',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.LibArbitrumL2['callStatic'][M]>
  <
      M extends keyof GitContractTypes.MinimalForwarder['callStatic'],
      Args extends Head<GitContractTypes.MinimalForwarder['callStatic'][M]>
    >(
      contract: 'MinimalForwarder',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.MinimalForwarder['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Multicall['callStatic'],
      Args extends Head<GitContractTypes.Multicall['callStatic'][M]>
    >(
      contract: 'Multicall',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Multicall['callStatic'][M]>
  <
      M extends keyof GitContractTypes.PaymentSplitter['callStatic'],
      Args extends Head<GitContractTypes.PaymentSplitter['callStatic'][M]>
    >(
      contract: 'PaymentSplitter',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.PaymentSplitter['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Proxy['callStatic'],
      Args extends Head<GitContractTypes.Proxy['callStatic'][M]>
    >(
      contract: 'Proxy',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Proxy['callStatic'][M]>
  <
      M extends keyof GitContractTypes.ProxyAdmin['callStatic'],
      Args extends Head<GitContractTypes.ProxyAdmin['callStatic'][M]>
    >(
      contract: 'ProxyAdmin',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.ProxyAdmin['callStatic'][M]>
  <
      M extends keyof GitContractTypes.PullPayment['callStatic'],
      Args extends Head<GitContractTypes.PullPayment['callStatic'][M]>
    >(
      contract: 'PullPayment',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.PullPayment['callStatic'][M]>
  <
      M extends keyof GitContractTypes.RefundEscrow['callStatic'],
      Args extends Head<GitContractTypes.RefundEscrow['callStatic'][M]>
    >(
      contract: 'RefundEscrow',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.RefundEscrow['callStatic'][M]>
  <
      M extends keyof GitContractTypes.TimelockController['callStatic'],
      Args extends Head<GitContractTypes.TimelockController['callStatic'][M]>
    >(
      contract: 'TimelockController',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.TimelockController['callStatic'][M]>
  <
      M extends keyof GitContractTypes.TokenTimelock['callStatic'],
      Args extends Head<GitContractTypes.TokenTimelock['callStatic'][M]>
    >(
      contract: 'TokenTimelock',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.TokenTimelock['callStatic'][M]>
  <
      M extends keyof GitContractTypes.TransparentUpgradeableProxy['callStatic'],
      Args extends Head<GitContractTypes.TransparentUpgradeableProxy['callStatic'][M]>
    >(
      contract: 'TransparentUpgradeableProxy',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.TransparentUpgradeableProxy['callStatic'][M]>
  <
      M extends keyof GitContractTypes.UpgradeableBeacon['callStatic'],
      Args extends Head<GitContractTypes.UpgradeableBeacon['callStatic'][M]>
    >(
      contract: 'UpgradeableBeacon',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.UpgradeableBeacon['callStatic'][M]>
  <
      M extends keyof GitContractTypes.VestingWallet['callStatic'],
      Args extends Head<GitContractTypes.VestingWallet['callStatic'][M]>
    >(
      contract: 'VestingWallet',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.VestingWallet['callStatic'][M]>
  <
      M extends keyof GitContractTypes.Votes['callStatic'],
      Args extends Head<GitContractTypes.Votes['callStatic'][M]>
    >(
      contract: 'Votes',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.Votes['callStatic'][M]>
  <
      M extends keyof GitContractTypes.UniswapV2Migrator['callStatic'],
      Args extends Head<GitContractTypes.UniswapV2Migrator['callStatic'][M]>
    >(
      contract: 'UniswapV2Migrator',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.UniswapV2Migrator['callStatic'][M]>
  <
      M extends keyof GitContractTypes.UniswapV2Router01['callStatic'],
      Args extends Head<GitContractTypes.UniswapV2Router01['callStatic'][M]>
    >(
      contract: 'UniswapV2Router01',
      contractName: string,
      method: M,
      options?: CallOptions,
      ...args: Args
    ): ReturnType<GitContractTypes.UniswapV2Router01['callStatic'][M]>
}


// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------

export interface HardhatDeploySimplifiedFunctionOverloads {
  (
    contractName: 'KeeperCompatibleInterface',
    ...args: Head<GetDeployMethod<GitContractTypes.KeeperCompatibleInterface__factory>>
  ): Promise<GitContractTypes.KeeperCompatibleInterface>
  (
    contractName: 'KeeperBase',
    ...args: Head<GetDeployMethod<GitContractTypes.KeeperBase__factory>>
  ): Promise<GitContractTypes.KeeperBase>
  (
    contractName: 'KeeperCompatible',
    ...args: Head<GetDeployMethod<GitContractTypes.KeeperCompatible__factory>>
  ): Promise<GitContractTypes.KeeperCompatible>
  (
    contractName: 'CVIOracle',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIOracle__factory>>
  ): Promise<GitContractTypes.CVIOracle>
  (
    contractName: 'ElasticToken',
    ...args: Head<GetDeployMethod<GitContractTypes.ElasticToken__factory>>
  ): Promise<GitContractTypes.ElasticToken>
  (
    contractName: 'IUniswapV2Factory',
    ...args: Head<GetDeployMethod<GitContractTypes.IUniswapV2Factory__factory>>
  ): Promise<GitContractTypes.IUniswapV2Factory>
  (
    contractName: 'IUniswapV2Pair',
    ...args: Head<GetDeployMethod<GitContractTypes.IUniswapV2Pair__factory>>
  ): Promise<GitContractTypes.IUniswapV2Pair>
  (
    contractName: 'IUniswapV2Router01',
    ...args: Head<GetDeployMethod<GitContractTypes.IUniswapV2Router01__factory>>
  ): Promise<GitContractTypes.IUniswapV2Router01>
  (
    contractName: 'IUniswapV2Router02',
    ...args: Head<GetDeployMethod<GitContractTypes.IUniswapV2Router02__factory>>
  ): Promise<GitContractTypes.IUniswapV2Router02>
  (
    contractName: 'WETH9',
    ...args: Head<GetDeployMethod<GitContractTypes.WETH9__factory>>
  ): Promise<GitContractTypes.WETH9>
  (
    contractName: 'FeesCalculator',
    ...args: Head<GetDeployMethod<GitContractTypes.FeesCalculator__factory>>
  ): Promise<GitContractTypes.FeesCalculator>
  (
    contractName: 'GOVI',
    ...args: Head<GetDeployMethod<GitContractTypes.GOVI__factory>>
  ): Promise<GitContractTypes.GOVI>
  (
    contractName: 'AggregatorInterface',
    ...args: Head<GetDeployMethod<GitContractTypes.AggregatorInterface__factory>>
  ): Promise<GitContractTypes.AggregatorInterface>
  (
    contractName: 'AggregatorV2V3Interface',
    ...args: Head<GetDeployMethod<GitContractTypes.AggregatorV2V3Interface__factory>>
  ): Promise<GitContractTypes.AggregatorV2V3Interface>
  (
    contractName: 'AggregatorV3Interface',
    ...args: Head<GetDeployMethod<GitContractTypes.AggregatorV3Interface__factory>>
  ): Promise<GitContractTypes.AggregatorV3Interface>
  (
    contractName: 'ICVIOracle',
    ...args: Head<GetDeployMethod<GitContractTypes.ICVIOracle__factory>>
  ): Promise<GitContractTypes.ICVIOracle>
  (
    contractName: 'IElasticToken',
    ...args: Head<GetDeployMethod<GitContractTypes.IElasticToken__factory>>
  ): Promise<GitContractTypes.IElasticToken>
  (
    contractName: 'IFeesCalculator',
    ...args: Head<GetDeployMethod<GitContractTypes.IFeesCalculator__factory>>
  ): Promise<GitContractTypes.IFeesCalculator>
  (
    contractName: 'IFeesCollector',
    ...args: Head<GetDeployMethod<GitContractTypes.IFeesCollector__factory>>
  ): Promise<GitContractTypes.IFeesCollector>
  (
    contractName: 'IFeesCollectorManagement',
    ...args: Head<GetDeployMethod<GitContractTypes.IFeesCollectorManagement__factory>>
  ): Promise<GitContractTypes.IFeesCollectorManagement>
  (
    contractName: 'IInbox',
    ...args: Head<GetDeployMethod<GitContractTypes.IInbox__factory>>
  ): Promise<GitContractTypes.IInbox>
  (
    contractName: 'IKeepersFeeVault',
    ...args: Head<GetDeployMethod<GitContractTypes.IKeepersFeeVault__factory>>
  ): Promise<GitContractTypes.IKeepersFeeVault>
  (
    contractName: 'ILiquidation',
    ...args: Head<GetDeployMethod<GitContractTypes.ILiquidation__factory>>
  ): Promise<GitContractTypes.ILiquidation>
  (
    contractName: 'IPlatform',
    ...args: Head<GetDeployMethod<GitContractTypes.IPlatform__factory>>
  ): Promise<GitContractTypes.IPlatform>
  (
    contractName: 'IPlatformHelper',
    ...args: Head<GetDeployMethod<GitContractTypes.IPlatformHelper__factory>>
  ): Promise<GitContractTypes.IPlatformHelper>
  (
    contractName: 'IPositionRewards',
    ...args: Head<GetDeployMethod<GitContractTypes.IPositionRewards__factory>>
  ): Promise<GitContractTypes.IPositionRewards>
  (
    contractName: 'IRebaser',
    ...args: Head<GetDeployMethod<GitContractTypes.IRebaser__factory>>
  ): Promise<GitContractTypes.IRebaser>
  (
    contractName: 'IRequestFeesCalculator',
    ...args: Head<GetDeployMethod<GitContractTypes.IRequestFeesCalculator__factory>>
  ): Promise<GitContractTypes.IRequestFeesCalculator>
  (
    contractName: 'IRequestFulfiller',
    ...args: Head<GetDeployMethod<GitContractTypes.IRequestFulfiller__factory>>
  ): Promise<GitContractTypes.IRequestFulfiller>
  (
    contractName: 'IRequestManager',
    ...args: Head<GetDeployMethod<GitContractTypes.IRequestManager__factory>>
  ): Promise<GitContractTypes.IRequestManager>
  (
    contractName: 'IRewardsCollector',
    ...args: Head<GetDeployMethod<GitContractTypes.IRewardsCollector__factory>>
  ): Promise<GitContractTypes.IRewardsCollector>
  (
    contractName: 'IStaking',
    ...args: Head<GetDeployMethod<GitContractTypes.IStaking__factory>>
  ): Promise<GitContractTypes.IStaking>
  (
    contractName: 'IStakingVault',
    ...args: Head<GetDeployMethod<GitContractTypes.IStakingVault__factory>>
  ): Promise<GitContractTypes.IStakingVault>
  (
    contractName: 'IThetaVault',
    ...args: Head<GetDeployMethod<GitContractTypes.IThetaVault__factory>>
  ): Promise<GitContractTypes.IThetaVault>
  (
    contractName: 'IThetaVaultInfo',
    ...args: Head<GetDeployMethod<GitContractTypes.IThetaVaultInfo__factory>>
  ): Promise<GitContractTypes.IThetaVaultInfo>
  (
    contractName: 'ITreasury',
    ...args: Head<GetDeployMethod<GitContractTypes.ITreasury__factory>>
  ): Promise<GitContractTypes.ITreasury>
  (
    contractName: 'IVolatilityToken',
    ...args: Head<GetDeployMethod<GitContractTypes.IVolatilityToken__factory>>
  ): Promise<GitContractTypes.IVolatilityToken>
  (
    contractName: 'IWETH',
    ...args: Head<GetDeployMethod<GitContractTypes.IWETH__factory>>
  ): Promise<GitContractTypes.IWETH>
  (
    contractName: 'KeepersFeeVault',
    ...args: Head<GetDeployMethod<GitContractTypes.KeepersFeeVault__factory>>
  ): Promise<GitContractTypes.KeepersFeeVault>
  (
    contractName: 'Liquidation',
    ...args: Head<GetDeployMethod<GitContractTypes.Liquidation__factory>>
  ): Promise<GitContractTypes.Liquidation>
  (
    contractName: 'Platform',
    ...args: Head<GetDeployMethod<GitContractTypes.Platform__factory>>
  ): Promise<GitContractTypes.Platform>
  (
    contractName: 'PlatformHelper',
    ...args: Head<GetDeployMethod<GitContractTypes.PlatformHelper__factory>>
  ): Promise<GitContractTypes.PlatformHelper>
  (
    contractName: 'PositionRewards',
    ...args: Head<GetDeployMethod<GitContractTypes.PositionRewards__factory>>
  ): Promise<GitContractTypes.PositionRewards>
  (
    contractName: 'Rebaser',
    ...args: Head<GetDeployMethod<GitContractTypes.Rebaser__factory>>
  ): Promise<GitContractTypes.Rebaser>
  (
    contractName: 'RequestFeesCalculator',
    ...args: Head<GetDeployMethod<GitContractTypes.RequestFeesCalculator__factory>>
  ): Promise<GitContractTypes.RequestFeesCalculator>
  (
    contractName: 'RequestFulfiller',
    ...args: Head<GetDeployMethod<GitContractTypes.RequestFulfiller__factory>>
  ): Promise<GitContractTypes.RequestFulfiller>
  (
    contractName: 'FeesCollector',
    ...args: Head<GetDeployMethod<GitContractTypes.FeesCollector__factory>>
  ): Promise<GitContractTypes.FeesCollector>
  (
    contractName: 'Staking',
    ...args: Head<GetDeployMethod<GitContractTypes.Staking__factory>>
  ): Promise<GitContractTypes.Staking>
  (
    contractName: 'COTIETHSLPStakingRewards',
    ...args: Head<GetDeployMethod<GitContractTypes.COTIETHSLPStakingRewards__factory>>
  ): Promise<GitContractTypes.COTIETHSLPStakingRewards>
  (
    contractName: 'COTIETHStakingRewards',
    ...args: Head<GetDeployMethod<GitContractTypes.COTIETHStakingRewards__factory>>
  ): Promise<GitContractTypes.COTIETHStakingRewards>
  (
    contractName: 'CVOLUSDCLPStakingRewards',
    ...args: Head<GetDeployMethod<GitContractTypes.CVOLUSDCLPStakingRewards__factory>>
  ): Promise<GitContractTypes.CVOLUSDCLPStakingRewards>
  (
    contractName: 'ETHLPStakingRewards',
    ...args: Head<GetDeployMethod<GitContractTypes.ETHLPStakingRewards__factory>>
  ): Promise<GitContractTypes.ETHLPStakingRewards>
  (
    contractName: 'ETHVOL_USDCLPStakingRewards',
    ...args: Head<GetDeployMethod<GitContractTypes.ETHVOL_USDCLPStakingRewards__factory>>
  ): Promise<GitContractTypes.ETHVOL_USDCLPStakingRewards>
  (
    contractName: 'ETHVOLUSDCLPStakingRewards',
    ...args: Head<GetDeployMethod<GitContractTypes.ETHVOLUSDCLPStakingRewards__factory>>
  ): Promise<GitContractTypes.ETHVOLUSDCLPStakingRewards>
  (
    contractName: 'GOVIETHSLPStakingRewards',
    ...args: Head<GetDeployMethod<GitContractTypes.GOVIETHSLPStakingRewards__factory>>
  ): Promise<GitContractTypes.GOVIETHSLPStakingRewards>
  (
    contractName: 'GOVIETHStakingRewards',
    ...args: Head<GetDeployMethod<GitContractTypes.GOVIETHStakingRewards__factory>>
  ): Promise<GitContractTypes.GOVIETHStakingRewards>
  (
    contractName: 'USDCLPStakingRewards',
    ...args: Head<GetDeployMethod<GitContractTypes.USDCLPStakingRewards__factory>>
  ): Promise<GitContractTypes.USDCLPStakingRewards>
  (
    contractName: 'USDTLPStakingRewards',
    ...args: Head<GetDeployMethod<GitContractTypes.USDTLPStakingRewards__factory>>
  ): Promise<GitContractTypes.USDTLPStakingRewards>
  (
    contractName: 'IStakingRewards',
    ...args: Head<GetDeployMethod<GitContractTypes.IStakingRewards__factory>>
  ): Promise<GitContractTypes.IStakingRewards>
  (
    contractName: 'Owned',
    ...args: Head<GetDeployMethod<GitContractTypes.Owned__factory>>
  ): Promise<GitContractTypes.Owned>
  (
    contractName: 'Pausable',
    ...args: Head<GetDeployMethod<GitContractTypes.Pausable__factory>>
  ): Promise<GitContractTypes.Pausable>
  (
    contractName: 'RewardsDistributionRecipient',
    ...args: Head<GetDeployMethod<GitContractTypes.RewardsDistributionRecipient__factory>>
  ): Promise<GitContractTypes.RewardsDistributionRecipient>
  (
    contractName: 'StakingRewards',
    ...args: Head<GetDeployMethod<GitContractTypes.StakingRewards__factory>>
  ): Promise<GitContractTypes.StakingRewards>
  (
    contractName: 'StakingVault',
    ...args: Head<GetDeployMethod<GitContractTypes.StakingVault__factory>>
  ): Promise<GitContractTypes.StakingVault>
  (
    contractName: 'Treasury',
    ...args: Head<GetDeployMethod<GitContractTypes.Treasury__factory>>
  ): Promise<GitContractTypes.Treasury>
  (
    contractName: 'CVIFeedOracle',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIFeedOracle__factory>>
  ): Promise<GitContractTypes.CVIFeedOracle>
  (
    contractName: 'FakeERC20',
    ...args: Head<GetDeployMethod<GitContractTypes.FakeERC20__factory>>
  ): Promise<GitContractTypes.FakeERC20>
  (
    contractName: 'FakePriceProvider',
    ...args: Head<GetDeployMethod<GitContractTypes.FakePriceProvider__factory>>
  ): Promise<GitContractTypes.FakePriceProvider>
  (
    contractName: 'IERC20',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC20__factory>>
  ): Promise<GitContractTypes.IERC20>
  (
    contractName: 'IUniswapV2Callee',
    ...args: Head<GetDeployMethod<GitContractTypes.IUniswapV2Callee__factory>>
  ): Promise<GitContractTypes.IUniswapV2Callee>
  (
    contractName: 'IUniswapV2ERC20',
    ...args: Head<GetDeployMethod<GitContractTypes.IUniswapV2ERC20__factory>>
  ): Promise<GitContractTypes.IUniswapV2ERC20>
  (
    contractName: 'UniswapV2ERC20',
    ...args: Head<GetDeployMethod<GitContractTypes.UniswapV2ERC20__factory>>
  ): Promise<GitContractTypes.UniswapV2ERC20>
  (
    contractName: 'UniswapV2Factory',
    ...args: Head<GetDeployMethod<GitContractTypes.UniswapV2Factory__factory>>
  ): Promise<GitContractTypes.UniswapV2Factory>
  (
    contractName: 'UniswapV2Pair',
    ...args: Head<GetDeployMethod<GitContractTypes.UniswapV2Pair__factory>>
  ): Promise<GitContractTypes.UniswapV2Pair>
  (
    contractName: 'UniswapV2Router02',
    ...args: Head<GetDeployMethod<GitContractTypes.UniswapV2Router02__factory>>
  ): Promise<GitContractTypes.UniswapV2Router02>
  (
    contractName: 'ThetaVault',
    ...args: Head<GetDeployMethod<GitContractTypes.ThetaVault__factory>>
  ): Promise<GitContractTypes.ThetaVault>
  (
    contractName: 'ThetaVaultRequestFulfiller',
    ...args: Head<GetDeployMethod<GitContractTypes.ThetaVaultRequestFulfiller__factory>>
  ): Promise<GitContractTypes.ThetaVaultRequestFulfiller>
  (
    contractName: 'VolatilityToken',
    ...args: Head<GetDeployMethod<GitContractTypes.VolatilityToken__factory>>
  ): Promise<GitContractTypes.VolatilityToken>
  (
    contractName: 'VolTokenRequestFulfiller',
    ...args: Head<GetDeployMethod<GitContractTypes.VolTokenRequestFulfiller__factory>>
  ): Promise<GitContractTypes.VolTokenRequestFulfiller>
  (
    contractName: 'BaseController',
    ...args: Head<GetDeployMethod<GitContractTypes.BaseController__factory>>
  ): Promise<GitContractTypes.BaseController>
  (
    contractName: 'ILProtectionConfig',
    ...args: Head<GetDeployMethod<GitContractTypes.ILProtectionConfig__factory>>
  ): Promise<GitContractTypes.ILProtectionConfig>
  (
    contractName: 'ILProtectionController',
    ...args: Head<GetDeployMethod<GitContractTypes.ILProtectionController__factory>>
  ): Promise<GitContractTypes.ILProtectionController>
  (
    contractName: 'ILProtectionDiscountNFTController',
    ...args: Head<GetDeployMethod<GitContractTypes.ILProtectionDiscountNFTController__factory>>
  ): Promise<GitContractTypes.ILProtectionDiscountNFTController>
  (
    contractName: 'ILProtectionNFT',
    ...args: Head<GetDeployMethod<GitContractTypes.ILProtectionNFT__factory>>
  ): Promise<GitContractTypes.ILProtectionNFT>
  (
    contractName: 'ILiquidityController',
    ...args: Head<GetDeployMethod<GitContractTypes.ILiquidityController__factory>>
  ): Promise<GitContractTypes.ILiquidityController>
  (
    contractName: 'ILProtectionConfigInterface',
    ...args: Head<GetDeployMethod<GitContractTypes.ILProtectionConfigInterface__factory>>
  ): Promise<GitContractTypes.ILProtectionConfigInterface>
  (
    contractName: 'ILProtectionControllerInterface',
    ...args: Head<GetDeployMethod<GitContractTypes.ILProtectionControllerInterface__factory>>
  ): Promise<GitContractTypes.ILProtectionControllerInterface>
  (
    contractName: 'ILProtectionDiscountNFTControllerInterface',
    ...args: Head<GetDeployMethod<GitContractTypes.ILProtectionDiscountNFTControllerInterface__factory>>
  ): Promise<GitContractTypes.ILProtectionDiscountNFTControllerInterface>
  (
    contractName: 'ILProtectionDiscountNFTInterface',
    ...args: Head<GetDeployMethod<GitContractTypes.ILProtectionDiscountNFTInterface__factory>>
  ): Promise<GitContractTypes.ILProtectionDiscountNFTInterface>
  (
    contractName: 'ILProtectionNFTInterface',
    ...args: Head<GetDeployMethod<GitContractTypes.ILProtectionNFTInterface__factory>>
  ): Promise<GitContractTypes.ILProtectionNFTInterface>
  (
    contractName: 'ITokenPairRepository',
    ...args: Head<GetDeployMethod<GitContractTypes.ITokenPairRepository__factory>>
  ): Promise<GitContractTypes.ITokenPairRepository>
  (
    contractName: 'ITreasuryController',
    ...args: Head<GetDeployMethod<GitContractTypes.ITreasuryController__factory>>
  ): Promise<GitContractTypes.ITreasuryController>
  (
    contractName: 'ILUtils',
    ...args: Head<GetDeployMethod<GitContractTypes.ILUtils__factory>>
  ): Promise<GitContractTypes.ILUtils>
  (
    contractName: 'MathUtils',
    ...args: Head<GetDeployMethod<GitContractTypes.MathUtils__factory>>
  ): Promise<GitContractTypes.MathUtils>
  (
    contractName: 'PremiumCalculator',
    ...args: Head<GetDeployMethod<GitContractTypes.PremiumCalculator__factory>>
  ): Promise<GitContractTypes.PremiumCalculator>
  (
    contractName: 'LiquidityController',
    ...args: Head<GetDeployMethod<GitContractTypes.LiquidityController__factory>>
  ): Promise<GitContractTypes.LiquidityController>
  (
    contractName: 'ILProtectionDiscountNFT',
    ...args: Head<GetDeployMethod<GitContractTypes.ILProtectionDiscountNFT__factory>>
  ): Promise<GitContractTypes.ILProtectionDiscountNFT>
  (
    contractName: 'ETHUSDOracle',
    ...args: Head<GetDeployMethod<GitContractTypes.ETHUSDOracle__factory>>
  ): Promise<GitContractTypes.ETHUSDOracle>
  (
    contractName: 'LINKUSDOracle',
    ...args: Head<GetDeployMethod<GitContractTypes.LINKUSDOracle__factory>>
  ): Promise<GitContractTypes.LINKUSDOracle>
  (
    contractName: 'USDUSDOracle',
    ...args: Head<GetDeployMethod<GitContractTypes.USDUSDOracle__factory>>
  ): Promise<GitContractTypes.USDUSDOracle>
  (
    contractName: 'USDC',
    ...args: Head<GetDeployMethod<GitContractTypes.USDC__factory>>
  ): Promise<GitContractTypes.USDC>
  (
    contractName: 'TokenPairRepository',
    ...args: Head<GetDeployMethod<GitContractTypes.TokenPairRepository__factory>>
  ): Promise<GitContractTypes.TokenPairRepository>
  (
    contractName: 'TreasuryController',
    ...args: Head<GetDeployMethod<GitContractTypes.TreasuryController__factory>>
  ): Promise<GitContractTypes.TreasuryController>
  (
    contractName: 'EsGOVI',
    ...args: Head<GetDeployMethod<GitContractTypes.EsGOVI__factory>>
  ): Promise<GitContractTypes.EsGOVI>
  (
    contractName: 'EsGOVIRewardTrackerDistributor',
    ...args: Head<GetDeployMethod<GitContractTypes.EsGOVIRewardTrackerDistributor__factory>>
  ): Promise<GitContractTypes.EsGOVIRewardTrackerDistributor>
  (
    contractName: 'GOVIRewardTrackerDistributor',
    ...args: Head<GetDeployMethod<GitContractTypes.GOVIRewardTrackerDistributor__factory>>
  ): Promise<GitContractTypes.GOVIRewardTrackerDistributor>
  (
    contractName: 'ThetaVaultRewardTrackerDistributor',
    ...args: Head<GetDeployMethod<GitContractTypes.ThetaVaultRewardTrackerDistributor__factory>>
  ): Promise<GitContractTypes.ThetaVaultRewardTrackerDistributor>
  (
    contractName: 'EsGOVIRewardTracker',
    ...args: Head<GetDeployMethod<GitContractTypes.EsGOVIRewardTracker__factory>>
  ): Promise<GitContractTypes.EsGOVIRewardTracker>
  (
    contractName: 'GOVIRewardTracker',
    ...args: Head<GetDeployMethod<GitContractTypes.GOVIRewardTracker__factory>>
  ): Promise<GitContractTypes.GOVIRewardTracker>
  (
    contractName: 'ThetaVaultRewardTracker',
    ...args: Head<GetDeployMethod<GitContractTypes.ThetaVaultRewardTracker__factory>>
  ): Promise<GitContractTypes.ThetaVaultRewardTracker>
  (
    contractName: 'GOVIVester',
    ...args: Head<GetDeployMethod<GitContractTypes.GOVIVester__factory>>
  ): Promise<GitContractTypes.GOVIVester>
  (
    contractName: 'ThetaVaultVester',
    ...args: Head<GetDeployMethod<GitContractTypes.ThetaVaultVester__factory>>
  ): Promise<GitContractTypes.ThetaVaultVester>
  (
    contractName: 'IMintable',
    ...args: Head<GetDeployMethod<GitContractTypes.IMintable__factory>>
  ): Promise<GitContractTypes.IMintable>
  (
    contractName: 'IRewardDistributor',
    ...args: Head<GetDeployMethod<GitContractTypes.IRewardDistributor__factory>>
  ): Promise<GitContractTypes.IRewardDistributor>
  (
    contractName: 'IRewardRouter',
    ...args: Head<GetDeployMethod<GitContractTypes.IRewardRouter__factory>>
  ): Promise<GitContractTypes.IRewardRouter>
  (
    contractName: 'IRewardTracker',
    ...args: Head<GetDeployMethod<GitContractTypes.IRewardTracker__factory>>
  ): Promise<GitContractTypes.IRewardTracker>
  (
    contractName: 'IVester',
    ...args: Head<GetDeployMethod<GitContractTypes.IVester__factory>>
  ): Promise<GitContractTypes.IVester>
  (
    contractName: 'RewardDistributor',
    ...args: Head<GetDeployMethod<GitContractTypes.RewardDistributor__factory>>
  ): Promise<GitContractTypes.RewardDistributor>
  (
    contractName: 'RewardRouter',
    ...args: Head<GetDeployMethod<GitContractTypes.RewardRouter__factory>>
  ): Promise<GitContractTypes.RewardRouter>
  (
    contractName: 'RewardTracker',
    ...args: Head<GetDeployMethod<GitContractTypes.RewardTracker__factory>>
  ): Promise<GitContractTypes.RewardTracker>
  (
    contractName: 'FakeCVIUSDCThetaVault',
    ...args: Head<GetDeployMethod<GitContractTypes.FakeCVIUSDCThetaVault__factory>>
  ): Promise<GitContractTypes.FakeCVIUSDCThetaVault>
  (
    contractName: 'FakeGOVI',
    ...args: Head<GetDeployMethod<GitContractTypes.FakeGOVI__factory>>
  ): Promise<GitContractTypes.FakeGOVI>
  (
    contractName: 'Vester',
    ...args: Head<GetDeployMethod<GitContractTypes.Vester__factory>>
  ): Promise<GitContractTypes.Vester>
  (
    contractName: 'AccessControlUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.AccessControlUpgradeable__factory>>
  ): Promise<GitContractTypes.AccessControlUpgradeable>
  (
    contractName: 'IAccessControlUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IAccessControlUpgradeable__factory>>
  ): Promise<GitContractTypes.IAccessControlUpgradeable>
  (
    contractName: 'OwnableUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.OwnableUpgradeable__factory>>
  ): Promise<GitContractTypes.OwnableUpgradeable>
  (
    contractName: 'Initializable',
    ...args: Head<GetDeployMethod<GitContractTypes.Initializable__factory>>
  ): Promise<GitContractTypes.Initializable>
  (
    contractName: 'ReentrancyGuardUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ReentrancyGuardUpgradeable__factory>>
  ): Promise<GitContractTypes.ReentrancyGuardUpgradeable>
  (
    contractName: 'ERC20Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20Upgradeable__factory>>
  ): Promise<GitContractTypes.ERC20Upgradeable>
  (
    contractName: 'IERC20MetadataUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC20MetadataUpgradeable__factory>>
  ): Promise<GitContractTypes.IERC20MetadataUpgradeable>
  (
    contractName: 'IERC20Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC20Upgradeable__factory>>
  ): Promise<GitContractTypes.IERC20Upgradeable>
  (
    contractName: 'ERC721Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC721Upgradeable__factory>>
  ): Promise<GitContractTypes.ERC721Upgradeable>
  (
    contractName: 'ERC721EnumerableUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC721EnumerableUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC721EnumerableUpgradeable>
  (
    contractName: 'IERC721EnumerableUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC721EnumerableUpgradeable__factory>>
  ): Promise<GitContractTypes.IERC721EnumerableUpgradeable>
  (
    contractName: 'IERC721MetadataUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC721MetadataUpgradeable__factory>>
  ): Promise<GitContractTypes.IERC721MetadataUpgradeable>
  (
    contractName: 'IERC721ReceiverUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC721ReceiverUpgradeable__factory>>
  ): Promise<GitContractTypes.IERC721ReceiverUpgradeable>
  (
    contractName: 'IERC721Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC721Upgradeable__factory>>
  ): Promise<GitContractTypes.IERC721Upgradeable>
  (
    contractName: 'ContextUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ContextUpgradeable__factory>>
  ): Promise<GitContractTypes.ContextUpgradeable>
  (
    contractName: 'ERC165Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC165Upgradeable__factory>>
  ): Promise<GitContractTypes.ERC165Upgradeable>
  (
    contractName: 'IERC165Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC165Upgradeable__factory>>
  ): Promise<GitContractTypes.IERC165Upgradeable>
  (
    contractName: 'AccessControl',
    ...args: Head<GetDeployMethod<GitContractTypes.AccessControl__factory>>
  ): Promise<GitContractTypes.AccessControl>
  (
    contractName: 'IAccessControl',
    ...args: Head<GetDeployMethod<GitContractTypes.IAccessControl__factory>>
  ): Promise<GitContractTypes.IAccessControl>
  (
    contractName: 'Ownable',
    ...args: Head<GetDeployMethod<GitContractTypes.Ownable__factory>>
  ): Promise<GitContractTypes.Ownable>
  (
    contractName: 'ERC20',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20__factory>>
  ): Promise<GitContractTypes.ERC20>
  (
    contractName: 'IERC20Metadata',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC20Metadata__factory>>
  ): Promise<GitContractTypes.IERC20Metadata>
  (
    contractName: 'ERC165',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC165__factory>>
  ): Promise<GitContractTypes.ERC165>
  (
    contractName: 'IERC165',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC165__factory>>
  ): Promise<GitContractTypes.IERC165>
  (
    contractName: 'CVIDeviationOracle',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIDeviationOracle__factory>>
  ): Promise<GitContractTypes.CVIDeviationOracle>
  (
    contractName: 'CVIFakeFeedOracle',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIFakeFeedOracle__factory>>
  ): Promise<GitContractTypes.CVIFakeFeedOracle>
  (
    contractName: 'CVIOracle2X',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIOracle2X__factory>>
  ): Promise<GitContractTypes.CVIOracle2X>
  (
    contractName: 'ETHVIOracle',
    ...args: Head<GetDeployMethod<GitContractTypes.ETHVIOracle__factory>>
  ): Promise<GitContractTypes.ETHVIOracle>
  (
    contractName: 'CVIUSDCFeesCalculator',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCFeesCalculator__factory>>
  ): Promise<GitContractTypes.CVIUSDCFeesCalculator>
  (
    contractName: 'CVIUSDCFeesCalculator2X',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCFeesCalculator2X__factory>>
  ): Promise<GitContractTypes.CVIUSDCFeesCalculator2X>
  (
    contractName: 'CVIUSDCLiquidation',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCLiquidation__factory>>
  ): Promise<GitContractTypes.CVIUSDCLiquidation>
  (
    contractName: 'CVIUSDCLiquidation2X',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCLiquidation2X__factory>>
  ): Promise<GitContractTypes.CVIUSDCLiquidation2X>
  (
    contractName: 'CVIUSDCPlatform',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCPlatform__factory>>
  ): Promise<GitContractTypes.CVIUSDCPlatform>
  (
    contractName: 'CVIUSDCPlatform2X',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCPlatform2X__factory>>
  ): Promise<GitContractTypes.CVIUSDCPlatform2X>
  (
    contractName: 'CVIUSDCPositionRewards',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCPositionRewards__factory>>
  ): Promise<GitContractTypes.CVIUSDCPositionRewards>
  (
    contractName: 'StakingV2',
    ...args: Head<GetDeployMethod<GitContractTypes.StakingV2__factory>>
  ): Promise<GitContractTypes.StakingV2>
  (
    contractName: 'CVIUSDCLPStakingRewards',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCLPStakingRewards__factory>>
  ): Promise<GitContractTypes.CVIUSDCLPStakingRewards>
  (
    contractName: 'CVIUSDCThetaVault',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCThetaVault__factory>>
  ): Promise<GitContractTypes.CVIUSDCThetaVault>
  (
    contractName: 'CVIUSDCThetaVault2X',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCThetaVault2X__factory>>
  ): Promise<GitContractTypes.CVIUSDCThetaVault2X>
  (
    contractName: 'CVIUSDCThetaVaultRequestFulfiller',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller__factory>>
  ): Promise<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller>
  (
    contractName: 'CVIUSDCThetaVaultRequestFulfiller2X',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X__factory>>
  ): Promise<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X>
  (
    contractName: 'WETH',
    ...args: Head<GetDeployMethod<GitContractTypes.WETH__factory>>
  ): Promise<GitContractTypes.WETH>
  (
    contractName: 'CVIUSDCRebaser',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCRebaser__factory>>
  ): Promise<GitContractTypes.CVIUSDCRebaser>
  (
    contractName: 'CVIUSDCRebaser2X',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCRebaser2X__factory>>
  ): Promise<GitContractTypes.CVIUSDCRebaser2X>
  (
    contractName: 'CVIUSDCRequestFeesCalculator',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCRequestFeesCalculator__factory>>
  ): Promise<GitContractTypes.CVIUSDCRequestFeesCalculator>
  (
    contractName: 'CVIUSDCRequestFeesCalculator2X',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCRequestFeesCalculator2X__factory>>
  ): Promise<GitContractTypes.CVIUSDCRequestFeesCalculator2X>
  (
    contractName: 'CVIUSDCVolatilityToken',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCVolatilityToken__factory>>
  ): Promise<GitContractTypes.CVIUSDCVolatilityToken>
  (
    contractName: 'CVIUSDCVolatilityToken2X',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCVolatilityToken2X__factory>>
  ): Promise<GitContractTypes.CVIUSDCVolatilityToken2X>
  (
    contractName: 'CVIUSDCVolTokenRequestFulfiller',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCVolTokenRequestFulfiller__factory>>
  ): Promise<GitContractTypes.CVIUSDCVolTokenRequestFulfiller>
  (
    contractName: 'CVIUSDCVolTokenRequestFulfiller2X',
    ...args: Head<GetDeployMethod<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X__factory>>
  ): Promise<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X>
  (
    contractName: 'AccessControlCrossChainUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.AccessControlCrossChainUpgradeable__factory>>
  ): Promise<GitContractTypes.AccessControlCrossChainUpgradeable>
  (
    contractName: 'AccessControlEnumerableUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.AccessControlEnumerableUpgradeable__factory>>
  ): Promise<GitContractTypes.AccessControlEnumerableUpgradeable>
  (
    contractName: 'ConditionalEscrowUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ConditionalEscrowUpgradeable__factory>>
  ): Promise<GitContractTypes.ConditionalEscrowUpgradeable>
  (
    contractName: 'CrossChainEnabledAMBUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledAMBUpgradeable__factory>>
  ): Promise<GitContractTypes.CrossChainEnabledAMBUpgradeable>
  (
    contractName: 'CrossChainEnabledArbitrumL1Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable__factory>>
  ): Promise<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable>
  (
    contractName: 'CrossChainEnabledArbitrumL2Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable__factory>>
  ): Promise<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable>
  (
    contractName: 'CrossChainEnabledOptimismUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledOptimismUpgradeable__factory>>
  ): Promise<GitContractTypes.CrossChainEnabledOptimismUpgradeable>
  (
    contractName: 'CrossChainEnabledPolygonChildUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable__factory>>
  ): Promise<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable>
  (
    contractName: 'CrossChainEnabledUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledUpgradeable__factory>>
  ): Promise<GitContractTypes.CrossChainEnabledUpgradeable>
  (
    contractName: 'DoubleEndedQueueUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.DoubleEndedQueueUpgradeable__factory>>
  ): Promise<GitContractTypes.DoubleEndedQueueUpgradeable>
  (
    contractName: 'EIP712Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.EIP712Upgradeable__factory>>
  ): Promise<GitContractTypes.EIP712Upgradeable>
  (
    contractName: 'ERC1155BurnableUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1155BurnableUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC1155BurnableUpgradeable>
  (
    contractName: 'ERC1155HolderUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1155HolderUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC1155HolderUpgradeable>
  (
    contractName: 'ERC1155PausableUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1155PausableUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC1155PausableUpgradeable>
  (
    contractName: 'ERC1155PresetMinterPauserUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1155PresetMinterPauserUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC1155PresetMinterPauserUpgradeable>
  (
    contractName: 'ERC1155ReceiverUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1155ReceiverUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC1155ReceiverUpgradeable>
  (
    contractName: 'ERC1155SupplyUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1155SupplyUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC1155SupplyUpgradeable>
  (
    contractName: 'ERC1155Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1155Upgradeable__factory>>
  ): Promise<GitContractTypes.ERC1155Upgradeable>
  (
    contractName: 'ERC1155URIStorageUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1155URIStorageUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC1155URIStorageUpgradeable>
  (
    contractName: 'ERC165StorageUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC165StorageUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC165StorageUpgradeable>
  (
    contractName: 'ERC1820ImplementerUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1820ImplementerUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC1820ImplementerUpgradeable>
  (
    contractName: 'ERC1967UpgradeUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1967UpgradeUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC1967UpgradeUpgradeable>
  (
    contractName: 'ERC20BurnableUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20BurnableUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC20BurnableUpgradeable>
  (
    contractName: 'ERC20CappedUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20CappedUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC20CappedUpgradeable>
  (
    contractName: 'ERC20FlashMintUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20FlashMintUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC20FlashMintUpgradeable>
  (
    contractName: 'ERC20PausableUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20PausableUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC20PausableUpgradeable>
  (
    contractName: 'ERC20PermitUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20PermitUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC20PermitUpgradeable>
  (
    contractName: 'ERC20PresetFixedSupplyUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20PresetFixedSupplyUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC20PresetFixedSupplyUpgradeable>
  (
    contractName: 'ERC20PresetMinterPauserUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20PresetMinterPauserUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC20PresetMinterPauserUpgradeable>
  (
    contractName: 'ERC20SnapshotUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20SnapshotUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC20SnapshotUpgradeable>
  (
    contractName: 'ERC20VotesCompUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20VotesCompUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC20VotesCompUpgradeable>
  (
    contractName: 'ERC20VotesUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20VotesUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC20VotesUpgradeable>
  (
    contractName: 'ERC20WrapperUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20WrapperUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC20WrapperUpgradeable>
  (
    contractName: 'ERC2771ContextUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC2771ContextUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC2771ContextUpgradeable>
  (
    contractName: 'ERC2981Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC2981Upgradeable__factory>>
  ): Promise<GitContractTypes.ERC2981Upgradeable>
  (
    contractName: 'ERC721BurnableUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC721BurnableUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC721BurnableUpgradeable>
  (
    contractName: 'ERC721HolderUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC721HolderUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC721HolderUpgradeable>
  (
    contractName: 'ERC721PausableUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC721PausableUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC721PausableUpgradeable>
  (
    contractName: 'ERC721PresetMinterPauserAutoIdUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable>
  (
    contractName: 'ERC721RoyaltyUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC721RoyaltyUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC721RoyaltyUpgradeable>
  (
    contractName: 'ERC721URIStorageUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC721URIStorageUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC721URIStorageUpgradeable>
  (
    contractName: 'ERC721VotesUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC721VotesUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC721VotesUpgradeable>
  (
    contractName: 'ERC777PresetFixedSupplyUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC777PresetFixedSupplyUpgradeable__factory>>
  ): Promise<GitContractTypes.ERC777PresetFixedSupplyUpgradeable>
  (
    contractName: 'ERC777Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC777Upgradeable__factory>>
  ): Promise<GitContractTypes.ERC777Upgradeable>
  (
    contractName: 'EscrowUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.EscrowUpgradeable__factory>>
  ): Promise<GitContractTypes.EscrowUpgradeable>
  (
    contractName: 'GovernorCompatibilityBravoUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorCompatibilityBravoUpgradeable__factory>>
  ): Promise<GitContractTypes.GovernorCompatibilityBravoUpgradeable>
  (
    contractName: 'GovernorCountingSimpleUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorCountingSimpleUpgradeable__factory>>
  ): Promise<GitContractTypes.GovernorCountingSimpleUpgradeable>
  (
    contractName: 'GovernorPreventLateQuorumUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorPreventLateQuorumUpgradeable__factory>>
  ): Promise<GitContractTypes.GovernorPreventLateQuorumUpgradeable>
  (
    contractName: 'GovernorProposalThresholdUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorProposalThresholdUpgradeable__factory>>
  ): Promise<GitContractTypes.GovernorProposalThresholdUpgradeable>
  (
    contractName: 'GovernorSettingsUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorSettingsUpgradeable__factory>>
  ): Promise<GitContractTypes.GovernorSettingsUpgradeable>
  (
    contractName: 'GovernorTimelockCompoundUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorTimelockCompoundUpgradeable__factory>>
  ): Promise<GitContractTypes.GovernorTimelockCompoundUpgradeable>
  (
    contractName: 'GovernorTimelockControlUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorTimelockControlUpgradeable__factory>>
  ): Promise<GitContractTypes.GovernorTimelockControlUpgradeable>
  (
    contractName: 'GovernorUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorUpgradeable__factory>>
  ): Promise<GitContractTypes.GovernorUpgradeable>
  (
    contractName: 'GovernorVotesCompUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorVotesCompUpgradeable__factory>>
  ): Promise<GitContractTypes.GovernorVotesCompUpgradeable>
  (
    contractName: 'GovernorVotesQuorumFractionUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorVotesQuorumFractionUpgradeable__factory>>
  ): Promise<GitContractTypes.GovernorVotesQuorumFractionUpgradeable>
  (
    contractName: 'GovernorVotesUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorVotesUpgradeable__factory>>
  ): Promise<GitContractTypes.GovernorVotesUpgradeable>
  (
    contractName: 'IAccessControlEnumerableUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IAccessControlEnumerableUpgradeable__factory>>
  ): Promise<GitContractTypes.IAccessControlEnumerableUpgradeable>
  (
    contractName: 'IAMBUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IAMBUpgradeable__factory>>
  ): Promise<GitContractTypes.IAMBUpgradeable>
  (
    contractName: 'IArbSysUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IArbSysUpgradeable__factory>>
  ): Promise<GitContractTypes.IArbSysUpgradeable>
  (
    contractName: 'IBeaconUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IBeaconUpgradeable__factory>>
  ): Promise<GitContractTypes.IBeaconUpgradeable>
  (
    contractName: 'IBridgeUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IBridgeUpgradeable__factory>>
  ): Promise<GitContractTypes.IBridgeUpgradeable>
  (
    contractName: 'ICompoundTimelockUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ICompoundTimelockUpgradeable__factory>>
  ): Promise<GitContractTypes.ICompoundTimelockUpgradeable>
  (
    contractName: 'ICrossDomainMessengerUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.ICrossDomainMessengerUpgradeable__factory>>
  ): Promise<GitContractTypes.ICrossDomainMessengerUpgradeable>
  (
    contractName: 'IERC1155MetadataURIUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1155MetadataURIUpgradeable__factory>>
  ): Promise<GitContractTypes.IERC1155MetadataURIUpgradeable>
  (
    contractName: 'IERC1155ReceiverUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1155ReceiverUpgradeable__factory>>
  ): Promise<GitContractTypes.IERC1155ReceiverUpgradeable>
  (
    contractName: 'IERC1155Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1155Upgradeable__factory>>
  ): Promise<GitContractTypes.IERC1155Upgradeable>
  (
    contractName: 'IERC1271Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1271Upgradeable__factory>>
  ): Promise<GitContractTypes.IERC1271Upgradeable>
  (
    contractName: 'IERC1363ReceiverUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1363ReceiverUpgradeable__factory>>
  ): Promise<GitContractTypes.IERC1363ReceiverUpgradeable>
  (
    contractName: 'IERC1363SpenderUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1363SpenderUpgradeable__factory>>
  ): Promise<GitContractTypes.IERC1363SpenderUpgradeable>
  (
    contractName: 'IERC1363Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1363Upgradeable__factory>>
  ): Promise<GitContractTypes.IERC1363Upgradeable>
  (
    contractName: 'IERC1820ImplementerUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1820ImplementerUpgradeable__factory>>
  ): Promise<GitContractTypes.IERC1820ImplementerUpgradeable>
  (
    contractName: 'IERC1820RegistryUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1820RegistryUpgradeable__factory>>
  ): Promise<GitContractTypes.IERC1820RegistryUpgradeable>
  (
    contractName: 'IERC1822ProxiableUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1822ProxiableUpgradeable__factory>>
  ): Promise<GitContractTypes.IERC1822ProxiableUpgradeable>
  (
    contractName: 'IERC20PermitUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC20PermitUpgradeable__factory>>
  ): Promise<GitContractTypes.IERC20PermitUpgradeable>
  (
    contractName: 'IERC2612Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC2612Upgradeable__factory>>
  ): Promise<GitContractTypes.IERC2612Upgradeable>
  (
    contractName: 'IERC2981Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC2981Upgradeable__factory>>
  ): Promise<GitContractTypes.IERC2981Upgradeable>
  (
    contractName: 'IERC3156FlashBorrowerUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC3156FlashBorrowerUpgradeable__factory>>
  ): Promise<GitContractTypes.IERC3156FlashBorrowerUpgradeable>
  (
    contractName: 'IERC3156FlashLenderUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC3156FlashLenderUpgradeable__factory>>
  ): Promise<GitContractTypes.IERC3156FlashLenderUpgradeable>
  (
    contractName: 'IERC777RecipientUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC777RecipientUpgradeable__factory>>
  ): Promise<GitContractTypes.IERC777RecipientUpgradeable>
  (
    contractName: 'IERC777SenderUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC777SenderUpgradeable__factory>>
  ): Promise<GitContractTypes.IERC777SenderUpgradeable>
  (
    contractName: 'IERC777Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC777Upgradeable__factory>>
  ): Promise<GitContractTypes.IERC777Upgradeable>
  (
    contractName: 'IFxMessageProcessorUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IFxMessageProcessorUpgradeable__factory>>
  ): Promise<GitContractTypes.IFxMessageProcessorUpgradeable>
  (
    contractName: 'IGovernorCompatibilityBravoUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IGovernorCompatibilityBravoUpgradeable__factory>>
  ): Promise<GitContractTypes.IGovernorCompatibilityBravoUpgradeable>
  (
    contractName: 'IGovernorTimelockUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IGovernorTimelockUpgradeable__factory>>
  ): Promise<GitContractTypes.IGovernorTimelockUpgradeable>
  (
    contractName: 'IGovernorUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IGovernorUpgradeable__factory>>
  ): Promise<GitContractTypes.IGovernorUpgradeable>
  (
    contractName: 'IInboxUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IInboxUpgradeable__factory>>
  ): Promise<GitContractTypes.IInboxUpgradeable>
  (
    contractName: 'IMessageProviderUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IMessageProviderUpgradeable__factory>>
  ): Promise<GitContractTypes.IMessageProviderUpgradeable>
  (
    contractName: 'IOutboxUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IOutboxUpgradeable__factory>>
  ): Promise<GitContractTypes.IOutboxUpgradeable>
  (
    contractName: 'IVotesUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.IVotesUpgradeable__factory>>
  ): Promise<GitContractTypes.IVotesUpgradeable>
  (
    contractName: 'LibArbitrumL2Upgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.LibArbitrumL2Upgradeable__factory>>
  ): Promise<GitContractTypes.LibArbitrumL2Upgradeable>
  (
    contractName: 'MinimalForwarderUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.MinimalForwarderUpgradeable__factory>>
  ): Promise<GitContractTypes.MinimalForwarderUpgradeable>
  (
    contractName: 'MulticallUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.MulticallUpgradeable__factory>>
  ): Promise<GitContractTypes.MulticallUpgradeable>
  (
    contractName: 'PausableUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.PausableUpgradeable__factory>>
  ): Promise<GitContractTypes.PausableUpgradeable>
  (
    contractName: 'PaymentSplitterUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.PaymentSplitterUpgradeable__factory>>
  ): Promise<GitContractTypes.PaymentSplitterUpgradeable>
  (
    contractName: 'PullPaymentUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.PullPaymentUpgradeable__factory>>
  ): Promise<GitContractTypes.PullPaymentUpgradeable>
  (
    contractName: 'RefundEscrowUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.RefundEscrowUpgradeable__factory>>
  ): Promise<GitContractTypes.RefundEscrowUpgradeable>
  (
    contractName: 'TimelockControllerUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.TimelockControllerUpgradeable__factory>>
  ): Promise<GitContractTypes.TimelockControllerUpgradeable>
  (
    contractName: 'TimelockControllerWith46MigrationUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.TimelockControllerWith46MigrationUpgradeable__factory>>
  ): Promise<GitContractTypes.TimelockControllerWith46MigrationUpgradeable>
  (
    contractName: 'TokenTimelockUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.TokenTimelockUpgradeable__factory>>
  ): Promise<GitContractTypes.TokenTimelockUpgradeable>
  (
    contractName: 'UUPSUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.UUPSUpgradeable__factory>>
  ): Promise<GitContractTypes.UUPSUpgradeable>
  (
    contractName: 'VestingWalletUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.VestingWalletUpgradeable__factory>>
  ): Promise<GitContractTypes.VestingWalletUpgradeable>
  (
    contractName: 'VotesUpgradeable',
    ...args: Head<GetDeployMethod<GitContractTypes.VotesUpgradeable__factory>>
  ): Promise<GitContractTypes.VotesUpgradeable>
  (
    contractName: 'AccessControlCrossChain',
    ...args: Head<GetDeployMethod<GitContractTypes.AccessControlCrossChain__factory>>
  ): Promise<GitContractTypes.AccessControlCrossChain>
  (
    contractName: 'AccessControlEnumerable',
    ...args: Head<GetDeployMethod<GitContractTypes.AccessControlEnumerable__factory>>
  ): Promise<GitContractTypes.AccessControlEnumerable>
  (
    contractName: 'BeaconProxy',
    ...args: Head<GetDeployMethod<GitContractTypes.BeaconProxy__factory>>
  ): Promise<GitContractTypes.BeaconProxy>
  (
    contractName: 'ConditionalEscrow',
    ...args: Head<GetDeployMethod<GitContractTypes.ConditionalEscrow__factory>>
  ): Promise<GitContractTypes.ConditionalEscrow>
  (
    contractName: 'CrossChainEnabledAMB',
    ...args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledAMB__factory>>
  ): Promise<GitContractTypes.CrossChainEnabledAMB>
  (
    contractName: 'CrossChainEnabledPolygonChild',
    ...args: Head<GetDeployMethod<GitContractTypes.CrossChainEnabledPolygonChild__factory>>
  ): Promise<GitContractTypes.CrossChainEnabledPolygonChild>
  (
    contractName: 'DoubleEndedQueue',
    ...args: Head<GetDeployMethod<GitContractTypes.DoubleEndedQueue__factory>>
  ): Promise<GitContractTypes.DoubleEndedQueue>
  (
    contractName: 'ERC1155',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1155__factory>>
  ): Promise<GitContractTypes.ERC1155>
  (
    contractName: 'ERC1155Burnable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1155Burnable__factory>>
  ): Promise<GitContractTypes.ERC1155Burnable>
  (
    contractName: 'ERC1155Holder',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1155Holder__factory>>
  ): Promise<GitContractTypes.ERC1155Holder>
  (
    contractName: 'ERC1155Pausable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1155Pausable__factory>>
  ): Promise<GitContractTypes.ERC1155Pausable>
  (
    contractName: 'ERC1155PresetMinterPauser',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1155PresetMinterPauser__factory>>
  ): Promise<GitContractTypes.ERC1155PresetMinterPauser>
  (
    contractName: 'ERC1155Receiver',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1155Receiver__factory>>
  ): Promise<GitContractTypes.ERC1155Receiver>
  (
    contractName: 'ERC1155Supply',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1155Supply__factory>>
  ): Promise<GitContractTypes.ERC1155Supply>
  (
    contractName: 'ERC1155URIStorage',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1155URIStorage__factory>>
  ): Promise<GitContractTypes.ERC1155URIStorage>
  (
    contractName: 'ERC165Storage',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC165Storage__factory>>
  ): Promise<GitContractTypes.ERC165Storage>
  (
    contractName: 'ERC1820Implementer',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1820Implementer__factory>>
  ): Promise<GitContractTypes.ERC1820Implementer>
  (
    contractName: 'ERC1967Proxy',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1967Proxy__factory>>
  ): Promise<GitContractTypes.ERC1967Proxy>
  (
    contractName: 'ERC1967Upgrade',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC1967Upgrade__factory>>
  ): Promise<GitContractTypes.ERC1967Upgrade>
  (
    contractName: 'ERC20Burnable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20Burnable__factory>>
  ): Promise<GitContractTypes.ERC20Burnable>
  (
    contractName: 'ERC20Capped',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20Capped__factory>>
  ): Promise<GitContractTypes.ERC20Capped>
  (
    contractName: 'ERC20FlashMint',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20FlashMint__factory>>
  ): Promise<GitContractTypes.ERC20FlashMint>
  (
    contractName: 'ERC20Pausable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20Pausable__factory>>
  ): Promise<GitContractTypes.ERC20Pausable>
  (
    contractName: 'ERC20Permit',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20Permit__factory>>
  ): Promise<GitContractTypes.ERC20Permit>
  (
    contractName: 'ERC20PresetFixedSupply',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20PresetFixedSupply__factory>>
  ): Promise<GitContractTypes.ERC20PresetFixedSupply>
  (
    contractName: 'ERC20PresetMinterPauser',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20PresetMinterPauser__factory>>
  ): Promise<GitContractTypes.ERC20PresetMinterPauser>
  (
    contractName: 'ERC20Snapshot',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20Snapshot__factory>>
  ): Promise<GitContractTypes.ERC20Snapshot>
  (
    contractName: 'ERC20Votes',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20Votes__factory>>
  ): Promise<GitContractTypes.ERC20Votes>
  (
    contractName: 'ERC20VotesComp',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20VotesComp__factory>>
  ): Promise<GitContractTypes.ERC20VotesComp>
  (
    contractName: 'ERC20Wrapper',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC20Wrapper__factory>>
  ): Promise<GitContractTypes.ERC20Wrapper>
  (
    contractName: 'ERC2771Context',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC2771Context__factory>>
  ): Promise<GitContractTypes.ERC2771Context>
  (
    contractName: 'ERC2981',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC2981__factory>>
  ): Promise<GitContractTypes.ERC2981>
  (
    contractName: 'ERC721',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC721__factory>>
  ): Promise<GitContractTypes.ERC721>
  (
    contractName: 'ERC721Burnable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC721Burnable__factory>>
  ): Promise<GitContractTypes.ERC721Burnable>
  (
    contractName: 'ERC721Enumerable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC721Enumerable__factory>>
  ): Promise<GitContractTypes.ERC721Enumerable>
  (
    contractName: 'ERC721Holder',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC721Holder__factory>>
  ): Promise<GitContractTypes.ERC721Holder>
  (
    contractName: 'ERC721Pausable',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC721Pausable__factory>>
  ): Promise<GitContractTypes.ERC721Pausable>
  (
    contractName: 'ERC721PresetMinterPauserAutoId',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC721PresetMinterPauserAutoId__factory>>
  ): Promise<GitContractTypes.ERC721PresetMinterPauserAutoId>
  (
    contractName: 'ERC721Royalty',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC721Royalty__factory>>
  ): Promise<GitContractTypes.ERC721Royalty>
  (
    contractName: 'ERC721URIStorage',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC721URIStorage__factory>>
  ): Promise<GitContractTypes.ERC721URIStorage>
  (
    contractName: 'ERC721Votes',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC721Votes__factory>>
  ): Promise<GitContractTypes.ERC721Votes>
  (
    contractName: 'ERC777',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC777__factory>>
  ): Promise<GitContractTypes.ERC777>
  (
    contractName: 'ERC777PresetFixedSupply',
    ...args: Head<GetDeployMethod<GitContractTypes.ERC777PresetFixedSupply__factory>>
  ): Promise<GitContractTypes.ERC777PresetFixedSupply>
  (
    contractName: 'Escrow',
    ...args: Head<GetDeployMethod<GitContractTypes.Escrow__factory>>
  ): Promise<GitContractTypes.Escrow>
  (
    contractName: 'Governor',
    ...args: Head<GetDeployMethod<GitContractTypes.Governor__factory>>
  ): Promise<GitContractTypes.Governor>
  (
    contractName: 'GovernorCompatibilityBravo',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorCompatibilityBravo__factory>>
  ): Promise<GitContractTypes.GovernorCompatibilityBravo>
  (
    contractName: 'GovernorCountingSimple',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorCountingSimple__factory>>
  ): Promise<GitContractTypes.GovernorCountingSimple>
  (
    contractName: 'GovernorPreventLateQuorum',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorPreventLateQuorum__factory>>
  ): Promise<GitContractTypes.GovernorPreventLateQuorum>
  (
    contractName: 'GovernorProposalThreshold',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorProposalThreshold__factory>>
  ): Promise<GitContractTypes.GovernorProposalThreshold>
  (
    contractName: 'GovernorSettings',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorSettings__factory>>
  ): Promise<GitContractTypes.GovernorSettings>
  (
    contractName: 'GovernorTimelockCompound',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorTimelockCompound__factory>>
  ): Promise<GitContractTypes.GovernorTimelockCompound>
  (
    contractName: 'GovernorTimelockControl',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorTimelockControl__factory>>
  ): Promise<GitContractTypes.GovernorTimelockControl>
  (
    contractName: 'GovernorVotes',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorVotes__factory>>
  ): Promise<GitContractTypes.GovernorVotes>
  (
    contractName: 'GovernorVotesComp',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorVotesComp__factory>>
  ): Promise<GitContractTypes.GovernorVotesComp>
  (
    contractName: 'GovernorVotesQuorumFraction',
    ...args: Head<GetDeployMethod<GitContractTypes.GovernorVotesQuorumFraction__factory>>
  ): Promise<GitContractTypes.GovernorVotesQuorumFraction>
  (
    contractName: 'IAccessControlEnumerable',
    ...args: Head<GetDeployMethod<GitContractTypes.IAccessControlEnumerable__factory>>
  ): Promise<GitContractTypes.IAccessControlEnumerable>
  (
    contractName: 'IAMB',
    ...args: Head<GetDeployMethod<GitContractTypes.IAMB__factory>>
  ): Promise<GitContractTypes.IAMB>
  (
    contractName: 'IArbSys',
    ...args: Head<GetDeployMethod<GitContractTypes.IArbSys__factory>>
  ): Promise<GitContractTypes.IArbSys>
  (
    contractName: 'IBeacon',
    ...args: Head<GetDeployMethod<GitContractTypes.IBeacon__factory>>
  ): Promise<GitContractTypes.IBeacon>
  (
    contractName: 'IBridge',
    ...args: Head<GetDeployMethod<GitContractTypes.IBridge__factory>>
  ): Promise<GitContractTypes.IBridge>
  (
    contractName: 'ICompoundTimelock',
    ...args: Head<GetDeployMethod<GitContractTypes.ICompoundTimelock__factory>>
  ): Promise<GitContractTypes.ICompoundTimelock>
  (
    contractName: 'ICrossDomainMessenger',
    ...args: Head<GetDeployMethod<GitContractTypes.ICrossDomainMessenger__factory>>
  ): Promise<GitContractTypes.ICrossDomainMessenger>
  (
    contractName: 'IERC1155',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1155__factory>>
  ): Promise<GitContractTypes.IERC1155>
  (
    contractName: 'IERC1155MetadataURI',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1155MetadataURI__factory>>
  ): Promise<GitContractTypes.IERC1155MetadataURI>
  (
    contractName: 'IERC1155Receiver',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1155Receiver__factory>>
  ): Promise<GitContractTypes.IERC1155Receiver>
  (
    contractName: 'IERC1271',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1271__factory>>
  ): Promise<GitContractTypes.IERC1271>
  (
    contractName: 'IERC1363',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1363__factory>>
  ): Promise<GitContractTypes.IERC1363>
  (
    contractName: 'IERC1363Receiver',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1363Receiver__factory>>
  ): Promise<GitContractTypes.IERC1363Receiver>
  (
    contractName: 'IERC1363Spender',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1363Spender__factory>>
  ): Promise<GitContractTypes.IERC1363Spender>
  (
    contractName: 'IERC1820Implementer',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1820Implementer__factory>>
  ): Promise<GitContractTypes.IERC1820Implementer>
  (
    contractName: 'IERC1820Registry',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1820Registry__factory>>
  ): Promise<GitContractTypes.IERC1820Registry>
  (
    contractName: 'IERC1822Proxiable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC1822Proxiable__factory>>
  ): Promise<GitContractTypes.IERC1822Proxiable>
  (
    contractName: 'IERC20Permit',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC20Permit__factory>>
  ): Promise<GitContractTypes.IERC20Permit>
  (
    contractName: 'IERC2612',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC2612__factory>>
  ): Promise<GitContractTypes.IERC2612>
  (
    contractName: 'IERC2981',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC2981__factory>>
  ): Promise<GitContractTypes.IERC2981>
  (
    contractName: 'IERC3156FlashBorrower',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC3156FlashBorrower__factory>>
  ): Promise<GitContractTypes.IERC3156FlashBorrower>
  (
    contractName: 'IERC3156FlashLender',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC3156FlashLender__factory>>
  ): Promise<GitContractTypes.IERC3156FlashLender>
  (
    contractName: 'IERC721',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC721__factory>>
  ): Promise<GitContractTypes.IERC721>
  (
    contractName: 'IERC721Enumerable',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC721Enumerable__factory>>
  ): Promise<GitContractTypes.IERC721Enumerable>
  (
    contractName: 'IERC721Metadata',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC721Metadata__factory>>
  ): Promise<GitContractTypes.IERC721Metadata>
  (
    contractName: 'IERC721Receiver',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC721Receiver__factory>>
  ): Promise<GitContractTypes.IERC721Receiver>
  (
    contractName: 'IERC777',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC777__factory>>
  ): Promise<GitContractTypes.IERC777>
  (
    contractName: 'IERC777Recipient',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC777Recipient__factory>>
  ): Promise<GitContractTypes.IERC777Recipient>
  (
    contractName: 'IERC777Sender',
    ...args: Head<GetDeployMethod<GitContractTypes.IERC777Sender__factory>>
  ): Promise<GitContractTypes.IERC777Sender>
  (
    contractName: 'IFxMessageProcessor',
    ...args: Head<GetDeployMethod<GitContractTypes.IFxMessageProcessor__factory>>
  ): Promise<GitContractTypes.IFxMessageProcessor>
  (
    contractName: 'IGovernor',
    ...args: Head<GetDeployMethod<GitContractTypes.IGovernor__factory>>
  ): Promise<GitContractTypes.IGovernor>
  (
    contractName: 'IGovernorCompatibilityBravo',
    ...args: Head<GetDeployMethod<GitContractTypes.IGovernorCompatibilityBravo__factory>>
  ): Promise<GitContractTypes.IGovernorCompatibilityBravo>
  (
    contractName: 'IGovernorTimelock',
    ...args: Head<GetDeployMethod<GitContractTypes.IGovernorTimelock__factory>>
  ): Promise<GitContractTypes.IGovernorTimelock>
  (
    contractName: 'IMessageProvider',
    ...args: Head<GetDeployMethod<GitContractTypes.IMessageProvider__factory>>
  ): Promise<GitContractTypes.IMessageProvider>
  (
    contractName: 'IOutbox',
    ...args: Head<GetDeployMethod<GitContractTypes.IOutbox__factory>>
  ): Promise<GitContractTypes.IOutbox>
  (
    contractName: 'IVotes',
    ...args: Head<GetDeployMethod<GitContractTypes.IVotes__factory>>
  ): Promise<GitContractTypes.IVotes>
  (
    contractName: 'LibArbitrumL2',
    ...args: Head<GetDeployMethod<GitContractTypes.LibArbitrumL2__factory>>
  ): Promise<GitContractTypes.LibArbitrumL2>
  (
    contractName: 'MinimalForwarder',
    ...args: Head<GetDeployMethod<GitContractTypes.MinimalForwarder__factory>>
  ): Promise<GitContractTypes.MinimalForwarder>
  (
    contractName: 'Multicall',
    ...args: Head<GetDeployMethod<GitContractTypes.Multicall__factory>>
  ): Promise<GitContractTypes.Multicall>
  (
    contractName: 'PaymentSplitter',
    ...args: Head<GetDeployMethod<GitContractTypes.PaymentSplitter__factory>>
  ): Promise<GitContractTypes.PaymentSplitter>
  (
    contractName: 'Proxy',
    ...args: Head<GetDeployMethod<GitContractTypes.Proxy__factory>>
  ): Promise<GitContractTypes.Proxy>
  (
    contractName: 'ProxyAdmin',
    ...args: Head<GetDeployMethod<GitContractTypes.ProxyAdmin__factory>>
  ): Promise<GitContractTypes.ProxyAdmin>
  (
    contractName: 'PullPayment',
    ...args: Head<GetDeployMethod<GitContractTypes.PullPayment__factory>>
  ): Promise<GitContractTypes.PullPayment>
  (
    contractName: 'RefundEscrow',
    ...args: Head<GetDeployMethod<GitContractTypes.RefundEscrow__factory>>
  ): Promise<GitContractTypes.RefundEscrow>
  (
    contractName: 'TimelockController',
    ...args: Head<GetDeployMethod<GitContractTypes.TimelockController__factory>>
  ): Promise<GitContractTypes.TimelockController>
  (
    contractName: 'TokenTimelock',
    ...args: Head<GetDeployMethod<GitContractTypes.TokenTimelock__factory>>
  ): Promise<GitContractTypes.TokenTimelock>
  (
    contractName: 'TransparentUpgradeableProxy',
    ...args: Head<GetDeployMethod<GitContractTypes.TransparentUpgradeableProxy__factory>>
  ): Promise<GitContractTypes.TransparentUpgradeableProxy>
  (
    contractName: 'UpgradeableBeacon',
    ...args: Head<GetDeployMethod<GitContractTypes.UpgradeableBeacon__factory>>
  ): Promise<GitContractTypes.UpgradeableBeacon>
  (
    contractName: 'VestingWallet',
    ...args: Head<GetDeployMethod<GitContractTypes.VestingWallet__factory>>
  ): Promise<GitContractTypes.VestingWallet>
  (
    contractName: 'Votes',
    ...args: Head<GetDeployMethod<GitContractTypes.Votes__factory>>
  ): Promise<GitContractTypes.Votes>
  (
    contractName: 'UniswapV2Migrator',
    ...args: Head<GetDeployMethod<GitContractTypes.UniswapV2Migrator__factory>>
  ): Promise<GitContractTypes.UniswapV2Migrator>
  (
    contractName: 'UniswapV2Router01',
    ...args: Head<GetDeployMethod<GitContractTypes.UniswapV2Router01__factory>>
  ): Promise<GitContractTypes.UniswapV2Router01>
}


// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------

export interface HardhatDeployProxySimplifiedFunctionOverloads {
  (
    contractName: 'KeeperCompatibleInterface',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.KeeperCompatibleInterface>>
  ): Promise<GitContractTypes.KeeperCompatibleInterface>
  (
    contractName: 'KeeperBase',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.KeeperBase>>
  ): Promise<GitContractTypes.KeeperBase>
  (
    contractName: 'KeeperCompatible',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.KeeperCompatible>>
  ): Promise<GitContractTypes.KeeperCompatible>
  (
    contractName: 'CVIOracle',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIOracle>>
  ): Promise<GitContractTypes.CVIOracle>
  (
    contractName: 'ElasticToken',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ElasticToken>>
  ): Promise<GitContractTypes.ElasticToken>
  (
    contractName: 'IUniswapV2Factory',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IUniswapV2Factory>>
  ): Promise<GitContractTypes.IUniswapV2Factory>
  (
    contractName: 'IUniswapV2Pair',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IUniswapV2Pair>>
  ): Promise<GitContractTypes.IUniswapV2Pair>
  (
    contractName: 'IUniswapV2Router01',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IUniswapV2Router01>>
  ): Promise<GitContractTypes.IUniswapV2Router01>
  (
    contractName: 'IUniswapV2Router02',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IUniswapV2Router02>>
  ): Promise<GitContractTypes.IUniswapV2Router02>
  (
    contractName: 'WETH9',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.WETH9>>
  ): Promise<GitContractTypes.WETH9>
  (
    contractName: 'FeesCalculator',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.FeesCalculator>>
  ): Promise<GitContractTypes.FeesCalculator>
  (
    contractName: 'GOVI',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GOVI>>
  ): Promise<GitContractTypes.GOVI>
  (
    contractName: 'AggregatorInterface',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.AggregatorInterface>>
  ): Promise<GitContractTypes.AggregatorInterface>
  (
    contractName: 'AggregatorV2V3Interface',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.AggregatorV2V3Interface>>
  ): Promise<GitContractTypes.AggregatorV2V3Interface>
  (
    contractName: 'AggregatorV3Interface',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.AggregatorV3Interface>>
  ): Promise<GitContractTypes.AggregatorV3Interface>
  (
    contractName: 'ICVIOracle',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ICVIOracle>>
  ): Promise<GitContractTypes.ICVIOracle>
  (
    contractName: 'IElasticToken',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IElasticToken>>
  ): Promise<GitContractTypes.IElasticToken>
  (
    contractName: 'IFeesCalculator',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IFeesCalculator>>
  ): Promise<GitContractTypes.IFeesCalculator>
  (
    contractName: 'IFeesCollector',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IFeesCollector>>
  ): Promise<GitContractTypes.IFeesCollector>
  (
    contractName: 'IFeesCollectorManagement',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IFeesCollectorManagement>>
  ): Promise<GitContractTypes.IFeesCollectorManagement>
  (
    contractName: 'IInbox',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IInbox>>
  ): Promise<GitContractTypes.IInbox>
  (
    contractName: 'IKeepersFeeVault',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IKeepersFeeVault>>
  ): Promise<GitContractTypes.IKeepersFeeVault>
  (
    contractName: 'ILiquidation',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ILiquidation>>
  ): Promise<GitContractTypes.ILiquidation>
  (
    contractName: 'IPlatform',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IPlatform>>
  ): Promise<GitContractTypes.IPlatform>
  (
    contractName: 'IPlatformHelper',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IPlatformHelper>>
  ): Promise<GitContractTypes.IPlatformHelper>
  (
    contractName: 'IPositionRewards',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IPositionRewards>>
  ): Promise<GitContractTypes.IPositionRewards>
  (
    contractName: 'IRebaser',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IRebaser>>
  ): Promise<GitContractTypes.IRebaser>
  (
    contractName: 'IRequestFeesCalculator',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IRequestFeesCalculator>>
  ): Promise<GitContractTypes.IRequestFeesCalculator>
  (
    contractName: 'IRequestFulfiller',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IRequestFulfiller>>
  ): Promise<GitContractTypes.IRequestFulfiller>
  (
    contractName: 'IRequestManager',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IRequestManager>>
  ): Promise<GitContractTypes.IRequestManager>
  (
    contractName: 'IRewardsCollector',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IRewardsCollector>>
  ): Promise<GitContractTypes.IRewardsCollector>
  (
    contractName: 'IStaking',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IStaking>>
  ): Promise<GitContractTypes.IStaking>
  (
    contractName: 'IStakingVault',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IStakingVault>>
  ): Promise<GitContractTypes.IStakingVault>
  (
    contractName: 'IThetaVault',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IThetaVault>>
  ): Promise<GitContractTypes.IThetaVault>
  (
    contractName: 'IThetaVaultInfo',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IThetaVaultInfo>>
  ): Promise<GitContractTypes.IThetaVaultInfo>
  (
    contractName: 'ITreasury',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ITreasury>>
  ): Promise<GitContractTypes.ITreasury>
  (
    contractName: 'IVolatilityToken',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IVolatilityToken>>
  ): Promise<GitContractTypes.IVolatilityToken>
  (
    contractName: 'IWETH',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IWETH>>
  ): Promise<GitContractTypes.IWETH>
  (
    contractName: 'KeepersFeeVault',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.KeepersFeeVault>>
  ): Promise<GitContractTypes.KeepersFeeVault>
  (
    contractName: 'Liquidation',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.Liquidation>>
  ): Promise<GitContractTypes.Liquidation>
  (
    contractName: 'Platform',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.Platform>>
  ): Promise<GitContractTypes.Platform>
  (
    contractName: 'PlatformHelper',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.PlatformHelper>>
  ): Promise<GitContractTypes.PlatformHelper>
  (
    contractName: 'PositionRewards',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.PositionRewards>>
  ): Promise<GitContractTypes.PositionRewards>
  (
    contractName: 'Rebaser',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.Rebaser>>
  ): Promise<GitContractTypes.Rebaser>
  (
    contractName: 'RequestFeesCalculator',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.RequestFeesCalculator>>
  ): Promise<GitContractTypes.RequestFeesCalculator>
  (
    contractName: 'RequestFulfiller',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.RequestFulfiller>>
  ): Promise<GitContractTypes.RequestFulfiller>
  (
    contractName: 'FeesCollector',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.FeesCollector>>
  ): Promise<GitContractTypes.FeesCollector>
  (
    contractName: 'Staking',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.Staking>>
  ): Promise<GitContractTypes.Staking>
  (
    contractName: 'COTIETHSLPStakingRewards',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.COTIETHSLPStakingRewards>>
  ): Promise<GitContractTypes.COTIETHSLPStakingRewards>
  (
    contractName: 'COTIETHStakingRewards',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.COTIETHStakingRewards>>
  ): Promise<GitContractTypes.COTIETHStakingRewards>
  (
    contractName: 'CVOLUSDCLPStakingRewards',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVOLUSDCLPStakingRewards>>
  ): Promise<GitContractTypes.CVOLUSDCLPStakingRewards>
  (
    contractName: 'ETHLPStakingRewards',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ETHLPStakingRewards>>
  ): Promise<GitContractTypes.ETHLPStakingRewards>
  (
    contractName: 'ETHVOL_USDCLPStakingRewards',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ETHVOL_USDCLPStakingRewards>>
  ): Promise<GitContractTypes.ETHVOL_USDCLPStakingRewards>
  (
    contractName: 'ETHVOLUSDCLPStakingRewards',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ETHVOLUSDCLPStakingRewards>>
  ): Promise<GitContractTypes.ETHVOLUSDCLPStakingRewards>
  (
    contractName: 'GOVIETHSLPStakingRewards',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GOVIETHSLPStakingRewards>>
  ): Promise<GitContractTypes.GOVIETHSLPStakingRewards>
  (
    contractName: 'GOVIETHStakingRewards',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GOVIETHStakingRewards>>
  ): Promise<GitContractTypes.GOVIETHStakingRewards>
  (
    contractName: 'USDCLPStakingRewards',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.USDCLPStakingRewards>>
  ): Promise<GitContractTypes.USDCLPStakingRewards>
  (
    contractName: 'USDTLPStakingRewards',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.USDTLPStakingRewards>>
  ): Promise<GitContractTypes.USDTLPStakingRewards>
  (
    contractName: 'IStakingRewards',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IStakingRewards>>
  ): Promise<GitContractTypes.IStakingRewards>
  (
    contractName: 'Owned',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.Owned>>
  ): Promise<GitContractTypes.Owned>
  (
    contractName: 'Pausable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.Pausable>>
  ): Promise<GitContractTypes.Pausable>
  (
    contractName: 'RewardsDistributionRecipient',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.RewardsDistributionRecipient>>
  ): Promise<GitContractTypes.RewardsDistributionRecipient>
  (
    contractName: 'StakingRewards',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.StakingRewards>>
  ): Promise<GitContractTypes.StakingRewards>
  (
    contractName: 'StakingVault',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.StakingVault>>
  ): Promise<GitContractTypes.StakingVault>
  (
    contractName: 'Treasury',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.Treasury>>
  ): Promise<GitContractTypes.Treasury>
  (
    contractName: 'CVIFeedOracle',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIFeedOracle>>
  ): Promise<GitContractTypes.CVIFeedOracle>
  (
    contractName: 'FakeERC20',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.FakeERC20>>
  ): Promise<GitContractTypes.FakeERC20>
  (
    contractName: 'FakePriceProvider',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.FakePriceProvider>>
  ): Promise<GitContractTypes.FakePriceProvider>
  (
    contractName: 'IERC20',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC20>>
  ): Promise<GitContractTypes.IERC20>
  (
    contractName: 'IUniswapV2Callee',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IUniswapV2Callee>>
  ): Promise<GitContractTypes.IUniswapV2Callee>
  (
    contractName: 'IUniswapV2ERC20',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IUniswapV2ERC20>>
  ): Promise<GitContractTypes.IUniswapV2ERC20>
  (
    contractName: 'UniswapV2ERC20',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.UniswapV2ERC20>>
  ): Promise<GitContractTypes.UniswapV2ERC20>
  (
    contractName: 'UniswapV2Factory',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.UniswapV2Factory>>
  ): Promise<GitContractTypes.UniswapV2Factory>
  (
    contractName: 'UniswapV2Pair',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.UniswapV2Pair>>
  ): Promise<GitContractTypes.UniswapV2Pair>
  (
    contractName: 'UniswapV2Router02',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.UniswapV2Router02>>
  ): Promise<GitContractTypes.UniswapV2Router02>
  (
    contractName: 'ThetaVault',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ThetaVault>>
  ): Promise<GitContractTypes.ThetaVault>
  (
    contractName: 'ThetaVaultRequestFulfiller',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ThetaVaultRequestFulfiller>>
  ): Promise<GitContractTypes.ThetaVaultRequestFulfiller>
  (
    contractName: 'VolatilityToken',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.VolatilityToken>>
  ): Promise<GitContractTypes.VolatilityToken>
  (
    contractName: 'VolTokenRequestFulfiller',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.VolTokenRequestFulfiller>>
  ): Promise<GitContractTypes.VolTokenRequestFulfiller>
  (
    contractName: 'BaseController',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.BaseController>>
  ): Promise<GitContractTypes.BaseController>
  (
    contractName: 'ILProtectionConfig',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ILProtectionConfig>>
  ): Promise<GitContractTypes.ILProtectionConfig>
  (
    contractName: 'ILProtectionController',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ILProtectionController>>
  ): Promise<GitContractTypes.ILProtectionController>
  (
    contractName: 'ILProtectionDiscountNFTController',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ILProtectionDiscountNFTController>>
  ): Promise<GitContractTypes.ILProtectionDiscountNFTController>
  (
    contractName: 'ILProtectionNFT',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ILProtectionNFT>>
  ): Promise<GitContractTypes.ILProtectionNFT>
  (
    contractName: 'ILiquidityController',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ILiquidityController>>
  ): Promise<GitContractTypes.ILiquidityController>
  (
    contractName: 'ILProtectionConfigInterface',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ILProtectionConfigInterface>>
  ): Promise<GitContractTypes.ILProtectionConfigInterface>
  (
    contractName: 'ILProtectionControllerInterface',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ILProtectionControllerInterface>>
  ): Promise<GitContractTypes.ILProtectionControllerInterface>
  (
    contractName: 'ILProtectionDiscountNFTControllerInterface',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ILProtectionDiscountNFTControllerInterface>>
  ): Promise<GitContractTypes.ILProtectionDiscountNFTControllerInterface>
  (
    contractName: 'ILProtectionDiscountNFTInterface',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ILProtectionDiscountNFTInterface>>
  ): Promise<GitContractTypes.ILProtectionDiscountNFTInterface>
  (
    contractName: 'ILProtectionNFTInterface',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ILProtectionNFTInterface>>
  ): Promise<GitContractTypes.ILProtectionNFTInterface>
  (
    contractName: 'ITokenPairRepository',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ITokenPairRepository>>
  ): Promise<GitContractTypes.ITokenPairRepository>
  (
    contractName: 'ITreasuryController',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ITreasuryController>>
  ): Promise<GitContractTypes.ITreasuryController>
  (
    contractName: 'ILUtils',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ILUtils>>
  ): Promise<GitContractTypes.ILUtils>
  (
    contractName: 'MathUtils',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.MathUtils>>
  ): Promise<GitContractTypes.MathUtils>
  (
    contractName: 'PremiumCalculator',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.PremiumCalculator>>
  ): Promise<GitContractTypes.PremiumCalculator>
  (
    contractName: 'LiquidityController',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.LiquidityController>>
  ): Promise<GitContractTypes.LiquidityController>
  (
    contractName: 'ILProtectionDiscountNFT',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ILProtectionDiscountNFT>>
  ): Promise<GitContractTypes.ILProtectionDiscountNFT>
  (
    contractName: 'ETHUSDOracle',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ETHUSDOracle>>
  ): Promise<GitContractTypes.ETHUSDOracle>
  (
    contractName: 'LINKUSDOracle',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.LINKUSDOracle>>
  ): Promise<GitContractTypes.LINKUSDOracle>
  (
    contractName: 'USDUSDOracle',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.USDUSDOracle>>
  ): Promise<GitContractTypes.USDUSDOracle>
  (
    contractName: 'USDC',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.USDC>>
  ): Promise<GitContractTypes.USDC>
  (
    contractName: 'TokenPairRepository',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.TokenPairRepository>>
  ): Promise<GitContractTypes.TokenPairRepository>
  (
    contractName: 'TreasuryController',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.TreasuryController>>
  ): Promise<GitContractTypes.TreasuryController>
  (
    contractName: 'EsGOVI',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.EsGOVI>>
  ): Promise<GitContractTypes.EsGOVI>
  (
    contractName: 'EsGOVIRewardTrackerDistributor',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.EsGOVIRewardTrackerDistributor>>
  ): Promise<GitContractTypes.EsGOVIRewardTrackerDistributor>
  (
    contractName: 'GOVIRewardTrackerDistributor',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GOVIRewardTrackerDistributor>>
  ): Promise<GitContractTypes.GOVIRewardTrackerDistributor>
  (
    contractName: 'ThetaVaultRewardTrackerDistributor',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ThetaVaultRewardTrackerDistributor>>
  ): Promise<GitContractTypes.ThetaVaultRewardTrackerDistributor>
  (
    contractName: 'EsGOVIRewardTracker',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.EsGOVIRewardTracker>>
  ): Promise<GitContractTypes.EsGOVIRewardTracker>
  (
    contractName: 'GOVIRewardTracker',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GOVIRewardTracker>>
  ): Promise<GitContractTypes.GOVIRewardTracker>
  (
    contractName: 'ThetaVaultRewardTracker',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ThetaVaultRewardTracker>>
  ): Promise<GitContractTypes.ThetaVaultRewardTracker>
  (
    contractName: 'GOVIVester',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GOVIVester>>
  ): Promise<GitContractTypes.GOVIVester>
  (
    contractName: 'ThetaVaultVester',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ThetaVaultVester>>
  ): Promise<GitContractTypes.ThetaVaultVester>
  (
    contractName: 'IMintable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IMintable>>
  ): Promise<GitContractTypes.IMintable>
  (
    contractName: 'IRewardDistributor',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IRewardDistributor>>
  ): Promise<GitContractTypes.IRewardDistributor>
  (
    contractName: 'IRewardRouter',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IRewardRouter>>
  ): Promise<GitContractTypes.IRewardRouter>
  (
    contractName: 'IRewardTracker',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IRewardTracker>>
  ): Promise<GitContractTypes.IRewardTracker>
  (
    contractName: 'IVester',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IVester>>
  ): Promise<GitContractTypes.IVester>
  (
    contractName: 'RewardDistributor',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.RewardDistributor>>
  ): Promise<GitContractTypes.RewardDistributor>
  (
    contractName: 'RewardRouter',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.RewardRouter>>
  ): Promise<GitContractTypes.RewardRouter>
  (
    contractName: 'RewardTracker',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.RewardTracker>>
  ): Promise<GitContractTypes.RewardTracker>
  (
    contractName: 'FakeCVIUSDCThetaVault',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.FakeCVIUSDCThetaVault>>
  ): Promise<GitContractTypes.FakeCVIUSDCThetaVault>
  (
    contractName: 'FakeGOVI',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.FakeGOVI>>
  ): Promise<GitContractTypes.FakeGOVI>
  (
    contractName: 'Vester',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.Vester>>
  ): Promise<GitContractTypes.Vester>
  (
    contractName: 'AccessControlUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.AccessControlUpgradeable>>
  ): Promise<GitContractTypes.AccessControlUpgradeable>
  (
    contractName: 'IAccessControlUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IAccessControlUpgradeable>>
  ): Promise<GitContractTypes.IAccessControlUpgradeable>
  (
    contractName: 'OwnableUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.OwnableUpgradeable>>
  ): Promise<GitContractTypes.OwnableUpgradeable>
  (
    contractName: 'Initializable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.Initializable>>
  ): Promise<GitContractTypes.Initializable>
  (
    contractName: 'ReentrancyGuardUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ReentrancyGuardUpgradeable>>
  ): Promise<GitContractTypes.ReentrancyGuardUpgradeable>
  (
    contractName: 'ERC20Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20Upgradeable>>
  ): Promise<GitContractTypes.ERC20Upgradeable>
  (
    contractName: 'IERC20MetadataUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC20MetadataUpgradeable>>
  ): Promise<GitContractTypes.IERC20MetadataUpgradeable>
  (
    contractName: 'IERC20Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC20Upgradeable>>
  ): Promise<GitContractTypes.IERC20Upgradeable>
  (
    contractName: 'ERC721Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC721Upgradeable>>
  ): Promise<GitContractTypes.ERC721Upgradeable>
  (
    contractName: 'ERC721EnumerableUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC721EnumerableUpgradeable>>
  ): Promise<GitContractTypes.ERC721EnumerableUpgradeable>
  (
    contractName: 'IERC721EnumerableUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC721EnumerableUpgradeable>>
  ): Promise<GitContractTypes.IERC721EnumerableUpgradeable>
  (
    contractName: 'IERC721MetadataUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC721MetadataUpgradeable>>
  ): Promise<GitContractTypes.IERC721MetadataUpgradeable>
  (
    contractName: 'IERC721ReceiverUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC721ReceiverUpgradeable>>
  ): Promise<GitContractTypes.IERC721ReceiverUpgradeable>
  (
    contractName: 'IERC721Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC721Upgradeable>>
  ): Promise<GitContractTypes.IERC721Upgradeable>
  (
    contractName: 'ContextUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ContextUpgradeable>>
  ): Promise<GitContractTypes.ContextUpgradeable>
  (
    contractName: 'ERC165Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC165Upgradeable>>
  ): Promise<GitContractTypes.ERC165Upgradeable>
  (
    contractName: 'IERC165Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC165Upgradeable>>
  ): Promise<GitContractTypes.IERC165Upgradeable>
  (
    contractName: 'AccessControl',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.AccessControl>>
  ): Promise<GitContractTypes.AccessControl>
  (
    contractName: 'IAccessControl',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IAccessControl>>
  ): Promise<GitContractTypes.IAccessControl>
  (
    contractName: 'Ownable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.Ownable>>
  ): Promise<GitContractTypes.Ownable>
  (
    contractName: 'ERC20',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20>>
  ): Promise<GitContractTypes.ERC20>
  (
    contractName: 'IERC20Metadata',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC20Metadata>>
  ): Promise<GitContractTypes.IERC20Metadata>
  (
    contractName: 'ERC165',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC165>>
  ): Promise<GitContractTypes.ERC165>
  (
    contractName: 'IERC165',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC165>>
  ): Promise<GitContractTypes.IERC165>
  (
    contractName: 'CVIDeviationOracle',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIDeviationOracle>>
  ): Promise<GitContractTypes.CVIDeviationOracle>
  (
    contractName: 'CVIFakeFeedOracle',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIFakeFeedOracle>>
  ): Promise<GitContractTypes.CVIFakeFeedOracle>
  (
    contractName: 'CVIOracle2X',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIOracle2X>>
  ): Promise<GitContractTypes.CVIOracle2X>
  (
    contractName: 'ETHVIOracle',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ETHVIOracle>>
  ): Promise<GitContractTypes.ETHVIOracle>
  (
    contractName: 'CVIUSDCFeesCalculator',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCFeesCalculator>>
  ): Promise<GitContractTypes.CVIUSDCFeesCalculator>
  (
    contractName: 'CVIUSDCFeesCalculator2X',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCFeesCalculator2X>>
  ): Promise<GitContractTypes.CVIUSDCFeesCalculator2X>
  (
    contractName: 'CVIUSDCLiquidation',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCLiquidation>>
  ): Promise<GitContractTypes.CVIUSDCLiquidation>
  (
    contractName: 'CVIUSDCLiquidation2X',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCLiquidation2X>>
  ): Promise<GitContractTypes.CVIUSDCLiquidation2X>
  (
    contractName: 'CVIUSDCPlatform',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCPlatform>>
  ): Promise<GitContractTypes.CVIUSDCPlatform>
  (
    contractName: 'CVIUSDCPlatform2X',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCPlatform2X>>
  ): Promise<GitContractTypes.CVIUSDCPlatform2X>
  (
    contractName: 'CVIUSDCPositionRewards',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCPositionRewards>>
  ): Promise<GitContractTypes.CVIUSDCPositionRewards>
  (
    contractName: 'StakingV2',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.StakingV2>>
  ): Promise<GitContractTypes.StakingV2>
  (
    contractName: 'CVIUSDCLPStakingRewards',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCLPStakingRewards>>
  ): Promise<GitContractTypes.CVIUSDCLPStakingRewards>
  (
    contractName: 'CVIUSDCThetaVault',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCThetaVault>>
  ): Promise<GitContractTypes.CVIUSDCThetaVault>
  (
    contractName: 'CVIUSDCThetaVault2X',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCThetaVault2X>>
  ): Promise<GitContractTypes.CVIUSDCThetaVault2X>
  (
    contractName: 'CVIUSDCThetaVaultRequestFulfiller',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller>>
  ): Promise<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller>
  (
    contractName: 'CVIUSDCThetaVaultRequestFulfiller2X',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X>>
  ): Promise<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X>
  (
    contractName: 'WETH',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.WETH>>
  ): Promise<GitContractTypes.WETH>
  (
    contractName: 'CVIUSDCRebaser',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCRebaser>>
  ): Promise<GitContractTypes.CVIUSDCRebaser>
  (
    contractName: 'CVIUSDCRebaser2X',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCRebaser2X>>
  ): Promise<GitContractTypes.CVIUSDCRebaser2X>
  (
    contractName: 'CVIUSDCRequestFeesCalculator',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCRequestFeesCalculator>>
  ): Promise<GitContractTypes.CVIUSDCRequestFeesCalculator>
  (
    contractName: 'CVIUSDCRequestFeesCalculator2X',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCRequestFeesCalculator2X>>
  ): Promise<GitContractTypes.CVIUSDCRequestFeesCalculator2X>
  (
    contractName: 'CVIUSDCVolatilityToken',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCVolatilityToken>>
  ): Promise<GitContractTypes.CVIUSDCVolatilityToken>
  (
    contractName: 'CVIUSDCVolatilityToken2X',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCVolatilityToken2X>>
  ): Promise<GitContractTypes.CVIUSDCVolatilityToken2X>
  (
    contractName: 'CVIUSDCVolTokenRequestFulfiller',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCVolTokenRequestFulfiller>>
  ): Promise<GitContractTypes.CVIUSDCVolTokenRequestFulfiller>
  (
    contractName: 'CVIUSDCVolTokenRequestFulfiller2X',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X>>
  ): Promise<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X>
  (
    contractName: 'AccessControlCrossChainUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.AccessControlCrossChainUpgradeable>>
  ): Promise<GitContractTypes.AccessControlCrossChainUpgradeable>
  (
    contractName: 'AccessControlEnumerableUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.AccessControlEnumerableUpgradeable>>
  ): Promise<GitContractTypes.AccessControlEnumerableUpgradeable>
  (
    contractName: 'ConditionalEscrowUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ConditionalEscrowUpgradeable>>
  ): Promise<GitContractTypes.ConditionalEscrowUpgradeable>
  (
    contractName: 'CrossChainEnabledAMBUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CrossChainEnabledAMBUpgradeable>>
  ): Promise<GitContractTypes.CrossChainEnabledAMBUpgradeable>
  (
    contractName: 'CrossChainEnabledArbitrumL1Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable>>
  ): Promise<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable>
  (
    contractName: 'CrossChainEnabledArbitrumL2Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable>>
  ): Promise<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable>
  (
    contractName: 'CrossChainEnabledOptimismUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CrossChainEnabledOptimismUpgradeable>>
  ): Promise<GitContractTypes.CrossChainEnabledOptimismUpgradeable>
  (
    contractName: 'CrossChainEnabledPolygonChildUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable>>
  ): Promise<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable>
  (
    contractName: 'CrossChainEnabledUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CrossChainEnabledUpgradeable>>
  ): Promise<GitContractTypes.CrossChainEnabledUpgradeable>
  (
    contractName: 'DoubleEndedQueueUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.DoubleEndedQueueUpgradeable>>
  ): Promise<GitContractTypes.DoubleEndedQueueUpgradeable>
  (
    contractName: 'EIP712Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.EIP712Upgradeable>>
  ): Promise<GitContractTypes.EIP712Upgradeable>
  (
    contractName: 'ERC1155BurnableUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1155BurnableUpgradeable>>
  ): Promise<GitContractTypes.ERC1155BurnableUpgradeable>
  (
    contractName: 'ERC1155HolderUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1155HolderUpgradeable>>
  ): Promise<GitContractTypes.ERC1155HolderUpgradeable>
  (
    contractName: 'ERC1155PausableUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1155PausableUpgradeable>>
  ): Promise<GitContractTypes.ERC1155PausableUpgradeable>
  (
    contractName: 'ERC1155PresetMinterPauserUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1155PresetMinterPauserUpgradeable>>
  ): Promise<GitContractTypes.ERC1155PresetMinterPauserUpgradeable>
  (
    contractName: 'ERC1155ReceiverUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1155ReceiverUpgradeable>>
  ): Promise<GitContractTypes.ERC1155ReceiverUpgradeable>
  (
    contractName: 'ERC1155SupplyUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1155SupplyUpgradeable>>
  ): Promise<GitContractTypes.ERC1155SupplyUpgradeable>
  (
    contractName: 'ERC1155Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1155Upgradeable>>
  ): Promise<GitContractTypes.ERC1155Upgradeable>
  (
    contractName: 'ERC1155URIStorageUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1155URIStorageUpgradeable>>
  ): Promise<GitContractTypes.ERC1155URIStorageUpgradeable>
  (
    contractName: 'ERC165StorageUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC165StorageUpgradeable>>
  ): Promise<GitContractTypes.ERC165StorageUpgradeable>
  (
    contractName: 'ERC1820ImplementerUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1820ImplementerUpgradeable>>
  ): Promise<GitContractTypes.ERC1820ImplementerUpgradeable>
  (
    contractName: 'ERC1967UpgradeUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1967UpgradeUpgradeable>>
  ): Promise<GitContractTypes.ERC1967UpgradeUpgradeable>
  (
    contractName: 'ERC20BurnableUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20BurnableUpgradeable>>
  ): Promise<GitContractTypes.ERC20BurnableUpgradeable>
  (
    contractName: 'ERC20CappedUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20CappedUpgradeable>>
  ): Promise<GitContractTypes.ERC20CappedUpgradeable>
  (
    contractName: 'ERC20FlashMintUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20FlashMintUpgradeable>>
  ): Promise<GitContractTypes.ERC20FlashMintUpgradeable>
  (
    contractName: 'ERC20PausableUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20PausableUpgradeable>>
  ): Promise<GitContractTypes.ERC20PausableUpgradeable>
  (
    contractName: 'ERC20PermitUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20PermitUpgradeable>>
  ): Promise<GitContractTypes.ERC20PermitUpgradeable>
  (
    contractName: 'ERC20PresetFixedSupplyUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20PresetFixedSupplyUpgradeable>>
  ): Promise<GitContractTypes.ERC20PresetFixedSupplyUpgradeable>
  (
    contractName: 'ERC20PresetMinterPauserUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20PresetMinterPauserUpgradeable>>
  ): Promise<GitContractTypes.ERC20PresetMinterPauserUpgradeable>
  (
    contractName: 'ERC20SnapshotUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20SnapshotUpgradeable>>
  ): Promise<GitContractTypes.ERC20SnapshotUpgradeable>
  (
    contractName: 'ERC20VotesCompUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20VotesCompUpgradeable>>
  ): Promise<GitContractTypes.ERC20VotesCompUpgradeable>
  (
    contractName: 'ERC20VotesUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20VotesUpgradeable>>
  ): Promise<GitContractTypes.ERC20VotesUpgradeable>
  (
    contractName: 'ERC20WrapperUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20WrapperUpgradeable>>
  ): Promise<GitContractTypes.ERC20WrapperUpgradeable>
  (
    contractName: 'ERC2771ContextUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC2771ContextUpgradeable>>
  ): Promise<GitContractTypes.ERC2771ContextUpgradeable>
  (
    contractName: 'ERC2981Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC2981Upgradeable>>
  ): Promise<GitContractTypes.ERC2981Upgradeable>
  (
    contractName: 'ERC721BurnableUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC721BurnableUpgradeable>>
  ): Promise<GitContractTypes.ERC721BurnableUpgradeable>
  (
    contractName: 'ERC721HolderUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC721HolderUpgradeable>>
  ): Promise<GitContractTypes.ERC721HolderUpgradeable>
  (
    contractName: 'ERC721PausableUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC721PausableUpgradeable>>
  ): Promise<GitContractTypes.ERC721PausableUpgradeable>
  (
    contractName: 'ERC721PresetMinterPauserAutoIdUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable>>
  ): Promise<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable>
  (
    contractName: 'ERC721RoyaltyUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC721RoyaltyUpgradeable>>
  ): Promise<GitContractTypes.ERC721RoyaltyUpgradeable>
  (
    contractName: 'ERC721URIStorageUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC721URIStorageUpgradeable>>
  ): Promise<GitContractTypes.ERC721URIStorageUpgradeable>
  (
    contractName: 'ERC721VotesUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC721VotesUpgradeable>>
  ): Promise<GitContractTypes.ERC721VotesUpgradeable>
  (
    contractName: 'ERC777PresetFixedSupplyUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC777PresetFixedSupplyUpgradeable>>
  ): Promise<GitContractTypes.ERC777PresetFixedSupplyUpgradeable>
  (
    contractName: 'ERC777Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC777Upgradeable>>
  ): Promise<GitContractTypes.ERC777Upgradeable>
  (
    contractName: 'EscrowUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.EscrowUpgradeable>>
  ): Promise<GitContractTypes.EscrowUpgradeable>
  (
    contractName: 'GovernorCompatibilityBravoUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorCompatibilityBravoUpgradeable>>
  ): Promise<GitContractTypes.GovernorCompatibilityBravoUpgradeable>
  (
    contractName: 'GovernorCountingSimpleUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorCountingSimpleUpgradeable>>
  ): Promise<GitContractTypes.GovernorCountingSimpleUpgradeable>
  (
    contractName: 'GovernorPreventLateQuorumUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorPreventLateQuorumUpgradeable>>
  ): Promise<GitContractTypes.GovernorPreventLateQuorumUpgradeable>
  (
    contractName: 'GovernorProposalThresholdUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorProposalThresholdUpgradeable>>
  ): Promise<GitContractTypes.GovernorProposalThresholdUpgradeable>
  (
    contractName: 'GovernorSettingsUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorSettingsUpgradeable>>
  ): Promise<GitContractTypes.GovernorSettingsUpgradeable>
  (
    contractName: 'GovernorTimelockCompoundUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorTimelockCompoundUpgradeable>>
  ): Promise<GitContractTypes.GovernorTimelockCompoundUpgradeable>
  (
    contractName: 'GovernorTimelockControlUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorTimelockControlUpgradeable>>
  ): Promise<GitContractTypes.GovernorTimelockControlUpgradeable>
  (
    contractName: 'GovernorUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorUpgradeable>>
  ): Promise<GitContractTypes.GovernorUpgradeable>
  (
    contractName: 'GovernorVotesCompUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorVotesCompUpgradeable>>
  ): Promise<GitContractTypes.GovernorVotesCompUpgradeable>
  (
    contractName: 'GovernorVotesQuorumFractionUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorVotesQuorumFractionUpgradeable>>
  ): Promise<GitContractTypes.GovernorVotesQuorumFractionUpgradeable>
  (
    contractName: 'GovernorVotesUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorVotesUpgradeable>>
  ): Promise<GitContractTypes.GovernorVotesUpgradeable>
  (
    contractName: 'IAccessControlEnumerableUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IAccessControlEnumerableUpgradeable>>
  ): Promise<GitContractTypes.IAccessControlEnumerableUpgradeable>
  (
    contractName: 'IAMBUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IAMBUpgradeable>>
  ): Promise<GitContractTypes.IAMBUpgradeable>
  (
    contractName: 'IArbSysUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IArbSysUpgradeable>>
  ): Promise<GitContractTypes.IArbSysUpgradeable>
  (
    contractName: 'IBeaconUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IBeaconUpgradeable>>
  ): Promise<GitContractTypes.IBeaconUpgradeable>
  (
    contractName: 'IBridgeUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IBridgeUpgradeable>>
  ): Promise<GitContractTypes.IBridgeUpgradeable>
  (
    contractName: 'ICompoundTimelockUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ICompoundTimelockUpgradeable>>
  ): Promise<GitContractTypes.ICompoundTimelockUpgradeable>
  (
    contractName: 'ICrossDomainMessengerUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ICrossDomainMessengerUpgradeable>>
  ): Promise<GitContractTypes.ICrossDomainMessengerUpgradeable>
  (
    contractName: 'IERC1155MetadataURIUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1155MetadataURIUpgradeable>>
  ): Promise<GitContractTypes.IERC1155MetadataURIUpgradeable>
  (
    contractName: 'IERC1155ReceiverUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1155ReceiverUpgradeable>>
  ): Promise<GitContractTypes.IERC1155ReceiverUpgradeable>
  (
    contractName: 'IERC1155Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1155Upgradeable>>
  ): Promise<GitContractTypes.IERC1155Upgradeable>
  (
    contractName: 'IERC1271Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1271Upgradeable>>
  ): Promise<GitContractTypes.IERC1271Upgradeable>
  (
    contractName: 'IERC1363ReceiverUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1363ReceiverUpgradeable>>
  ): Promise<GitContractTypes.IERC1363ReceiverUpgradeable>
  (
    contractName: 'IERC1363SpenderUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1363SpenderUpgradeable>>
  ): Promise<GitContractTypes.IERC1363SpenderUpgradeable>
  (
    contractName: 'IERC1363Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1363Upgradeable>>
  ): Promise<GitContractTypes.IERC1363Upgradeable>
  (
    contractName: 'IERC1820ImplementerUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1820ImplementerUpgradeable>>
  ): Promise<GitContractTypes.IERC1820ImplementerUpgradeable>
  (
    contractName: 'IERC1820RegistryUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1820RegistryUpgradeable>>
  ): Promise<GitContractTypes.IERC1820RegistryUpgradeable>
  (
    contractName: 'IERC1822ProxiableUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1822ProxiableUpgradeable>>
  ): Promise<GitContractTypes.IERC1822ProxiableUpgradeable>
  (
    contractName: 'IERC20PermitUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC20PermitUpgradeable>>
  ): Promise<GitContractTypes.IERC20PermitUpgradeable>
  (
    contractName: 'IERC2612Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC2612Upgradeable>>
  ): Promise<GitContractTypes.IERC2612Upgradeable>
  (
    contractName: 'IERC2981Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC2981Upgradeable>>
  ): Promise<GitContractTypes.IERC2981Upgradeable>
  (
    contractName: 'IERC3156FlashBorrowerUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC3156FlashBorrowerUpgradeable>>
  ): Promise<GitContractTypes.IERC3156FlashBorrowerUpgradeable>
  (
    contractName: 'IERC3156FlashLenderUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC3156FlashLenderUpgradeable>>
  ): Promise<GitContractTypes.IERC3156FlashLenderUpgradeable>
  (
    contractName: 'IERC777RecipientUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC777RecipientUpgradeable>>
  ): Promise<GitContractTypes.IERC777RecipientUpgradeable>
  (
    contractName: 'IERC777SenderUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC777SenderUpgradeable>>
  ): Promise<GitContractTypes.IERC777SenderUpgradeable>
  (
    contractName: 'IERC777Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC777Upgradeable>>
  ): Promise<GitContractTypes.IERC777Upgradeable>
  (
    contractName: 'IFxMessageProcessorUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IFxMessageProcessorUpgradeable>>
  ): Promise<GitContractTypes.IFxMessageProcessorUpgradeable>
  (
    contractName: 'IGovernorCompatibilityBravoUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IGovernorCompatibilityBravoUpgradeable>>
  ): Promise<GitContractTypes.IGovernorCompatibilityBravoUpgradeable>
  (
    contractName: 'IGovernorTimelockUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IGovernorTimelockUpgradeable>>
  ): Promise<GitContractTypes.IGovernorTimelockUpgradeable>
  (
    contractName: 'IGovernorUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IGovernorUpgradeable>>
  ): Promise<GitContractTypes.IGovernorUpgradeable>
  (
    contractName: 'IInboxUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IInboxUpgradeable>>
  ): Promise<GitContractTypes.IInboxUpgradeable>
  (
    contractName: 'IMessageProviderUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IMessageProviderUpgradeable>>
  ): Promise<GitContractTypes.IMessageProviderUpgradeable>
  (
    contractName: 'IOutboxUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IOutboxUpgradeable>>
  ): Promise<GitContractTypes.IOutboxUpgradeable>
  (
    contractName: 'IVotesUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IVotesUpgradeable>>
  ): Promise<GitContractTypes.IVotesUpgradeable>
  (
    contractName: 'LibArbitrumL2Upgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.LibArbitrumL2Upgradeable>>
  ): Promise<GitContractTypes.LibArbitrumL2Upgradeable>
  (
    contractName: 'MinimalForwarderUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.MinimalForwarderUpgradeable>>
  ): Promise<GitContractTypes.MinimalForwarderUpgradeable>
  (
    contractName: 'MulticallUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.MulticallUpgradeable>>
  ): Promise<GitContractTypes.MulticallUpgradeable>
  (
    contractName: 'PausableUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.PausableUpgradeable>>
  ): Promise<GitContractTypes.PausableUpgradeable>
  (
    contractName: 'PaymentSplitterUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.PaymentSplitterUpgradeable>>
  ): Promise<GitContractTypes.PaymentSplitterUpgradeable>
  (
    contractName: 'PullPaymentUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.PullPaymentUpgradeable>>
  ): Promise<GitContractTypes.PullPaymentUpgradeable>
  (
    contractName: 'RefundEscrowUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.RefundEscrowUpgradeable>>
  ): Promise<GitContractTypes.RefundEscrowUpgradeable>
  (
    contractName: 'TimelockControllerUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.TimelockControllerUpgradeable>>
  ): Promise<GitContractTypes.TimelockControllerUpgradeable>
  (
    contractName: 'TimelockControllerWith46MigrationUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.TimelockControllerWith46MigrationUpgradeable>>
  ): Promise<GitContractTypes.TimelockControllerWith46MigrationUpgradeable>
  (
    contractName: 'TokenTimelockUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.TokenTimelockUpgradeable>>
  ): Promise<GitContractTypes.TokenTimelockUpgradeable>
  (
    contractName: 'UUPSUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.UUPSUpgradeable>>
  ): Promise<GitContractTypes.UUPSUpgradeable>
  (
    contractName: 'VestingWalletUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.VestingWalletUpgradeable>>
  ): Promise<GitContractTypes.VestingWalletUpgradeable>
  (
    contractName: 'VotesUpgradeable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.VotesUpgradeable>>
  ): Promise<GitContractTypes.VotesUpgradeable>
  (
    contractName: 'AccessControlCrossChain',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.AccessControlCrossChain>>
  ): Promise<GitContractTypes.AccessControlCrossChain>
  (
    contractName: 'AccessControlEnumerable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.AccessControlEnumerable>>
  ): Promise<GitContractTypes.AccessControlEnumerable>
  (
    contractName: 'BeaconProxy',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.BeaconProxy>>
  ): Promise<GitContractTypes.BeaconProxy>
  (
    contractName: 'ConditionalEscrow',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ConditionalEscrow>>
  ): Promise<GitContractTypes.ConditionalEscrow>
  (
    contractName: 'CrossChainEnabledAMB',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CrossChainEnabledAMB>>
  ): Promise<GitContractTypes.CrossChainEnabledAMB>
  (
    contractName: 'CrossChainEnabledPolygonChild',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.CrossChainEnabledPolygonChild>>
  ): Promise<GitContractTypes.CrossChainEnabledPolygonChild>
  (
    contractName: 'DoubleEndedQueue',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.DoubleEndedQueue>>
  ): Promise<GitContractTypes.DoubleEndedQueue>
  (
    contractName: 'ERC1155',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1155>>
  ): Promise<GitContractTypes.ERC1155>
  (
    contractName: 'ERC1155Burnable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1155Burnable>>
  ): Promise<GitContractTypes.ERC1155Burnable>
  (
    contractName: 'ERC1155Holder',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1155Holder>>
  ): Promise<GitContractTypes.ERC1155Holder>
  (
    contractName: 'ERC1155Pausable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1155Pausable>>
  ): Promise<GitContractTypes.ERC1155Pausable>
  (
    contractName: 'ERC1155PresetMinterPauser',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1155PresetMinterPauser>>
  ): Promise<GitContractTypes.ERC1155PresetMinterPauser>
  (
    contractName: 'ERC1155Receiver',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1155Receiver>>
  ): Promise<GitContractTypes.ERC1155Receiver>
  (
    contractName: 'ERC1155Supply',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1155Supply>>
  ): Promise<GitContractTypes.ERC1155Supply>
  (
    contractName: 'ERC1155URIStorage',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1155URIStorage>>
  ): Promise<GitContractTypes.ERC1155URIStorage>
  (
    contractName: 'ERC165Storage',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC165Storage>>
  ): Promise<GitContractTypes.ERC165Storage>
  (
    contractName: 'ERC1820Implementer',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1820Implementer>>
  ): Promise<GitContractTypes.ERC1820Implementer>
  (
    contractName: 'ERC1967Proxy',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1967Proxy>>
  ): Promise<GitContractTypes.ERC1967Proxy>
  (
    contractName: 'ERC1967Upgrade',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC1967Upgrade>>
  ): Promise<GitContractTypes.ERC1967Upgrade>
  (
    contractName: 'ERC20Burnable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20Burnable>>
  ): Promise<GitContractTypes.ERC20Burnable>
  (
    contractName: 'ERC20Capped',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20Capped>>
  ): Promise<GitContractTypes.ERC20Capped>
  (
    contractName: 'ERC20FlashMint',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20FlashMint>>
  ): Promise<GitContractTypes.ERC20FlashMint>
  (
    contractName: 'ERC20Pausable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20Pausable>>
  ): Promise<GitContractTypes.ERC20Pausable>
  (
    contractName: 'ERC20Permit',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20Permit>>
  ): Promise<GitContractTypes.ERC20Permit>
  (
    contractName: 'ERC20PresetFixedSupply',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20PresetFixedSupply>>
  ): Promise<GitContractTypes.ERC20PresetFixedSupply>
  (
    contractName: 'ERC20PresetMinterPauser',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20PresetMinterPauser>>
  ): Promise<GitContractTypes.ERC20PresetMinterPauser>
  (
    contractName: 'ERC20Snapshot',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20Snapshot>>
  ): Promise<GitContractTypes.ERC20Snapshot>
  (
    contractName: 'ERC20Votes',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20Votes>>
  ): Promise<GitContractTypes.ERC20Votes>
  (
    contractName: 'ERC20VotesComp',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20VotesComp>>
  ): Promise<GitContractTypes.ERC20VotesComp>
  (
    contractName: 'ERC20Wrapper',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC20Wrapper>>
  ): Promise<GitContractTypes.ERC20Wrapper>
  (
    contractName: 'ERC2771Context',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC2771Context>>
  ): Promise<GitContractTypes.ERC2771Context>
  (
    contractName: 'ERC2981',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC2981>>
  ): Promise<GitContractTypes.ERC2981>
  (
    contractName: 'ERC721',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC721>>
  ): Promise<GitContractTypes.ERC721>
  (
    contractName: 'ERC721Burnable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC721Burnable>>
  ): Promise<GitContractTypes.ERC721Burnable>
  (
    contractName: 'ERC721Enumerable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC721Enumerable>>
  ): Promise<GitContractTypes.ERC721Enumerable>
  (
    contractName: 'ERC721Holder',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC721Holder>>
  ): Promise<GitContractTypes.ERC721Holder>
  (
    contractName: 'ERC721Pausable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC721Pausable>>
  ): Promise<GitContractTypes.ERC721Pausable>
  (
    contractName: 'ERC721PresetMinterPauserAutoId',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC721PresetMinterPauserAutoId>>
  ): Promise<GitContractTypes.ERC721PresetMinterPauserAutoId>
  (
    contractName: 'ERC721Royalty',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC721Royalty>>
  ): Promise<GitContractTypes.ERC721Royalty>
  (
    contractName: 'ERC721URIStorage',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC721URIStorage>>
  ): Promise<GitContractTypes.ERC721URIStorage>
  (
    contractName: 'ERC721Votes',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC721Votes>>
  ): Promise<GitContractTypes.ERC721Votes>
  (
    contractName: 'ERC777',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC777>>
  ): Promise<GitContractTypes.ERC777>
  (
    contractName: 'ERC777PresetFixedSupply',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ERC777PresetFixedSupply>>
  ): Promise<GitContractTypes.ERC777PresetFixedSupply>
  (
    contractName: 'Escrow',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.Escrow>>
  ): Promise<GitContractTypes.Escrow>
  (
    contractName: 'Governor',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.Governor>>
  ): Promise<GitContractTypes.Governor>
  (
    contractName: 'GovernorCompatibilityBravo',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorCompatibilityBravo>>
  ): Promise<GitContractTypes.GovernorCompatibilityBravo>
  (
    contractName: 'GovernorCountingSimple',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorCountingSimple>>
  ): Promise<GitContractTypes.GovernorCountingSimple>
  (
    contractName: 'GovernorPreventLateQuorum',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorPreventLateQuorum>>
  ): Promise<GitContractTypes.GovernorPreventLateQuorum>
  (
    contractName: 'GovernorProposalThreshold',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorProposalThreshold>>
  ): Promise<GitContractTypes.GovernorProposalThreshold>
  (
    contractName: 'GovernorSettings',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorSettings>>
  ): Promise<GitContractTypes.GovernorSettings>
  (
    contractName: 'GovernorTimelockCompound',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorTimelockCompound>>
  ): Promise<GitContractTypes.GovernorTimelockCompound>
  (
    contractName: 'GovernorTimelockControl',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorTimelockControl>>
  ): Promise<GitContractTypes.GovernorTimelockControl>
  (
    contractName: 'GovernorVotes',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorVotes>>
  ): Promise<GitContractTypes.GovernorVotes>
  (
    contractName: 'GovernorVotesComp',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorVotesComp>>
  ): Promise<GitContractTypes.GovernorVotesComp>
  (
    contractName: 'GovernorVotesQuorumFraction',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.GovernorVotesQuorumFraction>>
  ): Promise<GitContractTypes.GovernorVotesQuorumFraction>
  (
    contractName: 'IAccessControlEnumerable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IAccessControlEnumerable>>
  ): Promise<GitContractTypes.IAccessControlEnumerable>
  (
    contractName: 'IAMB',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IAMB>>
  ): Promise<GitContractTypes.IAMB>
  (
    contractName: 'IArbSys',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IArbSys>>
  ): Promise<GitContractTypes.IArbSys>
  (
    contractName: 'IBeacon',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IBeacon>>
  ): Promise<GitContractTypes.IBeacon>
  (
    contractName: 'IBridge',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IBridge>>
  ): Promise<GitContractTypes.IBridge>
  (
    contractName: 'ICompoundTimelock',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ICompoundTimelock>>
  ): Promise<GitContractTypes.ICompoundTimelock>
  (
    contractName: 'ICrossDomainMessenger',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ICrossDomainMessenger>>
  ): Promise<GitContractTypes.ICrossDomainMessenger>
  (
    contractName: 'IERC1155',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1155>>
  ): Promise<GitContractTypes.IERC1155>
  (
    contractName: 'IERC1155MetadataURI',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1155MetadataURI>>
  ): Promise<GitContractTypes.IERC1155MetadataURI>
  (
    contractName: 'IERC1155Receiver',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1155Receiver>>
  ): Promise<GitContractTypes.IERC1155Receiver>
  (
    contractName: 'IERC1271',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1271>>
  ): Promise<GitContractTypes.IERC1271>
  (
    contractName: 'IERC1363',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1363>>
  ): Promise<GitContractTypes.IERC1363>
  (
    contractName: 'IERC1363Receiver',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1363Receiver>>
  ): Promise<GitContractTypes.IERC1363Receiver>
  (
    contractName: 'IERC1363Spender',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1363Spender>>
  ): Promise<GitContractTypes.IERC1363Spender>
  (
    contractName: 'IERC1820Implementer',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1820Implementer>>
  ): Promise<GitContractTypes.IERC1820Implementer>
  (
    contractName: 'IERC1820Registry',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1820Registry>>
  ): Promise<GitContractTypes.IERC1820Registry>
  (
    contractName: 'IERC1822Proxiable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC1822Proxiable>>
  ): Promise<GitContractTypes.IERC1822Proxiable>
  (
    contractName: 'IERC20Permit',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC20Permit>>
  ): Promise<GitContractTypes.IERC20Permit>
  (
    contractName: 'IERC2612',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC2612>>
  ): Promise<GitContractTypes.IERC2612>
  (
    contractName: 'IERC2981',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC2981>>
  ): Promise<GitContractTypes.IERC2981>
  (
    contractName: 'IERC3156FlashBorrower',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC3156FlashBorrower>>
  ): Promise<GitContractTypes.IERC3156FlashBorrower>
  (
    contractName: 'IERC3156FlashLender',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC3156FlashLender>>
  ): Promise<GitContractTypes.IERC3156FlashLender>
  (
    contractName: 'IERC721',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC721>>
  ): Promise<GitContractTypes.IERC721>
  (
    contractName: 'IERC721Enumerable',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC721Enumerable>>
  ): Promise<GitContractTypes.IERC721Enumerable>
  (
    contractName: 'IERC721Metadata',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC721Metadata>>
  ): Promise<GitContractTypes.IERC721Metadata>
  (
    contractName: 'IERC721Receiver',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC721Receiver>>
  ): Promise<GitContractTypes.IERC721Receiver>
  (
    contractName: 'IERC777',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC777>>
  ): Promise<GitContractTypes.IERC777>
  (
    contractName: 'IERC777Recipient',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC777Recipient>>
  ): Promise<GitContractTypes.IERC777Recipient>
  (
    contractName: 'IERC777Sender',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IERC777Sender>>
  ): Promise<GitContractTypes.IERC777Sender>
  (
    contractName: 'IFxMessageProcessor',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IFxMessageProcessor>>
  ): Promise<GitContractTypes.IFxMessageProcessor>
  (
    contractName: 'IGovernor',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IGovernor>>
  ): Promise<GitContractTypes.IGovernor>
  (
    contractName: 'IGovernorCompatibilityBravo',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IGovernorCompatibilityBravo>>
  ): Promise<GitContractTypes.IGovernorCompatibilityBravo>
  (
    contractName: 'IGovernorTimelock',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IGovernorTimelock>>
  ): Promise<GitContractTypes.IGovernorTimelock>
  (
    contractName: 'IMessageProvider',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IMessageProvider>>
  ): Promise<GitContractTypes.IMessageProvider>
  (
    contractName: 'IOutbox',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IOutbox>>
  ): Promise<GitContractTypes.IOutbox>
  (
    contractName: 'IVotes',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.IVotes>>
  ): Promise<GitContractTypes.IVotes>
  (
    contractName: 'LibArbitrumL2',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.LibArbitrumL2>>
  ): Promise<GitContractTypes.LibArbitrumL2>
  (
    contractName: 'MinimalForwarder',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.MinimalForwarder>>
  ): Promise<GitContractTypes.MinimalForwarder>
  (
    contractName: 'Multicall',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.Multicall>>
  ): Promise<GitContractTypes.Multicall>
  (
    contractName: 'PaymentSplitter',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.PaymentSplitter>>
  ): Promise<GitContractTypes.PaymentSplitter>
  (
    contractName: 'Proxy',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.Proxy>>
  ): Promise<GitContractTypes.Proxy>
  (
    contractName: 'ProxyAdmin',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.ProxyAdmin>>
  ): Promise<GitContractTypes.ProxyAdmin>
  (
    contractName: 'PullPayment',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.PullPayment>>
  ): Promise<GitContractTypes.PullPayment>
  (
    contractName: 'RefundEscrow',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.RefundEscrow>>
  ): Promise<GitContractTypes.RefundEscrow>
  (
    contractName: 'TimelockController',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.TimelockController>>
  ): Promise<GitContractTypes.TimelockController>
  (
    contractName: 'TokenTimelock',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.TokenTimelock>>
  ): Promise<GitContractTypes.TokenTimelock>
  (
    contractName: 'TransparentUpgradeableProxy',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.TransparentUpgradeableProxy>>
  ): Promise<GitContractTypes.TransparentUpgradeableProxy>
  (
    contractName: 'UpgradeableBeacon',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.UpgradeableBeacon>>
  ): Promise<GitContractTypes.UpgradeableBeacon>
  (
    contractName: 'VestingWallet',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.VestingWallet>>
  ): Promise<GitContractTypes.VestingWallet>
  (
    contractName: 'Votes',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.Votes>>
  ): Promise<GitContractTypes.Votes>
  (
    contractName: 'UniswapV2Migrator',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.UniswapV2Migrator>>
  ): Promise<GitContractTypes.UniswapV2Migrator>
  (
    contractName: 'UniswapV2Router01',
    libraries: Libraries,
    ...args: Head<GetInitMethod<GitContractTypes.UniswapV2Router01>>
  ): Promise<GitContractTypes.UniswapV2Router01>
}


// --------------------------------------------------------------------
// --------------------------------------------------------------------
// --------------------------------------------------------------------

export interface HardhatMockFunctionOverloads {
  (
    contractName: 'KeeperCompatibleInterface',
    ...args: Parameters<GetDeployMethod<GitContractTypes.KeeperCompatibleInterface__factory>>
  ): Promise<MockContract<GitContractTypes.KeeperCompatibleInterface>>
  (
    contractName: 'KeeperBase',
    ...args: Parameters<GetDeployMethod<GitContractTypes.KeeperBase__factory>>
  ): Promise<MockContract<GitContractTypes.KeeperBase>>
  (
    contractName: 'KeeperCompatible',
    ...args: Parameters<GetDeployMethod<GitContractTypes.KeeperCompatible__factory>>
  ): Promise<MockContract<GitContractTypes.KeeperCompatible>>
  (
    contractName: 'CVIOracle',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIOracle__factory>>
  ): Promise<MockContract<GitContractTypes.CVIOracle>>
  (
    contractName: 'ElasticToken',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ElasticToken__factory>>
  ): Promise<MockContract<GitContractTypes.ElasticToken>>
  (
    contractName: 'IUniswapV2Factory',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IUniswapV2Factory__factory>>
  ): Promise<MockContract<GitContractTypes.IUniswapV2Factory>>
  (
    contractName: 'IUniswapV2Pair',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IUniswapV2Pair__factory>>
  ): Promise<MockContract<GitContractTypes.IUniswapV2Pair>>
  (
    contractName: 'IUniswapV2Router01',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IUniswapV2Router01__factory>>
  ): Promise<MockContract<GitContractTypes.IUniswapV2Router01>>
  (
    contractName: 'IUniswapV2Router02',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IUniswapV2Router02__factory>>
  ): Promise<MockContract<GitContractTypes.IUniswapV2Router02>>
  (
    contractName: 'WETH9',
    ...args: Parameters<GetDeployMethod<GitContractTypes.WETH9__factory>>
  ): Promise<MockContract<GitContractTypes.WETH9>>
  (
    contractName: 'FeesCalculator',
    ...args: Parameters<GetDeployMethod<GitContractTypes.FeesCalculator__factory>>
  ): Promise<MockContract<GitContractTypes.FeesCalculator>>
  (
    contractName: 'GOVI',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GOVI__factory>>
  ): Promise<MockContract<GitContractTypes.GOVI>>
  (
    contractName: 'AggregatorInterface',
    ...args: Parameters<GetDeployMethod<GitContractTypes.AggregatorInterface__factory>>
  ): Promise<MockContract<GitContractTypes.AggregatorInterface>>
  (
    contractName: 'AggregatorV2V3Interface',
    ...args: Parameters<GetDeployMethod<GitContractTypes.AggregatorV2V3Interface__factory>>
  ): Promise<MockContract<GitContractTypes.AggregatorV2V3Interface>>
  (
    contractName: 'AggregatorV3Interface',
    ...args: Parameters<GetDeployMethod<GitContractTypes.AggregatorV3Interface__factory>>
  ): Promise<MockContract<GitContractTypes.AggregatorV3Interface>>
  (
    contractName: 'ICVIOracle',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ICVIOracle__factory>>
  ): Promise<MockContract<GitContractTypes.ICVIOracle>>
  (
    contractName: 'IElasticToken',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IElasticToken__factory>>
  ): Promise<MockContract<GitContractTypes.IElasticToken>>
  (
    contractName: 'IFeesCalculator',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IFeesCalculator__factory>>
  ): Promise<MockContract<GitContractTypes.IFeesCalculator>>
  (
    contractName: 'IFeesCollector',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IFeesCollector__factory>>
  ): Promise<MockContract<GitContractTypes.IFeesCollector>>
  (
    contractName: 'IFeesCollectorManagement',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IFeesCollectorManagement__factory>>
  ): Promise<MockContract<GitContractTypes.IFeesCollectorManagement>>
  (
    contractName: 'IInbox',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IInbox__factory>>
  ): Promise<MockContract<GitContractTypes.IInbox>>
  (
    contractName: 'IKeepersFeeVault',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IKeepersFeeVault__factory>>
  ): Promise<MockContract<GitContractTypes.IKeepersFeeVault>>
  (
    contractName: 'ILiquidation',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ILiquidation__factory>>
  ): Promise<MockContract<GitContractTypes.ILiquidation>>
  (
    contractName: 'IPlatform',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IPlatform__factory>>
  ): Promise<MockContract<GitContractTypes.IPlatform>>
  (
    contractName: 'IPlatformHelper',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IPlatformHelper__factory>>
  ): Promise<MockContract<GitContractTypes.IPlatformHelper>>
  (
    contractName: 'IPositionRewards',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IPositionRewards__factory>>
  ): Promise<MockContract<GitContractTypes.IPositionRewards>>
  (
    contractName: 'IRebaser',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IRebaser__factory>>
  ): Promise<MockContract<GitContractTypes.IRebaser>>
  (
    contractName: 'IRequestFeesCalculator',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IRequestFeesCalculator__factory>>
  ): Promise<MockContract<GitContractTypes.IRequestFeesCalculator>>
  (
    contractName: 'IRequestFulfiller',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IRequestFulfiller__factory>>
  ): Promise<MockContract<GitContractTypes.IRequestFulfiller>>
  (
    contractName: 'IRequestManager',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IRequestManager__factory>>
  ): Promise<MockContract<GitContractTypes.IRequestManager>>
  (
    contractName: 'IRewardsCollector',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IRewardsCollector__factory>>
  ): Promise<MockContract<GitContractTypes.IRewardsCollector>>
  (
    contractName: 'IStaking',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IStaking__factory>>
  ): Promise<MockContract<GitContractTypes.IStaking>>
  (
    contractName: 'IStakingVault',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IStakingVault__factory>>
  ): Promise<MockContract<GitContractTypes.IStakingVault>>
  (
    contractName: 'IThetaVault',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IThetaVault__factory>>
  ): Promise<MockContract<GitContractTypes.IThetaVault>>
  (
    contractName: 'IThetaVaultInfo',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IThetaVaultInfo__factory>>
  ): Promise<MockContract<GitContractTypes.IThetaVaultInfo>>
  (
    contractName: 'ITreasury',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ITreasury__factory>>
  ): Promise<MockContract<GitContractTypes.ITreasury>>
  (
    contractName: 'IVolatilityToken',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IVolatilityToken__factory>>
  ): Promise<MockContract<GitContractTypes.IVolatilityToken>>
  (
    contractName: 'IWETH',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IWETH__factory>>
  ): Promise<MockContract<GitContractTypes.IWETH>>
  (
    contractName: 'KeepersFeeVault',
    ...args: Parameters<GetDeployMethod<GitContractTypes.KeepersFeeVault__factory>>
  ): Promise<MockContract<GitContractTypes.KeepersFeeVault>>
  (
    contractName: 'Liquidation',
    ...args: Parameters<GetDeployMethod<GitContractTypes.Liquidation__factory>>
  ): Promise<MockContract<GitContractTypes.Liquidation>>
  (
    contractName: 'Platform',
    ...args: Parameters<GetDeployMethod<GitContractTypes.Platform__factory>>
  ): Promise<MockContract<GitContractTypes.Platform>>
  (
    contractName: 'PlatformHelper',
    ...args: Parameters<GetDeployMethod<GitContractTypes.PlatformHelper__factory>>
  ): Promise<MockContract<GitContractTypes.PlatformHelper>>
  (
    contractName: 'PositionRewards',
    ...args: Parameters<GetDeployMethod<GitContractTypes.PositionRewards__factory>>
  ): Promise<MockContract<GitContractTypes.PositionRewards>>
  (
    contractName: 'Rebaser',
    ...args: Parameters<GetDeployMethod<GitContractTypes.Rebaser__factory>>
  ): Promise<MockContract<GitContractTypes.Rebaser>>
  (
    contractName: 'RequestFeesCalculator',
    ...args: Parameters<GetDeployMethod<GitContractTypes.RequestFeesCalculator__factory>>
  ): Promise<MockContract<GitContractTypes.RequestFeesCalculator>>
  (
    contractName: 'RequestFulfiller',
    ...args: Parameters<GetDeployMethod<GitContractTypes.RequestFulfiller__factory>>
  ): Promise<MockContract<GitContractTypes.RequestFulfiller>>
  (
    contractName: 'FeesCollector',
    ...args: Parameters<GetDeployMethod<GitContractTypes.FeesCollector__factory>>
  ): Promise<MockContract<GitContractTypes.FeesCollector>>
  (
    contractName: 'Staking',
    ...args: Parameters<GetDeployMethod<GitContractTypes.Staking__factory>>
  ): Promise<MockContract<GitContractTypes.Staking>>
  (
    contractName: 'COTIETHSLPStakingRewards',
    ...args: Parameters<GetDeployMethod<GitContractTypes.COTIETHSLPStakingRewards__factory>>
  ): Promise<MockContract<GitContractTypes.COTIETHSLPStakingRewards>>
  (
    contractName: 'COTIETHStakingRewards',
    ...args: Parameters<GetDeployMethod<GitContractTypes.COTIETHStakingRewards__factory>>
  ): Promise<MockContract<GitContractTypes.COTIETHStakingRewards>>
  (
    contractName: 'CVOLUSDCLPStakingRewards',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVOLUSDCLPStakingRewards__factory>>
  ): Promise<MockContract<GitContractTypes.CVOLUSDCLPStakingRewards>>
  (
    contractName: 'ETHLPStakingRewards',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ETHLPStakingRewards__factory>>
  ): Promise<MockContract<GitContractTypes.ETHLPStakingRewards>>
  (
    contractName: 'ETHVOL_USDCLPStakingRewards',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ETHVOL_USDCLPStakingRewards__factory>>
  ): Promise<MockContract<GitContractTypes.ETHVOL_USDCLPStakingRewards>>
  (
    contractName: 'ETHVOLUSDCLPStakingRewards',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ETHVOLUSDCLPStakingRewards__factory>>
  ): Promise<MockContract<GitContractTypes.ETHVOLUSDCLPStakingRewards>>
  (
    contractName: 'GOVIETHSLPStakingRewards',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GOVIETHSLPStakingRewards__factory>>
  ): Promise<MockContract<GitContractTypes.GOVIETHSLPStakingRewards>>
  (
    contractName: 'GOVIETHStakingRewards',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GOVIETHStakingRewards__factory>>
  ): Promise<MockContract<GitContractTypes.GOVIETHStakingRewards>>
  (
    contractName: 'USDCLPStakingRewards',
    ...args: Parameters<GetDeployMethod<GitContractTypes.USDCLPStakingRewards__factory>>
  ): Promise<MockContract<GitContractTypes.USDCLPStakingRewards>>
  (
    contractName: 'USDTLPStakingRewards',
    ...args: Parameters<GetDeployMethod<GitContractTypes.USDTLPStakingRewards__factory>>
  ): Promise<MockContract<GitContractTypes.USDTLPStakingRewards>>
  (
    contractName: 'IStakingRewards',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IStakingRewards__factory>>
  ): Promise<MockContract<GitContractTypes.IStakingRewards>>
  (
    contractName: 'Owned',
    ...args: Parameters<GetDeployMethod<GitContractTypes.Owned__factory>>
  ): Promise<MockContract<GitContractTypes.Owned>>
  (
    contractName: 'Pausable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.Pausable__factory>>
  ): Promise<MockContract<GitContractTypes.Pausable>>
  (
    contractName: 'RewardsDistributionRecipient',
    ...args: Parameters<GetDeployMethod<GitContractTypes.RewardsDistributionRecipient__factory>>
  ): Promise<MockContract<GitContractTypes.RewardsDistributionRecipient>>
  (
    contractName: 'StakingRewards',
    ...args: Parameters<GetDeployMethod<GitContractTypes.StakingRewards__factory>>
  ): Promise<MockContract<GitContractTypes.StakingRewards>>
  (
    contractName: 'StakingVault',
    ...args: Parameters<GetDeployMethod<GitContractTypes.StakingVault__factory>>
  ): Promise<MockContract<GitContractTypes.StakingVault>>
  (
    contractName: 'Treasury',
    ...args: Parameters<GetDeployMethod<GitContractTypes.Treasury__factory>>
  ): Promise<MockContract<GitContractTypes.Treasury>>
  (
    contractName: 'CVIFeedOracle',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIFeedOracle__factory>>
  ): Promise<MockContract<GitContractTypes.CVIFeedOracle>>
  (
    contractName: 'FakeERC20',
    ...args: Parameters<GetDeployMethod<GitContractTypes.FakeERC20__factory>>
  ): Promise<MockContract<GitContractTypes.FakeERC20>>
  (
    contractName: 'FakePriceProvider',
    ...args: Parameters<GetDeployMethod<GitContractTypes.FakePriceProvider__factory>>
  ): Promise<MockContract<GitContractTypes.FakePriceProvider>>
  (
    contractName: 'IERC20',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC20__factory>>
  ): Promise<MockContract<GitContractTypes.IERC20>>
  (
    contractName: 'IUniswapV2Callee',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IUniswapV2Callee__factory>>
  ): Promise<MockContract<GitContractTypes.IUniswapV2Callee>>
  (
    contractName: 'IUniswapV2ERC20',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IUniswapV2ERC20__factory>>
  ): Promise<MockContract<GitContractTypes.IUniswapV2ERC20>>
  (
    contractName: 'UniswapV2ERC20',
    ...args: Parameters<GetDeployMethod<GitContractTypes.UniswapV2ERC20__factory>>
  ): Promise<MockContract<GitContractTypes.UniswapV2ERC20>>
  (
    contractName: 'UniswapV2Factory',
    ...args: Parameters<GetDeployMethod<GitContractTypes.UniswapV2Factory__factory>>
  ): Promise<MockContract<GitContractTypes.UniswapV2Factory>>
  (
    contractName: 'UniswapV2Pair',
    ...args: Parameters<GetDeployMethod<GitContractTypes.UniswapV2Pair__factory>>
  ): Promise<MockContract<GitContractTypes.UniswapV2Pair>>
  (
    contractName: 'UniswapV2Router02',
    ...args: Parameters<GetDeployMethod<GitContractTypes.UniswapV2Router02__factory>>
  ): Promise<MockContract<GitContractTypes.UniswapV2Router02>>
  (
    contractName: 'ThetaVault',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ThetaVault__factory>>
  ): Promise<MockContract<GitContractTypes.ThetaVault>>
  (
    contractName: 'ThetaVaultRequestFulfiller',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ThetaVaultRequestFulfiller__factory>>
  ): Promise<MockContract<GitContractTypes.ThetaVaultRequestFulfiller>>
  (
    contractName: 'VolatilityToken',
    ...args: Parameters<GetDeployMethod<GitContractTypes.VolatilityToken__factory>>
  ): Promise<MockContract<GitContractTypes.VolatilityToken>>
  (
    contractName: 'VolTokenRequestFulfiller',
    ...args: Parameters<GetDeployMethod<GitContractTypes.VolTokenRequestFulfiller__factory>>
  ): Promise<MockContract<GitContractTypes.VolTokenRequestFulfiller>>
  (
    contractName: 'BaseController',
    ...args: Parameters<GetDeployMethod<GitContractTypes.BaseController__factory>>
  ): Promise<MockContract<GitContractTypes.BaseController>>
  (
    contractName: 'ILProtectionConfig',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ILProtectionConfig__factory>>
  ): Promise<MockContract<GitContractTypes.ILProtectionConfig>>
  (
    contractName: 'ILProtectionController',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ILProtectionController__factory>>
  ): Promise<MockContract<GitContractTypes.ILProtectionController>>
  (
    contractName: 'ILProtectionDiscountNFTController',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ILProtectionDiscountNFTController__factory>>
  ): Promise<MockContract<GitContractTypes.ILProtectionDiscountNFTController>>
  (
    contractName: 'ILProtectionNFT',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ILProtectionNFT__factory>>
  ): Promise<MockContract<GitContractTypes.ILProtectionNFT>>
  (
    contractName: 'ILiquidityController',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ILiquidityController__factory>>
  ): Promise<MockContract<GitContractTypes.ILiquidityController>>
  (
    contractName: 'ILProtectionConfigInterface',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ILProtectionConfigInterface__factory>>
  ): Promise<MockContract<GitContractTypes.ILProtectionConfigInterface>>
  (
    contractName: 'ILProtectionControllerInterface',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ILProtectionControllerInterface__factory>>
  ): Promise<MockContract<GitContractTypes.ILProtectionControllerInterface>>
  (
    contractName: 'ILProtectionDiscountNFTControllerInterface',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ILProtectionDiscountNFTControllerInterface__factory>>
  ): Promise<MockContract<GitContractTypes.ILProtectionDiscountNFTControllerInterface>>
  (
    contractName: 'ILProtectionDiscountNFTInterface',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ILProtectionDiscountNFTInterface__factory>>
  ): Promise<MockContract<GitContractTypes.ILProtectionDiscountNFTInterface>>
  (
    contractName: 'ILProtectionNFTInterface',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ILProtectionNFTInterface__factory>>
  ): Promise<MockContract<GitContractTypes.ILProtectionNFTInterface>>
  (
    contractName: 'ITokenPairRepository',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ITokenPairRepository__factory>>
  ): Promise<MockContract<GitContractTypes.ITokenPairRepository>>
  (
    contractName: 'ITreasuryController',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ITreasuryController__factory>>
  ): Promise<MockContract<GitContractTypes.ITreasuryController>>
  (
    contractName: 'ILUtils',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ILUtils__factory>>
  ): Promise<MockContract<GitContractTypes.ILUtils>>
  (
    contractName: 'MathUtils',
    ...args: Parameters<GetDeployMethod<GitContractTypes.MathUtils__factory>>
  ): Promise<MockContract<GitContractTypes.MathUtils>>
  (
    contractName: 'PremiumCalculator',
    ...args: Parameters<GetDeployMethod<GitContractTypes.PremiumCalculator__factory>>
  ): Promise<MockContract<GitContractTypes.PremiumCalculator>>
  (
    contractName: 'LiquidityController',
    ...args: Parameters<GetDeployMethod<GitContractTypes.LiquidityController__factory>>
  ): Promise<MockContract<GitContractTypes.LiquidityController>>
  (
    contractName: 'ILProtectionDiscountNFT',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ILProtectionDiscountNFT__factory>>
  ): Promise<MockContract<GitContractTypes.ILProtectionDiscountNFT>>
  (
    contractName: 'ETHUSDOracle',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ETHUSDOracle__factory>>
  ): Promise<MockContract<GitContractTypes.ETHUSDOracle>>
  (
    contractName: 'LINKUSDOracle',
    ...args: Parameters<GetDeployMethod<GitContractTypes.LINKUSDOracle__factory>>
  ): Promise<MockContract<GitContractTypes.LINKUSDOracle>>
  (
    contractName: 'USDUSDOracle',
    ...args: Parameters<GetDeployMethod<GitContractTypes.USDUSDOracle__factory>>
  ): Promise<MockContract<GitContractTypes.USDUSDOracle>>
  (
    contractName: 'USDC',
    ...args: Parameters<GetDeployMethod<GitContractTypes.USDC__factory>>
  ): Promise<MockContract<GitContractTypes.USDC>>
  (
    contractName: 'TokenPairRepository',
    ...args: Parameters<GetDeployMethod<GitContractTypes.TokenPairRepository__factory>>
  ): Promise<MockContract<GitContractTypes.TokenPairRepository>>
  (
    contractName: 'TreasuryController',
    ...args: Parameters<GetDeployMethod<GitContractTypes.TreasuryController__factory>>
  ): Promise<MockContract<GitContractTypes.TreasuryController>>
  (
    contractName: 'EsGOVI',
    ...args: Parameters<GetDeployMethod<GitContractTypes.EsGOVI__factory>>
  ): Promise<MockContract<GitContractTypes.EsGOVI>>
  (
    contractName: 'EsGOVIRewardTrackerDistributor',
    ...args: Parameters<GetDeployMethod<GitContractTypes.EsGOVIRewardTrackerDistributor__factory>>
  ): Promise<MockContract<GitContractTypes.EsGOVIRewardTrackerDistributor>>
  (
    contractName: 'GOVIRewardTrackerDistributor',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GOVIRewardTrackerDistributor__factory>>
  ): Promise<MockContract<GitContractTypes.GOVIRewardTrackerDistributor>>
  (
    contractName: 'ThetaVaultRewardTrackerDistributor',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ThetaVaultRewardTrackerDistributor__factory>>
  ): Promise<MockContract<GitContractTypes.ThetaVaultRewardTrackerDistributor>>
  (
    contractName: 'EsGOVIRewardTracker',
    ...args: Parameters<GetDeployMethod<GitContractTypes.EsGOVIRewardTracker__factory>>
  ): Promise<MockContract<GitContractTypes.EsGOVIRewardTracker>>
  (
    contractName: 'GOVIRewardTracker',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GOVIRewardTracker__factory>>
  ): Promise<MockContract<GitContractTypes.GOVIRewardTracker>>
  (
    contractName: 'ThetaVaultRewardTracker',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ThetaVaultRewardTracker__factory>>
  ): Promise<MockContract<GitContractTypes.ThetaVaultRewardTracker>>
  (
    contractName: 'GOVIVester',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GOVIVester__factory>>
  ): Promise<MockContract<GitContractTypes.GOVIVester>>
  (
    contractName: 'ThetaVaultVester',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ThetaVaultVester__factory>>
  ): Promise<MockContract<GitContractTypes.ThetaVaultVester>>
  (
    contractName: 'IMintable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IMintable__factory>>
  ): Promise<MockContract<GitContractTypes.IMintable>>
  (
    contractName: 'IRewardDistributor',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IRewardDistributor__factory>>
  ): Promise<MockContract<GitContractTypes.IRewardDistributor>>
  (
    contractName: 'IRewardRouter',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IRewardRouter__factory>>
  ): Promise<MockContract<GitContractTypes.IRewardRouter>>
  (
    contractName: 'IRewardTracker',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IRewardTracker__factory>>
  ): Promise<MockContract<GitContractTypes.IRewardTracker>>
  (
    contractName: 'IVester',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IVester__factory>>
  ): Promise<MockContract<GitContractTypes.IVester>>
  (
    contractName: 'RewardDistributor',
    ...args: Parameters<GetDeployMethod<GitContractTypes.RewardDistributor__factory>>
  ): Promise<MockContract<GitContractTypes.RewardDistributor>>
  (
    contractName: 'RewardRouter',
    ...args: Parameters<GetDeployMethod<GitContractTypes.RewardRouter__factory>>
  ): Promise<MockContract<GitContractTypes.RewardRouter>>
  (
    contractName: 'RewardTracker',
    ...args: Parameters<GetDeployMethod<GitContractTypes.RewardTracker__factory>>
  ): Promise<MockContract<GitContractTypes.RewardTracker>>
  (
    contractName: 'FakeCVIUSDCThetaVault',
    ...args: Parameters<GetDeployMethod<GitContractTypes.FakeCVIUSDCThetaVault__factory>>
  ): Promise<MockContract<GitContractTypes.FakeCVIUSDCThetaVault>>
  (
    contractName: 'FakeGOVI',
    ...args: Parameters<GetDeployMethod<GitContractTypes.FakeGOVI__factory>>
  ): Promise<MockContract<GitContractTypes.FakeGOVI>>
  (
    contractName: 'Vester',
    ...args: Parameters<GetDeployMethod<GitContractTypes.Vester__factory>>
  ): Promise<MockContract<GitContractTypes.Vester>>
  (
    contractName: 'AccessControlUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.AccessControlUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.AccessControlUpgradeable>>
  (
    contractName: 'IAccessControlUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IAccessControlUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IAccessControlUpgradeable>>
  (
    contractName: 'OwnableUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.OwnableUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.OwnableUpgradeable>>
  (
    contractName: 'Initializable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.Initializable__factory>>
  ): Promise<MockContract<GitContractTypes.Initializable>>
  (
    contractName: 'ReentrancyGuardUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ReentrancyGuardUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ReentrancyGuardUpgradeable>>
  (
    contractName: 'ERC20Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20Upgradeable>>
  (
    contractName: 'IERC20MetadataUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC20MetadataUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC20MetadataUpgradeable>>
  (
    contractName: 'IERC20Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC20Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC20Upgradeable>>
  (
    contractName: 'ERC721Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC721Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC721Upgradeable>>
  (
    contractName: 'ERC721EnumerableUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC721EnumerableUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC721EnumerableUpgradeable>>
  (
    contractName: 'IERC721EnumerableUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC721EnumerableUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC721EnumerableUpgradeable>>
  (
    contractName: 'IERC721MetadataUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC721MetadataUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC721MetadataUpgradeable>>
  (
    contractName: 'IERC721ReceiverUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC721ReceiverUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC721ReceiverUpgradeable>>
  (
    contractName: 'IERC721Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC721Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC721Upgradeable>>
  (
    contractName: 'ContextUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ContextUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ContextUpgradeable>>
  (
    contractName: 'ERC165Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC165Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC165Upgradeable>>
  (
    contractName: 'IERC165Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC165Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC165Upgradeable>>
  (
    contractName: 'AccessControl',
    ...args: Parameters<GetDeployMethod<GitContractTypes.AccessControl__factory>>
  ): Promise<MockContract<GitContractTypes.AccessControl>>
  (
    contractName: 'IAccessControl',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IAccessControl__factory>>
  ): Promise<MockContract<GitContractTypes.IAccessControl>>
  (
    contractName: 'Ownable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.Ownable__factory>>
  ): Promise<MockContract<GitContractTypes.Ownable>>
  (
    contractName: 'ERC20',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20>>
  (
    contractName: 'IERC20Metadata',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC20Metadata__factory>>
  ): Promise<MockContract<GitContractTypes.IERC20Metadata>>
  (
    contractName: 'ERC165',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC165__factory>>
  ): Promise<MockContract<GitContractTypes.ERC165>>
  (
    contractName: 'IERC165',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC165__factory>>
  ): Promise<MockContract<GitContractTypes.IERC165>>
  (
    contractName: 'CVIDeviationOracle',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIDeviationOracle__factory>>
  ): Promise<MockContract<GitContractTypes.CVIDeviationOracle>>
  (
    contractName: 'CVIFakeFeedOracle',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIFakeFeedOracle__factory>>
  ): Promise<MockContract<GitContractTypes.CVIFakeFeedOracle>>
  (
    contractName: 'CVIOracle2X',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIOracle2X__factory>>
  ): Promise<MockContract<GitContractTypes.CVIOracle2X>>
  (
    contractName: 'ETHVIOracle',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ETHVIOracle__factory>>
  ): Promise<MockContract<GitContractTypes.ETHVIOracle>>
  (
    contractName: 'CVIUSDCFeesCalculator',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCFeesCalculator__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCFeesCalculator>>
  (
    contractName: 'CVIUSDCFeesCalculator2X',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCFeesCalculator2X__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCFeesCalculator2X>>
  (
    contractName: 'CVIUSDCLiquidation',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCLiquidation__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCLiquidation>>
  (
    contractName: 'CVIUSDCLiquidation2X',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCLiquidation2X__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCLiquidation2X>>
  (
    contractName: 'CVIUSDCPlatform',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCPlatform__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCPlatform>>
  (
    contractName: 'CVIUSDCPlatform2X',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCPlatform2X__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCPlatform2X>>
  (
    contractName: 'CVIUSDCPositionRewards',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCPositionRewards__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCPositionRewards>>
  (
    contractName: 'StakingV2',
    ...args: Parameters<GetDeployMethod<GitContractTypes.StakingV2__factory>>
  ): Promise<MockContract<GitContractTypes.StakingV2>>
  (
    contractName: 'CVIUSDCLPStakingRewards',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCLPStakingRewards__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCLPStakingRewards>>
  (
    contractName: 'CVIUSDCThetaVault',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCThetaVault__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCThetaVault>>
  (
    contractName: 'CVIUSDCThetaVault2X',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCThetaVault2X__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCThetaVault2X>>
  (
    contractName: 'CVIUSDCThetaVaultRequestFulfiller',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller>>
  (
    contractName: 'CVIUSDCThetaVaultRequestFulfiller2X',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCThetaVaultRequestFulfiller2X>>
  (
    contractName: 'WETH',
    ...args: Parameters<GetDeployMethod<GitContractTypes.WETH__factory>>
  ): Promise<MockContract<GitContractTypes.WETH>>
  (
    contractName: 'CVIUSDCRebaser',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCRebaser__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCRebaser>>
  (
    contractName: 'CVIUSDCRebaser2X',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCRebaser2X__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCRebaser2X>>
  (
    contractName: 'CVIUSDCRequestFeesCalculator',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCRequestFeesCalculator__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCRequestFeesCalculator>>
  (
    contractName: 'CVIUSDCRequestFeesCalculator2X',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCRequestFeesCalculator2X__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCRequestFeesCalculator2X>>
  (
    contractName: 'CVIUSDCVolatilityToken',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCVolatilityToken__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCVolatilityToken>>
  (
    contractName: 'CVIUSDCVolatilityToken2X',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCVolatilityToken2X__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCVolatilityToken2X>>
  (
    contractName: 'CVIUSDCVolTokenRequestFulfiller',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCVolTokenRequestFulfiller__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCVolTokenRequestFulfiller>>
  (
    contractName: 'CVIUSDCVolTokenRequestFulfiller2X',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X__factory>>
  ): Promise<MockContract<GitContractTypes.CVIUSDCVolTokenRequestFulfiller2X>>
  (
    contractName: 'AccessControlCrossChainUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.AccessControlCrossChainUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.AccessControlCrossChainUpgradeable>>
  (
    contractName: 'AccessControlEnumerableUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.AccessControlEnumerableUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.AccessControlEnumerableUpgradeable>>
  (
    contractName: 'ConditionalEscrowUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ConditionalEscrowUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ConditionalEscrowUpgradeable>>
  (
    contractName: 'CrossChainEnabledAMBUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CrossChainEnabledAMBUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.CrossChainEnabledAMBUpgradeable>>
  (
    contractName: 'CrossChainEnabledArbitrumL1Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.CrossChainEnabledArbitrumL1Upgradeable>>
  (
    contractName: 'CrossChainEnabledArbitrumL2Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.CrossChainEnabledArbitrumL2Upgradeable>>
  (
    contractName: 'CrossChainEnabledOptimismUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CrossChainEnabledOptimismUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.CrossChainEnabledOptimismUpgradeable>>
  (
    contractName: 'CrossChainEnabledPolygonChildUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.CrossChainEnabledPolygonChildUpgradeable>>
  (
    contractName: 'CrossChainEnabledUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CrossChainEnabledUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.CrossChainEnabledUpgradeable>>
  (
    contractName: 'DoubleEndedQueueUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.DoubleEndedQueueUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.DoubleEndedQueueUpgradeable>>
  (
    contractName: 'EIP712Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.EIP712Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.EIP712Upgradeable>>
  (
    contractName: 'ERC1155BurnableUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1155BurnableUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1155BurnableUpgradeable>>
  (
    contractName: 'ERC1155HolderUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1155HolderUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1155HolderUpgradeable>>
  (
    contractName: 'ERC1155PausableUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1155PausableUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1155PausableUpgradeable>>
  (
    contractName: 'ERC1155PresetMinterPauserUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1155PresetMinterPauserUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1155PresetMinterPauserUpgradeable>>
  (
    contractName: 'ERC1155ReceiverUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1155ReceiverUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1155ReceiverUpgradeable>>
  (
    contractName: 'ERC1155SupplyUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1155SupplyUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1155SupplyUpgradeable>>
  (
    contractName: 'ERC1155Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1155Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1155Upgradeable>>
  (
    contractName: 'ERC1155URIStorageUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1155URIStorageUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1155URIStorageUpgradeable>>
  (
    contractName: 'ERC165StorageUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC165StorageUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC165StorageUpgradeable>>
  (
    contractName: 'ERC1820ImplementerUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1820ImplementerUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1820ImplementerUpgradeable>>
  (
    contractName: 'ERC1967UpgradeUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1967UpgradeUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1967UpgradeUpgradeable>>
  (
    contractName: 'ERC20BurnableUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20BurnableUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20BurnableUpgradeable>>
  (
    contractName: 'ERC20CappedUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20CappedUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20CappedUpgradeable>>
  (
    contractName: 'ERC20FlashMintUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20FlashMintUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20FlashMintUpgradeable>>
  (
    contractName: 'ERC20PausableUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20PausableUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20PausableUpgradeable>>
  (
    contractName: 'ERC20PermitUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20PermitUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20PermitUpgradeable>>
  (
    contractName: 'ERC20PresetFixedSupplyUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20PresetFixedSupplyUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20PresetFixedSupplyUpgradeable>>
  (
    contractName: 'ERC20PresetMinterPauserUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20PresetMinterPauserUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20PresetMinterPauserUpgradeable>>
  (
    contractName: 'ERC20SnapshotUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20SnapshotUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20SnapshotUpgradeable>>
  (
    contractName: 'ERC20VotesCompUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20VotesCompUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20VotesCompUpgradeable>>
  (
    contractName: 'ERC20VotesUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20VotesUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20VotesUpgradeable>>
  (
    contractName: 'ERC20WrapperUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20WrapperUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20WrapperUpgradeable>>
  (
    contractName: 'ERC2771ContextUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC2771ContextUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC2771ContextUpgradeable>>
  (
    contractName: 'ERC2981Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC2981Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC2981Upgradeable>>
  (
    contractName: 'ERC721BurnableUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC721BurnableUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC721BurnableUpgradeable>>
  (
    contractName: 'ERC721HolderUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC721HolderUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC721HolderUpgradeable>>
  (
    contractName: 'ERC721PausableUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC721PausableUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC721PausableUpgradeable>>
  (
    contractName: 'ERC721PresetMinterPauserAutoIdUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC721PresetMinterPauserAutoIdUpgradeable>>
  (
    contractName: 'ERC721RoyaltyUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC721RoyaltyUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC721RoyaltyUpgradeable>>
  (
    contractName: 'ERC721URIStorageUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC721URIStorageUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC721URIStorageUpgradeable>>
  (
    contractName: 'ERC721VotesUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC721VotesUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC721VotesUpgradeable>>
  (
    contractName: 'ERC777PresetFixedSupplyUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC777PresetFixedSupplyUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC777PresetFixedSupplyUpgradeable>>
  (
    contractName: 'ERC777Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC777Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC777Upgradeable>>
  (
    contractName: 'EscrowUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.EscrowUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.EscrowUpgradeable>>
  (
    contractName: 'GovernorCompatibilityBravoUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorCompatibilityBravoUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorCompatibilityBravoUpgradeable>>
  (
    contractName: 'GovernorCountingSimpleUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorCountingSimpleUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorCountingSimpleUpgradeable>>
  (
    contractName: 'GovernorPreventLateQuorumUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorPreventLateQuorumUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorPreventLateQuorumUpgradeable>>
  (
    contractName: 'GovernorProposalThresholdUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorProposalThresholdUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorProposalThresholdUpgradeable>>
  (
    contractName: 'GovernorSettingsUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorSettingsUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorSettingsUpgradeable>>
  (
    contractName: 'GovernorTimelockCompoundUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorTimelockCompoundUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorTimelockCompoundUpgradeable>>
  (
    contractName: 'GovernorTimelockControlUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorTimelockControlUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorTimelockControlUpgradeable>>
  (
    contractName: 'GovernorUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorUpgradeable>>
  (
    contractName: 'GovernorVotesCompUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorVotesCompUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorVotesCompUpgradeable>>
  (
    contractName: 'GovernorVotesQuorumFractionUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorVotesQuorumFractionUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorVotesQuorumFractionUpgradeable>>
  (
    contractName: 'GovernorVotesUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorVotesUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorVotesUpgradeable>>
  (
    contractName: 'IAccessControlEnumerableUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IAccessControlEnumerableUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IAccessControlEnumerableUpgradeable>>
  (
    contractName: 'IAMBUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IAMBUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IAMBUpgradeable>>
  (
    contractName: 'IArbSysUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IArbSysUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IArbSysUpgradeable>>
  (
    contractName: 'IBeaconUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IBeaconUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IBeaconUpgradeable>>
  (
    contractName: 'IBridgeUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IBridgeUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IBridgeUpgradeable>>
  (
    contractName: 'ICompoundTimelockUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ICompoundTimelockUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ICompoundTimelockUpgradeable>>
  (
    contractName: 'ICrossDomainMessengerUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ICrossDomainMessengerUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.ICrossDomainMessengerUpgradeable>>
  (
    contractName: 'IERC1155MetadataURIUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1155MetadataURIUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1155MetadataURIUpgradeable>>
  (
    contractName: 'IERC1155ReceiverUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1155ReceiverUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1155ReceiverUpgradeable>>
  (
    contractName: 'IERC1155Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1155Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1155Upgradeable>>
  (
    contractName: 'IERC1271Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1271Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1271Upgradeable>>
  (
    contractName: 'IERC1363ReceiverUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1363ReceiverUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1363ReceiverUpgradeable>>
  (
    contractName: 'IERC1363SpenderUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1363SpenderUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1363SpenderUpgradeable>>
  (
    contractName: 'IERC1363Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1363Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1363Upgradeable>>
  (
    contractName: 'IERC1820ImplementerUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1820ImplementerUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1820ImplementerUpgradeable>>
  (
    contractName: 'IERC1820RegistryUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1820RegistryUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1820RegistryUpgradeable>>
  (
    contractName: 'IERC1822ProxiableUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1822ProxiableUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1822ProxiableUpgradeable>>
  (
    contractName: 'IERC20PermitUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC20PermitUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC20PermitUpgradeable>>
  (
    contractName: 'IERC2612Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC2612Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC2612Upgradeable>>
  (
    contractName: 'IERC2981Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC2981Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC2981Upgradeable>>
  (
    contractName: 'IERC3156FlashBorrowerUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC3156FlashBorrowerUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC3156FlashBorrowerUpgradeable>>
  (
    contractName: 'IERC3156FlashLenderUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC3156FlashLenderUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC3156FlashLenderUpgradeable>>
  (
    contractName: 'IERC777RecipientUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC777RecipientUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC777RecipientUpgradeable>>
  (
    contractName: 'IERC777SenderUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC777SenderUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC777SenderUpgradeable>>
  (
    contractName: 'IERC777Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC777Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC777Upgradeable>>
  (
    contractName: 'IFxMessageProcessorUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IFxMessageProcessorUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IFxMessageProcessorUpgradeable>>
  (
    contractName: 'IGovernorCompatibilityBravoUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IGovernorCompatibilityBravoUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IGovernorCompatibilityBravoUpgradeable>>
  (
    contractName: 'IGovernorTimelockUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IGovernorTimelockUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IGovernorTimelockUpgradeable>>
  (
    contractName: 'IGovernorUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IGovernorUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IGovernorUpgradeable>>
  (
    contractName: 'IInboxUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IInboxUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IInboxUpgradeable>>
  (
    contractName: 'IMessageProviderUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IMessageProviderUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IMessageProviderUpgradeable>>
  (
    contractName: 'IOutboxUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IOutboxUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IOutboxUpgradeable>>
  (
    contractName: 'IVotesUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IVotesUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.IVotesUpgradeable>>
  (
    contractName: 'LibArbitrumL2Upgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.LibArbitrumL2Upgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.LibArbitrumL2Upgradeable>>
  (
    contractName: 'MinimalForwarderUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.MinimalForwarderUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.MinimalForwarderUpgradeable>>
  (
    contractName: 'MulticallUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.MulticallUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.MulticallUpgradeable>>
  (
    contractName: 'PausableUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.PausableUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.PausableUpgradeable>>
  (
    contractName: 'PaymentSplitterUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.PaymentSplitterUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.PaymentSplitterUpgradeable>>
  (
    contractName: 'PullPaymentUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.PullPaymentUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.PullPaymentUpgradeable>>
  (
    contractName: 'RefundEscrowUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.RefundEscrowUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.RefundEscrowUpgradeable>>
  (
    contractName: 'TimelockControllerUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.TimelockControllerUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.TimelockControllerUpgradeable>>
  (
    contractName: 'TimelockControllerWith46MigrationUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.TimelockControllerWith46MigrationUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.TimelockControllerWith46MigrationUpgradeable>>
  (
    contractName: 'TokenTimelockUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.TokenTimelockUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.TokenTimelockUpgradeable>>
  (
    contractName: 'UUPSUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.UUPSUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.UUPSUpgradeable>>
  (
    contractName: 'VestingWalletUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.VestingWalletUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.VestingWalletUpgradeable>>
  (
    contractName: 'VotesUpgradeable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.VotesUpgradeable__factory>>
  ): Promise<MockContract<GitContractTypes.VotesUpgradeable>>
  (
    contractName: 'AccessControlCrossChain',
    ...args: Parameters<GetDeployMethod<GitContractTypes.AccessControlCrossChain__factory>>
  ): Promise<MockContract<GitContractTypes.AccessControlCrossChain>>
  (
    contractName: 'AccessControlEnumerable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.AccessControlEnumerable__factory>>
  ): Promise<MockContract<GitContractTypes.AccessControlEnumerable>>
  (
    contractName: 'BeaconProxy',
    ...args: Parameters<GetDeployMethod<GitContractTypes.BeaconProxy__factory>>
  ): Promise<MockContract<GitContractTypes.BeaconProxy>>
  (
    contractName: 'ConditionalEscrow',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ConditionalEscrow__factory>>
  ): Promise<MockContract<GitContractTypes.ConditionalEscrow>>
  (
    contractName: 'CrossChainEnabledAMB',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CrossChainEnabledAMB__factory>>
  ): Promise<MockContract<GitContractTypes.CrossChainEnabledAMB>>
  (
    contractName: 'CrossChainEnabledPolygonChild',
    ...args: Parameters<GetDeployMethod<GitContractTypes.CrossChainEnabledPolygonChild__factory>>
  ): Promise<MockContract<GitContractTypes.CrossChainEnabledPolygonChild>>
  (
    contractName: 'DoubleEndedQueue',
    ...args: Parameters<GetDeployMethod<GitContractTypes.DoubleEndedQueue__factory>>
  ): Promise<MockContract<GitContractTypes.DoubleEndedQueue>>
  (
    contractName: 'ERC1155',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1155__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1155>>
  (
    contractName: 'ERC1155Burnable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1155Burnable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1155Burnable>>
  (
    contractName: 'ERC1155Holder',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1155Holder__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1155Holder>>
  (
    contractName: 'ERC1155Pausable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1155Pausable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1155Pausable>>
  (
    contractName: 'ERC1155PresetMinterPauser',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1155PresetMinterPauser__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1155PresetMinterPauser>>
  (
    contractName: 'ERC1155Receiver',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1155Receiver__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1155Receiver>>
  (
    contractName: 'ERC1155Supply',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1155Supply__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1155Supply>>
  (
    contractName: 'ERC1155URIStorage',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1155URIStorage__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1155URIStorage>>
  (
    contractName: 'ERC165Storage',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC165Storage__factory>>
  ): Promise<MockContract<GitContractTypes.ERC165Storage>>
  (
    contractName: 'ERC1820Implementer',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1820Implementer__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1820Implementer>>
  (
    contractName: 'ERC1967Proxy',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1967Proxy__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1967Proxy>>
  (
    contractName: 'ERC1967Upgrade',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC1967Upgrade__factory>>
  ): Promise<MockContract<GitContractTypes.ERC1967Upgrade>>
  (
    contractName: 'ERC20Burnable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20Burnable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20Burnable>>
  (
    contractName: 'ERC20Capped',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20Capped__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20Capped>>
  (
    contractName: 'ERC20FlashMint',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20FlashMint__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20FlashMint>>
  (
    contractName: 'ERC20Pausable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20Pausable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20Pausable>>
  (
    contractName: 'ERC20Permit',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20Permit__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20Permit>>
  (
    contractName: 'ERC20PresetFixedSupply',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20PresetFixedSupply__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20PresetFixedSupply>>
  (
    contractName: 'ERC20PresetMinterPauser',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20PresetMinterPauser__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20PresetMinterPauser>>
  (
    contractName: 'ERC20Snapshot',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20Snapshot__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20Snapshot>>
  (
    contractName: 'ERC20Votes',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20Votes__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20Votes>>
  (
    contractName: 'ERC20VotesComp',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20VotesComp__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20VotesComp>>
  (
    contractName: 'ERC20Wrapper',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC20Wrapper__factory>>
  ): Promise<MockContract<GitContractTypes.ERC20Wrapper>>
  (
    contractName: 'ERC2771Context',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC2771Context__factory>>
  ): Promise<MockContract<GitContractTypes.ERC2771Context>>
  (
    contractName: 'ERC2981',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC2981__factory>>
  ): Promise<MockContract<GitContractTypes.ERC2981>>
  (
    contractName: 'ERC721',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC721__factory>>
  ): Promise<MockContract<GitContractTypes.ERC721>>
  (
    contractName: 'ERC721Burnable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC721Burnable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC721Burnable>>
  (
    contractName: 'ERC721Enumerable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC721Enumerable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC721Enumerable>>
  (
    contractName: 'ERC721Holder',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC721Holder__factory>>
  ): Promise<MockContract<GitContractTypes.ERC721Holder>>
  (
    contractName: 'ERC721Pausable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC721Pausable__factory>>
  ): Promise<MockContract<GitContractTypes.ERC721Pausable>>
  (
    contractName: 'ERC721PresetMinterPauserAutoId',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC721PresetMinterPauserAutoId__factory>>
  ): Promise<MockContract<GitContractTypes.ERC721PresetMinterPauserAutoId>>
  (
    contractName: 'ERC721Royalty',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC721Royalty__factory>>
  ): Promise<MockContract<GitContractTypes.ERC721Royalty>>
  (
    contractName: 'ERC721URIStorage',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC721URIStorage__factory>>
  ): Promise<MockContract<GitContractTypes.ERC721URIStorage>>
  (
    contractName: 'ERC721Votes',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC721Votes__factory>>
  ): Promise<MockContract<GitContractTypes.ERC721Votes>>
  (
    contractName: 'ERC777',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC777__factory>>
  ): Promise<MockContract<GitContractTypes.ERC777>>
  (
    contractName: 'ERC777PresetFixedSupply',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ERC777PresetFixedSupply__factory>>
  ): Promise<MockContract<GitContractTypes.ERC777PresetFixedSupply>>
  (
    contractName: 'Escrow',
    ...args: Parameters<GetDeployMethod<GitContractTypes.Escrow__factory>>
  ): Promise<MockContract<GitContractTypes.Escrow>>
  (
    contractName: 'Governor',
    ...args: Parameters<GetDeployMethod<GitContractTypes.Governor__factory>>
  ): Promise<MockContract<GitContractTypes.Governor>>
  (
    contractName: 'GovernorCompatibilityBravo',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorCompatibilityBravo__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorCompatibilityBravo>>
  (
    contractName: 'GovernorCountingSimple',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorCountingSimple__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorCountingSimple>>
  (
    contractName: 'GovernorPreventLateQuorum',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorPreventLateQuorum__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorPreventLateQuorum>>
  (
    contractName: 'GovernorProposalThreshold',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorProposalThreshold__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorProposalThreshold>>
  (
    contractName: 'GovernorSettings',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorSettings__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorSettings>>
  (
    contractName: 'GovernorTimelockCompound',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorTimelockCompound__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorTimelockCompound>>
  (
    contractName: 'GovernorTimelockControl',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorTimelockControl__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorTimelockControl>>
  (
    contractName: 'GovernorVotes',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorVotes__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorVotes>>
  (
    contractName: 'GovernorVotesComp',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorVotesComp__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorVotesComp>>
  (
    contractName: 'GovernorVotesQuorumFraction',
    ...args: Parameters<GetDeployMethod<GitContractTypes.GovernorVotesQuorumFraction__factory>>
  ): Promise<MockContract<GitContractTypes.GovernorVotesQuorumFraction>>
  (
    contractName: 'IAccessControlEnumerable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IAccessControlEnumerable__factory>>
  ): Promise<MockContract<GitContractTypes.IAccessControlEnumerable>>
  (
    contractName: 'IAMB',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IAMB__factory>>
  ): Promise<MockContract<GitContractTypes.IAMB>>
  (
    contractName: 'IArbSys',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IArbSys__factory>>
  ): Promise<MockContract<GitContractTypes.IArbSys>>
  (
    contractName: 'IBeacon',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IBeacon__factory>>
  ): Promise<MockContract<GitContractTypes.IBeacon>>
  (
    contractName: 'IBridge',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IBridge__factory>>
  ): Promise<MockContract<GitContractTypes.IBridge>>
  (
    contractName: 'ICompoundTimelock',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ICompoundTimelock__factory>>
  ): Promise<MockContract<GitContractTypes.ICompoundTimelock>>
  (
    contractName: 'ICrossDomainMessenger',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ICrossDomainMessenger__factory>>
  ): Promise<MockContract<GitContractTypes.ICrossDomainMessenger>>
  (
    contractName: 'IERC1155',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1155__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1155>>
  (
    contractName: 'IERC1155MetadataURI',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1155MetadataURI__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1155MetadataURI>>
  (
    contractName: 'IERC1155Receiver',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1155Receiver__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1155Receiver>>
  (
    contractName: 'IERC1271',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1271__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1271>>
  (
    contractName: 'IERC1363',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1363__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1363>>
  (
    contractName: 'IERC1363Receiver',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1363Receiver__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1363Receiver>>
  (
    contractName: 'IERC1363Spender',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1363Spender__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1363Spender>>
  (
    contractName: 'IERC1820Implementer',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1820Implementer__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1820Implementer>>
  (
    contractName: 'IERC1820Registry',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1820Registry__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1820Registry>>
  (
    contractName: 'IERC1822Proxiable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC1822Proxiable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC1822Proxiable>>
  (
    contractName: 'IERC20Permit',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC20Permit__factory>>
  ): Promise<MockContract<GitContractTypes.IERC20Permit>>
  (
    contractName: 'IERC2612',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC2612__factory>>
  ): Promise<MockContract<GitContractTypes.IERC2612>>
  (
    contractName: 'IERC2981',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC2981__factory>>
  ): Promise<MockContract<GitContractTypes.IERC2981>>
  (
    contractName: 'IERC3156FlashBorrower',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC3156FlashBorrower__factory>>
  ): Promise<MockContract<GitContractTypes.IERC3156FlashBorrower>>
  (
    contractName: 'IERC3156FlashLender',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC3156FlashLender__factory>>
  ): Promise<MockContract<GitContractTypes.IERC3156FlashLender>>
  (
    contractName: 'IERC721',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC721__factory>>
  ): Promise<MockContract<GitContractTypes.IERC721>>
  (
    contractName: 'IERC721Enumerable',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC721Enumerable__factory>>
  ): Promise<MockContract<GitContractTypes.IERC721Enumerable>>
  (
    contractName: 'IERC721Metadata',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC721Metadata__factory>>
  ): Promise<MockContract<GitContractTypes.IERC721Metadata>>
  (
    contractName: 'IERC721Receiver',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC721Receiver__factory>>
  ): Promise<MockContract<GitContractTypes.IERC721Receiver>>
  (
    contractName: 'IERC777',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC777__factory>>
  ): Promise<MockContract<GitContractTypes.IERC777>>
  (
    contractName: 'IERC777Recipient',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC777Recipient__factory>>
  ): Promise<MockContract<GitContractTypes.IERC777Recipient>>
  (
    contractName: 'IERC777Sender',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IERC777Sender__factory>>
  ): Promise<MockContract<GitContractTypes.IERC777Sender>>
  (
    contractName: 'IFxMessageProcessor',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IFxMessageProcessor__factory>>
  ): Promise<MockContract<GitContractTypes.IFxMessageProcessor>>
  (
    contractName: 'IGovernor',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IGovernor__factory>>
  ): Promise<MockContract<GitContractTypes.IGovernor>>
  (
    contractName: 'IGovernorCompatibilityBravo',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IGovernorCompatibilityBravo__factory>>
  ): Promise<MockContract<GitContractTypes.IGovernorCompatibilityBravo>>
  (
    contractName: 'IGovernorTimelock',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IGovernorTimelock__factory>>
  ): Promise<MockContract<GitContractTypes.IGovernorTimelock>>
  (
    contractName: 'IMessageProvider',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IMessageProvider__factory>>
  ): Promise<MockContract<GitContractTypes.IMessageProvider>>
  (
    contractName: 'IOutbox',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IOutbox__factory>>
  ): Promise<MockContract<GitContractTypes.IOutbox>>
  (
    contractName: 'IVotes',
    ...args: Parameters<GetDeployMethod<GitContractTypes.IVotes__factory>>
  ): Promise<MockContract<GitContractTypes.IVotes>>
  (
    contractName: 'LibArbitrumL2',
    ...args: Parameters<GetDeployMethod<GitContractTypes.LibArbitrumL2__factory>>
  ): Promise<MockContract<GitContractTypes.LibArbitrumL2>>
  (
    contractName: 'MinimalForwarder',
    ...args: Parameters<GetDeployMethod<GitContractTypes.MinimalForwarder__factory>>
  ): Promise<MockContract<GitContractTypes.MinimalForwarder>>
  (
    contractName: 'Multicall',
    ...args: Parameters<GetDeployMethod<GitContractTypes.Multicall__factory>>
  ): Promise<MockContract<GitContractTypes.Multicall>>
  (
    contractName: 'PaymentSplitter',
    ...args: Parameters<GetDeployMethod<GitContractTypes.PaymentSplitter__factory>>
  ): Promise<MockContract<GitContractTypes.PaymentSplitter>>
  (
    contractName: 'Proxy',
    ...args: Parameters<GetDeployMethod<GitContractTypes.Proxy__factory>>
  ): Promise<MockContract<GitContractTypes.Proxy>>
  (
    contractName: 'ProxyAdmin',
    ...args: Parameters<GetDeployMethod<GitContractTypes.ProxyAdmin__factory>>
  ): Promise<MockContract<GitContractTypes.ProxyAdmin>>
  (
    contractName: 'PullPayment',
    ...args: Parameters<GetDeployMethod<GitContractTypes.PullPayment__factory>>
  ): Promise<MockContract<GitContractTypes.PullPayment>>
  (
    contractName: 'RefundEscrow',
    ...args: Parameters<GetDeployMethod<GitContractTypes.RefundEscrow__factory>>
  ): Promise<MockContract<GitContractTypes.RefundEscrow>>
  (
    contractName: 'TimelockController',
    ...args: Parameters<GetDeployMethod<GitContractTypes.TimelockController__factory>>
  ): Promise<MockContract<GitContractTypes.TimelockController>>
  (
    contractName: 'TokenTimelock',
    ...args: Parameters<GetDeployMethod<GitContractTypes.TokenTimelock__factory>>
  ): Promise<MockContract<GitContractTypes.TokenTimelock>>
  (
    contractName: 'TransparentUpgradeableProxy',
    ...args: Parameters<GetDeployMethod<GitContractTypes.TransparentUpgradeableProxy__factory>>
  ): Promise<MockContract<GitContractTypes.TransparentUpgradeableProxy>>
  (
    contractName: 'UpgradeableBeacon',
    ...args: Parameters<GetDeployMethod<GitContractTypes.UpgradeableBeacon__factory>>
  ): Promise<MockContract<GitContractTypes.UpgradeableBeacon>>
  (
    contractName: 'VestingWallet',
    ...args: Parameters<GetDeployMethod<GitContractTypes.VestingWallet__factory>>
  ): Promise<MockContract<GitContractTypes.VestingWallet>>
  (
    contractName: 'Votes',
    ...args: Parameters<GetDeployMethod<GitContractTypes.Votes__factory>>
  ): Promise<MockContract<GitContractTypes.Votes>>
  (
    contractName: 'UniswapV2Migrator',
    ...args: Parameters<GetDeployMethod<GitContractTypes.UniswapV2Migrator__factory>>
  ): Promise<MockContract<GitContractTypes.UniswapV2Migrator>>
  (
    contractName: 'UniswapV2Router01',
    ...args: Parameters<GetDeployMethod<GitContractTypes.UniswapV2Router01__factory>>
  ): Promise<MockContract<GitContractTypes.UniswapV2Router01>>
}
