/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../common";

export type TokenPairStruct = {
  token1Symbol: string;
  token2Symbol: string;
  token1PriceAggregator: string;
  token2PriceAggregator: string;
  exists: boolean;
};

export type TokenPairStructOutput = [
  string,
  string,
  string,
  string,
  boolean
] & {
  token1Symbol: string;
  token2Symbol: string;
  token1PriceAggregator: string;
  token2PriceAggregator: string;
  exists: boolean;
};

export type PremiumParamsStruct = {
  A: BigNumberish;
  X0: BigNumberish;
  C: BigNumberish;
};

export type PremiumParamsStructOutput = [BigNumber, BigNumber, BigNumber] & {
  A: BigNumber;
  X0: BigNumber;
  C: BigNumber;
};

export interface TokenPairRepositoryInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MAX_PRECISION()": FunctionFragment;
    "deletePremiumsParams(string,string,uint256[])": FunctionFragment;
    "getCollateralCapComponent(string,string)": FunctionFragment;
    "getOrderedTokenPairIfExists(string,string)": FunctionFragment;
    "getPair(string,string)": FunctionFragment;
    "getPairs()": FunctionFragment;
    "getPremiumParams(string,string,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getTokenPrice(string,string,bool)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,uint8,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "priceTokenDecimals()": FunctionFragment;
    "protectionConfig()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setCollateralCapComponent(string,string,uint16)": FunctionFragment;
    "setILProtectionConfig(address)": FunctionFragment;
    "setPair(string,string,address,address)": FunctionFragment;
    "setPremiumsParams(string,string,uint256[],(int256,int256,int256)[])": FunctionFragment;
    "setPriceTokenDecimals(uint8)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokensPairs(string,string)": FunctionFragment;
    "tokensPairsCollateralCapComponents(string,string)": FunctionFragment;
    "tokensPairsList(uint256)": FunctionFragment;
    "tokensPairsPremiumParams(string,string,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_PRECISION"
      | "deletePremiumsParams"
      | "getCollateralCapComponent"
      | "getOrderedTokenPairIfExists"
      | "getPair"
      | "getPairs"
      | "getPremiumParams"
      | "getRoleAdmin"
      | "getTokenPrice"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "owner"
      | "priceTokenDecimals"
      | "protectionConfig"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "setCollateralCapComponent"
      | "setILProtectionConfig"
      | "setPair"
      | "setPremiumsParams"
      | "setPriceTokenDecimals"
      | "supportsInterface"
      | "tokensPairs"
      | "tokensPairsCollateralCapComponents"
      | "tokensPairsList"
      | "tokensPairsPremiumParams"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deletePremiumsParams",
    values: [string, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralCapComponent",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderedTokenPairIfExists",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getPairs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPremiumParams",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceTokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protectionConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralCapComponent",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setILProtectionConfig",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPair",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPremiumsParams",
    values: [string, string, BigNumberish[], PremiumParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceTokenDecimals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensPairs",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensPairsCollateralCapComponents",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensPairsList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensPairsPremiumParams",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePremiumsParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralCapComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderedTokenPairIfExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPremiumParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protectionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralCapComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setILProtectionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPremiumsParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensPairsCollateralCapComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensPairsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensPairsPremiumParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CollateralCapComponentChanged(string,string,uint16,uint16)": EventFragment;
    "ILProtectionConfigChanged(address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PairSet(tuple,tuple)": EventFragment;
    "PremiumParamsChanged(string,string,uint256,tuple,tuple)": EventFragment;
    "PremiumParamsDeleted(string,string,uint256,tuple)": EventFragment;
    "PriceTokenDecimalsChanged(uint8,uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "CollateralCapComponentChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ILProtectionConfigChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumParamsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumParamsDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceTokenDecimalsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface CollateralCapComponentChangedEventObject {
  token1Symbol: string;
  token2Symbol: string;
  prevValue: number;
  newValue: number;
}
export type CollateralCapComponentChangedEvent = TypedEvent<
  [string, string, number, number],
  CollateralCapComponentChangedEventObject
>;

export type CollateralCapComponentChangedEventFilter =
  TypedEventFilter<CollateralCapComponentChangedEvent>;

export interface ILProtectionConfigChangedEventObject {
  prevValue: string;
  newValue: string;
}
export type ILProtectionConfigChangedEvent = TypedEvent<
  [string, string],
  ILProtectionConfigChangedEventObject
>;

export type ILProtectionConfigChangedEventFilter =
  TypedEventFilter<ILProtectionConfigChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PairSetEventObject {
  prevValue: TokenPairStructOutput;
  newValue: TokenPairStructOutput;
}
export type PairSetEvent = TypedEvent<
  [TokenPairStructOutput, TokenPairStructOutput],
  PairSetEventObject
>;

export type PairSetEventFilter = TypedEventFilter<PairSetEvent>;

export interface PremiumParamsChangedEventObject {
  token1Symbol: string;
  token2Symbol: string;
  policyPeriod: BigNumber;
  prevValue: PremiumParamsStructOutput;
  newValue: PremiumParamsStructOutput;
}
export type PremiumParamsChangedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    PremiumParamsStructOutput,
    PremiumParamsStructOutput
  ],
  PremiumParamsChangedEventObject
>;

export type PremiumParamsChangedEventFilter =
  TypedEventFilter<PremiumParamsChangedEvent>;

export interface PremiumParamsDeletedEventObject {
  token1Symbol: string;
  token2Symbol: string;
  policyPeriod: BigNumber;
  deletedParams: PremiumParamsStructOutput;
}
export type PremiumParamsDeletedEvent = TypedEvent<
  [string, string, BigNumber, PremiumParamsStructOutput],
  PremiumParamsDeletedEventObject
>;

export type PremiumParamsDeletedEventFilter =
  TypedEventFilter<PremiumParamsDeletedEvent>;

export interface PriceTokenDecimalsChangedEventObject {
  prevValue: number;
  newValue: number;
}
export type PriceTokenDecimalsChangedEvent = TypedEvent<
  [number, number],
  PriceTokenDecimalsChangedEventObject
>;

export type PriceTokenDecimalsChangedEventFilter =
  TypedEventFilter<PriceTokenDecimalsChangedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TokenPairRepository extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenPairRepositoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MAX_PRECISION(overrides?: CallOverrides): Promise<[number]>;

    deletePremiumsParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriods: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCollateralCapComponent(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getOrderedTokenPairIfExists(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<[TokenPairStructOutput]>;

    getPair(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<[TokenPairStructOutput]>;

    getPairs(overrides?: CallOverrides): Promise<[TokenPairStructOutput[]]>;

    getPremiumParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PremiumParamsStructOutput]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getTokenPrice(
      _token1Symbol: string,
      _token2Symbol: string,
      _isFirstTokenPrice: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _owner: string,
      _priceTokenDecimals: BigNumberish,
      _protectionConfig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceTokenDecimals(overrides?: CallOverrides): Promise<[number]>;

    protectionConfig(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollateralCapComponent(
      _token1Symbol: string,
      _token2Symbol: string,
      _collateralCapComponent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setILProtectionConfig(
      _newInstance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPair(
      _token1Symbol: string,
      _token2Symbol: string,
      _token1PriceAggregator: string,
      _token2PriceAggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPremiumsParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriods: BigNumberish[],
      _premiumsParams: PremiumParamsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceTokenDecimals(
      _priceTokenDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokensPairs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, boolean] & {
        token1Symbol: string;
        token2Symbol: string;
        token1PriceAggregator: string;
        token2PriceAggregator: string;
        exists: boolean;
      }
    >;

    tokensPairsCollateralCapComponents(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    tokensPairsList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, boolean] & {
        token1Symbol: string;
        token2Symbol: string;
        token1PriceAggregator: string;
        token2PriceAggregator: string;
        exists: boolean;
      }
    >;

    tokensPairsPremiumParams(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        A: BigNumber;
        X0: BigNumber;
        C: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MAX_PRECISION(overrides?: CallOverrides): Promise<number>;

  deletePremiumsParams(
    _token1Symbol: string,
    _token2Symbol: string,
    _policyPeriods: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCollateralCapComponent(
    _token1Symbol: string,
    _token2Symbol: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getOrderedTokenPairIfExists(
    _token1Symbol: string,
    _token2Symbol: string,
    overrides?: CallOverrides
  ): Promise<TokenPairStructOutput>;

  getPair(
    _token1Symbol: string,
    _token2Symbol: string,
    overrides?: CallOverrides
  ): Promise<TokenPairStructOutput>;

  getPairs(overrides?: CallOverrides): Promise<TokenPairStructOutput[]>;

  getPremiumParams(
    _token1Symbol: string,
    _token2Symbol: string,
    _policyPeriod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PremiumParamsStructOutput>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getTokenPrice(
    _token1Symbol: string,
    _token2Symbol: string,
    _isFirstTokenPrice: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _owner: string,
    _priceTokenDecimals: BigNumberish,
    _protectionConfig: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceTokenDecimals(overrides?: CallOverrides): Promise<number>;

  protectionConfig(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollateralCapComponent(
    _token1Symbol: string,
    _token2Symbol: string,
    _collateralCapComponent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setILProtectionConfig(
    _newInstance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPair(
    _token1Symbol: string,
    _token2Symbol: string,
    _token1PriceAggregator: string,
    _token2PriceAggregator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPremiumsParams(
    _token1Symbol: string,
    _token2Symbol: string,
    _policyPeriods: BigNumberish[],
    _premiumsParams: PremiumParamsStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceTokenDecimals(
    _priceTokenDecimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokensPairs(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, boolean] & {
      token1Symbol: string;
      token2Symbol: string;
      token1PriceAggregator: string;
      token2PriceAggregator: string;
      exists: boolean;
    }
  >;

  tokensPairsCollateralCapComponents(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<number>;

  tokensPairsList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, boolean] & {
      token1Symbol: string;
      token2Symbol: string;
      token1PriceAggregator: string;
      token2PriceAggregator: string;
      exists: boolean;
    }
  >;

  tokensPairsPremiumParams(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      A: BigNumber;
      X0: BigNumber;
      C: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MAX_PRECISION(overrides?: CallOverrides): Promise<number>;

    deletePremiumsParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriods: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getCollateralCapComponent(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getOrderedTokenPairIfExists(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<TokenPairStructOutput>;

    getPair(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<TokenPairStructOutput>;

    getPairs(overrides?: CallOverrides): Promise<TokenPairStructOutput[]>;

    getPremiumParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PremiumParamsStructOutput>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getTokenPrice(
      _token1Symbol: string,
      _token2Symbol: string,
      _isFirstTokenPrice: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _owner: string,
      _priceTokenDecimals: BigNumberish,
      _protectionConfig: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceTokenDecimals(overrides?: CallOverrides): Promise<number>;

    protectionConfig(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralCapComponent(
      _token1Symbol: string,
      _token2Symbol: string,
      _collateralCapComponent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setILProtectionConfig(
      _newInstance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPair(
      _token1Symbol: string,
      _token2Symbol: string,
      _token1PriceAggregator: string,
      _token2PriceAggregator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPremiumsParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriods: BigNumberish[],
      _premiumsParams: PremiumParamsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceTokenDecimals(
      _priceTokenDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokensPairs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, boolean] & {
        token1Symbol: string;
        token2Symbol: string;
        token1PriceAggregator: string;
        token2PriceAggregator: string;
        exists: boolean;
      }
    >;

    tokensPairsCollateralCapComponents(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<number>;

    tokensPairsList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, boolean] & {
        token1Symbol: string;
        token2Symbol: string;
        token1PriceAggregator: string;
        token2PriceAggregator: string;
        exists: boolean;
      }
    >;

    tokensPairsPremiumParams(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        A: BigNumber;
        X0: BigNumber;
        C: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CollateralCapComponentChanged(string,string,uint16,uint16)"(
      token1Symbol?: null,
      token2Symbol?: null,
      prevValue?: null,
      newValue?: null
    ): CollateralCapComponentChangedEventFilter;
    CollateralCapComponentChanged(
      token1Symbol?: null,
      token2Symbol?: null,
      prevValue?: null,
      newValue?: null
    ): CollateralCapComponentChangedEventFilter;

    "ILProtectionConfigChanged(address,address)"(
      prevValue?: null,
      newValue?: null
    ): ILProtectionConfigChangedEventFilter;
    ILProtectionConfigChanged(
      prevValue?: null,
      newValue?: null
    ): ILProtectionConfigChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PairSet(tuple,tuple)"(
      prevValue?: null,
      newValue?: null
    ): PairSetEventFilter;
    PairSet(prevValue?: null, newValue?: null): PairSetEventFilter;

    "PremiumParamsChanged(string,string,uint256,tuple,tuple)"(
      token1Symbol?: null,
      token2Symbol?: null,
      policyPeriod?: null,
      prevValue?: null,
      newValue?: null
    ): PremiumParamsChangedEventFilter;
    PremiumParamsChanged(
      token1Symbol?: null,
      token2Symbol?: null,
      policyPeriod?: null,
      prevValue?: null,
      newValue?: null
    ): PremiumParamsChangedEventFilter;

    "PremiumParamsDeleted(string,string,uint256,tuple)"(
      token1Symbol?: null,
      token2Symbol?: null,
      policyPeriod?: null,
      deletedParams?: null
    ): PremiumParamsDeletedEventFilter;
    PremiumParamsDeleted(
      token1Symbol?: null,
      token2Symbol?: null,
      policyPeriod?: null,
      deletedParams?: null
    ): PremiumParamsDeletedEventFilter;

    "PriceTokenDecimalsChanged(uint8,uint8)"(
      prevValue?: null,
      newValue?: null
    ): PriceTokenDecimalsChangedEventFilter;
    PriceTokenDecimalsChanged(
      prevValue?: null,
      newValue?: null
    ): PriceTokenDecimalsChangedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    deletePremiumsParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriods: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCollateralCapComponent(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderedTokenPairIfExists(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPair(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairs(overrides?: CallOverrides): Promise<BigNumber>;

    getPremiumParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPrice(
      _token1Symbol: string,
      _token2Symbol: string,
      _isFirstTokenPrice: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _priceTokenDecimals: BigNumberish,
      _protectionConfig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceTokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    protectionConfig(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollateralCapComponent(
      _token1Symbol: string,
      _token2Symbol: string,
      _collateralCapComponent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setILProtectionConfig(
      _newInstance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPair(
      _token1Symbol: string,
      _token2Symbol: string,
      _token1PriceAggregator: string,
      _token2PriceAggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPremiumsParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriods: BigNumberish[],
      _premiumsParams: PremiumParamsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceTokenDecimals(
      _priceTokenDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensPairs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensPairsCollateralCapComponents(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensPairsList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensPairsPremiumParams(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deletePremiumsParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriods: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCollateralCapComponent(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderedTokenPairIfExists(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPair(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPremiumParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenPrice(
      _token1Symbol: string,
      _token2Symbol: string,
      _isFirstTokenPrice: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _priceTokenDecimals: BigNumberish,
      _protectionConfig: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceTokenDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protectionConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralCapComponent(
      _token1Symbol: string,
      _token2Symbol: string,
      _collateralCapComponent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setILProtectionConfig(
      _newInstance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPair(
      _token1Symbol: string,
      _token2Symbol: string,
      _token1PriceAggregator: string,
      _token2PriceAggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPremiumsParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriods: BigNumberish[],
      _premiumsParams: PremiumParamsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceTokenDecimals(
      _priceTokenDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensPairs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensPairsCollateralCapComponents(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensPairsList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensPairsPremiumParams(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
