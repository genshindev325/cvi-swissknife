/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../../common";

export type PremiumParamsStruct = {
  A: BigNumberish;
  X0: BigNumberish;
  C: BigNumberish;
};

export type PremiumParamsStructOutput = [BigNumber, BigNumber, BigNumber] & {
  A: BigNumber;
  X0: BigNumber;
  C: BigNumber;
};

export interface ILProtectionControllerInterfaceInterface
  extends utils.Interface {
  functions: {
    "addLiquidity(uint256)": FunctionFragment;
    "buyProtection(string,string,uint256,uint256,uint256)": FunctionFragment;
    "calcAmountToBePaid(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calcAmountToBePaidWithProtectionId(uint256)": FunctionFragment;
    "calcEstimatedAmountToBePaid(uint256,uint16,uint16)": FunctionFragment;
    "calcMaxValueOfTokensWorthToProtect(string,string)": FunctionFragment;
    "calculateFee(uint256,uint16)": FunctionFragment;
    "calculateIL(uint256,uint256,uint256,uint256)": FunctionFragment;
    "calculateOpenProtectionIL(uint256)": FunctionFragment;
    "calculateParameterizedPremium(uint256,uint256,uint16,uint256,uint16,(int256,int256,int256),uint256,uint256,uint256)": FunctionFragment;
    "calculatePremiumDetailsAndMaxAmountToBePaid(address,string,string,uint256,uint256)": FunctionFragment;
    "checkUpkeep(bytes)": FunctionFragment;
    "closeProtections(uint256[])": FunctionFragment;
    "collateral()": FunctionFragment;
    "cumulativeSumLPTokensWorthAtBuyTimeUSD()": FunctionFragment;
    "cviOracle()": FunctionFragment;
    "getFinalizedProtectionsIds()": FunctionFragment;
    "liquidityController()": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
    "protectionConfig()": FunctionFragment;
    "protectionDiscountNFTController()": FunctionFragment;
    "protectionNFT()": FunctionFragment;
    "setILProtectionDiscountNFTController(address)": FunctionFragment;
    "setMaxILProtected(uint16)": FunctionFragment;
    "setMaxProtectionsInUpkeep(uint8)": FunctionFragment;
    "tokenPairRepository()": FunctionFragment;
    "totalLPTokensWorthAtBuyTimeUSD()": FunctionFragment;
    "withdrawLiquidity(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLiquidity"
      | "buyProtection"
      | "calcAmountToBePaid"
      | "calcAmountToBePaidWithProtectionId"
      | "calcEstimatedAmountToBePaid"
      | "calcMaxValueOfTokensWorthToProtect"
      | "calculateFee"
      | "calculateIL"
      | "calculateOpenProtectionIL"
      | "calculateParameterizedPremium"
      | "calculatePremiumDetailsAndMaxAmountToBePaid"
      | "checkUpkeep"
      | "closeProtections"
      | "collateral"
      | "cumulativeSumLPTokensWorthAtBuyTimeUSD"
      | "cviOracle"
      | "getFinalizedProtectionsIds"
      | "liquidityController"
      | "performUpkeep"
      | "protectionConfig"
      | "protectionDiscountNFTController"
      | "protectionNFT"
      | "setILProtectionDiscountNFTController"
      | "setMaxILProtected"
      | "setMaxProtectionsInUpkeep"
      | "tokenPairRepository"
      | "totalLPTokensWorthAtBuyTimeUSD"
      | "withdrawLiquidity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyProtection",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcAmountToBePaid",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcAmountToBePaidWithProtectionId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcEstimatedAmountToBePaid",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcMaxValueOfTokensWorthToProtect",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateIL",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOpenProtectionIL",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateParameterizedPremium",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      PremiumParamsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePremiumDetailsAndMaxAmountToBePaid",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeProtections",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeSumLPTokensWorthAtBuyTimeUSD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cviOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFinalizedProtectionsIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protectionConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protectionDiscountNFTController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protectionNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setILProtectionDiscountNFTController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxILProtected",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxProtectionsInUpkeep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPairRepository",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLPTokensWorthAtBuyTimeUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyProtection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcAmountToBePaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcAmountToBePaidWithProtectionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcEstimatedAmountToBePaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcMaxValueOfTokensWorthToProtect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateIL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateOpenProtectionIL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateParameterizedPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePremiumDetailsAndMaxAmountToBePaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeProtections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeSumLPTokensWorthAtBuyTimeUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cviOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFinalizedProtectionsIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protectionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protectionDiscountNFTController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protectionNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setILProtectionDiscountNFTController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxILProtected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxProtectionsInUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPairRepository",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLPTokensWorthAtBuyTimeUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;

  events: {
    "CollateralUpdated(string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ILProtectionDiscountNFTControllerChanged(address,address)": EventFragment;
    "MaxProtectionsInUpkeepChanged(uint256,uint256)": EventFragment;
    "ProtectionBought(uint256,address,uint256,uint256,uint256,string,string,uint256,uint256,uint256,uint256)": EventFragment;
    "ProtectionClosed(uint256,uint256,address,uint256,uint256,uint256,string,string,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollateralUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ILProtectionDiscountNFTControllerChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxProtectionsInUpkeepChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtectionBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtectionClosed"): EventFragment;
}

export interface CollateralUpdatedEventObject {
  token1Symbol: string;
  token2Symbol: string;
  protectionId: BigNumber;
  prevPairCollateral: BigNumber;
  newPairCollateral: BigNumber;
  prevCollateral: BigNumber;
  newCollateral: BigNumber;
  prevLiquidity: BigNumber;
  newLiquidity: BigNumber;
}
export type CollateralUpdatedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  CollateralUpdatedEventObject
>;

export type CollateralUpdatedEventFilter =
  TypedEventFilter<CollateralUpdatedEvent>;

export interface ILProtectionDiscountNFTControllerChangedEventObject {
  prevValue: string;
  newValue: string;
}
export type ILProtectionDiscountNFTControllerChangedEvent = TypedEvent<
  [string, string],
  ILProtectionDiscountNFTControllerChangedEventObject
>;

export type ILProtectionDiscountNFTControllerChangedEventFilter =
  TypedEventFilter<ILProtectionDiscountNFTControllerChangedEvent>;

export interface MaxProtectionsInUpkeepChangedEventObject {
  prevValue: BigNumber;
  newValue: BigNumber;
}
export type MaxProtectionsInUpkeepChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MaxProtectionsInUpkeepChangedEventObject
>;

export type MaxProtectionsInUpkeepChangedEventFilter =
  TypedEventFilter<MaxProtectionsInUpkeepChangedEvent>;

export interface ProtectionBoughtEventObject {
  id: BigNumber;
  owner: string;
  protectionStartTimestamp: BigNumber;
  protectionEndTimestamp: BigNumber;
  premiumCostUSD: BigNumber;
  token1Symbol: string;
  token2Symbol: string;
  policyPeriod: BigNumber;
  token1EntryPriceUSD: BigNumber;
  token2EntryPriceUSD: BigNumber;
  collateral: BigNumber;
}
export type ProtectionBoughtEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  ProtectionBoughtEventObject
>;

export type ProtectionBoughtEventFilter =
  TypedEventFilter<ProtectionBoughtEvent>;

export interface ProtectionClosedEventObject {
  amountPaidUSD: BigNumber;
  id: BigNumber;
  owner: string;
  protectionStartTimestamp: BigNumber;
  protectionEndTimestamp: BigNumber;
  premiumCostUSD: BigNumber;
  token1Symbol: string;
  token2Symbol: string;
  policyPeriod: BigNumber;
  token1EndPriceUSD: BigNumber;
  token2EndPriceUSD: BigNumber;
  collateral: BigNumber;
}
export type ProtectionClosedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  ProtectionClosedEventObject
>;

export type ProtectionClosedEventFilter =
  TypedEventFilter<ProtectionClosedEvent>;

export interface ILProtectionControllerInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILProtectionControllerInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyProtection(
      _token1Symbol: string,
      _token2Symbol: string,
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _maxPremiumCostUSD: BigNumberish,
      _policyPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcAmountToBePaid(
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _token1EntryPrice: BigNumberish,
      _token2EntryPrice: BigNumberish,
      _token1EndPrice: BigNumberish,
      _token2EndPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcAmountToBePaidWithProtectionId(
      _protectionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcEstimatedAmountToBePaid(
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _expectedLPTokensValueGrowth: BigNumberish,
      _impermanentLoss: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcMaxValueOfTokensWorthToProtect(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateFee(
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _feeComponent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateIL(
      _token1EntryPriceUSD: BigNumberish,
      _token2EntryPriceUSD: BigNumberish,
      _token1EndPriceUSD: BigNumberish,
      _token2EndPriceUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    calculateOpenProtectionIL(
      _protectionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    calculateParameterizedPremium(
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _totalLPTokensWorthAtBuyTimeUSD: BigNumberish,
      _expectedLPTokensValueGrowth: BigNumberish,
      _liquidity: BigNumberish,
      _impermanentLoss: BigNumberish,
      _premiumParams: PremiumParamsStruct,
      _cvi: BigNumberish,
      _initialGlobalPremiumParam: BigNumberish,
      _maxGlobalPremiumParam: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculatePremiumDetailsAndMaxAmountToBePaid(
      _buyer: string,
      _token1Symbol: string,
      _token2Symbol: string,
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _policyPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number]>;

    checkUpkeep(
      _checkData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    closeProtections(
      _protectionsIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    cumulativeSumLPTokensWorthAtBuyTimeUSD(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cviOracle(overrides?: CallOverrides): Promise<[string]>;

    getFinalizedProtectionsIds(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    liquidityController(overrides?: CallOverrides): Promise<[string]>;

    performUpkeep(
      _performData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protectionConfig(overrides?: CallOverrides): Promise<[string]>;

    protectionDiscountNFTController(
      overrides?: CallOverrides
    ): Promise<[string]>;

    protectionNFT(overrides?: CallOverrides): Promise<[string]>;

    setILProtectionDiscountNFTController(
      _newInstance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxILProtected(
      _maxILProtected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxProtectionsInUpkeep(
      _maxProtectionsInUpkeep: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenPairRepository(overrides?: CallOverrides): Promise<[string]>;

    totalLPTokensWorthAtBuyTimeUSD(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawLiquidity(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyProtection(
    _token1Symbol: string,
    _token2Symbol: string,
    _lpTokensWorthAtBuyTimeUSD: BigNumberish,
    _maxPremiumCostUSD: BigNumberish,
    _policyPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcAmountToBePaid(
    _lpTokensWorthAtBuyTimeUSD: BigNumberish,
    _token1EntryPrice: BigNumberish,
    _token2EntryPrice: BigNumberish,
    _token1EndPrice: BigNumberish,
    _token2EndPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcAmountToBePaidWithProtectionId(
    _protectionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcEstimatedAmountToBePaid(
    _lpTokensWorthAtBuyTimeUSD: BigNumberish,
    _expectedLPTokensValueGrowth: BigNumberish,
    _impermanentLoss: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcMaxValueOfTokensWorthToProtect(
    _token1Symbol: string,
    _token2Symbol: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateFee(
    _lpTokensWorthAtBuyTimeUSD: BigNumberish,
    _feeComponent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateIL(
    _token1EntryPriceUSD: BigNumberish,
    _token2EntryPriceUSD: BigNumberish,
    _token1EndPriceUSD: BigNumberish,
    _token2EndPriceUSD: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  calculateOpenProtectionIL(
    _protectionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  calculateParameterizedPremium(
    _lpTokensWorthAtBuyTimeUSD: BigNumberish,
    _totalLPTokensWorthAtBuyTimeUSD: BigNumberish,
    _expectedLPTokensValueGrowth: BigNumberish,
    _liquidity: BigNumberish,
    _impermanentLoss: BigNumberish,
    _premiumParams: PremiumParamsStruct,
    _cvi: BigNumberish,
    _initialGlobalPremiumParam: BigNumberish,
    _maxGlobalPremiumParam: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePremiumDetailsAndMaxAmountToBePaid(
    _buyer: string,
    _token1Symbol: string,
    _token2Symbol: string,
    _lpTokensWorthAtBuyTimeUSD: BigNumberish,
    _policyPeriod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number]>;

  checkUpkeep(
    _checkData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string] & { upkeepNeeded: boolean; performData: string }
  >;

  closeProtections(
    _protectionsIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateral(overrides?: CallOverrides): Promise<BigNumber>;

  cumulativeSumLPTokensWorthAtBuyTimeUSD(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cviOracle(overrides?: CallOverrides): Promise<string>;

  getFinalizedProtectionsIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  liquidityController(overrides?: CallOverrides): Promise<string>;

  performUpkeep(
    _performData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protectionConfig(overrides?: CallOverrides): Promise<string>;

  protectionDiscountNFTController(overrides?: CallOverrides): Promise<string>;

  protectionNFT(overrides?: CallOverrides): Promise<string>;

  setILProtectionDiscountNFTController(
    _newInstance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxILProtected(
    _maxILProtected: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxProtectionsInUpkeep(
    _maxProtectionsInUpkeep: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenPairRepository(overrides?: CallOverrides): Promise<string>;

  totalLPTokensWorthAtBuyTimeUSD(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawLiquidity(
    _amount: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyProtection(
      _token1Symbol: string,
      _token2Symbol: string,
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _maxPremiumCostUSD: BigNumberish,
      _policyPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calcAmountToBePaid(
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _token1EntryPrice: BigNumberish,
      _token2EntryPrice: BigNumberish,
      _token1EndPrice: BigNumberish,
      _token2EndPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcAmountToBePaidWithProtectionId(
      _protectionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcEstimatedAmountToBePaid(
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _expectedLPTokensValueGrowth: BigNumberish,
      _impermanentLoss: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcMaxValueOfTokensWorthToProtect(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateFee(
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _feeComponent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateIL(
      _token1EntryPriceUSD: BigNumberish,
      _token2EntryPriceUSD: BigNumberish,
      _token1EndPriceUSD: BigNumberish,
      _token2EndPriceUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    calculateOpenProtectionIL(
      _protectionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    calculateParameterizedPremium(
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _totalLPTokensWorthAtBuyTimeUSD: BigNumberish,
      _expectedLPTokensValueGrowth: BigNumberish,
      _liquidity: BigNumberish,
      _impermanentLoss: BigNumberish,
      _premiumParams: PremiumParamsStruct,
      _cvi: BigNumberish,
      _initialGlobalPremiumParam: BigNumberish,
      _maxGlobalPremiumParam: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePremiumDetailsAndMaxAmountToBePaid(
      _buyer: string,
      _token1Symbol: string,
      _token2Symbol: string,
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _policyPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number]>;

    checkUpkeep(
      _checkData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    closeProtections(
      _protectionsIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeSumLPTokensWorthAtBuyTimeUSD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cviOracle(overrides?: CallOverrides): Promise<string>;

    getFinalizedProtectionsIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    liquidityController(overrides?: CallOverrides): Promise<string>;

    performUpkeep(
      _performData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    protectionConfig(overrides?: CallOverrides): Promise<string>;

    protectionDiscountNFTController(overrides?: CallOverrides): Promise<string>;

    protectionNFT(overrides?: CallOverrides): Promise<string>;

    setILProtectionDiscountNFTController(
      _newInstance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxILProtected(
      _maxILProtected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxProtectionsInUpkeep(
      _maxProtectionsInUpkeep: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenPairRepository(overrides?: CallOverrides): Promise<string>;

    totalLPTokensWorthAtBuyTimeUSD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawLiquidity(
      _amount: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CollateralUpdated(string,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      token1Symbol?: null,
      token2Symbol?: null,
      protectionId?: null,
      prevPairCollateral?: null,
      newPairCollateral?: null,
      prevCollateral?: null,
      newCollateral?: null,
      prevLiquidity?: null,
      newLiquidity?: null
    ): CollateralUpdatedEventFilter;
    CollateralUpdated(
      token1Symbol?: null,
      token2Symbol?: null,
      protectionId?: null,
      prevPairCollateral?: null,
      newPairCollateral?: null,
      prevCollateral?: null,
      newCollateral?: null,
      prevLiquidity?: null,
      newLiquidity?: null
    ): CollateralUpdatedEventFilter;

    "ILProtectionDiscountNFTControllerChanged(address,address)"(
      prevValue?: null,
      newValue?: null
    ): ILProtectionDiscountNFTControllerChangedEventFilter;
    ILProtectionDiscountNFTControllerChanged(
      prevValue?: null,
      newValue?: null
    ): ILProtectionDiscountNFTControllerChangedEventFilter;

    "MaxProtectionsInUpkeepChanged(uint256,uint256)"(
      prevValue?: null,
      newValue?: null
    ): MaxProtectionsInUpkeepChangedEventFilter;
    MaxProtectionsInUpkeepChanged(
      prevValue?: null,
      newValue?: null
    ): MaxProtectionsInUpkeepChangedEventFilter;

    "ProtectionBought(uint256,address,uint256,uint256,uint256,string,string,uint256,uint256,uint256,uint256)"(
      id?: BigNumberish | null,
      owner?: string | null,
      protectionStartTimestamp?: null,
      protectionEndTimestamp?: null,
      premiumCostUSD?: null,
      token1Symbol?: null,
      token2Symbol?: null,
      policyPeriod?: null,
      token1EntryPriceUSD?: null,
      token2EntryPriceUSD?: null,
      collateral?: null
    ): ProtectionBoughtEventFilter;
    ProtectionBought(
      id?: BigNumberish | null,
      owner?: string | null,
      protectionStartTimestamp?: null,
      protectionEndTimestamp?: null,
      premiumCostUSD?: null,
      token1Symbol?: null,
      token2Symbol?: null,
      policyPeriod?: null,
      token1EntryPriceUSD?: null,
      token2EntryPriceUSD?: null,
      collateral?: null
    ): ProtectionBoughtEventFilter;

    "ProtectionClosed(uint256,uint256,address,uint256,uint256,uint256,string,string,uint256,uint256,uint256,uint256)"(
      amountPaidUSD?: null,
      id?: BigNumberish | null,
      owner?: string | null,
      protectionStartTimestamp?: null,
      protectionEndTimestamp?: null,
      premiumCostUSD?: null,
      token1Symbol?: null,
      token2Symbol?: null,
      policyPeriod?: null,
      token1EndPriceUSD?: null,
      token2EndPriceUSD?: null,
      collateral?: null
    ): ProtectionClosedEventFilter;
    ProtectionClosed(
      amountPaidUSD?: null,
      id?: BigNumberish | null,
      owner?: string | null,
      protectionStartTimestamp?: null,
      protectionEndTimestamp?: null,
      premiumCostUSD?: null,
      token1Symbol?: null,
      token2Symbol?: null,
      policyPeriod?: null,
      token1EndPriceUSD?: null,
      token2EndPriceUSD?: null,
      collateral?: null
    ): ProtectionClosedEventFilter;
  };

  estimateGas: {
    addLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyProtection(
      _token1Symbol: string,
      _token2Symbol: string,
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _maxPremiumCostUSD: BigNumberish,
      _policyPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcAmountToBePaid(
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _token1EntryPrice: BigNumberish,
      _token2EntryPrice: BigNumberish,
      _token1EndPrice: BigNumberish,
      _token2EndPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcAmountToBePaidWithProtectionId(
      _protectionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcEstimatedAmountToBePaid(
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _expectedLPTokensValueGrowth: BigNumberish,
      _impermanentLoss: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcMaxValueOfTokensWorthToProtect(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateFee(
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _feeComponent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateIL(
      _token1EntryPriceUSD: BigNumberish,
      _token2EntryPriceUSD: BigNumberish,
      _token1EndPriceUSD: BigNumberish,
      _token2EndPriceUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateOpenProtectionIL(
      _protectionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateParameterizedPremium(
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _totalLPTokensWorthAtBuyTimeUSD: BigNumberish,
      _expectedLPTokensValueGrowth: BigNumberish,
      _liquidity: BigNumberish,
      _impermanentLoss: BigNumberish,
      _premiumParams: PremiumParamsStruct,
      _cvi: BigNumberish,
      _initialGlobalPremiumParam: BigNumberish,
      _maxGlobalPremiumParam: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePremiumDetailsAndMaxAmountToBePaid(
      _buyer: string,
      _token1Symbol: string,
      _token2Symbol: string,
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _policyPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkUpkeep(
      _checkData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeProtections(
      _protectionsIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeSumLPTokensWorthAtBuyTimeUSD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cviOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getFinalizedProtectionsIds(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityController(overrides?: CallOverrides): Promise<BigNumber>;

    performUpkeep(
      _performData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protectionConfig(overrides?: CallOverrides): Promise<BigNumber>;

    protectionDiscountNFTController(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protectionNFT(overrides?: CallOverrides): Promise<BigNumber>;

    setILProtectionDiscountNFTController(
      _newInstance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxILProtected(
      _maxILProtected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxProtectionsInUpkeep(
      _maxProtectionsInUpkeep: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenPairRepository(overrides?: CallOverrides): Promise<BigNumber>;

    totalLPTokensWorthAtBuyTimeUSD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawLiquidity(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyProtection(
      _token1Symbol: string,
      _token2Symbol: string,
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _maxPremiumCostUSD: BigNumberish,
      _policyPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcAmountToBePaid(
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _token1EntryPrice: BigNumberish,
      _token2EntryPrice: BigNumberish,
      _token1EndPrice: BigNumberish,
      _token2EndPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcAmountToBePaidWithProtectionId(
      _protectionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcEstimatedAmountToBePaid(
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _expectedLPTokensValueGrowth: BigNumberish,
      _impermanentLoss: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcMaxValueOfTokensWorthToProtect(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateFee(
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _feeComponent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateIL(
      _token1EntryPriceUSD: BigNumberish,
      _token2EntryPriceUSD: BigNumberish,
      _token1EndPriceUSD: BigNumberish,
      _token2EndPriceUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateOpenProtectionIL(
      _protectionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateParameterizedPremium(
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _totalLPTokensWorthAtBuyTimeUSD: BigNumberish,
      _expectedLPTokensValueGrowth: BigNumberish,
      _liquidity: BigNumberish,
      _impermanentLoss: BigNumberish,
      _premiumParams: PremiumParamsStruct,
      _cvi: BigNumberish,
      _initialGlobalPremiumParam: BigNumberish,
      _maxGlobalPremiumParam: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePremiumDetailsAndMaxAmountToBePaid(
      _buyer: string,
      _token1Symbol: string,
      _token2Symbol: string,
      _lpTokensWorthAtBuyTimeUSD: BigNumberish,
      _policyPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkUpkeep(
      _checkData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeProtections(
      _protectionsIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cumulativeSumLPTokensWorthAtBuyTimeUSD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cviOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFinalizedProtectionsIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performUpkeep(
      _performData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protectionConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protectionDiscountNFTController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protectionNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setILProtectionDiscountNFTController(
      _newInstance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxILProtected(
      _maxILProtected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxProtectionsInUpkeep(
      _maxProtectionsInUpkeep: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenPairRepository(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLPTokensWorthAtBuyTimeUSD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawLiquidity(
      _amount: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
