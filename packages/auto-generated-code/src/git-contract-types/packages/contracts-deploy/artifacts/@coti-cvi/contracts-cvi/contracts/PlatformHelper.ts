/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../common";

export declare namespace IPlatformHelper {
  export type PreBurnResultStruct = {
    netBurnAmount: BigNumberish;
    expectedUSDCAmount: BigNumberish;
    closeFee: BigNumberish;
    timeWindowFee: BigNumberish;
    keepersFee: BigNumberish;
  };

  export type PreBurnResultStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    netBurnAmount: BigNumber;
    expectedUSDCAmount: BigNumber;
    closeFee: BigNumber;
    timeWindowFee: BigNumber;
    keepersFee: BigNumber;
  };

  export type PreMintResultStruct = {
    netMintAmount: BigNumberish;
    expectedVolTokensAmount: BigNumberish;
    buyingPremiumFeePercentage: BigNumberish;
    openPositionFee: BigNumberish;
    buyingPremiumFee: BigNumberish;
    timeWindowFee: BigNumberish;
    keepersFee: BigNumberish;
  };

  export type PreMintResultStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    netMintAmount: BigNumber;
    expectedVolTokensAmount: BigNumber;
    buyingPremiumFeePercentage: BigNumber;
    openPositionFee: BigNumber;
    buyingPremiumFee: BigNumber;
    timeWindowFee: BigNumber;
    keepersFee: BigNumber;
  };

  export type CheckBurnResultStruct = {
    netBurnAmount: BigNumberish;
    expectedUSDCAmount: BigNumberish;
    closeFee: BigNumberish;
    timePenaltyFee: BigNumberish;
    keepersFee: BigNumberish;
  };

  export type CheckBurnResultStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    netBurnAmount: BigNumber;
    expectedUSDCAmount: BigNumber;
    closeFee: BigNumber;
    timePenaltyFee: BigNumber;
    keepersFee: BigNumber;
  };

  export type CheckMintResultStruct = {
    netMintAmount: BigNumberish;
    expectedVolTokensAmount: BigNumberish;
    buyingPremiumFeePercentage: BigNumberish;
    openPositionFee: BigNumberish;
    buyingPremiumFee: BigNumberish;
    timePenaltyFee: BigNumberish;
    keepersFee: BigNumberish;
    insufficientLiquidity: boolean;
    insufficientSlippage: boolean;
  };

  export type CheckMintResultStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    netMintAmount: BigNumber;
    expectedVolTokensAmount: BigNumber;
    buyingPremiumFeePercentage: BigNumber;
    openPositionFee: BigNumber;
    buyingPremiumFee: BigNumber;
    timePenaltyFee: BigNumber;
    keepersFee: BigNumber;
    insufficientLiquidity: boolean;
    insufficientSlippage: boolean;
  };
}

export interface PlatformHelperInterface extends utils.Interface {
  functions: {
    "calculatePreBurn(address,bool,uint256,uint256)": FunctionFragment;
    "calculatePreMint(address,bool,uint256,uint256)": FunctionFragment;
    "calculateStakingAPR()": FunctionFragment;
    "checkBurnRequest(address,uint256,bool)": FunctionFragment;
    "checkMintRequest(address,uint256,bool)": FunctionFragment;
    "collateralRatio(address)": FunctionFragment;
    "convertGOVIToXGOVI(uint256)": FunctionFragment;
    "convertXGOVIToGOVI(uint256)": FunctionFragment;
    "dailyFundingFee(address)": FunctionFragment;
    "fundingFeeValues(address,uint32,uint32,uint256,uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "maxMintAmount(address)": FunctionFragment;
    "maxWithdrawAmount(address)": FunctionFragment;
    "premiumFeeCollateralRatio(address)": FunctionFragment;
    "stakedGOVI(address)": FunctionFragment;
    "volTokenDexPrice(address)": FunctionFragment;
    "volTokenIntrinsicPrice(address)": FunctionFragment;
    "willWithdrawSucceed(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculatePreBurn"
      | "calculatePreMint"
      | "calculateStakingAPR"
      | "checkBurnRequest"
      | "checkMintRequest"
      | "collateralRatio"
      | "convertGOVIToXGOVI"
      | "convertXGOVIToGOVI"
      | "dailyFundingFee"
      | "fundingFeeValues"
      | "initialize"
      | "maxMintAmount"
      | "maxWithdrawAmount"
      | "premiumFeeCollateralRatio"
      | "stakedGOVI"
      | "volTokenDexPrice"
      | "volTokenIntrinsicPrice"
      | "willWithdrawSucceed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculatePreBurn",
    values: [string, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePreMint",
    values: [string, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateStakingAPR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkBurnRequest",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMintRequest",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralRatio",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "convertGOVIToXGOVI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertXGOVIToGOVI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyFundingFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fundingFeeValues",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMintAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWithdrawAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "premiumFeeCollateralRatio",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stakedGOVI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "volTokenDexPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "volTokenIntrinsicPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "willWithdrawSucceed",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculatePreBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePreMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateStakingAPR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBurnRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkMintRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertGOVIToXGOVI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertXGOVIToGOVI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyFundingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingFeeValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxMintAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "premiumFeeCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakedGOVI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "volTokenDexPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "volTokenIntrinsicPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "willWithdrawSucceed",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PlatformHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PlatformHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculatePreBurn(
      _volToken: string,
      _isKeepers: boolean,
      _volTokensAmount: BigNumberish,
      _timeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IPlatformHelper.PreBurnResultStructOutput] & {
        result: IPlatformHelper.PreBurnResultStructOutput;
      }
    >;

    calculatePreMint(
      _volToken: string,
      _isKeepers: boolean,
      _usdcAmount: BigNumberish,
      _timeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IPlatformHelper.PreMintResultStructOutput] & {
        result: IPlatformHelper.PreMintResultStructOutput;
      }
    >;

    calculateStakingAPR(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { apr: BigNumber }>;

    checkBurnRequest(
      _volToken: string,
      _requestId: BigNumberish,
      _isKeepers: boolean,
      overrides?: CallOverrides
    ): Promise<
      [IPlatformHelper.CheckBurnResultStructOutput] & {
        result: IPlatformHelper.CheckBurnResultStructOutput;
      }
    >;

    checkMintRequest(
      _volToken: string,
      _requestId: BigNumberish,
      _isKeepers: boolean,
      overrides?: CallOverrides
    ): Promise<
      [IPlatformHelper.CheckMintResultStructOutput] & {
        result: IPlatformHelper.CheckMintResultStructOutput;
      }
    >;

    collateralRatio(
      _platform: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertGOVIToXGOVI(
      _goviAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { xGOVIAmount: BigNumber }>;

    convertXGOVIToGOVI(
      _xGOVIAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { goviAmount: BigNumber }>;

    dailyFundingFee(
      _platform: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fundingFeePercent: BigNumber }>;

    fundingFeeValues(
      _platform: string,
      _minCVI: BigNumberish,
      _maxCVI: BigNumberish,
      _minCollateral: BigNumberish,
      _maxCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[][]] & { fundingFeeRatePercent: BigNumber[][] }>;

    initialize(
      _govi: string,
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxMintAmount(
      _volToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxAmount: BigNumber }>;

    maxWithdrawAmount(
      _thetaVault: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        maxAmount: BigNumber;
        maxUSDCAmount: BigNumber;
      }
    >;

    premiumFeeCollateralRatio(
      _platform: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakedGOVI(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { stakedAmount: BigNumber; share: BigNumber }
    >;

    volTokenDexPrice(
      _thetaVault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    volTokenIntrinsicPrice(
      _volToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    willWithdrawSucceed(
      _thetaVault: string,
      _withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { success: boolean }>;
  };

  calculatePreBurn(
    _volToken: string,
    _isKeepers: boolean,
    _volTokensAmount: BigNumberish,
    _timeWindow: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IPlatformHelper.PreBurnResultStructOutput>;

  calculatePreMint(
    _volToken: string,
    _isKeepers: boolean,
    _usdcAmount: BigNumberish,
    _timeWindow: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IPlatformHelper.PreMintResultStructOutput>;

  calculateStakingAPR(overrides?: CallOverrides): Promise<BigNumber>;

  checkBurnRequest(
    _volToken: string,
    _requestId: BigNumberish,
    _isKeepers: boolean,
    overrides?: CallOverrides
  ): Promise<IPlatformHelper.CheckBurnResultStructOutput>;

  checkMintRequest(
    _volToken: string,
    _requestId: BigNumberish,
    _isKeepers: boolean,
    overrides?: CallOverrides
  ): Promise<IPlatformHelper.CheckMintResultStructOutput>;

  collateralRatio(
    _platform: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertGOVIToXGOVI(
    _goviAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertXGOVIToGOVI(
    _xGOVIAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dailyFundingFee(
    _platform: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fundingFeeValues(
    _platform: string,
    _minCVI: BigNumberish,
    _maxCVI: BigNumberish,
    _minCollateral: BigNumberish,
    _maxCollateral: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[][]>;

  initialize(
    _govi: string,
    _staking: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxMintAmount(
    _volToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxWithdrawAmount(
    _thetaVault: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { maxAmount: BigNumber; maxUSDCAmount: BigNumber }
  >;

  premiumFeeCollateralRatio(
    _platform: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakedGOVI(
    _account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { stakedAmount: BigNumber; share: BigNumber }
  >;

  volTokenDexPrice(
    _thetaVault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  volTokenIntrinsicPrice(
    _volToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  willWithdrawSucceed(
    _thetaVault: string,
    _withdrawAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    calculatePreBurn(
      _volToken: string,
      _isKeepers: boolean,
      _volTokensAmount: BigNumberish,
      _timeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IPlatformHelper.PreBurnResultStructOutput>;

    calculatePreMint(
      _volToken: string,
      _isKeepers: boolean,
      _usdcAmount: BigNumberish,
      _timeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IPlatformHelper.PreMintResultStructOutput>;

    calculateStakingAPR(overrides?: CallOverrides): Promise<BigNumber>;

    checkBurnRequest(
      _volToken: string,
      _requestId: BigNumberish,
      _isKeepers: boolean,
      overrides?: CallOverrides
    ): Promise<IPlatformHelper.CheckBurnResultStructOutput>;

    checkMintRequest(
      _volToken: string,
      _requestId: BigNumberish,
      _isKeepers: boolean,
      overrides?: CallOverrides
    ): Promise<IPlatformHelper.CheckMintResultStructOutput>;

    collateralRatio(
      _platform: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertGOVIToXGOVI(
      _goviAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertXGOVIToGOVI(
      _xGOVIAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyFundingFee(
      _platform: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundingFeeValues(
      _platform: string,
      _minCVI: BigNumberish,
      _maxCVI: BigNumberish,
      _minCollateral: BigNumberish,
      _maxCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[][]>;

    initialize(
      _govi: string,
      _staking: string,
      overrides?: CallOverrides
    ): Promise<void>;

    maxMintAmount(
      _volToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdrawAmount(
      _thetaVault: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        maxAmount: BigNumber;
        maxUSDCAmount: BigNumber;
      }
    >;

    premiumFeeCollateralRatio(
      _platform: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakedGOVI(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { stakedAmount: BigNumber; share: BigNumber }
    >;

    volTokenDexPrice(
      _thetaVault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    volTokenIntrinsicPrice(
      _volToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    willWithdrawSucceed(
      _thetaVault: string,
      _withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    calculatePreBurn(
      _volToken: string,
      _isKeepers: boolean,
      _volTokensAmount: BigNumberish,
      _timeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePreMint(
      _volToken: string,
      _isKeepers: boolean,
      _usdcAmount: BigNumberish,
      _timeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateStakingAPR(overrides?: CallOverrides): Promise<BigNumber>;

    checkBurnRequest(
      _volToken: string,
      _requestId: BigNumberish,
      _isKeepers: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkMintRequest(
      _volToken: string,
      _requestId: BigNumberish,
      _isKeepers: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralRatio(
      _platform: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertGOVIToXGOVI(
      _goviAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertXGOVIToGOVI(
      _xGOVIAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyFundingFee(
      _platform: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundingFeeValues(
      _platform: string,
      _minCVI: BigNumberish,
      _maxCVI: BigNumberish,
      _minCollateral: BigNumberish,
      _maxCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _govi: string,
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxMintAmount(
      _volToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxWithdrawAmount(
      _thetaVault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    premiumFeeCollateralRatio(
      _platform: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakedGOVI(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    volTokenDexPrice(
      _thetaVault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    volTokenIntrinsicPrice(
      _volToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    willWithdrawSucceed(
      _thetaVault: string,
      _withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculatePreBurn(
      _volToken: string,
      _isKeepers: boolean,
      _volTokensAmount: BigNumberish,
      _timeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePreMint(
      _volToken: string,
      _isKeepers: boolean,
      _usdcAmount: BigNumberish,
      _timeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateStakingAPR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkBurnRequest(
      _volToken: string,
      _requestId: BigNumberish,
      _isKeepers: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkMintRequest(
      _volToken: string,
      _requestId: BigNumberish,
      _isKeepers: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralRatio(
      _platform: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertGOVIToXGOVI(
      _goviAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertXGOVIToGOVI(
      _xGOVIAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dailyFundingFee(
      _platform: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingFeeValues(
      _platform: string,
      _minCVI: BigNumberish,
      _maxCVI: BigNumberish,
      _minCollateral: BigNumberish,
      _maxCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _govi: string,
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxMintAmount(
      _volToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWithdrawAmount(
      _thetaVault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    premiumFeeCollateralRatio(
      _platform: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakedGOVI(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    volTokenDexPrice(
      _thetaVault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    volTokenIntrinsicPrice(
      _volToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    willWithdrawSucceed(
      _thetaVault: string,
      _withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
