/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../../common";

export interface IPlatformInterface extends utils.Interface {
  functions: {
    "PRECISION_DECIMALS()": FunctionFragment;
    "buyersLockupPeriod()": FunctionFragment;
    "calculateLatestTurbulenceIndicatorPercent()": FunctionFragment;
    "calculatePositionBalance(address)": FunctionFragment;
    "calculatePositionPendingFees(address,uint168)": FunctionFragment;
    "closePosition(uint168,uint32)": FunctionFragment;
    "closePositionWithoutFee(uint168,uint32)": FunctionFragment;
    "cviOracle()": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "feesCalculator()": FunctionFragment;
    "increaseSharedPool(uint256)": FunctionFragment;
    "latestFundingFees()": FunctionFragment;
    "liquidatePositions(address[])": FunctionFragment;
    "maxCVIValue()": FunctionFragment;
    "openPosition(uint168,uint32,uint16,uint8)": FunctionFragment;
    "openPositionWithoutFee(uint168,uint32,uint8)": FunctionFragment;
    "positions(address)": FunctionFragment;
    "setAddressSpecificParameters(address,bool,bool,bool,bool)": FunctionFragment;
    "setEmergencyParameters(bool,bool)": FunctionFragment;
    "setFeesCalculator(address)": FunctionFragment;
    "setLatestOracleRoundId(uint80)": FunctionFragment;
    "setLockupPeriods(uint256,uint256)": FunctionFragment;
    "setMaxAllowedLeverage(uint8)": FunctionFragment;
    "setMaxTimeAllowedAfterLatestRound(uint32)": FunctionFragment;
    "setRevertLockedTransfers(bool)": FunctionFragment;
    "setSubContracts(address,address,address,address,address)": FunctionFragment;
    "totalBalance(bool)": FunctionFragment;
    "totalFundingFeesAmount()": FunctionFragment;
    "totalLeveragedTokensAmount()": FunctionFragment;
    "totalPositionUnitsAmount()": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawLPTokens(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PRECISION_DECIMALS"
      | "buyersLockupPeriod"
      | "calculateLatestTurbulenceIndicatorPercent"
      | "calculatePositionBalance"
      | "calculatePositionPendingFees"
      | "closePosition"
      | "closePositionWithoutFee"
      | "cviOracle"
      | "deposit"
      | "feesCalculator"
      | "increaseSharedPool"
      | "latestFundingFees"
      | "liquidatePositions"
      | "maxCVIValue"
      | "openPosition"
      | "openPositionWithoutFee"
      | "positions"
      | "setAddressSpecificParameters"
      | "setEmergencyParameters"
      | "setFeesCalculator"
      | "setLatestOracleRoundId"
      | "setLockupPeriods"
      | "setMaxAllowedLeverage"
      | "setMaxTimeAllowedAfterLatestRound"
      | "setRevertLockedTransfers"
      | "setSubContracts"
      | "totalBalance"
      | "totalFundingFeesAmount"
      | "totalLeveragedTokensAmount"
      | "totalPositionUnitsAmount"
      | "withdraw"
      | "withdrawLPTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PRECISION_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyersLockupPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLatestTurbulenceIndicatorPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePositionBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePositionPendingFees",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionWithoutFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cviOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feesCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseSharedPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "latestFundingFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePositions",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "maxCVIValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionWithoutFee",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "positions", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAddressSpecificParameters",
    values: [string, boolean, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyParameters",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesCalculator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLatestOracleRoundId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockupPeriods",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxAllowedLeverage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTimeAllowedAfterLatestRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevertLockedTransfers",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubContracts",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFundingFeesAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLeveragedTokensAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPositionUnitsAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLPTokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "PRECISION_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyersLockupPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLatestTurbulenceIndicatorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePositionBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePositionPendingFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionWithoutFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cviOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feesCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseSharedPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestFundingFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCVIValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionWithoutFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddressSpecificParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLatestOracleRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockupPeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxAllowedLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTimeAllowedAfterLatestRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevertLockedTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFundingFeesAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLeveragedTokensAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPositionUnitsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLPTokens",
    data: BytesLike
  ): Result;

  events: {
    "ClosePosition(address,uint256,uint256,uint256,uint8,uint256)": EventFragment;
    "Deposit(address,uint256,uint256,uint256)": EventFragment;
    "LiquidatePosition(address,uint256,bool,uint256)": EventFragment;
    "OpenPosition(address,uint256,uint8,uint256,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClosePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidatePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ClosePositionEventObject {
  account: string;
  tokenAmount: BigNumber;
  feeAmount: BigNumber;
  positionUnitsAmount: BigNumber;
  leverage: number;
  cviValue: BigNumber;
}
export type ClosePositionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, number, BigNumber],
  ClosePositionEventObject
>;

export type ClosePositionEventFilter = TypedEventFilter<ClosePositionEvent>;

export interface DepositEventObject {
  account: string;
  tokenAmount: BigNumber;
  lpTokensAmount: BigNumber;
  feeAmount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface LiquidatePositionEventObject {
  positionAddress: string;
  currentPositionBalance: BigNumber;
  isBalancePositive: boolean;
  positionUnitsAmount: BigNumber;
}
export type LiquidatePositionEvent = TypedEvent<
  [string, BigNumber, boolean, BigNumber],
  LiquidatePositionEventObject
>;

export type LiquidatePositionEventFilter =
  TypedEventFilter<LiquidatePositionEvent>;

export interface OpenPositionEventObject {
  account: string;
  tokenAmount: BigNumber;
  leverage: number;
  feeAmount: BigNumber;
  positionUnitsAmount: BigNumber;
  cviValue: BigNumber;
}
export type OpenPositionEvent = TypedEvent<
  [string, BigNumber, number, BigNumber, BigNumber, BigNumber],
  OpenPositionEventObject
>;

export type OpenPositionEventFilter = TypedEventFilter<OpenPositionEvent>;

export interface WithdrawEventObject {
  account: string;
  tokenAmount: BigNumber;
  lpTokensAmount: BigNumber;
  feeAmount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface IPlatform extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPlatformInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyersLockupPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateLatestTurbulenceIndicatorPercent(
      overrides?: CallOverrides
    ): Promise<[number]>;

    calculatePositionBalance(
      positionAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, number, BigNumber, BigNumber] & {
        currentPositionBalance: BigNumber;
        isPositive: boolean;
        positionUnitsAmount: BigNumber;
        leverage: number;
        fundingFees: BigNumber;
        marginDebt: BigNumber;
      }
    >;

    calculatePositionPendingFees(
      positionAddress: string,
      positionUnitsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pendingFees: BigNumber }>;

    closePosition(
      positionUnitsAmount: BigNumberish,
      minCVI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePositionWithoutFee(
      positionUnitsAmount: BigNumberish,
      minCVI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cviOracle(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      tokenAmount: BigNumberish,
      minLPTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feesCalculator(overrides?: CallOverrides): Promise<[string]>;

    increaseSharedPool(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    latestFundingFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidatePositions(
      positionOwners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxCVIValue(overrides?: CallOverrides): Promise<[number]>;

    openPosition(
      tokenAmount: BigNumberish,
      maxCVI: BigNumberish,
      maxBuyingPremiumFeePercentage: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openPositionWithoutFee(
      tokenAmount: BigNumberish,
      maxCVI: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    positions(
      positionAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number] & {
        positionUnitsAmount: BigNumber;
        leverage: number;
        openCVIValue: number;
        creationTimestamp: number;
        originalCreationTimestamp: number;
      }
    >;

    setAddressSpecificParameters(
      holderAddress: string,
      shouldLockPosition: boolean,
      noPremiumFeeAllowed: boolean,
      increaseSharedPoolAllowed: boolean,
      isLiquidityProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmergencyParameters(
      newEmergencyWithdrawAllowed: boolean,
      newCanPurgeSnapshots: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeesCalculator(
      newCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLatestOracleRoundId(
      newOracleRoundId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLockupPeriods(
      newLPLockupPeriod: BigNumberish,
      newBuyersLockupPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxAllowedLeverage(
      newMaxAllowedLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTimeAllowedAfterLatestRound(
      newMaxTimeAllowedAfterLatestRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRevertLockedTransfers(
      revertLockedTransfers: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSubContracts(
      newCollector: string,
      newOracle: string,
      newRewards: string,
      newLiquidation: string,
      _newStakingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalBalance(
      _withAddendum: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    totalFundingFeesAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLeveragedTokensAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPositionUnitsAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      tokenAmount: BigNumberish,
      maxLPTokenBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLPTokens(
      lpTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  buyersLockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  calculateLatestTurbulenceIndicatorPercent(
    overrides?: CallOverrides
  ): Promise<number>;

  calculatePositionBalance(
    positionAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber, number, BigNumber, BigNumber] & {
      currentPositionBalance: BigNumber;
      isPositive: boolean;
      positionUnitsAmount: BigNumber;
      leverage: number;
      fundingFees: BigNumber;
      marginDebt: BigNumber;
    }
  >;

  calculatePositionPendingFees(
    positionAddress: string,
    positionUnitsAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  closePosition(
    positionUnitsAmount: BigNumberish,
    minCVI: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePositionWithoutFee(
    positionUnitsAmount: BigNumberish,
    minCVI: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cviOracle(overrides?: CallOverrides): Promise<string>;

  deposit(
    tokenAmount: BigNumberish,
    minLPTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feesCalculator(overrides?: CallOverrides): Promise<string>;

  increaseSharedPool(
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  latestFundingFees(overrides?: CallOverrides): Promise<BigNumber>;

  liquidatePositions(
    positionOwners: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxCVIValue(overrides?: CallOverrides): Promise<number>;

  openPosition(
    tokenAmount: BigNumberish,
    maxCVI: BigNumberish,
    maxBuyingPremiumFeePercentage: BigNumberish,
    leverage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openPositionWithoutFee(
    tokenAmount: BigNumberish,
    maxCVI: BigNumberish,
    leverage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  positions(
    positionAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number] & {
      positionUnitsAmount: BigNumber;
      leverage: number;
      openCVIValue: number;
      creationTimestamp: number;
      originalCreationTimestamp: number;
    }
  >;

  setAddressSpecificParameters(
    holderAddress: string,
    shouldLockPosition: boolean,
    noPremiumFeeAllowed: boolean,
    increaseSharedPoolAllowed: boolean,
    isLiquidityProvider: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmergencyParameters(
    newEmergencyWithdrawAllowed: boolean,
    newCanPurgeSnapshots: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeesCalculator(
    newCalculator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLatestOracleRoundId(
    newOracleRoundId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLockupPeriods(
    newLPLockupPeriod: BigNumberish,
    newBuyersLockupPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxAllowedLeverage(
    newMaxAllowedLeverage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTimeAllowedAfterLatestRound(
    newMaxTimeAllowedAfterLatestRound: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRevertLockedTransfers(
    revertLockedTransfers: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSubContracts(
    newCollector: string,
    newOracle: string,
    newRewards: string,
    newLiquidation: string,
    _newStakingContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalBalance(
    _withAddendum: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalFundingFeesAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalLeveragedTokensAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalPositionUnitsAmount(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    tokenAmount: BigNumberish,
    maxLPTokenBurnAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLPTokens(
    lpTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    buyersLockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    calculateLatestTurbulenceIndicatorPercent(
      overrides?: CallOverrides
    ): Promise<number>;

    calculatePositionBalance(
      positionAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, number, BigNumber, BigNumber] & {
        currentPositionBalance: BigNumber;
        isPositive: boolean;
        positionUnitsAmount: BigNumber;
        leverage: number;
        fundingFees: BigNumber;
        marginDebt: BigNumber;
      }
    >;

    calculatePositionPendingFees(
      positionAddress: string,
      positionUnitsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePosition(
      positionUnitsAmount: BigNumberish,
      minCVI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        tokenAmount: BigNumber;
        closePositionFee: BigNumber;
        closingPremiumFee: BigNumber;
      }
    >;

    closePositionWithoutFee(
      positionUnitsAmount: BigNumberish,
      minCVI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        tokenAmount: BigNumber;
        closePositionFee: BigNumber;
        closingPremiumFee: BigNumber;
      }
    >;

    cviOracle(overrides?: CallOverrides): Promise<string>;

    deposit(
      tokenAmount: BigNumberish,
      minLPTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feesCalculator(overrides?: CallOverrides): Promise<string>;

    increaseSharedPool(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    latestFundingFees(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatePositions(
      positionOwners: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxCVIValue(overrides?: CallOverrides): Promise<number>;

    openPosition(
      tokenAmount: BigNumberish,
      maxCVI: BigNumberish,
      maxBuyingPremiumFeePercentage: BigNumberish,
      leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        positionUnitsAmount: BigNumber;
        positionedTokenAmount: BigNumber;
        openPositionFee: BigNumber;
        buyingPremiumFee: BigNumber;
      }
    >;

    openPositionWithoutFee(
      tokenAmount: BigNumberish,
      maxCVI: BigNumberish,
      leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        positionUnitsAmount: BigNumber;
        positionedTokenAmount: BigNumber;
        openPositionFee: BigNumber;
        buyingPremiumFee: BigNumber;
      }
    >;

    positions(
      positionAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number] & {
        positionUnitsAmount: BigNumber;
        leverage: number;
        openCVIValue: number;
        creationTimestamp: number;
        originalCreationTimestamp: number;
      }
    >;

    setAddressSpecificParameters(
      holderAddress: string,
      shouldLockPosition: boolean,
      noPremiumFeeAllowed: boolean,
      increaseSharedPoolAllowed: boolean,
      isLiquidityProvider: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyParameters(
      newEmergencyWithdrawAllowed: boolean,
      newCanPurgeSnapshots: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesCalculator(
      newCalculator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLatestOracleRoundId(
      newOracleRoundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockupPeriods(
      newLPLockupPeriod: BigNumberish,
      newBuyersLockupPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxAllowedLeverage(
      newMaxAllowedLeverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTimeAllowedAfterLatestRound(
      newMaxTimeAllowedAfterLatestRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevertLockedTransfers(
      revertLockedTransfers: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubContracts(
      newCollector: string,
      newOracle: string,
      newRewards: string,
      newLiquidation: string,
      _newStakingContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBalance(
      _withAddendum: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFundingFeesAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalLeveragedTokensAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalPositionUnitsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      tokenAmount: BigNumberish,
      maxLPTokenBurnAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        burntAmount: BigNumber;
        withdrawnAmount: BigNumber;
      }
    >;

    withdrawLPTokens(
      lpTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        burntAmount: BigNumber;
        withdrawnAmount: BigNumber;
      }
    >;
  };

  filters: {
    "ClosePosition(address,uint256,uint256,uint256,uint8,uint256)"(
      account?: string | null,
      tokenAmount?: null,
      feeAmount?: null,
      positionUnitsAmount?: null,
      leverage?: null,
      cviValue?: null
    ): ClosePositionEventFilter;
    ClosePosition(
      account?: string | null,
      tokenAmount?: null,
      feeAmount?: null,
      positionUnitsAmount?: null,
      leverage?: null,
      cviValue?: null
    ): ClosePositionEventFilter;

    "Deposit(address,uint256,uint256,uint256)"(
      account?: string | null,
      tokenAmount?: null,
      lpTokensAmount?: null,
      feeAmount?: null
    ): DepositEventFilter;
    Deposit(
      account?: string | null,
      tokenAmount?: null,
      lpTokensAmount?: null,
      feeAmount?: null
    ): DepositEventFilter;

    "LiquidatePosition(address,uint256,bool,uint256)"(
      positionAddress?: string | null,
      currentPositionBalance?: null,
      isBalancePositive?: null,
      positionUnitsAmount?: null
    ): LiquidatePositionEventFilter;
    LiquidatePosition(
      positionAddress?: string | null,
      currentPositionBalance?: null,
      isBalancePositive?: null,
      positionUnitsAmount?: null
    ): LiquidatePositionEventFilter;

    "OpenPosition(address,uint256,uint8,uint256,uint256,uint256)"(
      account?: string | null,
      tokenAmount?: null,
      leverage?: null,
      feeAmount?: null,
      positionUnitsAmount?: null,
      cviValue?: null
    ): OpenPositionEventFilter;
    OpenPosition(
      account?: string | null,
      tokenAmount?: null,
      leverage?: null,
      feeAmount?: null,
      positionUnitsAmount?: null,
      cviValue?: null
    ): OpenPositionEventFilter;

    "Withdraw(address,uint256,uint256,uint256)"(
      account?: string | null,
      tokenAmount?: null,
      lpTokensAmount?: null,
      feeAmount?: null
    ): WithdrawEventFilter;
    Withdraw(
      account?: string | null,
      tokenAmount?: null,
      lpTokensAmount?: null,
      feeAmount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    buyersLockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    calculateLatestTurbulenceIndicatorPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePositionBalance(
      positionAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePositionPendingFees(
      positionAddress: string,
      positionUnitsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePosition(
      positionUnitsAmount: BigNumberish,
      minCVI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePositionWithoutFee(
      positionUnitsAmount: BigNumberish,
      minCVI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cviOracle(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      tokenAmount: BigNumberish,
      minLPTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feesCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    increaseSharedPool(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    latestFundingFees(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatePositions(
      positionOwners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxCVIValue(overrides?: CallOverrides): Promise<BigNumber>;

    openPosition(
      tokenAmount: BigNumberish,
      maxCVI: BigNumberish,
      maxBuyingPremiumFeePercentage: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openPositionWithoutFee(
      tokenAmount: BigNumberish,
      maxCVI: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    positions(
      positionAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAddressSpecificParameters(
      holderAddress: string,
      shouldLockPosition: boolean,
      noPremiumFeeAllowed: boolean,
      increaseSharedPoolAllowed: boolean,
      isLiquidityProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmergencyParameters(
      newEmergencyWithdrawAllowed: boolean,
      newCanPurgeSnapshots: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeesCalculator(
      newCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLatestOracleRoundId(
      newOracleRoundId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLockupPeriods(
      newLPLockupPeriod: BigNumberish,
      newBuyersLockupPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxAllowedLeverage(
      newMaxAllowedLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTimeAllowedAfterLatestRound(
      newMaxTimeAllowedAfterLatestRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRevertLockedTransfers(
      revertLockedTransfers: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSubContracts(
      newCollector: string,
      newOracle: string,
      newRewards: string,
      newLiquidation: string,
      _newStakingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalBalance(
      _withAddendum: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFundingFeesAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalLeveragedTokensAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalPositionUnitsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      tokenAmount: BigNumberish,
      maxLPTokenBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLPTokens(
      lpTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PRECISION_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyersLockupPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateLatestTurbulenceIndicatorPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePositionBalance(
      positionAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePositionPendingFees(
      positionAddress: string,
      positionUnitsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePosition(
      positionUnitsAmount: BigNumberish,
      minCVI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePositionWithoutFee(
      positionUnitsAmount: BigNumberish,
      minCVI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cviOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      tokenAmount: BigNumberish,
      minLPTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feesCalculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseSharedPool(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    latestFundingFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidatePositions(
      positionOwners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxCVIValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openPosition(
      tokenAmount: BigNumberish,
      maxCVI: BigNumberish,
      maxBuyingPremiumFeePercentage: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openPositionWithoutFee(
      tokenAmount: BigNumberish,
      maxCVI: BigNumberish,
      leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    positions(
      positionAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAddressSpecificParameters(
      holderAddress: string,
      shouldLockPosition: boolean,
      noPremiumFeeAllowed: boolean,
      increaseSharedPoolAllowed: boolean,
      isLiquidityProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyParameters(
      newEmergencyWithdrawAllowed: boolean,
      newCanPurgeSnapshots: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeesCalculator(
      newCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLatestOracleRoundId(
      newOracleRoundId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLockupPeriods(
      newLPLockupPeriod: BigNumberish,
      newBuyersLockupPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxAllowedLeverage(
      newMaxAllowedLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTimeAllowedAfterLatestRound(
      newMaxTimeAllowedAfterLatestRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRevertLockedTransfers(
      revertLockedTransfers: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSubContracts(
      newCollector: string,
      newOracle: string,
      newRewards: string,
      newLiquidation: string,
      _newStakingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalBalance(
      _withAddendum: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFundingFeesAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLeveragedTokensAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPositionUnitsAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      tokenAmount: BigNumberish,
      maxLPTokenBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLPTokens(
      lpTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
