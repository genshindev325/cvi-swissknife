/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../../common";

export interface IFeesCollectorManagementInterface extends utils.Interface {
  functions: {
    "sendFunds(uint256)": FunctionFragment;
    "setAllowedSenderAddress(address,bool)": FunctionFragment;
    "setArbitrumContractAddress(address)": FunctionFragment;
    "setArbitrumInbox(address)": FunctionFragment;
    "setBuyBack(bool)": FunctionFragment;
    "setConvertUSDC(bool)": FunctionFragment;
    "setEnableWhitelist(bool)": FunctionFragment;
    "setFundsSender(address)": FunctionFragment;
    "setMaxSlippage(uint16)": FunctionFragment;
    "setMaxSubmissionFee(uint256)": FunctionFragment;
    "setMinETHForTransfer(uint256)": FunctionFragment;
    "setMinUDSCForConversion(uint256)": FunctionFragment;
    "setRouter(address)": FunctionFragment;
    "setSendPercentage(uint16)": FunctionFragment;
    "setSendToArbitrum(bool)": FunctionFragment;
    "setStaking(address)": FunctionFragment;
    "setStakingVaultAddress(address)": FunctionFragment;
    "setTreasuryAddress(address)": FunctionFragment;
    "setTreasuryTransferPercentage(uint16)": FunctionFragment;
    "setUSDCETHPriceAggregator(address)": FunctionFragment;
    "setUseNative(bool)": FunctionFragment;
    "setWrappedToken(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "sendFunds"
      | "setAllowedSenderAddress"
      | "setArbitrumContractAddress"
      | "setArbitrumInbox"
      | "setBuyBack"
      | "setConvertUSDC"
      | "setEnableWhitelist"
      | "setFundsSender"
      | "setMaxSlippage"
      | "setMaxSubmissionFee"
      | "setMinETHForTransfer"
      | "setMinUDSCForConversion"
      | "setRouter"
      | "setSendPercentage"
      | "setSendToArbitrum"
      | "setStaking"
      | "setStakingVaultAddress"
      | "setTreasuryAddress"
      | "setTreasuryTransferPercentage"
      | "setUSDCETHPriceAggregator"
      | "setUseNative"
      | "setWrappedToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "sendFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedSenderAddress",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setArbitrumContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setArbitrumInbox",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setBuyBack", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setConvertUSDC",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnableWhitelist",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundsSender",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSlippage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSubmissionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinETHForTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinUDSCForConversion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setRouter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setSendPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSendToArbitrum",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setStaking", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setStakingVaultAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryTransferPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSDCETHPriceAggregator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUseNative",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedToken",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "sendFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedSenderAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArbitrumContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArbitrumInbox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBuyBack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setConvertUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnableWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundsSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSubmissionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinETHForTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinUDSCForConversion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSendPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSendToArbitrum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStaking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStakingVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryTransferPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSDCETHPriceAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUseNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedToken",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFeesCollectorManagement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFeesCollectorManagementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    sendFunds(
      ethGOVIPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowedSenderAddress(
      account: string,
      isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setArbitrumContractAddress(
      newArbitrumContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setArbitrumInbox(
      newArbitrumInbox: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuyBack(
      newBuyBack: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConvertUSDC(
      newConvertUSDC: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnableWhitelist(
      enableWhitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundsSender(
      newFundsSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxSlippage(
      newMaxSlippagePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxSubmissionFee(
      newMaxSubmissionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinETHForTransfer(
      newMinETHForTransfer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinUDSCForConversion(
      newMinUSDCForConversion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRouter(
      newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSendPercentage(
      newSendPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSendToArbitrum(
      newSendToArbitrum: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStaking(
      newStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingVaultAddress(
      newStakingVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
      newTreasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryTransferPercentage(
      newTreasuryTransferPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUSDCETHPriceAggregator(
      newUSDCETHPriceAggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUseNative(
      newUseNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWrappedToken(
      newWrappedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  sendFunds(
    ethGOVIPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowedSenderAddress(
    account: string,
    isAllowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setArbitrumContractAddress(
    newArbitrumContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setArbitrumInbox(
    newArbitrumInbox: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuyBack(
    newBuyBack: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConvertUSDC(
    newConvertUSDC: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnableWhitelist(
    enableWhitelist: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundsSender(
    newFundsSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxSlippage(
    newMaxSlippagePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxSubmissionFee(
    newMaxSubmissionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinETHForTransfer(
    newMinETHForTransfer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinUDSCForConversion(
    newMinUSDCForConversion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRouter(
    newRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSendPercentage(
    newSendPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSendToArbitrum(
    newSendToArbitrum: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStaking(
    newStaking: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingVaultAddress(
    newStakingVaultAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddress(
    newTreasuryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryTransferPercentage(
    newTreasuryTransferPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUSDCETHPriceAggregator(
    newUSDCETHPriceAggregator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUseNative(
    newUseNative: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWrappedToken(
    newWrappedToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    sendFunds(
      ethGOVIPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowedSenderAddress(
      account: string,
      isAllowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setArbitrumContractAddress(
      newArbitrumContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setArbitrumInbox(
      newArbitrumInbox: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyBack(newBuyBack: boolean, overrides?: CallOverrides): Promise<void>;

    setConvertUSDC(
      newConvertUSDC: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnableWhitelist(
      enableWhitelist: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundsSender(
      newFundsSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSlippage(
      newMaxSlippagePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSubmissionFee(
      newMaxSubmissionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinETHForTransfer(
      newMinETHForTransfer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinUDSCForConversion(
      newMinUSDCForConversion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouter(newRouter: string, overrides?: CallOverrides): Promise<void>;

    setSendPercentage(
      newSendPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSendToArbitrum(
      newSendToArbitrum: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setStaking(newStaking: string, overrides?: CallOverrides): Promise<void>;

    setStakingVaultAddress(
      newStakingVaultAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddress(
      newTreasuryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryTransferPercentage(
      newTreasuryTransferPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUSDCETHPriceAggregator(
      newUSDCETHPriceAggregator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUseNative(
      newUseNative: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWrappedToken(
      newWrappedToken: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    sendFunds(
      ethGOVIPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowedSenderAddress(
      account: string,
      isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setArbitrumContractAddress(
      newArbitrumContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setArbitrumInbox(
      newArbitrumInbox: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuyBack(
      newBuyBack: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConvertUSDC(
      newConvertUSDC: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnableWhitelist(
      enableWhitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundsSender(
      newFundsSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxSlippage(
      newMaxSlippagePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxSubmissionFee(
      newMaxSubmissionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinETHForTransfer(
      newMinETHForTransfer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinUDSCForConversion(
      newMinUSDCForConversion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRouter(
      newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSendPercentage(
      newSendPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSendToArbitrum(
      newSendToArbitrum: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStaking(
      newStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingVaultAddress(
      newStakingVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryAddress(
      newTreasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryTransferPercentage(
      newTreasuryTransferPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUSDCETHPriceAggregator(
      newUSDCETHPriceAggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUseNative(
      newUseNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWrappedToken(
      newWrappedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    sendFunds(
      ethGOVIPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowedSenderAddress(
      account: string,
      isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setArbitrumContractAddress(
      newArbitrumContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setArbitrumInbox(
      newArbitrumInbox: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuyBack(
      newBuyBack: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConvertUSDC(
      newConvertUSDC: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnableWhitelist(
      enableWhitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundsSender(
      newFundsSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSlippage(
      newMaxSlippagePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSubmissionFee(
      newMaxSubmissionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinETHForTransfer(
      newMinETHForTransfer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinUDSCForConversion(
      newMinUSDCForConversion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRouter(
      newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSendPercentage(
      newSendPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSendToArbitrum(
      newSendToArbitrum: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStaking(
      newStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingVaultAddress(
      newStakingVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddress(
      newTreasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryTransferPercentage(
      newTreasuryTransferPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUSDCETHPriceAggregator(
      newUSDCETHPriceAggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUseNative(
      newUseNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWrappedToken(
      newWrappedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
