/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../../common";

export interface IThetaVaultInterface extends utils.Interface {
  functions: {
    "extraLiqidityPercentage()": FunctionFragment;
    "fulfillDepositRequest(uint256)": FunctionFragment;
    "fulfillWithdrawRequest(uint256)": FunctionFragment;
    "getReserves()": FunctionFragment;
    "liquidateRequest(uint256)": FunctionFragment;
    "minDexPercentageAllowed()": FunctionFragment;
    "rebalance()": FunctionFragment;
    "requests(uint256)": FunctionFragment;
    "setDepositCap(uint256)": FunctionFragment;
    "setDepositHoldings(uint16)": FunctionFragment;
    "setFulfiller(address)": FunctionFragment;
    "setLiquidityPercentages(uint16,uint16)": FunctionFragment;
    "setMinAmounts(uint256,uint256)": FunctionFragment;
    "setMinPoolSkew(uint16)": FunctionFragment;
    "setPeriods(uint256,uint256)": FunctionFragment;
    "setRequestDelay(uint256)": FunctionFragment;
    "setRewardRouter(address)": FunctionFragment;
    "submitDepositRequest(uint168)": FunctionFragment;
    "submitWithdrawRequest(uint168)": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "totalVaultLeveragedAmount()": FunctionFragment;
    "vaultPositionUnits()": FunctionFragment;
    "volToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "extraLiqidityPercentage"
      | "fulfillDepositRequest"
      | "fulfillWithdrawRequest"
      | "getReserves"
      | "liquidateRequest"
      | "minDexPercentageAllowed"
      | "rebalance"
      | "requests"
      | "setDepositCap"
      | "setDepositHoldings"
      | "setFulfiller"
      | "setLiquidityPercentages"
      | "setMinAmounts"
      | "setMinPoolSkew"
      | "setPeriods"
      | "setRequestDelay"
      | "setRewardRouter"
      | "submitDepositRequest"
      | "submitWithdrawRequest"
      | "totalBalance"
      | "totalVaultLeveragedAmount"
      | "vaultPositionUnits"
      | "volToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "extraLiqidityPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillDepositRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillWithdrawRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minDexPercentageAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositHoldings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFulfiller",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityPercentages",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAmounts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPoolSkew",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeriods",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequestDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitDepositRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitWithdrawRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVaultLeveragedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultPositionUnits",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "volToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "extraLiqidityPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillDepositRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillWithdrawRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDexPercentageAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDepositCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositHoldings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFulfiller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityPercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPoolSkew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPeriods", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRequestDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitDepositRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitWithdrawRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVaultLeveragedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultPositionUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "volToken", data: BytesLike): Result;

  events: {
    "FulfillDeposit(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "FulfillWithdraw(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LiquidateRequest(uint256,uint8,address,address,uint256)": EventFragment;
    "SubmitRequest(uint256,uint8,uint256,uint32,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FulfillDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FulfillWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidateRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitRequest"): EventFragment;
}

export interface FulfillDepositEventObject {
  requestId: BigNumber;
  account: string;
  totalUSDCAmount: BigNumber;
  platformLiquidityAmount: BigNumber;
  dexVolTokenUSDCAmount: BigNumber;
  dexVolTokenAmount: BigNumber;
  dexUSDCAmount: BigNumber;
  mintedThetaTokens: BigNumber;
}
export type FulfillDepositEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  FulfillDepositEventObject
>;

export type FulfillDepositEventFilter = TypedEventFilter<FulfillDepositEvent>;

export interface FulfillWithdrawEventObject {
  requestId: BigNumber;
  account: string;
  totalUSDCAmount: BigNumber;
  platformLiquidityAmount: BigNumber;
  dexVolTokenAmount: BigNumber;
  dexUSDCVolTokenAmount: BigNumber;
  dexUSDCAmount: BigNumber;
  burnedThetaTokens: BigNumber;
}
export type FulfillWithdrawEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  FulfillWithdrawEventObject
>;

export type FulfillWithdrawEventFilter = TypedEventFilter<FulfillWithdrawEvent>;

export interface LiquidateRequestEventObject {
  requestId: BigNumber;
  requestType: number;
  account: string;
  liquidator: string;
  tokenAmount: BigNumber;
}
export type LiquidateRequestEvent = TypedEvent<
  [BigNumber, number, string, string, BigNumber],
  LiquidateRequestEventObject
>;

export type LiquidateRequestEventFilter =
  TypedEventFilter<LiquidateRequestEvent>;

export interface SubmitRequestEventObject {
  requestId: BigNumber;
  requestType: number;
  tokenAmount: BigNumber;
  targetTimestamp: number;
  account: string;
  totalUSDCBalance: BigNumber;
  totalSupply: BigNumber;
}
export type SubmitRequestEvent = TypedEvent<
  [BigNumber, number, BigNumber, number, string, BigNumber, BigNumber],
  SubmitRequestEventObject
>;

export type SubmitRequestEventFilter = TypedEventFilter<SubmitRequestEvent>;

export interface IThetaVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IThetaVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    extraLiqidityPercentage(overrides?: CallOverrides): Promise<[number]>;

    fulfillDepositRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillWithdrawRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        volTokenAmount: BigNumber;
        usdcAmount: BigNumber;
      }
    >;

    liquidateRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minDexPercentageAllowed(overrides?: CallOverrides): Promise<[number]>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requests(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number, string, boolean] & {
        requestType: number;
        tokenAmount: BigNumber;
        targetTimestamp: number;
        owner: string;
        shouldStake: boolean;
      }
    >;

    setDepositCap(
      newDepositCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositHoldings(
      newDepositHoldingsPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFulfiller(
      newFulfiller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityPercentages(
      newExtraLiquidityPercentage: BigNumberish,
      minDexPercentageAllowed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinAmounts(
      newMinDepositAmount: BigNumberish,
      newMinWithdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinPoolSkew(
      newMinPoolSkewPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPeriods(
      newLockupPeriod: BigNumberish,
      newLiquidationPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRequestDelay(
      newRequestDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardRouter(
      rewardRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitDepositRequest(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitWithdrawRequest(
      thetaTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalBalance(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        usdcPlatformLiquidity: BigNumber;
        intrinsicDEXVolTokenBalance: BigNumber;
        volTokenPositionBalance: BigNumber;
        dexUSDCAmount: BigNumber;
        dexVolTokensAmount: BigNumber;
      }
    >;

    totalVaultLeveragedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultPositionUnits(overrides?: CallOverrides): Promise<[BigNumber]>;

    volToken(overrides?: CallOverrides): Promise<[string]>;
  };

  extraLiqidityPercentage(overrides?: CallOverrides): Promise<number>;

  fulfillDepositRequest(
    requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillWithdrawRequest(
    requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReserves(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      volTokenAmount: BigNumber;
      usdcAmount: BigNumber;
    }
  >;

  liquidateRequest(
    requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minDexPercentageAllowed(overrides?: CallOverrides): Promise<number>;

  rebalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requests(
    requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, number, string, boolean] & {
      requestType: number;
      tokenAmount: BigNumber;
      targetTimestamp: number;
      owner: string;
      shouldStake: boolean;
    }
  >;

  setDepositCap(
    newDepositCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositHoldings(
    newDepositHoldingsPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFulfiller(
    newFulfiller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityPercentages(
    newExtraLiquidityPercentage: BigNumberish,
    minDexPercentageAllowed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinAmounts(
    newMinDepositAmount: BigNumberish,
    newMinWithdrawAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinPoolSkew(
    newMinPoolSkewPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPeriods(
    newLockupPeriod: BigNumberish,
    newLiquidationPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRequestDelay(
    newRequestDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardRouter(
    rewardRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitDepositRequest(
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitWithdrawRequest(
    thetaTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalBalance(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      usdcPlatformLiquidity: BigNumber;
      intrinsicDEXVolTokenBalance: BigNumber;
      volTokenPositionBalance: BigNumber;
      dexUSDCAmount: BigNumber;
      dexVolTokensAmount: BigNumber;
    }
  >;

  totalVaultLeveragedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  vaultPositionUnits(overrides?: CallOverrides): Promise<BigNumber>;

  volToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    extraLiqidityPercentage(overrides?: CallOverrides): Promise<number>;

    fulfillDepositRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fulfillWithdrawRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        volTokenAmount: BigNumber;
        usdcAmount: BigNumber;
      }
    >;

    liquidateRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    minDexPercentageAllowed(overrides?: CallOverrides): Promise<number>;

    rebalance(overrides?: CallOverrides): Promise<void>;

    requests(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number, string, boolean] & {
        requestType: number;
        tokenAmount: BigNumber;
        targetTimestamp: number;
        owner: string;
        shouldStake: boolean;
      }
    >;

    setDepositCap(
      newDepositCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositHoldings(
      newDepositHoldingsPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFulfiller(
      newFulfiller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityPercentages(
      newExtraLiquidityPercentage: BigNumberish,
      minDexPercentageAllowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinAmounts(
      newMinDepositAmount: BigNumberish,
      newMinWithdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinPoolSkew(
      newMinPoolSkewPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPeriods(
      newLockupPeriod: BigNumberish,
      newLiquidationPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequestDelay(
      newRequestDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardRouter(
      rewardRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submitDepositRequest(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitWithdrawRequest(
      thetaTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBalance(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        usdcPlatformLiquidity: BigNumber;
        intrinsicDEXVolTokenBalance: BigNumber;
        volTokenPositionBalance: BigNumber;
        dexUSDCAmount: BigNumber;
        dexVolTokensAmount: BigNumber;
      }
    >;

    totalVaultLeveragedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    vaultPositionUnits(overrides?: CallOverrides): Promise<BigNumber>;

    volToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "FulfillDeposit(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      requestId?: null,
      account?: string | null,
      totalUSDCAmount?: null,
      platformLiquidityAmount?: null,
      dexVolTokenUSDCAmount?: null,
      dexVolTokenAmount?: null,
      dexUSDCAmount?: null,
      mintedThetaTokens?: null
    ): FulfillDepositEventFilter;
    FulfillDeposit(
      requestId?: null,
      account?: string | null,
      totalUSDCAmount?: null,
      platformLiquidityAmount?: null,
      dexVolTokenUSDCAmount?: null,
      dexVolTokenAmount?: null,
      dexUSDCAmount?: null,
      mintedThetaTokens?: null
    ): FulfillDepositEventFilter;

    "FulfillWithdraw(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      requestId?: null,
      account?: string | null,
      totalUSDCAmount?: null,
      platformLiquidityAmount?: null,
      dexVolTokenAmount?: null,
      dexUSDCVolTokenAmount?: null,
      dexUSDCAmount?: null,
      burnedThetaTokens?: null
    ): FulfillWithdrawEventFilter;
    FulfillWithdraw(
      requestId?: null,
      account?: string | null,
      totalUSDCAmount?: null,
      platformLiquidityAmount?: null,
      dexVolTokenAmount?: null,
      dexUSDCVolTokenAmount?: null,
      dexUSDCAmount?: null,
      burnedThetaTokens?: null
    ): FulfillWithdrawEventFilter;

    "LiquidateRequest(uint256,uint8,address,address,uint256)"(
      requestId?: null,
      requestType?: null,
      account?: string | null,
      liquidator?: string | null,
      tokenAmount?: null
    ): LiquidateRequestEventFilter;
    LiquidateRequest(
      requestId?: null,
      requestType?: null,
      account?: string | null,
      liquidator?: string | null,
      tokenAmount?: null
    ): LiquidateRequestEventFilter;

    "SubmitRequest(uint256,uint8,uint256,uint32,address,uint256,uint256)"(
      requestId?: null,
      requestType?: null,
      tokenAmount?: null,
      targetTimestamp?: null,
      account?: string | null,
      totalUSDCBalance?: null,
      totalSupply?: null
    ): SubmitRequestEventFilter;
    SubmitRequest(
      requestId?: null,
      requestType?: null,
      tokenAmount?: null,
      targetTimestamp?: null,
      account?: string | null,
      totalUSDCBalance?: null,
      totalSupply?: null
    ): SubmitRequestEventFilter;
  };

  estimateGas: {
    extraLiqidityPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillDepositRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillWithdrawRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minDexPercentageAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requests(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDepositCap(
      newDepositCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositHoldings(
      newDepositHoldingsPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFulfiller(
      newFulfiller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityPercentages(
      newExtraLiquidityPercentage: BigNumberish,
      minDexPercentageAllowed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinAmounts(
      newMinDepositAmount: BigNumberish,
      newMinWithdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinPoolSkew(
      newMinPoolSkewPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPeriods(
      newLockupPeriod: BigNumberish,
      newLiquidationPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRequestDelay(
      newRequestDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardRouter(
      rewardRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitDepositRequest(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitWithdrawRequest(
      thetaTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalVaultLeveragedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    vaultPositionUnits(overrides?: CallOverrides): Promise<BigNumber>;

    volToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    extraLiqidityPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fulfillDepositRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillWithdrawRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minDexPercentageAllowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requests(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDepositCap(
      newDepositCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositHoldings(
      newDepositHoldingsPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFulfiller(
      newFulfiller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityPercentages(
      newExtraLiquidityPercentage: BigNumberish,
      minDexPercentageAllowed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinAmounts(
      newMinDepositAmount: BigNumberish,
      newMinWithdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinPoolSkew(
      newMinPoolSkewPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPeriods(
      newLockupPeriod: BigNumberish,
      newLiquidationPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRequestDelay(
      newRequestDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardRouter(
      rewardRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitDepositRequest(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitWithdrawRequest(
      thetaTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVaultLeveragedAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultPositionUnits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    volToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
