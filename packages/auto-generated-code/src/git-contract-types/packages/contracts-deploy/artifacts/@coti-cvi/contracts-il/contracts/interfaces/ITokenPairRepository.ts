/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../../common";

export type TokenPairStruct = {
  token1Symbol: string;
  token2Symbol: string;
  token1PriceAggregator: string;
  token2PriceAggregator: string;
  exists: boolean;
};

export type TokenPairStructOutput = [
  string,
  string,
  string,
  string,
  boolean
] & {
  token1Symbol: string;
  token2Symbol: string;
  token1PriceAggregator: string;
  token2PriceAggregator: string;
  exists: boolean;
};

export type PremiumParamsStruct = {
  A: BigNumberish;
  X0: BigNumberish;
  C: BigNumberish;
};

export type PremiumParamsStructOutput = [BigNumber, BigNumber, BigNumber] & {
  A: BigNumber;
  X0: BigNumber;
  C: BigNumber;
};

export interface ITokenPairRepositoryInterface extends utils.Interface {
  functions: {
    "deletePremiumsParams(string,string,uint256[])": FunctionFragment;
    "getCollateralCapComponent(string,string)": FunctionFragment;
    "getOrderedTokenPairIfExists(string,string)": FunctionFragment;
    "getPair(string,string)": FunctionFragment;
    "getPairs()": FunctionFragment;
    "getPremiumParams(string,string,uint256)": FunctionFragment;
    "getTokenPrice(string,string,bool)": FunctionFragment;
    "priceTokenDecimals()": FunctionFragment;
    "protectionConfig()": FunctionFragment;
    "setCollateralCapComponent(string,string,uint16)": FunctionFragment;
    "setILProtectionConfig(address)": FunctionFragment;
    "setPair(string,string,address,address)": FunctionFragment;
    "setPremiumsParams(string,string,uint256[],(int256,int256,int256)[])": FunctionFragment;
    "setPriceTokenDecimals(uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deletePremiumsParams"
      | "getCollateralCapComponent"
      | "getOrderedTokenPairIfExists"
      | "getPair"
      | "getPairs"
      | "getPremiumParams"
      | "getTokenPrice"
      | "priceTokenDecimals"
      | "protectionConfig"
      | "setCollateralCapComponent"
      | "setILProtectionConfig"
      | "setPair"
      | "setPremiumsParams"
      | "setPriceTokenDecimals"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deletePremiumsParams",
    values: [string, string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralCapComponent",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderedTokenPairIfExists",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getPairs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPremiumParams",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "priceTokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protectionConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralCapComponent",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setILProtectionConfig",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPair",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPremiumsParams",
    values: [string, string, BigNumberish[], PremiumParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceTokenDecimals",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "deletePremiumsParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralCapComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderedTokenPairIfExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPremiumParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protectionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralCapComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setILProtectionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPremiumsParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceTokenDecimals",
    data: BytesLike
  ): Result;

  events: {
    "CollateralCapComponentChanged(string,string,uint16,uint16)": EventFragment;
    "ILProtectionConfigChanged(address,address)": EventFragment;
    "PairSet(tuple,tuple)": EventFragment;
    "PremiumParamsChanged(string,string,uint256,tuple,tuple)": EventFragment;
    "PremiumParamsDeleted(string,string,uint256,tuple)": EventFragment;
    "PriceTokenDecimalsChanged(uint8,uint8)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "CollateralCapComponentChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ILProtectionConfigChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumParamsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumParamsDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceTokenDecimalsChanged"): EventFragment;
}

export interface CollateralCapComponentChangedEventObject {
  token1Symbol: string;
  token2Symbol: string;
  prevValue: number;
  newValue: number;
}
export type CollateralCapComponentChangedEvent = TypedEvent<
  [string, string, number, number],
  CollateralCapComponentChangedEventObject
>;

export type CollateralCapComponentChangedEventFilter =
  TypedEventFilter<CollateralCapComponentChangedEvent>;

export interface ILProtectionConfigChangedEventObject {
  prevValue: string;
  newValue: string;
}
export type ILProtectionConfigChangedEvent = TypedEvent<
  [string, string],
  ILProtectionConfigChangedEventObject
>;

export type ILProtectionConfigChangedEventFilter =
  TypedEventFilter<ILProtectionConfigChangedEvent>;

export interface PairSetEventObject {
  prevValue: TokenPairStructOutput;
  newValue: TokenPairStructOutput;
}
export type PairSetEvent = TypedEvent<
  [TokenPairStructOutput, TokenPairStructOutput],
  PairSetEventObject
>;

export type PairSetEventFilter = TypedEventFilter<PairSetEvent>;

export interface PremiumParamsChangedEventObject {
  token1Symbol: string;
  token2Symbol: string;
  policyPeriod: BigNumber;
  prevValue: PremiumParamsStructOutput;
  newValue: PremiumParamsStructOutput;
}
export type PremiumParamsChangedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    PremiumParamsStructOutput,
    PremiumParamsStructOutput
  ],
  PremiumParamsChangedEventObject
>;

export type PremiumParamsChangedEventFilter =
  TypedEventFilter<PremiumParamsChangedEvent>;

export interface PremiumParamsDeletedEventObject {
  token1Symbol: string;
  token2Symbol: string;
  policyPeriod: BigNumber;
  deletedParams: PremiumParamsStructOutput;
}
export type PremiumParamsDeletedEvent = TypedEvent<
  [string, string, BigNumber, PremiumParamsStructOutput],
  PremiumParamsDeletedEventObject
>;

export type PremiumParamsDeletedEventFilter =
  TypedEventFilter<PremiumParamsDeletedEvent>;

export interface PriceTokenDecimalsChangedEventObject {
  prevValue: number;
  newValue: number;
}
export type PriceTokenDecimalsChangedEvent = TypedEvent<
  [number, number],
  PriceTokenDecimalsChangedEventObject
>;

export type PriceTokenDecimalsChangedEventFilter =
  TypedEventFilter<PriceTokenDecimalsChangedEvent>;

export interface ITokenPairRepository extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITokenPairRepositoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deletePremiumsParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriods: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCollateralCapComponent(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getOrderedTokenPairIfExists(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<[TokenPairStructOutput]>;

    getPair(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<[TokenPairStructOutput]>;

    getPairs(overrides?: CallOverrides): Promise<[TokenPairStructOutput[]]>;

    getPremiumParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PremiumParamsStructOutput]>;

    getTokenPrice(
      _token1Symbol: string,
      _token2Symbol: string,
      _isFirstTokenPrice: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceTokenDecimals(overrides?: CallOverrides): Promise<[number]>;

    protectionConfig(overrides?: CallOverrides): Promise<[string]>;

    setCollateralCapComponent(
      _token1Symbol: string,
      _token2Symbol: string,
      _collateralCapComponent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setILProtectionConfig(
      _newInstance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPair(
      _token1Symbol: string,
      _token2Symbol: string,
      _token1PriceAggregator: string,
      _token2PriceAggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPremiumsParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriods: BigNumberish[],
      _premiumsParams: PremiumParamsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceTokenDecimals(
      _priceTokenDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deletePremiumsParams(
    _token1Symbol: string,
    _token2Symbol: string,
    _policyPeriods: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCollateralCapComponent(
    _token1Symbol: string,
    _token2Symbol: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getOrderedTokenPairIfExists(
    _token1Symbol: string,
    _token2Symbol: string,
    overrides?: CallOverrides
  ): Promise<TokenPairStructOutput>;

  getPair(
    _token1Symbol: string,
    _token2Symbol: string,
    overrides?: CallOverrides
  ): Promise<TokenPairStructOutput>;

  getPairs(overrides?: CallOverrides): Promise<TokenPairStructOutput[]>;

  getPremiumParams(
    _token1Symbol: string,
    _token2Symbol: string,
    _policyPeriod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PremiumParamsStructOutput>;

  getTokenPrice(
    _token1Symbol: string,
    _token2Symbol: string,
    _isFirstTokenPrice: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceTokenDecimals(overrides?: CallOverrides): Promise<number>;

  protectionConfig(overrides?: CallOverrides): Promise<string>;

  setCollateralCapComponent(
    _token1Symbol: string,
    _token2Symbol: string,
    _collateralCapComponent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setILProtectionConfig(
    _newInstance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPair(
    _token1Symbol: string,
    _token2Symbol: string,
    _token1PriceAggregator: string,
    _token2PriceAggregator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPremiumsParams(
    _token1Symbol: string,
    _token2Symbol: string,
    _policyPeriods: BigNumberish[],
    _premiumsParams: PremiumParamsStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceTokenDecimals(
    _priceTokenDecimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deletePremiumsParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriods: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getCollateralCapComponent(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getOrderedTokenPairIfExists(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<TokenPairStructOutput>;

    getPair(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<TokenPairStructOutput>;

    getPairs(overrides?: CallOverrides): Promise<TokenPairStructOutput[]>;

    getPremiumParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PremiumParamsStructOutput>;

    getTokenPrice(
      _token1Symbol: string,
      _token2Symbol: string,
      _isFirstTokenPrice: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceTokenDecimals(overrides?: CallOverrides): Promise<number>;

    protectionConfig(overrides?: CallOverrides): Promise<string>;

    setCollateralCapComponent(
      _token1Symbol: string,
      _token2Symbol: string,
      _collateralCapComponent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setILProtectionConfig(
      _newInstance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPair(
      _token1Symbol: string,
      _token2Symbol: string,
      _token1PriceAggregator: string,
      _token2PriceAggregator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPremiumsParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriods: BigNumberish[],
      _premiumsParams: PremiumParamsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceTokenDecimals(
      _priceTokenDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CollateralCapComponentChanged(string,string,uint16,uint16)"(
      token1Symbol?: null,
      token2Symbol?: null,
      prevValue?: null,
      newValue?: null
    ): CollateralCapComponentChangedEventFilter;
    CollateralCapComponentChanged(
      token1Symbol?: null,
      token2Symbol?: null,
      prevValue?: null,
      newValue?: null
    ): CollateralCapComponentChangedEventFilter;

    "ILProtectionConfigChanged(address,address)"(
      prevValue?: null,
      newValue?: null
    ): ILProtectionConfigChangedEventFilter;
    ILProtectionConfigChanged(
      prevValue?: null,
      newValue?: null
    ): ILProtectionConfigChangedEventFilter;

    "PairSet(tuple,tuple)"(
      prevValue?: null,
      newValue?: null
    ): PairSetEventFilter;
    PairSet(prevValue?: null, newValue?: null): PairSetEventFilter;

    "PremiumParamsChanged(string,string,uint256,tuple,tuple)"(
      token1Symbol?: null,
      token2Symbol?: null,
      policyPeriod?: null,
      prevValue?: null,
      newValue?: null
    ): PremiumParamsChangedEventFilter;
    PremiumParamsChanged(
      token1Symbol?: null,
      token2Symbol?: null,
      policyPeriod?: null,
      prevValue?: null,
      newValue?: null
    ): PremiumParamsChangedEventFilter;

    "PremiumParamsDeleted(string,string,uint256,tuple)"(
      token1Symbol?: null,
      token2Symbol?: null,
      policyPeriod?: null,
      deletedParams?: null
    ): PremiumParamsDeletedEventFilter;
    PremiumParamsDeleted(
      token1Symbol?: null,
      token2Symbol?: null,
      policyPeriod?: null,
      deletedParams?: null
    ): PremiumParamsDeletedEventFilter;

    "PriceTokenDecimalsChanged(uint8,uint8)"(
      prevValue?: null,
      newValue?: null
    ): PriceTokenDecimalsChangedEventFilter;
    PriceTokenDecimalsChanged(
      prevValue?: null,
      newValue?: null
    ): PriceTokenDecimalsChangedEventFilter;
  };

  estimateGas: {
    deletePremiumsParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriods: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCollateralCapComponent(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderedTokenPairIfExists(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPair(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairs(overrides?: CallOverrides): Promise<BigNumber>;

    getPremiumParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPrice(
      _token1Symbol: string,
      _token2Symbol: string,
      _isFirstTokenPrice: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceTokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    protectionConfig(overrides?: CallOverrides): Promise<BigNumber>;

    setCollateralCapComponent(
      _token1Symbol: string,
      _token2Symbol: string,
      _collateralCapComponent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setILProtectionConfig(
      _newInstance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPair(
      _token1Symbol: string,
      _token2Symbol: string,
      _token1PriceAggregator: string,
      _token2PriceAggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPremiumsParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriods: BigNumberish[],
      _premiumsParams: PremiumParamsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceTokenDecimals(
      _priceTokenDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deletePremiumsParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriods: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCollateralCapComponent(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderedTokenPairIfExists(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPair(
      _token1Symbol: string,
      _token2Symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPremiumParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenPrice(
      _token1Symbol: string,
      _token2Symbol: string,
      _isFirstTokenPrice: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceTokenDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protectionConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCollateralCapComponent(
      _token1Symbol: string,
      _token2Symbol: string,
      _collateralCapComponent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setILProtectionConfig(
      _newInstance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPair(
      _token1Symbol: string,
      _token2Symbol: string,
      _token1PriceAggregator: string,
      _token2PriceAggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPremiumsParams(
      _token1Symbol: string,
      _token2Symbol: string,
      _policyPeriods: BigNumberish[],
      _premiumsParams: PremiumParamsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceTokenDecimals(
      _priceTokenDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
