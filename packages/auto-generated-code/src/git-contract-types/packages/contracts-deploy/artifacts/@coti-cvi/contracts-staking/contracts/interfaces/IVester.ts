/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../../common";

export interface IVesterInterface extends utils.Interface {
  functions: {
    "bonusRewards(address)": FunctionFragment;
    "claimForAccount(address,address)": FunctionFragment;
    "claimable(address)": FunctionFragment;
    "claimedAmounts(address)": FunctionFragment;
    "cumulativeClaimAmounts(address)": FunctionFragment;
    "cumulativeRewardDeductions(address)": FunctionFragment;
    "getCombinedAverageStakedAmount(address)": FunctionFragment;
    "getMaxVestableAmount(address)": FunctionFragment;
    "getVestedAmount(address)": FunctionFragment;
    "pairAmounts(address)": FunctionFragment;
    "rewardTracker()": FunctionFragment;
    "setBonusRewards(address,uint256)": FunctionFragment;
    "setCumulativeRewardDeductions(address,uint256)": FunctionFragment;
    "setTransferredAverageStakedAmounts(address,uint256)": FunctionFragment;
    "setTransferredCumulativeRewards(address,uint256)": FunctionFragment;
    "transferStakeValues(address,address)": FunctionFragment;
    "transferredAverageStakedAmounts(address)": FunctionFragment;
    "transferredCumulativeRewards(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bonusRewards"
      | "claimForAccount"
      | "claimable"
      | "claimedAmounts"
      | "cumulativeClaimAmounts"
      | "cumulativeRewardDeductions"
      | "getCombinedAverageStakedAmount"
      | "getMaxVestableAmount"
      | "getVestedAmount"
      | "pairAmounts"
      | "rewardTracker"
      | "setBonusRewards"
      | "setCumulativeRewardDeductions"
      | "setTransferredAverageStakedAmounts"
      | "setTransferredCumulativeRewards"
      | "transferStakeValues"
      | "transferredAverageStakedAmounts"
      | "transferredCumulativeRewards"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bonusRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimForAccount",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "claimable", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimedAmounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeClaimAmounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeRewardDeductions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCombinedAverageStakedAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxVestableAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestedAmount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "pairAmounts", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewardTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBonusRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCumulativeRewardDeductions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferredAverageStakedAmounts",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferredCumulativeRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferStakeValues",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferredAverageStakedAmounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferredCumulativeRewards",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "bonusRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimedAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeClaimAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeRewardDeductions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCombinedAverageStakedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxVestableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBonusRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCumulativeRewardDeductions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferredAverageStakedAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferredCumulativeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferStakeValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferredAverageStakedAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferredCumulativeRewards",
    data: BytesLike
  ): Result;

  events: {
    "Claim(address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "PairTransfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ClaimEventObject {
  receiver: string;
  amount: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface DepositEventObject {
  account: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface PairTransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type PairTransferEvent = TypedEvent<
  [string, string, BigNumber],
  PairTransferEventObject
>;

export type PairTransferEventFilter = TypedEventFilter<PairTransferEvent>;

export interface WithdrawEventObject {
  account: string;
  claimedAmount: BigNumber;
  balance: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface IVester extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVesterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bonusRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimForAccount(
      _account: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimable(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimedAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cumulativeClaimAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cumulativeRewardDeductions(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCombinedAverageStakedAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxVestableAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVestedAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pairAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardTracker(overrides?: CallOverrides): Promise<[string]>;

    setBonusRewards(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCumulativeRewardDeductions(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferredAverageStakedAmounts(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTransferredCumulativeRewards(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferStakeValues(
      _sender: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferredAverageStakedAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferredCumulativeRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  bonusRewards(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimForAccount(
    _account: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimable(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimedAmounts(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cumulativeClaimAmounts(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cumulativeRewardDeductions(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCombinedAverageStakedAmount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxVestableAmount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVestedAmount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pairAmounts(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardTracker(overrides?: CallOverrides): Promise<string>;

  setBonusRewards(
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCumulativeRewardDeductions(
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferredAverageStakedAmounts(
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTransferredCumulativeRewards(
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferStakeValues(
    _sender: string,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferredAverageStakedAmounts(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferredCumulativeRewards(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    bonusRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimForAccount(
      _account: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimable(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimedAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeClaimAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeRewardDeductions(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCombinedAverageStakedAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxVestableAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestedAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTracker(overrides?: CallOverrides): Promise<string>;

    setBonusRewards(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCumulativeRewardDeductions(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferredAverageStakedAmounts(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTransferredCumulativeRewards(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferStakeValues(
      _sender: string,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferredAverageStakedAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferredCumulativeRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Claim(address,uint256)"(
      receiver?: string | null,
      amount?: null
    ): ClaimEventFilter;
    Claim(receiver?: string | null, amount?: null): ClaimEventFilter;

    "Deposit(address,uint256)"(
      account?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(account?: string | null, amount?: null): DepositEventFilter;

    "PairTransfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): PairTransferEventFilter;
    PairTransfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): PairTransferEventFilter;

    "Withdraw(address,uint256,uint256)"(
      account?: string | null,
      claimedAmount?: null,
      balance?: null
    ): WithdrawEventFilter;
    Withdraw(
      account?: string | null,
      claimedAmount?: null,
      balance?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    bonusRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimForAccount(
      _account: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimable(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimedAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeClaimAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeRewardDeductions(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCombinedAverageStakedAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxVestableAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestedAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTracker(overrides?: CallOverrides): Promise<BigNumber>;

    setBonusRewards(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCumulativeRewardDeductions(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferredAverageStakedAmounts(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTransferredCumulativeRewards(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferStakeValues(
      _sender: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferredAverageStakedAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferredCumulativeRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bonusRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimForAccount(
      _account: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimable(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimedAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeClaimAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeRewardDeductions(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCombinedAverageStakedAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxVestableAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestedAmount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBonusRewards(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCumulativeRewardDeductions(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferredAverageStakedAmounts(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTransferredCumulativeRewards(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferStakeValues(
      _sender: string,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferredAverageStakedAmounts(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferredCumulativeRewards(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
