/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../../common";

export interface ILiquidationInterface extends utils.Interface {
  functions: {
    "getLiquidationReward(uint256,bool,uint168,uint32,uint8)": FunctionFragment;
    "isLiquidationCandidate(uint256,bool,uint168,uint32,uint8)": FunctionFragment;
    "setMaxLiquidationRewardPercents(uint16[8])": FunctionFragment;
    "setMinLiquidationRewardPercent(uint16)": FunctionFragment;
    "setMinLiquidationThresholdPercents(uint16[8])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getLiquidationReward"
      | "isLiquidationCandidate"
      | "setMaxLiquidationRewardPercents"
      | "setMinLiquidationRewardPercent"
      | "setMinLiquidationThresholdPercents"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getLiquidationReward",
    values: [BigNumberish, boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidationCandidate",
    values: [BigNumberish, boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLiquidationRewardPercents",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLiquidationRewardPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLiquidationThresholdPercents",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getLiquidationReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidationCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLiquidationRewardPercents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinLiquidationRewardPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinLiquidationThresholdPercents",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ILiquidation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILiquidationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getLiquidationReward(
      positionBalance: BigNumberish,
      isPositive: boolean,
      positionUnitsAmount: BigNumberish,
      openCVIValue: BigNumberish,
      leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { finderFeeAmount: BigNumber }>;

    isLiquidationCandidate(
      positionBalance: BigNumberish,
      isPositive: boolean,
      positionUnitsAmount: BigNumberish,
      openCVIValue: BigNumberish,
      leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setMaxLiquidationRewardPercents(
      newMaxRewardPercents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinLiquidationRewardPercent(
      newMinRewardPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinLiquidationThresholdPercents(
      newMinThresholdPercents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getLiquidationReward(
    positionBalance: BigNumberish,
    isPositive: boolean,
    positionUnitsAmount: BigNumberish,
    openCVIValue: BigNumberish,
    leverage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isLiquidationCandidate(
    positionBalance: BigNumberish,
    isPositive: boolean,
    positionUnitsAmount: BigNumberish,
    openCVIValue: BigNumberish,
    leverage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setMaxLiquidationRewardPercents(
    newMaxRewardPercents: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinLiquidationRewardPercent(
    newMinRewardPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinLiquidationThresholdPercents(
    newMinThresholdPercents: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getLiquidationReward(
      positionBalance: BigNumberish,
      isPositive: boolean,
      positionUnitsAmount: BigNumberish,
      openCVIValue: BigNumberish,
      leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLiquidationCandidate(
      positionBalance: BigNumberish,
      isPositive: boolean,
      positionUnitsAmount: BigNumberish,
      openCVIValue: BigNumberish,
      leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setMaxLiquidationRewardPercents(
      newMaxRewardPercents: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMinLiquidationRewardPercent(
      newMinRewardPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinLiquidationThresholdPercents(
      newMinThresholdPercents: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getLiquidationReward(
      positionBalance: BigNumberish,
      isPositive: boolean,
      positionUnitsAmount: BigNumberish,
      openCVIValue: BigNumberish,
      leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLiquidationCandidate(
      positionBalance: BigNumberish,
      isPositive: boolean,
      positionUnitsAmount: BigNumberish,
      openCVIValue: BigNumberish,
      leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMaxLiquidationRewardPercents(
      newMaxRewardPercents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinLiquidationRewardPercent(
      newMinRewardPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinLiquidationThresholdPercents(
      newMinThresholdPercents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getLiquidationReward(
      positionBalance: BigNumberish,
      isPositive: boolean,
      positionUnitsAmount: BigNumberish,
      openCVIValue: BigNumberish,
      leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLiquidationCandidate(
      positionBalance: BigNumberish,
      isPositive: boolean,
      positionUnitsAmount: BigNumberish,
      openCVIValue: BigNumberish,
      leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMaxLiquidationRewardPercents(
      newMaxRewardPercents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinLiquidationRewardPercent(
      newMinRewardPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinLiquidationThresholdPercents(
      newMinThresholdPercents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
