/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../common";

export interface ILProtectionConfigInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MAX_PRECISION()": FunctionFragment;
    "PROTECTION_CONTROLLER_ROLE()": FunctionFragment;
    "buyILProtectionEnabled()": FunctionFragment;
    "expectedLPTokensValueGrowth()": FunctionFragment;
    "feeComponent()": FunctionFragment;
    "getPolicyPeriodsInSeconds()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,uint256,uint16,bool,uint16,uint16,uint256[],uint256,uint256)": FunctionFragment;
    "maxILProtected()": FunctionFragment;
    "minAmountToBePaid()": FunctionFragment;
    "owner()": FunctionFragment;
    "policyPeriodExists(uint256)": FunctionFragment;
    "policyPeriods(uint256)": FunctionFragment;
    "premiumGrowthStart()": FunctionFragment;
    "premiumSlope()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setBuyILProtectionEnabled(bool)": FunctionFragment;
    "setExpectedLPTokensValueGrowth(uint16)": FunctionFragment;
    "setFeeComponent(uint16)": FunctionFragment;
    "setMaxILProtected(uint16)": FunctionFragment;
    "setMinAmountToBePaid(uint256)": FunctionFragment;
    "setPolicyPeriodsInSeconds(uint256[])": FunctionFragment;
    "setPremiumGrowthStart(uint256)": FunctionFragment;
    "setPremiumSlope(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_PRECISION"
      | "PROTECTION_CONTROLLER_ROLE"
      | "buyILProtectionEnabled"
      | "expectedLPTokensValueGrowth"
      | "feeComponent"
      | "getPolicyPeriodsInSeconds"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "maxILProtected"
      | "minAmountToBePaid"
      | "owner"
      | "policyPeriodExists"
      | "policyPeriods"
      | "premiumGrowthStart"
      | "premiumSlope"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "setBuyILProtectionEnabled"
      | "setExpectedLPTokensValueGrowth"
      | "setFeeComponent"
      | "setMaxILProtected"
      | "setMinAmountToBePaid"
      | "setPolicyPeriodsInSeconds"
      | "setPremiumGrowthStart"
      | "setPremiumSlope"
      | "supportsInterface"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTECTION_CONTROLLER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyILProtectionEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expectedLPTokensValueGrowth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeComponent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicyPeriodsInSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxILProtected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAmountToBePaid",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "policyPeriodExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "policyPeriods",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "premiumGrowthStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "premiumSlope",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyILProtectionEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpectedLPTokensValueGrowth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeComponent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxILProtected",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAmountToBePaid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPolicyPeriodsInSeconds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPremiumGrowthStart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPremiumSlope",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTECTION_CONTROLLER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyILProtectionEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectedLPTokensValueGrowth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPolicyPeriodsInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxILProtected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAmountToBePaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "policyPeriodExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyPeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "premiumGrowthStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "premiumSlope",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBuyILProtectionEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpectedLPTokensValueGrowth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxILProtected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAmountToBePaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPolicyPeriodsInSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPremiumGrowthStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPremiumSlope",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "BuyILProtectionEnabledChanged(bool,bool)": EventFragment;
    "ExpectedLPTokensValueGrowthChanged(uint16,uint16)": EventFragment;
    "FeeComponentChanged(uint16,uint16)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MaxILProtectedChanged(uint16,uint16)": EventFragment;
    "MinAmountToBePaidChanged(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PolicyPeriodChanged(uint256[],uint256[])": EventFragment;
    "PremiumGrowthStartChanged(uint256,uint256)": EventFragment;
    "PremiumSlopeChanged(uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BuyILProtectionEnabledChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExpectedLPTokensValueGrowthChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeComponentChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxILProtectedChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinAmountToBePaidChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyPeriodChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumGrowthStartChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumSlopeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface BuyILProtectionEnabledChangedEventObject {
  prevValue: boolean;
  newValue: boolean;
}
export type BuyILProtectionEnabledChangedEvent = TypedEvent<
  [boolean, boolean],
  BuyILProtectionEnabledChangedEventObject
>;

export type BuyILProtectionEnabledChangedEventFilter =
  TypedEventFilter<BuyILProtectionEnabledChangedEvent>;

export interface ExpectedLPTokensValueGrowthChangedEventObject {
  prevValue: number;
  newValue: number;
}
export type ExpectedLPTokensValueGrowthChangedEvent = TypedEvent<
  [number, number],
  ExpectedLPTokensValueGrowthChangedEventObject
>;

export type ExpectedLPTokensValueGrowthChangedEventFilter =
  TypedEventFilter<ExpectedLPTokensValueGrowthChangedEvent>;

export interface FeeComponentChangedEventObject {
  prevValue: number;
  newValue: number;
}
export type FeeComponentChangedEvent = TypedEvent<
  [number, number],
  FeeComponentChangedEventObject
>;

export type FeeComponentChangedEventFilter =
  TypedEventFilter<FeeComponentChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MaxILProtectedChangedEventObject {
  prevValue: number;
  newValue: number;
}
export type MaxILProtectedChangedEvent = TypedEvent<
  [number, number],
  MaxILProtectedChangedEventObject
>;

export type MaxILProtectedChangedEventFilter =
  TypedEventFilter<MaxILProtectedChangedEvent>;

export interface MinAmountToBePaidChangedEventObject {
  prevValue: BigNumber;
  newValue: BigNumber;
}
export type MinAmountToBePaidChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinAmountToBePaidChangedEventObject
>;

export type MinAmountToBePaidChangedEventFilter =
  TypedEventFilter<MinAmountToBePaidChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PolicyPeriodChangedEventObject {
  prevValue: BigNumber[];
  newValue: BigNumber[];
}
export type PolicyPeriodChangedEvent = TypedEvent<
  [BigNumber[], BigNumber[]],
  PolicyPeriodChangedEventObject
>;

export type PolicyPeriodChangedEventFilter =
  TypedEventFilter<PolicyPeriodChangedEvent>;

export interface PremiumGrowthStartChangedEventObject {
  prevValue: BigNumber;
  newValue: BigNumber;
}
export type PremiumGrowthStartChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PremiumGrowthStartChangedEventObject
>;

export type PremiumGrowthStartChangedEventFilter =
  TypedEventFilter<PremiumGrowthStartChangedEvent>;

export interface PremiumSlopeChangedEventObject {
  prevValue: BigNumber;
  newValue: BigNumber;
}
export type PremiumSlopeChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PremiumSlopeChangedEventObject
>;

export type PremiumSlopeChangedEventFilter =
  TypedEventFilter<PremiumSlopeChangedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface ILProtectionConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILProtectionConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MAX_PRECISION(overrides?: CallOverrides): Promise<[number]>;

    PROTECTION_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    buyILProtectionEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    expectedLPTokensValueGrowth(overrides?: CallOverrides): Promise<[number]>;

    feeComponent(overrides?: CallOverrides): Promise<[number]>;

    getPolicyPeriodsInSeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _owner: string,
      _minAmountToBePaid: BigNumberish,
      _maxILProtected: BigNumberish,
      _buyILProtectionEnabled: boolean,
      _feeComponent: BigNumberish,
      _expectedLPTokensValueGrowth: BigNumberish,
      _policyPeriods: BigNumberish[],
      _premiumGrowthStart: BigNumberish,
      _premiumSlope: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxILProtected(overrides?: CallOverrides): Promise<[number]>;

    minAmountToBePaid(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    policyPeriodExists(
      _policyPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    policyPeriods(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    premiumGrowthStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    premiumSlope(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuyILProtectionEnabled(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExpectedLPTokensValueGrowth(
      _expectedLPTokensValueGrowth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeComponent(
      _feeComponent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxILProtected(
      _maxILProtected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinAmountToBePaid(
      _minAmountToBePaid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPolicyPeriodsInSeconds(
      _policyPeriods: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPremiumGrowthStart(
      _premiumGrowthStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPremiumSlope(
      _premiumSlope: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MAX_PRECISION(overrides?: CallOverrides): Promise<number>;

  PROTECTION_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<string>;

  buyILProtectionEnabled(overrides?: CallOverrides): Promise<boolean>;

  expectedLPTokensValueGrowth(overrides?: CallOverrides): Promise<number>;

  feeComponent(overrides?: CallOverrides): Promise<number>;

  getPolicyPeriodsInSeconds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _owner: string,
    _minAmountToBePaid: BigNumberish,
    _maxILProtected: BigNumberish,
    _buyILProtectionEnabled: boolean,
    _feeComponent: BigNumberish,
    _expectedLPTokensValueGrowth: BigNumberish,
    _policyPeriods: BigNumberish[],
    _premiumGrowthStart: BigNumberish,
    _premiumSlope: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxILProtected(overrides?: CallOverrides): Promise<number>;

  minAmountToBePaid(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  policyPeriodExists(
    _policyPeriod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  policyPeriods(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  premiumGrowthStart(overrides?: CallOverrides): Promise<BigNumber>;

  premiumSlope(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuyILProtectionEnabled(
    _isEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExpectedLPTokensValueGrowth(
    _expectedLPTokensValueGrowth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeComponent(
    _feeComponent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxILProtected(
    _maxILProtected: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinAmountToBePaid(
    _minAmountToBePaid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPolicyPeriodsInSeconds(
    _policyPeriods: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPremiumGrowthStart(
    _premiumGrowthStart: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPremiumSlope(
    _premiumSlope: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MAX_PRECISION(overrides?: CallOverrides): Promise<number>;

    PROTECTION_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<string>;

    buyILProtectionEnabled(overrides?: CallOverrides): Promise<boolean>;

    expectedLPTokensValueGrowth(overrides?: CallOverrides): Promise<number>;

    feeComponent(overrides?: CallOverrides): Promise<number>;

    getPolicyPeriodsInSeconds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _owner: string,
      _minAmountToBePaid: BigNumberish,
      _maxILProtected: BigNumberish,
      _buyILProtectionEnabled: boolean,
      _feeComponent: BigNumberish,
      _expectedLPTokensValueGrowth: BigNumberish,
      _policyPeriods: BigNumberish[],
      _premiumGrowthStart: BigNumberish,
      _premiumSlope: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maxILProtected(overrides?: CallOverrides): Promise<number>;

    minAmountToBePaid(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    policyPeriodExists(
      _policyPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    policyPeriods(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    premiumGrowthStart(overrides?: CallOverrides): Promise<BigNumber>;

    premiumSlope(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyILProtectionEnabled(
      _isEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setExpectedLPTokensValueGrowth(
      _expectedLPTokensValueGrowth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeComponent(
      _feeComponent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxILProtected(
      _maxILProtected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinAmountToBePaid(
      _minAmountToBePaid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPolicyPeriodsInSeconds(
      _policyPeriods: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPremiumGrowthStart(
      _premiumGrowthStart: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPremiumSlope(
      _premiumSlope: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BuyILProtectionEnabledChanged(bool,bool)"(
      prevValue?: null,
      newValue?: null
    ): BuyILProtectionEnabledChangedEventFilter;
    BuyILProtectionEnabledChanged(
      prevValue?: null,
      newValue?: null
    ): BuyILProtectionEnabledChangedEventFilter;

    "ExpectedLPTokensValueGrowthChanged(uint16,uint16)"(
      prevValue?: null,
      newValue?: null
    ): ExpectedLPTokensValueGrowthChangedEventFilter;
    ExpectedLPTokensValueGrowthChanged(
      prevValue?: null,
      newValue?: null
    ): ExpectedLPTokensValueGrowthChangedEventFilter;

    "FeeComponentChanged(uint16,uint16)"(
      prevValue?: null,
      newValue?: null
    ): FeeComponentChangedEventFilter;
    FeeComponentChanged(
      prevValue?: null,
      newValue?: null
    ): FeeComponentChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MaxILProtectedChanged(uint16,uint16)"(
      prevValue?: null,
      newValue?: null
    ): MaxILProtectedChangedEventFilter;
    MaxILProtectedChanged(
      prevValue?: null,
      newValue?: null
    ): MaxILProtectedChangedEventFilter;

    "MinAmountToBePaidChanged(uint256,uint256)"(
      prevValue?: null,
      newValue?: null
    ): MinAmountToBePaidChangedEventFilter;
    MinAmountToBePaidChanged(
      prevValue?: null,
      newValue?: null
    ): MinAmountToBePaidChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PolicyPeriodChanged(uint256[],uint256[])"(
      prevValue?: null,
      newValue?: null
    ): PolicyPeriodChangedEventFilter;
    PolicyPeriodChanged(
      prevValue?: null,
      newValue?: null
    ): PolicyPeriodChangedEventFilter;

    "PremiumGrowthStartChanged(uint256,uint256)"(
      prevValue?: null,
      newValue?: null
    ): PremiumGrowthStartChangedEventFilter;
    PremiumGrowthStartChanged(
      prevValue?: null,
      newValue?: null
    ): PremiumGrowthStartChangedEventFilter;

    "PremiumSlopeChanged(uint256,uint256)"(
      prevValue?: null,
      newValue?: null
    ): PremiumSlopeChangedEventFilter;
    PremiumSlopeChanged(
      prevValue?: null,
      newValue?: null
    ): PremiumSlopeChangedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    PROTECTION_CONTROLLER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    buyILProtectionEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    expectedLPTokensValueGrowth(overrides?: CallOverrides): Promise<BigNumber>;

    feeComponent(overrides?: CallOverrides): Promise<BigNumber>;

    getPolicyPeriodsInSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _minAmountToBePaid: BigNumberish,
      _maxILProtected: BigNumberish,
      _buyILProtectionEnabled: boolean,
      _feeComponent: BigNumberish,
      _expectedLPTokensValueGrowth: BigNumberish,
      _policyPeriods: BigNumberish[],
      _premiumGrowthStart: BigNumberish,
      _premiumSlope: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxILProtected(overrides?: CallOverrides): Promise<BigNumber>;

    minAmountToBePaid(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    policyPeriodExists(
      _policyPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    policyPeriods(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    premiumGrowthStart(overrides?: CallOverrides): Promise<BigNumber>;

    premiumSlope(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuyILProtectionEnabled(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExpectedLPTokensValueGrowth(
      _expectedLPTokensValueGrowth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeComponent(
      _feeComponent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxILProtected(
      _maxILProtected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinAmountToBePaid(
      _minAmountToBePaid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPolicyPeriodsInSeconds(
      _policyPeriods: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPremiumGrowthStart(
      _premiumGrowthStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPremiumSlope(
      _premiumSlope: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROTECTION_CONTROLLER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyILProtectionEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expectedLPTokensValueGrowth(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeComponent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPolicyPeriodsInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _minAmountToBePaid: BigNumberish,
      _maxILProtected: BigNumberish,
      _buyILProtectionEnabled: boolean,
      _feeComponent: BigNumberish,
      _expectedLPTokensValueGrowth: BigNumberish,
      _policyPeriods: BigNumberish[],
      _premiumGrowthStart: BigNumberish,
      _premiumSlope: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxILProtected(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minAmountToBePaid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policyPeriodExists(
      _policyPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    policyPeriods(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    premiumGrowthStart(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    premiumSlope(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuyILProtectionEnabled(
      _isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExpectedLPTokensValueGrowth(
      _expectedLPTokensValueGrowth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeComponent(
      _feeComponent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxILProtected(
      _maxILProtected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinAmountToBePaid(
      _minAmountToBePaid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPolicyPeriodsInSeconds(
      _policyPeriods: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPremiumGrowthStart(
      _premiumGrowthStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPremiumSlope(
      _premiumSlope: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
