/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../../common";

export interface IRewardRouterInterface extends utils.Interface {
  functions: {
    "batchCompoundForAccounts(address[],uint8)": FunctionFragment;
    "batchStakeForAccount(uint8,address[],uint256[])": FunctionFragment;
    "claim(uint8)": FunctionFragment;
    "compound(uint8)": FunctionFragment;
    "compoundForAccount(address,uint8)": FunctionFragment;
    "rewardTrackers(uint8)": FunctionFragment;
    "setRewardTrackers(uint8[],address[])": FunctionFragment;
    "setTokens(uint8[],address[])": FunctionFragment;
    "setVesters(uint8[],address[])": FunctionFragment;
    "stake(uint8,uint256)": FunctionFragment;
    "stakeForAccount(uint8,address,uint256)": FunctionFragment;
    "tokens(uint8)": FunctionFragment;
    "unstake(uint8,uint256)": FunctionFragment;
    "vesters(uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batchCompoundForAccounts"
      | "batchStakeForAccount"
      | "claim"
      | "compound"
      | "compoundForAccount"
      | "rewardTrackers"
      | "setRewardTrackers"
      | "setTokens"
      | "setVesters"
      | "stake"
      | "stakeForAccount"
      | "tokens"
      | "unstake"
      | "vesters"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchCompoundForAccounts",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchStakeForAccount",
    values: [BigNumberish, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "compound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "compoundForAccount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTrackers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardTrackers",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokens",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVesters",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeForAccount",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vesters",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchCompoundForAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchStakeForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "compound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compoundForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTrackers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardTrackers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVesters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vesters", data: BytesLike): Result;

  events: {
    "StakeToken(address,address,uint256)": EventFragment;
    "UnstakeToken(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StakeToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakeToken"): EventFragment;
}

export interface StakeTokenEventObject {
  account: string;
  tokenName: string;
  amount: BigNumber;
}
export type StakeTokenEvent = TypedEvent<
  [string, string, BigNumber],
  StakeTokenEventObject
>;

export type StakeTokenEventFilter = TypedEventFilter<StakeTokenEvent>;

export interface UnstakeTokenEventObject {
  account: string;
  tokenName: string;
  amount: BigNumber;
}
export type UnstakeTokenEvent = TypedEvent<
  [string, string, BigNumber],
  UnstakeTokenEventObject
>;

export type UnstakeTokenEventFilter = TypedEventFilter<UnstakeTokenEvent>;

export interface IRewardRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRewardRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchCompoundForAccounts(
      _accounts: string[],
      _tokenName: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchStakeForAccount(
      _tokenName: BigNumberish,
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      _token: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    compound(
      _tokenName: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    compoundForAccount(
      _account: string,
      _tokenName: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardTrackers(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setRewardTrackers(
      _tokenNames: BigNumberish[],
      _rewardTrackers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokens(
      _tokenNames: BigNumberish[],
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVesters(
      _tokenNames: BigNumberish[],
      _vesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _token: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeForAccount(
      _token: BigNumberish,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokens(_token: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    unstake(
      _token: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vesters(_token: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  batchCompoundForAccounts(
    _accounts: string[],
    _tokenName: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchStakeForAccount(
    _tokenName: BigNumberish,
    _accounts: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    _token: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  compound(
    _tokenName: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  compoundForAccount(
    _account: string,
    _tokenName: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardTrackers(
    _token: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setRewardTrackers(
    _tokenNames: BigNumberish[],
    _rewardTrackers: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokens(
    _tokenNames: BigNumberish[],
    _tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVesters(
    _tokenNames: BigNumberish[],
    _vesters: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _token: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeForAccount(
    _token: BigNumberish,
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokens(_token: BigNumberish, overrides?: CallOverrides): Promise<string>;

  unstake(
    _token: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vesters(_token: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    batchCompoundForAccounts(
      _accounts: string[],
      _tokenName: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    batchStakeForAccount(
      _tokenName: BigNumberish,
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claim(_token: BigNumberish, overrides?: CallOverrides): Promise<void>;

    compound(
      _tokenName: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    compoundForAccount(
      _account: string,
      _tokenName: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardTrackers(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setRewardTrackers(
      _tokenNames: BigNumberish[],
      _rewardTrackers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTokens(
      _tokenNames: BigNumberish[],
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setVesters(
      _tokenNames: BigNumberish[],
      _vesters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      _token: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeForAccount(
      _token: BigNumberish,
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokens(_token: BigNumberish, overrides?: CallOverrides): Promise<string>;

    unstake(
      _token: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vesters(_token: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "StakeToken(address,address,uint256)"(
      account?: string | null,
      tokenName?: string | null,
      amount?: null
    ): StakeTokenEventFilter;
    StakeToken(
      account?: string | null,
      tokenName?: string | null,
      amount?: null
    ): StakeTokenEventFilter;

    "UnstakeToken(address,address,uint256)"(
      account?: string | null,
      tokenName?: string | null,
      amount?: null
    ): UnstakeTokenEventFilter;
    UnstakeToken(
      account?: string | null,
      tokenName?: string | null,
      amount?: null
    ): UnstakeTokenEventFilter;
  };

  estimateGas: {
    batchCompoundForAccounts(
      _accounts: string[],
      _tokenName: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchStakeForAccount(
      _tokenName: BigNumberish,
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      _token: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    compound(
      _tokenName: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    compoundForAccount(
      _account: string,
      _tokenName: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardTrackers(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRewardTrackers(
      _tokenNames: BigNumberish[],
      _rewardTrackers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokens(
      _tokenNames: BigNumberish[],
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVesters(
      _tokenNames: BigNumberish[],
      _vesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _token: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeForAccount(
      _token: BigNumberish,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokens(_token: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      _token: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vesters(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchCompoundForAccounts(
      _accounts: string[],
      _tokenName: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchStakeForAccount(
      _tokenName: BigNumberish,
      _accounts: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _token: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    compound(
      _tokenName: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    compoundForAccount(
      _account: string,
      _tokenName: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardTrackers(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRewardTrackers(
      _tokenNames: BigNumberish[],
      _rewardTrackers: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokens(
      _tokenNames: BigNumberish[],
      _tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVesters(
      _tokenNames: BigNumberish[],
      _vesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _token: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeForAccount(
      _token: BigNumberish,
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokens(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      _token: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vesters(
      _token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
