/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../../common";

export interface IPositionRewardsInterface extends utils.Interface {
  functions: {
    "calculatePositionReward(uint256,uint256)": FunctionFragment;
    "claimReward()": FunctionFragment;
    "extractRewards()": FunctionFragment;
    "setMaxClaimPeriod(uint256)": FunctionFragment;
    "setMaxDailyReward(uint256)": FunctionFragment;
    "setMaxRewardTime(uint256)": FunctionFragment;
    "setMaxRewardTimePercentageGain(uint256)": FunctionFragment;
    "setPlatform(address)": FunctionFragment;
    "setRewardCalculationParameters(uint256,uint256,uint256)": FunctionFragment;
    "setRewardFactor(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculatePositionReward"
      | "claimReward"
      | "extractRewards"
      | "setMaxClaimPeriod"
      | "setMaxDailyReward"
      | "setMaxRewardTime"
      | "setMaxRewardTimePercentageGain"
      | "setPlatform"
      | "setRewardCalculationParameters"
      | "setRewardFactor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculatePositionReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extractRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxClaimPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDailyReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRewardTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRewardTimePercentageGain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPlatform", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRewardCalculationParameters",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardFactor",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculatePositionReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extractRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxClaimPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDailyReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRewardTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRewardTimePercentageGain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardCalculationParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardFactor",
    data: BytesLike
  ): Result;

  events: {
    "Claimed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
}

export interface ClaimedEventObject {
  account: string;
  rewardAmount: BigNumber;
}
export type ClaimedEvent = TypedEvent<[string, BigNumber], ClaimedEventObject>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface IPositionRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPositionRewardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculatePositionReward(
      positionUnits: BigNumberish,
      positionTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewardAmount: BigNumber }>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extractRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxClaimPeriod(
      newMaxClaimPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxDailyReward(
      newMaxDailyReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxRewardTime(
      newMaxRewardTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxRewardTimePercentageGain(
      _newMaxRewardTimePercentageGain: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatform(
      newPlatform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardCalculationParameters(
      newMaxSingleReward: BigNumberish,
      rewardMaxLinearPositionUnits: BigNumberish,
      rewardMaxLinearGOVI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardFactor(
      newRewardFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculatePositionReward(
    positionUnits: BigNumberish,
    positionTimestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extractRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxClaimPeriod(
    newMaxClaimPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxDailyReward(
    newMaxDailyReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxRewardTime(
    newMaxRewardTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxRewardTimePercentageGain(
    _newMaxRewardTimePercentageGain: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatform(
    newPlatform: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardCalculationParameters(
    newMaxSingleReward: BigNumberish,
    rewardMaxLinearPositionUnits: BigNumberish,
    rewardMaxLinearGOVI: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardFactor(
    newRewardFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculatePositionReward(
      positionUnits: BigNumberish,
      positionTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(overrides?: CallOverrides): Promise<void>;

    extractRewards(overrides?: CallOverrides): Promise<void>;

    setMaxClaimPeriod(
      newMaxClaimPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDailyReward(
      newMaxDailyReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRewardTime(
      newMaxRewardTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRewardTimePercentageGain(
      _newMaxRewardTimePercentageGain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatform(newPlatform: string, overrides?: CallOverrides): Promise<void>;

    setRewardCalculationParameters(
      newMaxSingleReward: BigNumberish,
      rewardMaxLinearPositionUnits: BigNumberish,
      rewardMaxLinearGOVI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardFactor(
      newRewardFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Claimed(address,uint256)"(
      account?: string | null,
      rewardAmount?: null
    ): ClaimedEventFilter;
    Claimed(account?: string | null, rewardAmount?: null): ClaimedEventFilter;
  };

  estimateGas: {
    calculatePositionReward(
      positionUnits: BigNumberish,
      positionTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extractRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxClaimPeriod(
      newMaxClaimPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxDailyReward(
      newMaxDailyReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxRewardTime(
      newMaxRewardTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxRewardTimePercentageGain(
      _newMaxRewardTimePercentageGain: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatform(
      newPlatform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardCalculationParameters(
      newMaxSingleReward: BigNumberish,
      rewardMaxLinearPositionUnits: BigNumberish,
      rewardMaxLinearGOVI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardFactor(
      newRewardFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculatePositionReward(
      positionUnits: BigNumberish,
      positionTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extractRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxClaimPeriod(
      newMaxClaimPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDailyReward(
      newMaxDailyReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxRewardTime(
      newMaxRewardTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxRewardTimePercentageGain(
      _newMaxRewardTimePercentageGain: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatform(
      newPlatform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardCalculationParameters(
      newMaxSingleReward: BigNumberish,
      rewardMaxLinearPositionUnits: BigNumberish,
      rewardMaxLinearGOVI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardFactor(
      newRewardFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
