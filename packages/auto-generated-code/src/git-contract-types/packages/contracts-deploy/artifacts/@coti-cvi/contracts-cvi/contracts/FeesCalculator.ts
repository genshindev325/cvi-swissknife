/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../common";

export declare namespace IFeesCalculator {
  export type CVIValueStruct = { period: BigNumberish; cviValue: BigNumberish };

  export type CVIValueStructOutput = [BigNumber, number] & {
    period: BigNumber;
    cviValue: number;
  };

  export type SnapshotUpdateStruct = {
    latestSnapshot: BigNumberish;
    singleUnitFundingFee: BigNumberish;
    totalTime: BigNumberish;
    totalRounds: BigNumberish;
    cviValueTimestamp: BigNumberish;
    newLatestRoundId: BigNumberish;
    cviValue: BigNumberish;
    updatedSnapshot: boolean;
    updatedLatestRoundId: boolean;
    updatedLatestTimestamp: boolean;
    updatedTurbulenceData: boolean;
  };

  export type SnapshotUpdateStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    boolean,
    boolean,
    boolean,
    boolean
  ] & {
    latestSnapshot: BigNumber;
    singleUnitFundingFee: BigNumber;
    totalTime: BigNumber;
    totalRounds: BigNumber;
    cviValueTimestamp: BigNumber;
    newLatestRoundId: BigNumber;
    cviValue: number;
    updatedSnapshot: boolean;
    updatedLatestRoundId: boolean;
    updatedLatestTimestamp: boolean;
    updatedTurbulenceData: boolean;
  };
}

export interface FeesCalculatorInterface extends utils.Interface {
  functions: {
    "buyingPremiumFeeMaxPercent()": FunctionFragment;
    "buyingPremiumThreshold()": FunctionFragment;
    "calculateBuyingPremiumFee(uint168,uint8,uint256,uint256,uint256,uint256)": FunctionFragment;
    "calculateBuyingPremiumFeeWithAddendum(uint168,uint8,uint256,uint256,uint256,uint256,uint16)": FunctionFragment;
    "calculateClosePositionFeePercent(uint256,bool)": FunctionFragment;
    "calculateClosingPremiumFee()": FunctionFragment;
    "calculateCollateralRatio(uint256,uint256)": FunctionFragment;
    "calculateSingleUnitFundingFee((uint256,uint32)[],uint256,uint256)": FunctionFragment;
    "calculateSingleUnitPeriodFundingFee((uint256,uint32),uint256)": FunctionFragment;
    "calculateTurbulenceIndicatorPercent(uint256,uint256,uint32,uint32)": FunctionFragment;
    "calculateWithdrawFeePercent(uint256)": FunctionFragment;
    "closePositionFeeDecayPeriod()": FunctionFragment;
    "closePositionFeePercent()": FunctionFragment;
    "closePositionLPFeePercent()": FunctionFragment;
    "closePositionMaxFeePercent()": FunctionFragment;
    "closingPremiumFeeMaxPercent()": FunctionFragment;
    "collateralToBuyingPremiumMapping(uint256)": FunctionFragment;
    "collateralToExtraFundingFeeMapping(uint256)": FunctionFragment;
    "cviOracle()": FunctionFragment;
    "depositFeePercent()": FunctionFragment;
    "fundingFeeConstantRate()": FunctionFragment;
    "fundingFeeDivisionFactor()": FunctionFragment;
    "fundingFeeMaxRate()": FunctionFragment;
    "fundingFeeMinRate()": FunctionFragment;
    "getCollateralToBuyingPremiumMapping()": FunctionFragment;
    "getCollateralToExtraFundingFeeMapping()": FunctionFragment;
    "getFundingFeeCoefficients()": FunctionFragment;
    "maxCVIValue()": FunctionFragment;
    "maxFundingFeeCviThreshold()": FunctionFragment;
    "maxTurbulenceFeePercentToTrim()": FunctionFragment;
    "minFundingFeeCviThreshold()": FunctionFragment;
    "openPositionFeePercent()": FunctionFragment;
    "openPositionFees()": FunctionFragment;
    "openPositionLPFeePercent()": FunctionFragment;
    "oracleHeartbeatPeriod()": FunctionFragment;
    "oracleLeverage()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBuyingPremiumFeeMax(uint16)": FunctionFragment;
    "setBuyingPremiumThreshold(uint16)": FunctionFragment;
    "setClosePositionFee(uint16)": FunctionFragment;
    "setClosePositionFeeDecay(uint256)": FunctionFragment;
    "setClosePositionLPFee(uint16)": FunctionFragment;
    "setClosePositionMaxFee(uint16)": FunctionFragment;
    "setClosingPremiumFeeMax(uint16)": FunctionFragment;
    "setCollateralToBuyingPremiumMapping(uint16[])": FunctionFragment;
    "setCollateralToExtraFundingFeeMapping(uint32[])": FunctionFragment;
    "setDepositFee(uint16)": FunctionFragment;
    "setFundingFeeCoefficients(uint32[])": FunctionFragment;
    "setFundingFeeConstantRate(uint16)": FunctionFragment;
    "setFundingFeeDivisionFactor(uint32)": FunctionFragment;
    "setFundingFeeMaxRate(uint32)": FunctionFragment;
    "setFundingFeeMinRate(uint32)": FunctionFragment;
    "setMaxFundingFeeCviThreshold(uint32)": FunctionFragment;
    "setMaxTurbulenceFeePercentToTrim(uint16)": FunctionFragment;
    "setMinFundingFeeCviThreshold(uint32)": FunctionFragment;
    "setOpenPositionFee(uint16)": FunctionFragment;
    "setOpenPositionLPFee(uint16)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "setOracleHeartbeatPeriod(uint256)": FunctionFragment;
    "setStateUpdator(address)": FunctionFragment;
    "setThetaVault(address)": FunctionFragment;
    "setTurbulenceDeviationPercent(uint16)": FunctionFragment;
    "setTurbulenceDeviationThresholdPercent(uint16)": FunctionFragment;
    "setTurbulenceStep(uint16)": FunctionFragment;
    "setWithdrawFee(uint16)": FunctionFragment;
    "stateUpdator()": FunctionFragment;
    "thetaVault()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "turbulenceDeviationPercentage()": FunctionFragment;
    "turbulenceDeviationThresholdPercent()": FunctionFragment;
    "turbulenceIndicatorPercent()": FunctionFragment;
    "turbulenceStepPercent()": FunctionFragment;
    "updateSnapshots(uint256,uint256,uint256,uint80,uint256,uint256)": FunctionFragment;
    "updateTurbulenceIndicatorPercent(uint256,uint256,uint32,uint32)": FunctionFragment;
    "withdrawFeePercent()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyingPremiumFeeMaxPercent"
      | "buyingPremiumThreshold"
      | "calculateBuyingPremiumFee"
      | "calculateBuyingPremiumFeeWithAddendum"
      | "calculateClosePositionFeePercent"
      | "calculateClosingPremiumFee"
      | "calculateCollateralRatio"
      | "calculateSingleUnitFundingFee"
      | "calculateSingleUnitPeriodFundingFee"
      | "calculateTurbulenceIndicatorPercent"
      | "calculateWithdrawFeePercent"
      | "closePositionFeeDecayPeriod"
      | "closePositionFeePercent"
      | "closePositionLPFeePercent"
      | "closePositionMaxFeePercent"
      | "closingPremiumFeeMaxPercent"
      | "collateralToBuyingPremiumMapping"
      | "collateralToExtraFundingFeeMapping"
      | "cviOracle"
      | "depositFeePercent"
      | "fundingFeeConstantRate"
      | "fundingFeeDivisionFactor"
      | "fundingFeeMaxRate"
      | "fundingFeeMinRate"
      | "getCollateralToBuyingPremiumMapping"
      | "getCollateralToExtraFundingFeeMapping"
      | "getFundingFeeCoefficients"
      | "maxCVIValue"
      | "maxFundingFeeCviThreshold"
      | "maxTurbulenceFeePercentToTrim"
      | "minFundingFeeCviThreshold"
      | "openPositionFeePercent"
      | "openPositionFees"
      | "openPositionLPFeePercent"
      | "oracleHeartbeatPeriod"
      | "oracleLeverage"
      | "owner"
      | "renounceOwnership"
      | "setBuyingPremiumFeeMax"
      | "setBuyingPremiumThreshold"
      | "setClosePositionFee"
      | "setClosePositionFeeDecay"
      | "setClosePositionLPFee"
      | "setClosePositionMaxFee"
      | "setClosingPremiumFeeMax"
      | "setCollateralToBuyingPremiumMapping"
      | "setCollateralToExtraFundingFeeMapping"
      | "setDepositFee"
      | "setFundingFeeCoefficients"
      | "setFundingFeeConstantRate"
      | "setFundingFeeDivisionFactor"
      | "setFundingFeeMaxRate"
      | "setFundingFeeMinRate"
      | "setMaxFundingFeeCviThreshold"
      | "setMaxTurbulenceFeePercentToTrim"
      | "setMinFundingFeeCviThreshold"
      | "setOpenPositionFee"
      | "setOpenPositionLPFee"
      | "setOracle"
      | "setOracleHeartbeatPeriod"
      | "setStateUpdator"
      | "setThetaVault"
      | "setTurbulenceDeviationPercent"
      | "setTurbulenceDeviationThresholdPercent"
      | "setTurbulenceStep"
      | "setWithdrawFee"
      | "stateUpdator"
      | "thetaVault"
      | "transferOwnership"
      | "turbulenceDeviationPercentage"
      | "turbulenceDeviationThresholdPercent"
      | "turbulenceIndicatorPercent"
      | "turbulenceStepPercent"
      | "updateSnapshots"
      | "updateTurbulenceIndicatorPercent"
      | "withdrawFeePercent"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyingPremiumFeeMaxPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyingPremiumThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBuyingPremiumFee",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBuyingPremiumFeeWithAddendum",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateClosePositionFeePercent",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateClosingPremiumFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCollateralRatio",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSingleUnitFundingFee",
    values: [IFeesCalculator.CVIValueStruct[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSingleUnitPeriodFundingFee",
    values: [IFeesCalculator.CVIValueStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTurbulenceIndicatorPercent",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateWithdrawFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionFeeDecayPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionLPFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionMaxFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closingPremiumFeeMaxPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToBuyingPremiumMapping",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToExtraFundingFeeMapping",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cviOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingFeeConstantRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingFeeDivisionFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingFeeMaxRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingFeeMinRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralToBuyingPremiumMapping",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralToExtraFundingFeeMapping",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingFeeCoefficients",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxCVIValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxFundingFeeCviThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTurbulenceFeePercentToTrim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minFundingFeeCviThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionLPFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleHeartbeatPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleLeverage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyingPremiumFeeMax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyingPremiumThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClosePositionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClosePositionFeeDecay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClosePositionLPFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClosePositionMaxFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClosingPremiumFeeMax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralToBuyingPremiumMapping",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralToExtraFundingFeeMapping",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingFeeCoefficients",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingFeeConstantRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingFeeDivisionFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingFeeMaxRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingFeeMinRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxFundingFeeCviThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTurbulenceFeePercentToTrim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinFundingFeeCviThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpenPositionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpenPositionLPFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOracleHeartbeatPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStateUpdator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setThetaVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTurbulenceDeviationPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTurbulenceDeviationThresholdPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTurbulenceStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateUpdator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "thetaVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "turbulenceDeviationPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "turbulenceDeviationThresholdPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "turbulenceIndicatorPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "turbulenceStepPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSnapshots",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTurbulenceIndicatorPercent",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeePercent",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "buyingPremiumFeeMaxPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyingPremiumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateBuyingPremiumFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateBuyingPremiumFeeWithAddendum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateClosePositionFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateClosingPremiumFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSingleUnitFundingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSingleUnitPeriodFundingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTurbulenceIndicatorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateWithdrawFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionFeeDecayPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionLPFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionMaxFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closingPremiumFeeMaxPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToBuyingPremiumMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToExtraFundingFeeMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cviOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingFeeConstantRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingFeeDivisionFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingFeeMaxRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingFeeMinRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralToBuyingPremiumMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralToExtraFundingFeeMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingFeeCoefficients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCVIValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxFundingFeeCviThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTurbulenceFeePercentToTrim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minFundingFeeCviThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionLPFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleHeartbeatPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyingPremiumFeeMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyingPremiumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClosePositionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClosePositionFeeDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClosePositionLPFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClosePositionMaxFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClosingPremiumFeeMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralToBuyingPremiumMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralToExtraFundingFeeMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingFeeCoefficients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingFeeConstantRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingFeeDivisionFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingFeeMaxRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingFeeMinRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxFundingFeeCviThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTurbulenceFeePercentToTrim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinFundingFeeCviThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOpenPositionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOpenPositionLPFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOracleHeartbeatPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStateUpdator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThetaVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTurbulenceDeviationPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTurbulenceDeviationThresholdPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTurbulenceStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateUpdator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "thetaVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turbulenceDeviationPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turbulenceDeviationThresholdPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turbulenceIndicatorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "turbulenceStepPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTurbulenceIndicatorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeePercent",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface FeesCalculator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeesCalculatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<[number]>;

    buyingPremiumThreshold(overrides?: CallOverrides): Promise<[number]>;

    calculateBuyingPremiumFee(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _lastTotalLeveragedTokens: BigNumberish,
      _lastTotalPositionUnits: BigNumberish,
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        buyingPremiumFee: BigNumber;
        combinedPremiumFeePercentage: number;
      }
    >;

    calculateBuyingPremiumFeeWithAddendum(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _lastTotalLeveragedTokens: BigNumberish,
      _lastTotalPositionUnits: BigNumberish,
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      _turbulenceIndicatorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        buyingPremiumFee: BigNumber;
        combinedPremiumFeePercentage: number;
      }
    >;

    calculateClosePositionFeePercent(
      _creationTimestamp: BigNumberish,
      _isNoLockPositionAddress: boolean,
      overrides?: CallOverrides
    ): Promise<[number]>;

    calculateClosingPremiumFee(
      overrides?: CallOverrides
    ): Promise<[number] & { premiumFeePercentage: number }>;

    calculateCollateralRatio(
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralRatio: BigNumber }>;

    calculateSingleUnitFundingFee(
      _cviValues: IFeesCalculator.CVIValueStruct[],
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fundingFee: BigNumber }>;

    calculateSingleUnitPeriodFundingFee(
      _cviValue: IFeesCalculator.CVIValueStruct,
      _collateralRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        fundingFee: BigNumber;
        fundingFeeRatePercents: BigNumber;
      }
    >;

    calculateTurbulenceIndicatorPercent(
      totalTime: BigNumberish,
      newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    calculateWithdrawFeePercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    closePositionFeeDecayPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    closePositionFeePercent(overrides?: CallOverrides): Promise<[number]>;

    closePositionLPFeePercent(overrides?: CallOverrides): Promise<[number]>;

    closePositionMaxFeePercent(overrides?: CallOverrides): Promise<[number]>;

    closingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<[number]>;

    collateralToBuyingPremiumMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    collateralToExtraFundingFeeMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    cviOracle(overrides?: CallOverrides): Promise<[string]>;

    depositFeePercent(overrides?: CallOverrides): Promise<[number]>;

    fundingFeeConstantRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundingFeeDivisionFactor(overrides?: CallOverrides): Promise<[number]>;

    fundingFeeMaxRate(overrides?: CallOverrides): Promise<[number]>;

    fundingFeeMinRate(overrides?: CallOverrides): Promise<[number]>;

    getCollateralToBuyingPremiumMapping(
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    getCollateralToExtraFundingFeeMapping(
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    getFundingFeeCoefficients(overrides?: CallOverrides): Promise<[number[]]>;

    maxCVIValue(overrides?: CallOverrides): Promise<[number]>;

    maxFundingFeeCviThreshold(overrides?: CallOverrides): Promise<[number]>;

    maxTurbulenceFeePercentToTrim(overrides?: CallOverrides): Promise<[number]>;

    minFundingFeeCviThreshold(overrides?: CallOverrides): Promise<[number]>;

    openPositionFeePercent(overrides?: CallOverrides): Promise<[number]>;

    openPositionFees(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & {
        openPositionFeePercentResult: number;
        buyingPremiumFeeMaxPercentResult: number;
      }
    >;

    openPositionLPFeePercent(overrides?: CallOverrides): Promise<[number]>;

    oracleHeartbeatPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracleLeverage(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuyingPremiumFeeMax(
      _newBuyingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuyingPremiumThreshold(
      _newBuyingPremiumThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClosePositionFee(
      _newClosePositionFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClosePositionFeeDecay(
      _newClosePositionFeeDecayPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClosePositionLPFee(
      _newClosePositionLPFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClosePositionMaxFee(
      _newClosePositionMaxFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClosingPremiumFeeMax(
      _newClosingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollateralToBuyingPremiumMapping(
      _newCollateralToBuyingPremiumMapping: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollateralToExtraFundingFeeMapping(
      _newCollateralToExtraFundingFeeMapping: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositFee(
      _newDepositFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundingFeeCoefficients(
      _newFundingFeeCoefficients: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundingFeeConstantRate(
      _newfundingFeeConstantRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundingFeeDivisionFactor(
      _newFundingFeeDivisionFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundingFeeMaxRate(
      _newFundingFeeMaxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundingFeeMinRate(
      _newFundingFeeMinRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxFundingFeeCviThreshold(
      _newMaxFundingFeeCviThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTurbulenceFeePercentToTrim(
      _newMaxTurbulenceFeePercentToTrim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinFundingFeeCviThreshold(
      _newMinFundingFeeCviThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOpenPositionFee(
      _newOpenPositionFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOpenPositionLPFee(
      _newOpenPositionLPFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      _cviOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracleHeartbeatPeriod(
      _newOracleHeartbeatPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStateUpdator(
      _newUpdator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setThetaVault(
      _thetaVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTurbulenceDeviationPercent(
      _newTurbulenceDeviationPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTurbulenceDeviationThresholdPercent(
      _newTurbulenceDeviationThresholdPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTurbulenceStep(
      _newTurbulenceStepPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawFee(
      _newWithdrawFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stateUpdator(overrides?: CallOverrides): Promise<[string]>;

    thetaVault(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    turbulenceDeviationPercentage(overrides?: CallOverrides): Promise<[number]>;

    turbulenceDeviationThresholdPercent(
      overrides?: CallOverrides
    ): Promise<[number]>;

    turbulenceIndicatorPercent(overrides?: CallOverrides): Promise<[number]>;

    turbulenceStepPercent(overrides?: CallOverrides): Promise<[number]>;

    updateSnapshots(
      _latestTimestamp: BigNumberish,
      _blockTimestampSnapshot: BigNumberish,
      _latestTimestampSnapshot: BigNumberish,
      _latestOracleRoundId: BigNumberish,
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IFeesCalculator.SnapshotUpdateStructOutput] & {
        snapshotUpdate: IFeesCalculator.SnapshotUpdateStructOutput;
      }
    >;

    updateTurbulenceIndicatorPercent(
      _totalTime: BigNumberish,
      _newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFeePercent(overrides?: CallOverrides): Promise<[number]>;
  };

  buyingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<number>;

  buyingPremiumThreshold(overrides?: CallOverrides): Promise<number>;

  calculateBuyingPremiumFee(
    _tokenAmount: BigNumberish,
    _leverage: BigNumberish,
    _lastTotalLeveragedTokens: BigNumberish,
    _lastTotalPositionUnits: BigNumberish,
    _totalLeveragedTokens: BigNumberish,
    _totalPositionUnits: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & {
      buyingPremiumFee: BigNumber;
      combinedPremiumFeePercentage: number;
    }
  >;

  calculateBuyingPremiumFeeWithAddendum(
    _tokenAmount: BigNumberish,
    _leverage: BigNumberish,
    _lastTotalLeveragedTokens: BigNumberish,
    _lastTotalPositionUnits: BigNumberish,
    _totalLeveragedTokens: BigNumberish,
    _totalPositionUnits: BigNumberish,
    _turbulenceIndicatorPercent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & {
      buyingPremiumFee: BigNumber;
      combinedPremiumFeePercentage: number;
    }
  >;

  calculateClosePositionFeePercent(
    _creationTimestamp: BigNumberish,
    _isNoLockPositionAddress: boolean,
    overrides?: CallOverrides
  ): Promise<number>;

  calculateClosingPremiumFee(overrides?: CallOverrides): Promise<number>;

  calculateCollateralRatio(
    _totalLeveragedTokens: BigNumberish,
    _totalPositionUnits: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSingleUnitFundingFee(
    _cviValues: IFeesCalculator.CVIValueStruct[],
    _totalLeveragedTokens: BigNumberish,
    _totalPositionUnits: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSingleUnitPeriodFundingFee(
    _cviValue: IFeesCalculator.CVIValueStruct,
    _collateralRatio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      fundingFee: BigNumber;
      fundingFeeRatePercents: BigNumber;
    }
  >;

  calculateTurbulenceIndicatorPercent(
    totalTime: BigNumberish,
    newRounds: BigNumberish,
    _lastCVIValue: BigNumberish,
    _currCVIValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  calculateWithdrawFeePercent(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  closePositionFeeDecayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  closePositionFeePercent(overrides?: CallOverrides): Promise<number>;

  closePositionLPFeePercent(overrides?: CallOverrides): Promise<number>;

  closePositionMaxFeePercent(overrides?: CallOverrides): Promise<number>;

  closingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<number>;

  collateralToBuyingPremiumMapping(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  collateralToExtraFundingFeeMapping(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  cviOracle(overrides?: CallOverrides): Promise<string>;

  depositFeePercent(overrides?: CallOverrides): Promise<number>;

  fundingFeeConstantRate(overrides?: CallOverrides): Promise<BigNumber>;

  fundingFeeDivisionFactor(overrides?: CallOverrides): Promise<number>;

  fundingFeeMaxRate(overrides?: CallOverrides): Promise<number>;

  fundingFeeMinRate(overrides?: CallOverrides): Promise<number>;

  getCollateralToBuyingPremiumMapping(
    overrides?: CallOverrides
  ): Promise<number[]>;

  getCollateralToExtraFundingFeeMapping(
    overrides?: CallOverrides
  ): Promise<number[]>;

  getFundingFeeCoefficients(overrides?: CallOverrides): Promise<number[]>;

  maxCVIValue(overrides?: CallOverrides): Promise<number>;

  maxFundingFeeCviThreshold(overrides?: CallOverrides): Promise<number>;

  maxTurbulenceFeePercentToTrim(overrides?: CallOverrides): Promise<number>;

  minFundingFeeCviThreshold(overrides?: CallOverrides): Promise<number>;

  openPositionFeePercent(overrides?: CallOverrides): Promise<number>;

  openPositionFees(
    overrides?: CallOverrides
  ): Promise<
    [number, number] & {
      openPositionFeePercentResult: number;
      buyingPremiumFeeMaxPercentResult: number;
    }
  >;

  openPositionLPFeePercent(overrides?: CallOverrides): Promise<number>;

  oracleHeartbeatPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  oracleLeverage(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuyingPremiumFeeMax(
    _newBuyingPremiumFeeMaxPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuyingPremiumThreshold(
    _newBuyingPremiumThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClosePositionFee(
    _newClosePositionFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClosePositionFeeDecay(
    _newClosePositionFeeDecayPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClosePositionLPFee(
    _newClosePositionLPFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClosePositionMaxFee(
    _newClosePositionMaxFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClosingPremiumFeeMax(
    _newClosingPremiumFeeMaxPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollateralToBuyingPremiumMapping(
    _newCollateralToBuyingPremiumMapping: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollateralToExtraFundingFeeMapping(
    _newCollateralToExtraFundingFeeMapping: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositFee(
    _newDepositFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundingFeeCoefficients(
    _newFundingFeeCoefficients: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundingFeeConstantRate(
    _newfundingFeeConstantRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundingFeeDivisionFactor(
    _newFundingFeeDivisionFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundingFeeMaxRate(
    _newFundingFeeMaxRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundingFeeMinRate(
    _newFundingFeeMinRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxFundingFeeCviThreshold(
    _newMaxFundingFeeCviThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTurbulenceFeePercentToTrim(
    _newMaxTurbulenceFeePercentToTrim: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinFundingFeeCviThreshold(
    _newMinFundingFeeCviThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOpenPositionFee(
    _newOpenPositionFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOpenPositionLPFee(
    _newOpenPositionLPFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    _cviOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracleHeartbeatPeriod(
    _newOracleHeartbeatPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStateUpdator(
    _newUpdator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setThetaVault(
    _thetaVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTurbulenceDeviationPercent(
    _newTurbulenceDeviationPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTurbulenceDeviationThresholdPercent(
    _newTurbulenceDeviationThresholdPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTurbulenceStep(
    _newTurbulenceStepPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawFee(
    _newWithdrawFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stateUpdator(overrides?: CallOverrides): Promise<string>;

  thetaVault(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  turbulenceDeviationPercentage(overrides?: CallOverrides): Promise<number>;

  turbulenceDeviationThresholdPercent(
    overrides?: CallOverrides
  ): Promise<number>;

  turbulenceIndicatorPercent(overrides?: CallOverrides): Promise<number>;

  turbulenceStepPercent(overrides?: CallOverrides): Promise<number>;

  updateSnapshots(
    _latestTimestamp: BigNumberish,
    _blockTimestampSnapshot: BigNumberish,
    _latestTimestampSnapshot: BigNumberish,
    _latestOracleRoundId: BigNumberish,
    _totalLeveragedTokens: BigNumberish,
    _totalPositionUnits: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IFeesCalculator.SnapshotUpdateStructOutput>;

  updateTurbulenceIndicatorPercent(
    _totalTime: BigNumberish,
    _newRounds: BigNumberish,
    _lastCVIValue: BigNumberish,
    _currCVIValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFeePercent(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    buyingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<number>;

    buyingPremiumThreshold(overrides?: CallOverrides): Promise<number>;

    calculateBuyingPremiumFee(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _lastTotalLeveragedTokens: BigNumberish,
      _lastTotalPositionUnits: BigNumberish,
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        buyingPremiumFee: BigNumber;
        combinedPremiumFeePercentage: number;
      }
    >;

    calculateBuyingPremiumFeeWithAddendum(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _lastTotalLeveragedTokens: BigNumberish,
      _lastTotalPositionUnits: BigNumberish,
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      _turbulenceIndicatorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & {
        buyingPremiumFee: BigNumber;
        combinedPremiumFeePercentage: number;
      }
    >;

    calculateClosePositionFeePercent(
      _creationTimestamp: BigNumberish,
      _isNoLockPositionAddress: boolean,
      overrides?: CallOverrides
    ): Promise<number>;

    calculateClosingPremiumFee(overrides?: CallOverrides): Promise<number>;

    calculateCollateralRatio(
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSingleUnitFundingFee(
      _cviValues: IFeesCalculator.CVIValueStruct[],
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSingleUnitPeriodFundingFee(
      _cviValue: IFeesCalculator.CVIValueStruct,
      _collateralRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        fundingFee: BigNumber;
        fundingFeeRatePercents: BigNumber;
      }
    >;

    calculateTurbulenceIndicatorPercent(
      totalTime: BigNumberish,
      newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    calculateWithdrawFeePercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    closePositionFeeDecayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    closePositionFeePercent(overrides?: CallOverrides): Promise<number>;

    closePositionLPFeePercent(overrides?: CallOverrides): Promise<number>;

    closePositionMaxFeePercent(overrides?: CallOverrides): Promise<number>;

    closingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<number>;

    collateralToBuyingPremiumMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    collateralToExtraFundingFeeMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    cviOracle(overrides?: CallOverrides): Promise<string>;

    depositFeePercent(overrides?: CallOverrides): Promise<number>;

    fundingFeeConstantRate(overrides?: CallOverrides): Promise<BigNumber>;

    fundingFeeDivisionFactor(overrides?: CallOverrides): Promise<number>;

    fundingFeeMaxRate(overrides?: CallOverrides): Promise<number>;

    fundingFeeMinRate(overrides?: CallOverrides): Promise<number>;

    getCollateralToBuyingPremiumMapping(
      overrides?: CallOverrides
    ): Promise<number[]>;

    getCollateralToExtraFundingFeeMapping(
      overrides?: CallOverrides
    ): Promise<number[]>;

    getFundingFeeCoefficients(overrides?: CallOverrides): Promise<number[]>;

    maxCVIValue(overrides?: CallOverrides): Promise<number>;

    maxFundingFeeCviThreshold(overrides?: CallOverrides): Promise<number>;

    maxTurbulenceFeePercentToTrim(overrides?: CallOverrides): Promise<number>;

    minFundingFeeCviThreshold(overrides?: CallOverrides): Promise<number>;

    openPositionFeePercent(overrides?: CallOverrides): Promise<number>;

    openPositionFees(
      overrides?: CallOverrides
    ): Promise<
      [number, number] & {
        openPositionFeePercentResult: number;
        buyingPremiumFeeMaxPercentResult: number;
      }
    >;

    openPositionLPFeePercent(overrides?: CallOverrides): Promise<number>;

    oracleHeartbeatPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    oracleLeverage(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBuyingPremiumFeeMax(
      _newBuyingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyingPremiumThreshold(
      _newBuyingPremiumThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClosePositionFee(
      _newClosePositionFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClosePositionFeeDecay(
      _newClosePositionFeeDecayPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClosePositionLPFee(
      _newClosePositionLPFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClosePositionMaxFee(
      _newClosePositionMaxFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setClosingPremiumFeeMax(
      _newClosingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralToBuyingPremiumMapping(
      _newCollateralToBuyingPremiumMapping: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralToExtraFundingFeeMapping(
      _newCollateralToExtraFundingFeeMapping: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositFee(
      _newDepositFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingFeeCoefficients(
      _newFundingFeeCoefficients: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingFeeConstantRate(
      _newfundingFeeConstantRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingFeeDivisionFactor(
      _newFundingFeeDivisionFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingFeeMaxRate(
      _newFundingFeeMaxRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingFeeMinRate(
      _newFundingFeeMinRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxFundingFeeCviThreshold(
      _newMaxFundingFeeCviThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTurbulenceFeePercentToTrim(
      _newMaxTurbulenceFeePercentToTrim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinFundingFeeCviThreshold(
      _newMinFundingFeeCviThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOpenPositionFee(
      _newOpenPositionFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOpenPositionLPFee(
      _newOpenPositionLPFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(_cviOracle: string, overrides?: CallOverrides): Promise<void>;

    setOracleHeartbeatPeriod(
      _newOracleHeartbeatPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStateUpdator(
      _newUpdator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setThetaVault(
      _thetaVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTurbulenceDeviationPercent(
      _newTurbulenceDeviationPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTurbulenceDeviationThresholdPercent(
      _newTurbulenceDeviationThresholdPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTurbulenceStep(
      _newTurbulenceStepPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawFee(
      _newWithdrawFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stateUpdator(overrides?: CallOverrides): Promise<string>;

    thetaVault(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    turbulenceDeviationPercentage(overrides?: CallOverrides): Promise<number>;

    turbulenceDeviationThresholdPercent(
      overrides?: CallOverrides
    ): Promise<number>;

    turbulenceIndicatorPercent(overrides?: CallOverrides): Promise<number>;

    turbulenceStepPercent(overrides?: CallOverrides): Promise<number>;

    updateSnapshots(
      _latestTimestamp: BigNumberish,
      _blockTimestampSnapshot: BigNumberish,
      _latestTimestampSnapshot: BigNumberish,
      _latestOracleRoundId: BigNumberish,
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IFeesCalculator.SnapshotUpdateStructOutput>;

    updateTurbulenceIndicatorPercent(
      _totalTime: BigNumberish,
      _newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFeePercent(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    buyingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

    buyingPremiumThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    calculateBuyingPremiumFee(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _lastTotalLeveragedTokens: BigNumberish,
      _lastTotalPositionUnits: BigNumberish,
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateBuyingPremiumFeeWithAddendum(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _lastTotalLeveragedTokens: BigNumberish,
      _lastTotalPositionUnits: BigNumberish,
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      _turbulenceIndicatorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateClosePositionFeePercent(
      _creationTimestamp: BigNumberish,
      _isNoLockPositionAddress: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateClosingPremiumFee(overrides?: CallOverrides): Promise<BigNumber>;

    calculateCollateralRatio(
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSingleUnitFundingFee(
      _cviValues: IFeesCalculator.CVIValueStruct[],
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSingleUnitPeriodFundingFee(
      _cviValue: IFeesCalculator.CVIValueStruct,
      _collateralRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTurbulenceIndicatorPercent(
      totalTime: BigNumberish,
      newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateWithdrawFeePercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePositionFeeDecayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    closePositionFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    closePositionLPFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    closePositionMaxFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    closingPremiumFeeMaxPercent(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToBuyingPremiumMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralToExtraFundingFeeMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cviOracle(overrides?: CallOverrides): Promise<BigNumber>;

    depositFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    fundingFeeConstantRate(overrides?: CallOverrides): Promise<BigNumber>;

    fundingFeeDivisionFactor(overrides?: CallOverrides): Promise<BigNumber>;

    fundingFeeMaxRate(overrides?: CallOverrides): Promise<BigNumber>;

    fundingFeeMinRate(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralToBuyingPremiumMapping(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralToExtraFundingFeeMapping(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingFeeCoefficients(overrides?: CallOverrides): Promise<BigNumber>;

    maxCVIValue(overrides?: CallOverrides): Promise<BigNumber>;

    maxFundingFeeCviThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    maxTurbulenceFeePercentToTrim(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minFundingFeeCviThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    openPositionFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    openPositionFees(overrides?: CallOverrides): Promise<BigNumber>;

    openPositionLPFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    oracleHeartbeatPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    oracleLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuyingPremiumFeeMax(
      _newBuyingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuyingPremiumThreshold(
      _newBuyingPremiumThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClosePositionFee(
      _newClosePositionFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClosePositionFeeDecay(
      _newClosePositionFeeDecayPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClosePositionLPFee(
      _newClosePositionLPFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClosePositionMaxFee(
      _newClosePositionMaxFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClosingPremiumFeeMax(
      _newClosingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollateralToBuyingPremiumMapping(
      _newCollateralToBuyingPremiumMapping: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollateralToExtraFundingFeeMapping(
      _newCollateralToExtraFundingFeeMapping: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositFee(
      _newDepositFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundingFeeCoefficients(
      _newFundingFeeCoefficients: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundingFeeConstantRate(
      _newfundingFeeConstantRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundingFeeDivisionFactor(
      _newFundingFeeDivisionFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundingFeeMaxRate(
      _newFundingFeeMaxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundingFeeMinRate(
      _newFundingFeeMinRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxFundingFeeCviThreshold(
      _newMaxFundingFeeCviThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTurbulenceFeePercentToTrim(
      _newMaxTurbulenceFeePercentToTrim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinFundingFeeCviThreshold(
      _newMinFundingFeeCviThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOpenPositionFee(
      _newOpenPositionFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOpenPositionLPFee(
      _newOpenPositionLPFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracle(
      _cviOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracleHeartbeatPeriod(
      _newOracleHeartbeatPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStateUpdator(
      _newUpdator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setThetaVault(
      _thetaVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTurbulenceDeviationPercent(
      _newTurbulenceDeviationPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTurbulenceDeviationThresholdPercent(
      _newTurbulenceDeviationThresholdPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTurbulenceStep(
      _newTurbulenceStepPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawFee(
      _newWithdrawFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stateUpdator(overrides?: CallOverrides): Promise<BigNumber>;

    thetaVault(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    turbulenceDeviationPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    turbulenceDeviationThresholdPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    turbulenceIndicatorPercent(overrides?: CallOverrides): Promise<BigNumber>;

    turbulenceStepPercent(overrides?: CallOverrides): Promise<BigNumber>;

    updateSnapshots(
      _latestTimestamp: BigNumberish,
      _blockTimestampSnapshot: BigNumberish,
      _latestTimestampSnapshot: BigNumberish,
      _latestOracleRoundId: BigNumberish,
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateTurbulenceIndicatorPercent(
      _totalTime: BigNumberish,
      _newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFeePercent(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    buyingPremiumFeeMaxPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyingPremiumThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateBuyingPremiumFee(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _lastTotalLeveragedTokens: BigNumberish,
      _lastTotalPositionUnits: BigNumberish,
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateBuyingPremiumFeeWithAddendum(
      _tokenAmount: BigNumberish,
      _leverage: BigNumberish,
      _lastTotalLeveragedTokens: BigNumberish,
      _lastTotalPositionUnits: BigNumberish,
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      _turbulenceIndicatorPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateClosePositionFeePercent(
      _creationTimestamp: BigNumberish,
      _isNoLockPositionAddress: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateClosingPremiumFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateCollateralRatio(
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSingleUnitFundingFee(
      _cviValues: IFeesCalculator.CVIValueStruct[],
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSingleUnitPeriodFundingFee(
      _cviValue: IFeesCalculator.CVIValueStruct,
      _collateralRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTurbulenceIndicatorPercent(
      totalTime: BigNumberish,
      newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateWithdrawFeePercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePositionFeeDecayPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePositionFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePositionLPFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePositionMaxFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closingPremiumFeeMaxPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralToBuyingPremiumMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralToExtraFundingFeeMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cviOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingFeeConstantRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingFeeDivisionFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingFeeMaxRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingFeeMinRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollateralToBuyingPremiumMapping(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralToExtraFundingFeeMapping(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundingFeeCoefficients(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxCVIValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxFundingFeeCviThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTurbulenceFeePercentToTrim(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minFundingFeeCviThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPositionFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPositionFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openPositionLPFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleHeartbeatPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleLeverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuyingPremiumFeeMax(
      _newBuyingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuyingPremiumThreshold(
      _newBuyingPremiumThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClosePositionFee(
      _newClosePositionFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClosePositionFeeDecay(
      _newClosePositionFeeDecayPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClosePositionLPFee(
      _newClosePositionLPFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClosePositionMaxFee(
      _newClosePositionMaxFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClosingPremiumFeeMax(
      _newClosingPremiumFeeMaxPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralToBuyingPremiumMapping(
      _newCollateralToBuyingPremiumMapping: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralToExtraFundingFeeMapping(
      _newCollateralToExtraFundingFeeMapping: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositFee(
      _newDepositFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundingFeeCoefficients(
      _newFundingFeeCoefficients: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundingFeeConstantRate(
      _newfundingFeeConstantRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundingFeeDivisionFactor(
      _newFundingFeeDivisionFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundingFeeMaxRate(
      _newFundingFeeMaxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundingFeeMinRate(
      _newFundingFeeMinRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxFundingFeeCviThreshold(
      _newMaxFundingFeeCviThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTurbulenceFeePercentToTrim(
      _newMaxTurbulenceFeePercentToTrim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinFundingFeeCviThreshold(
      _newMinFundingFeeCviThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOpenPositionFee(
      _newOpenPositionFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOpenPositionLPFee(
      _newOpenPositionLPFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      _cviOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracleHeartbeatPeriod(
      _newOracleHeartbeatPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStateUpdator(
      _newUpdator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setThetaVault(
      _thetaVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTurbulenceDeviationPercent(
      _newTurbulenceDeviationPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTurbulenceDeviationThresholdPercent(
      _newTurbulenceDeviationThresholdPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTurbulenceStep(
      _newTurbulenceStepPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawFee(
      _newWithdrawFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stateUpdator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    thetaVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    turbulenceDeviationPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    turbulenceDeviationThresholdPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    turbulenceIndicatorPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    turbulenceStepPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateSnapshots(
      _latestTimestamp: BigNumberish,
      _blockTimestampSnapshot: BigNumberish,
      _latestTimestampSnapshot: BigNumberish,
      _latestOracleRoundId: BigNumberish,
      _totalLeveragedTokens: BigNumberish,
      _totalPositionUnits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateTurbulenceIndicatorPercent(
      _totalTime: BigNumberish,
      _newRounds: BigNumberish,
      _lastCVIValue: BigNumberish,
      _currCVIValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
