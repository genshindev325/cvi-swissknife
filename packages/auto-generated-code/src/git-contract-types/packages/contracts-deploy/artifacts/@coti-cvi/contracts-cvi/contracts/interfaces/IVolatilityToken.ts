/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../../common";

export interface IVolatilityTokenInterface extends utils.Interface {
  functions: {
    "burnTokens(uint168)": FunctionFragment;
    "fulfillBurnRequest(uint256,bool)": FunctionFragment;
    "fulfillMintRequest(uint256,uint16,bool)": FunctionFragment;
    "initialTokenToLPTokenRate()": FunctionFragment;
    "leverage()": FunctionFragment;
    "liquidateRequest(uint256)": FunctionFragment;
    "mintTokens(uint168)": FunctionFragment;
    "platform()": FunctionFragment;
    "rebaseCVI()": FunctionFragment;
    "requestFeesCalculator()": FunctionFragment;
    "requests(uint256)": FunctionFragment;
    "setCVIOracle(address)": FunctionFragment;
    "setCappedRebase(bool)": FunctionFragment;
    "setDeviationParameters(uint16,uint16,uint16)": FunctionFragment;
    "setFeesCalculator(address)": FunctionFragment;
    "setFeesCollector(address)": FunctionFragment;
    "setFulfiller(address)": FunctionFragment;
    "setKeepersFeeVaultAddress(address)": FunctionFragment;
    "setMaxMinRequestIncrements(uint256)": FunctionFragment;
    "setMaxTotalRequestsAmount(uint256)": FunctionFragment;
    "setMinKeepersAmounts(uint256,uint256)": FunctionFragment;
    "setMinRequestId(uint256)": FunctionFragment;
    "setMinter(address)": FunctionFragment;
    "setPlatform(address)": FunctionFragment;
    "setRequestFeesCalculator(address)": FunctionFragment;
    "setVerifyTotalRequestsAmount(bool)": FunctionFragment;
    "submitBurnRequest(uint168,uint32)": FunctionFragment;
    "submitKeepersBurnRequest(uint168,uint32)": FunctionFragment;
    "submitKeepersMintRequest(uint168,uint32,uint16)": FunctionFragment;
    "submitMintRequest(uint168,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "burnTokens"
      | "fulfillBurnRequest"
      | "fulfillMintRequest"
      | "initialTokenToLPTokenRate"
      | "leverage"
      | "liquidateRequest"
      | "mintTokens"
      | "platform"
      | "rebaseCVI"
      | "requestFeesCalculator"
      | "requests"
      | "setCVIOracle"
      | "setCappedRebase"
      | "setDeviationParameters"
      | "setFeesCalculator"
      | "setFeesCollector"
      | "setFulfiller"
      | "setKeepersFeeVaultAddress"
      | "setMaxMinRequestIncrements"
      | "setMaxTotalRequestsAmount"
      | "setMinKeepersAmounts"
      | "setMinRequestId"
      | "setMinter"
      | "setPlatform"
      | "setRequestFeesCalculator"
      | "setVerifyTotalRequestsAmount"
      | "submitBurnRequest"
      | "submitKeepersBurnRequest"
      | "submitKeepersMintRequest"
      | "submitMintRequest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "burnTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillBurnRequest",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillMintRequest",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "initialTokenToLPTokenRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "leverage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidateRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "platform", values?: undefined): string;
  encodeFunctionData(functionFragment: "rebaseCVI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestFeesCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCVIOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCappedRebase",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeviationParameters",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesCalculator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFulfiller",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeepersFeeVaultAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxMinRequestIncrements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTotalRequestsAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinKeepersAmounts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinRequestId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setMinter", values: [string]): string;
  encodeFunctionData(functionFragment: "setPlatform", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRequestFeesCalculator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifyTotalRequestsAmount",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "submitBurnRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitKeepersBurnRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitKeepersMintRequest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitMintRequest",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "burnTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillBurnRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillMintRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialTokenToLPTokenRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leverage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "platform", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebaseCVI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestFeesCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCVIOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCappedRebase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeviationParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFulfiller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeepersFeeVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxMinRequestIncrements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTotalRequestsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinKeepersAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequestFeesCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifyTotalRequestsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitBurnRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitKeepersBurnRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitKeepersMintRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitMintRequest",
    data: BytesLike
  ): Result;

  events: {
    "Burn(uint256,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "FulfillRequest(uint256,uint8,address,uint256,bool,bool,bool,address,uint32)": EventFragment;
    "LiquidateRequest(uint256,uint8,address,address,uint256,bool,uint32)": EventFragment;
    "Mint(uint256,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "SubmitRequest(uint256,uint8,address,uint256,uint256,uint32,uint32,bool,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FulfillRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidateRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitRequest"): EventFragment;
}

export interface BurnEventObject {
  requestId: BigNumber;
  account: string;
  tokenAmountBeforeFees: BigNumber;
  tokenAmount: BigNumber;
  burnedTokens: BigNumber;
  closePositionFee: BigNumber;
  closingPremiumFee: BigNumber;
}
export type BurnEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  BurnEventObject
>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface FulfillRequestEventObject {
  requestId: BigNumber;
  requestType: number;
  account: string;
  fulfillFeesAmount: BigNumber;
  isAborted: boolean;
  useKeepers: boolean;
  keepersCalled: boolean;
  fulfiller: string;
  fulfillTimestamp: number;
}
export type FulfillRequestEvent = TypedEvent<
  [
    BigNumber,
    number,
    string,
    BigNumber,
    boolean,
    boolean,
    boolean,
    string,
    number
  ],
  FulfillRequestEventObject
>;

export type FulfillRequestEventFilter = TypedEventFilter<FulfillRequestEvent>;

export interface LiquidateRequestEventObject {
  requestId: BigNumber;
  requestType: number;
  account: string;
  liquidator: string;
  findersFeeAmount: BigNumber;
  useKeepers: boolean;
  liquidateTimestamp: number;
}
export type LiquidateRequestEvent = TypedEvent<
  [BigNumber, number, string, string, BigNumber, boolean, number],
  LiquidateRequestEventObject
>;

export type LiquidateRequestEventFilter =
  TypedEventFilter<LiquidateRequestEvent>;

export interface MintEventObject {
  requestId: BigNumber;
  account: string;
  tokenAmount: BigNumber;
  positionedTokenAmount: BigNumber;
  mintedTokens: BigNumber;
  openPositionFee: BigNumber;
  buyingPremiumFee: BigNumber;
}
export type MintEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface SubmitRequestEventObject {
  requestId: BigNumber;
  requestType: number;
  account: string;
  tokenAmount: BigNumber;
  submitFeesAmount: BigNumber;
  requestTimestamp: number;
  targetTimestamp: number;
  useKeepers: boolean;
  maxBuyingPremiumFeePercentage: number;
}
export type SubmitRequestEvent = TypedEvent<
  [
    BigNumber,
    number,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    boolean,
    number
  ],
  SubmitRequestEventObject
>;

export type SubmitRequestEventFilter = TypedEventFilter<SubmitRequestEvent>;

export interface IVolatilityToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVolatilityTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burnTokens(
      burnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillBurnRequest(
      requestId: BigNumberish,
      keepersCalled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillMintRequest(
      requestId: BigNumberish,
      maxBuyingPremiumFeePercentage: BigNumberish,
      keepersCalled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialTokenToLPTokenRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    leverage(overrides?: CallOverrides): Promise<[number]>;

    liquidateRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintTokens(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    platform(overrides?: CallOverrides): Promise<[string]>;

    rebaseCVI(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestFeesCalculator(overrides?: CallOverrides): Promise<[string]>;

    requests(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        number,
        number,
        string,
        number,
        number,
        boolean,
        number
      ] & {
        requestType: number;
        tokenAmount: BigNumber;
        timeDelayRequestFeesPercent: number;
        maxRequestFeesPercent: number;
        owner: string;
        requestTimestamp: number;
        targetTimestamp: number;
        useKeepers: boolean;
        maxBuyingPremiumFeePercentage: number;
      }
    >;

    setCVIOracle(
      newCVIOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCappedRebase(
      newCappedRebase: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDeviationParameters(
      newDeviationPercentagePerSingleRebaseLag: BigNumberish,
      newMinDeviationPercentage: BigNumberish,
      newMaxDeviationPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeesCalculator(
      newFeesCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeesCollector(
      newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFulfiller(
      fulfiller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeepersFeeVaultAddress(
      newKeepersFeeVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxMinRequestIncrements(
      newMaxMinRequestIncrements: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTotalRequestsAmount(
      maxTotalRequestsAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinKeepersAmounts(
      newMinKeepersMintAmount: BigNumberish,
      newMinKeepersBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinRequestId(
      newMinRequestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinter(
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatform(
      newPlatform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRequestFeesCalculator(
      newRequestFeesCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVerifyTotalRequestsAmount(
      verifyTotalRequestsAmount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitBurnRequest(
      tokenAmount: BigNumberish,
      timeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitKeepersBurnRequest(
      tokenAmount: BigNumberish,
      timeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitKeepersMintRequest(
      tokenAmount: BigNumberish,
      timeDelay: BigNumberish,
      maxBuyingPremiumFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitMintRequest(
      tokenAmount: BigNumberish,
      timeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burnTokens(
    burnAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillBurnRequest(
    requestId: BigNumberish,
    keepersCalled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillMintRequest(
    requestId: BigNumberish,
    maxBuyingPremiumFeePercentage: BigNumberish,
    keepersCalled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialTokenToLPTokenRate(overrides?: CallOverrides): Promise<BigNumber>;

  leverage(overrides?: CallOverrides): Promise<number>;

  liquidateRequest(
    requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintTokens(
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  platform(overrides?: CallOverrides): Promise<string>;

  rebaseCVI(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestFeesCalculator(overrides?: CallOverrides): Promise<string>;

  requests(
    requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      BigNumber,
      number,
      number,
      string,
      number,
      number,
      boolean,
      number
    ] & {
      requestType: number;
      tokenAmount: BigNumber;
      timeDelayRequestFeesPercent: number;
      maxRequestFeesPercent: number;
      owner: string;
      requestTimestamp: number;
      targetTimestamp: number;
      useKeepers: boolean;
      maxBuyingPremiumFeePercentage: number;
    }
  >;

  setCVIOracle(
    newCVIOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCappedRebase(
    newCappedRebase: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDeviationParameters(
    newDeviationPercentagePerSingleRebaseLag: BigNumberish,
    newMinDeviationPercentage: BigNumberish,
    newMaxDeviationPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeesCalculator(
    newFeesCalculator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeesCollector(
    newCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFulfiller(
    fulfiller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeepersFeeVaultAddress(
    newKeepersFeeVaultAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxMinRequestIncrements(
    newMaxMinRequestIncrements: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTotalRequestsAmount(
    maxTotalRequestsAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinKeepersAmounts(
    newMinKeepersMintAmount: BigNumberish,
    newMinKeepersBurnAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinRequestId(
    newMinRequestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinter(
    minter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatform(
    newPlatform: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRequestFeesCalculator(
    newRequestFeesCalculator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVerifyTotalRequestsAmount(
    verifyTotalRequestsAmount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitBurnRequest(
    tokenAmount: BigNumberish,
    timeDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitKeepersBurnRequest(
    tokenAmount: BigNumberish,
    timeDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitKeepersMintRequest(
    tokenAmount: BigNumberish,
    timeDelay: BigNumberish,
    maxBuyingPremiumFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitMintRequest(
    tokenAmount: BigNumberish,
    timeDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burnTokens(
      burnAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fulfillBurnRequest(
      requestId: BigNumberish,
      keepersCalled: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fulfillMintRequest(
      requestId: BigNumberish,
      maxBuyingPremiumFeePercentage: BigNumberish,
      keepersCalled: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { tokensMinted: BigNumber; success: boolean }
    >;

    initialTokenToLPTokenRate(overrides?: CallOverrides): Promise<BigNumber>;

    leverage(overrides?: CallOverrides): Promise<number>;

    liquidateRequest(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintTokens(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    platform(overrides?: CallOverrides): Promise<string>;

    rebaseCVI(overrides?: CallOverrides): Promise<void>;

    requestFeesCalculator(overrides?: CallOverrides): Promise<string>;

    requests(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        number,
        number,
        string,
        number,
        number,
        boolean,
        number
      ] & {
        requestType: number;
        tokenAmount: BigNumber;
        timeDelayRequestFeesPercent: number;
        maxRequestFeesPercent: number;
        owner: string;
        requestTimestamp: number;
        targetTimestamp: number;
        useKeepers: boolean;
        maxBuyingPremiumFeePercentage: number;
      }
    >;

    setCVIOracle(
      newCVIOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCappedRebase(
      newCappedRebase: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDeviationParameters(
      newDeviationPercentagePerSingleRebaseLag: BigNumberish,
      newMinDeviationPercentage: BigNumberish,
      newMaxDeviationPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesCalculator(
      newFeesCalculator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesCollector(
      newCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFulfiller(fulfiller: string, overrides?: CallOverrides): Promise<void>;

    setKeepersFeeVaultAddress(
      newKeepersFeeVaultAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxMinRequestIncrements(
      newMaxMinRequestIncrements: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTotalRequestsAmount(
      maxTotalRequestsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinKeepersAmounts(
      newMinKeepersMintAmount: BigNumberish,
      newMinKeepersBurnAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinRequestId(
      newMinRequestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinter(minter: string, overrides?: CallOverrides): Promise<void>;

    setPlatform(newPlatform: string, overrides?: CallOverrides): Promise<void>;

    setRequestFeesCalculator(
      newRequestFeesCalculator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVerifyTotalRequestsAmount(
      verifyTotalRequestsAmount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    submitBurnRequest(
      tokenAmount: BigNumberish,
      timeDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitKeepersBurnRequest(
      tokenAmount: BigNumberish,
      timeDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitKeepersMintRequest(
      tokenAmount: BigNumberish,
      timeDelay: BigNumberish,
      maxBuyingPremiumFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitMintRequest(
      tokenAmount: BigNumberish,
      timeDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Burn(uint256,address,uint256,uint256,uint256,uint256,uint256)"(
      requestId?: null,
      account?: string | null,
      tokenAmountBeforeFees?: null,
      tokenAmount?: null,
      burnedTokens?: null,
      closePositionFee?: null,
      closingPremiumFee?: null
    ): BurnEventFilter;
    Burn(
      requestId?: null,
      account?: string | null,
      tokenAmountBeforeFees?: null,
      tokenAmount?: null,
      burnedTokens?: null,
      closePositionFee?: null,
      closingPremiumFee?: null
    ): BurnEventFilter;

    "FulfillRequest(uint256,uint8,address,uint256,bool,bool,bool,address,uint32)"(
      requestId?: null,
      requestType?: null,
      account?: string | null,
      fulfillFeesAmount?: null,
      isAborted?: null,
      useKeepers?: null,
      keepersCalled?: null,
      fulfiller?: string | null,
      fulfillTimestamp?: null
    ): FulfillRequestEventFilter;
    FulfillRequest(
      requestId?: null,
      requestType?: null,
      account?: string | null,
      fulfillFeesAmount?: null,
      isAborted?: null,
      useKeepers?: null,
      keepersCalled?: null,
      fulfiller?: string | null,
      fulfillTimestamp?: null
    ): FulfillRequestEventFilter;

    "LiquidateRequest(uint256,uint8,address,address,uint256,bool,uint32)"(
      requestId?: null,
      requestType?: null,
      account?: string | null,
      liquidator?: string | null,
      findersFeeAmount?: null,
      useKeepers?: null,
      liquidateTimestamp?: null
    ): LiquidateRequestEventFilter;
    LiquidateRequest(
      requestId?: null,
      requestType?: null,
      account?: string | null,
      liquidator?: string | null,
      findersFeeAmount?: null,
      useKeepers?: null,
      liquidateTimestamp?: null
    ): LiquidateRequestEventFilter;

    "Mint(uint256,address,uint256,uint256,uint256,uint256,uint256)"(
      requestId?: null,
      account?: string | null,
      tokenAmount?: null,
      positionedTokenAmount?: null,
      mintedTokens?: null,
      openPositionFee?: null,
      buyingPremiumFee?: null
    ): MintEventFilter;
    Mint(
      requestId?: null,
      account?: string | null,
      tokenAmount?: null,
      positionedTokenAmount?: null,
      mintedTokens?: null,
      openPositionFee?: null,
      buyingPremiumFee?: null
    ): MintEventFilter;

    "SubmitRequest(uint256,uint8,address,uint256,uint256,uint32,uint32,bool,uint16)"(
      requestId?: null,
      requestType?: null,
      account?: string | null,
      tokenAmount?: null,
      submitFeesAmount?: null,
      requestTimestamp?: null,
      targetTimestamp?: null,
      useKeepers?: null,
      maxBuyingPremiumFeePercentage?: null
    ): SubmitRequestEventFilter;
    SubmitRequest(
      requestId?: null,
      requestType?: null,
      account?: string | null,
      tokenAmount?: null,
      submitFeesAmount?: null,
      requestTimestamp?: null,
      targetTimestamp?: null,
      useKeepers?: null,
      maxBuyingPremiumFeePercentage?: null
    ): SubmitRequestEventFilter;
  };

  estimateGas: {
    burnTokens(
      burnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillBurnRequest(
      requestId: BigNumberish,
      keepersCalled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillMintRequest(
      requestId: BigNumberish,
      maxBuyingPremiumFeePercentage: BigNumberish,
      keepersCalled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialTokenToLPTokenRate(overrides?: CallOverrides): Promise<BigNumber>;

    leverage(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintTokens(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    platform(overrides?: CallOverrides): Promise<BigNumber>;

    rebaseCVI(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestFeesCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    requests(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCVIOracle(
      newCVIOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCappedRebase(
      newCappedRebase: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDeviationParameters(
      newDeviationPercentagePerSingleRebaseLag: BigNumberish,
      newMinDeviationPercentage: BigNumberish,
      newMaxDeviationPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeesCalculator(
      newFeesCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeesCollector(
      newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFulfiller(
      fulfiller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeepersFeeVaultAddress(
      newKeepersFeeVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxMinRequestIncrements(
      newMaxMinRequestIncrements: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTotalRequestsAmount(
      maxTotalRequestsAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinKeepersAmounts(
      newMinKeepersMintAmount: BigNumberish,
      newMinKeepersBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinRequestId(
      newMinRequestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinter(
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatform(
      newPlatform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRequestFeesCalculator(
      newRequestFeesCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVerifyTotalRequestsAmount(
      verifyTotalRequestsAmount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitBurnRequest(
      tokenAmount: BigNumberish,
      timeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitKeepersBurnRequest(
      tokenAmount: BigNumberish,
      timeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitKeepersMintRequest(
      tokenAmount: BigNumberish,
      timeDelay: BigNumberish,
      maxBuyingPremiumFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitMintRequest(
      tokenAmount: BigNumberish,
      timeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnTokens(
      burnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillBurnRequest(
      requestId: BigNumberish,
      keepersCalled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillMintRequest(
      requestId: BigNumberish,
      maxBuyingPremiumFeePercentage: BigNumberish,
      keepersCalled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialTokenToLPTokenRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateRequest(
      requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintTokens(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    platform(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebaseCVI(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestFeesCalculator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requests(
      requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCVIOracle(
      newCVIOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCappedRebase(
      newCappedRebase: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDeviationParameters(
      newDeviationPercentagePerSingleRebaseLag: BigNumberish,
      newMinDeviationPercentage: BigNumberish,
      newMaxDeviationPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeesCalculator(
      newFeesCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeesCollector(
      newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFulfiller(
      fulfiller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeepersFeeVaultAddress(
      newKeepersFeeVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxMinRequestIncrements(
      newMaxMinRequestIncrements: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTotalRequestsAmount(
      maxTotalRequestsAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinKeepersAmounts(
      newMinKeepersMintAmount: BigNumberish,
      newMinKeepersBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinRequestId(
      newMinRequestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinter(
      minter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatform(
      newPlatform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRequestFeesCalculator(
      newRequestFeesCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVerifyTotalRequestsAmount(
      verifyTotalRequestsAmount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitBurnRequest(
      tokenAmount: BigNumberish,
      timeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitKeepersBurnRequest(
      tokenAmount: BigNumberish,
      timeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitKeepersMintRequest(
      tokenAmount: BigNumberish,
      timeDelay: BigNumberish,
      maxBuyingPremiumFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitMintRequest(
      tokenAmount: BigNumberish,
      timeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
