/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../../common";

export declare namespace IVolatilityToken {
  export type RequestStruct = {
    requestType: BigNumberish;
    tokenAmount: BigNumberish;
    timeDelayRequestFeesPercent: BigNumberish;
    maxRequestFeesPercent: BigNumberish;
    owner: string;
    requestTimestamp: BigNumberish;
    targetTimestamp: BigNumberish;
    useKeepers: boolean;
    maxBuyingPremiumFeePercentage: BigNumberish;
  };

  export type RequestStructOutput = [
    number,
    BigNumber,
    number,
    number,
    string,
    number,
    number,
    boolean,
    number
  ] & {
    requestType: number;
    tokenAmount: BigNumber;
    timeDelayRequestFeesPercent: number;
    maxRequestFeesPercent: number;
    owner: string;
    requestTimestamp: number;
    targetTimestamp: number;
    useKeepers: boolean;
    maxBuyingPremiumFeePercentage: number;
  };
}

export interface IRequestFeesCalculatorInterface extends utils.Interface {
  functions: {
    "calculateFindersFee(uint256)": FunctionFragment;
    "calculateKeepersFee(uint256)": FunctionFragment;
    "calculateTimeDelayFee(uint256)": FunctionFragment;
    "calculateTimePenaltyFee((uint8,uint168,uint16,uint16,address,uint32,uint32,bool,uint16))": FunctionFragment;
    "getMaxFees()": FunctionFragment;
    "isLiquidable((uint8,uint168,uint16,uint16,address,uint32,uint32,bool,uint16))": FunctionFragment;
    "minWaitTime()": FunctionFragment;
    "setFindersFee(uint16)": FunctionFragment;
    "setKeepersFeeMax(uint256)": FunctionFragment;
    "setKeepersFeePercent(uint16)": FunctionFragment;
    "setMinWaitTime(uint32)": FunctionFragment;
    "setTimeDelayFeesParameters(uint16,uint16)": FunctionFragment;
    "setTimePenaltyFeeParameters(uint16,uint32,uint16,uint32,uint16)": FunctionFragment;
    "setTimeWindow(uint32,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateFindersFee"
      | "calculateKeepersFee"
      | "calculateTimeDelayFee"
      | "calculateTimePenaltyFee"
      | "getMaxFees"
      | "isLiquidable"
      | "minWaitTime"
      | "setFindersFee"
      | "setKeepersFeeMax"
      | "setKeepersFeePercent"
      | "setMinWaitTime"
      | "setTimeDelayFeesParameters"
      | "setTimePenaltyFeeParameters"
      | "setTimeWindow"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateFindersFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateKeepersFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTimeDelayFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTimePenaltyFee",
    values: [IVolatilityToken.RequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidable",
    values: [IVolatilityToken.RequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "minWaitTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFindersFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeepersFeeMax",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeepersFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinWaitTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeDelayFeesParameters",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimePenaltyFeeParameters",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeWindow",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateFindersFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateKeepersFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTimeDelayFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTimePenaltyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMaxFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minWaitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFindersFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeepersFeeMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeepersFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinWaitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeDelayFeesParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimePenaltyFeeParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeWindow",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IRequestFeesCalculator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRequestFeesCalculatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateFindersFee(
      tokensLeftAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { findersFeeAmount: BigNumber }>;

    calculateKeepersFee(
      tokensAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { keepersFeeAmount: BigNumber }>;

    calculateTimeDelayFee(
      timeDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { feePercentage: number }>;

    calculateTimePenaltyFee(
      request: IVolatilityToken.RequestStruct,
      overrides?: CallOverrides
    ): Promise<[number] & { feePercentage: number }>;

    getMaxFees(
      overrides?: CallOverrides
    ): Promise<[number] & { maxFeesPercent: number }>;

    isLiquidable(
      request: IVolatilityToken.RequestStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { liquidable: boolean }>;

    minWaitTime(overrides?: CallOverrides): Promise<[number]>;

    setFindersFee(
      findersFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeepersFeeMax(
      keepersFeeMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeepersFeePercent(
      keepersFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinWaitTime(
      newMinWaitTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTimeDelayFeesParameters(
      minTimeDelayFeePercent: BigNumberish,
      maxTimeDelayFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTimePenaltyFeeParameters(
      beforeTargetTimeMaxPenaltyFeePercent: BigNumberish,
      afterTargetMidTime: BigNumberish,
      afterTargetMidTimePenaltyFeePercent: BigNumberish,
      afterTargetMaxTime: BigNumberish,
      afterTargetMaxTimePenaltyFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTimeWindow(
      minTimeWindow: BigNumberish,
      maxTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateFindersFee(
    tokensLeftAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateKeepersFee(
    tokensAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTimeDelayFee(
    timeDelay: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  calculateTimePenaltyFee(
    request: IVolatilityToken.RequestStruct,
    overrides?: CallOverrides
  ): Promise<number>;

  getMaxFees(overrides?: CallOverrides): Promise<number>;

  isLiquidable(
    request: IVolatilityToken.RequestStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minWaitTime(overrides?: CallOverrides): Promise<number>;

  setFindersFee(
    findersFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeepersFeeMax(
    keepersFeeMax: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeepersFeePercent(
    keepersFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinWaitTime(
    newMinWaitTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTimeDelayFeesParameters(
    minTimeDelayFeePercent: BigNumberish,
    maxTimeDelayFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTimePenaltyFeeParameters(
    beforeTargetTimeMaxPenaltyFeePercent: BigNumberish,
    afterTargetMidTime: BigNumberish,
    afterTargetMidTimePenaltyFeePercent: BigNumberish,
    afterTargetMaxTime: BigNumberish,
    afterTargetMaxTimePenaltyFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTimeWindow(
    minTimeWindow: BigNumberish,
    maxTimeWindow: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateFindersFee(
      tokensLeftAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateKeepersFee(
      tokensAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTimeDelayFee(
      timeDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    calculateTimePenaltyFee(
      request: IVolatilityToken.RequestStruct,
      overrides?: CallOverrides
    ): Promise<number>;

    getMaxFees(overrides?: CallOverrides): Promise<number>;

    isLiquidable(
      request: IVolatilityToken.RequestStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minWaitTime(overrides?: CallOverrides): Promise<number>;

    setFindersFee(
      findersFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeepersFeeMax(
      keepersFeeMax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeepersFeePercent(
      keepersFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinWaitTime(
      newMinWaitTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeDelayFeesParameters(
      minTimeDelayFeePercent: BigNumberish,
      maxTimeDelayFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimePenaltyFeeParameters(
      beforeTargetTimeMaxPenaltyFeePercent: BigNumberish,
      afterTargetMidTime: BigNumberish,
      afterTargetMidTimePenaltyFeePercent: BigNumberish,
      afterTargetMaxTime: BigNumberish,
      afterTargetMaxTimePenaltyFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeWindow(
      minTimeWindow: BigNumberish,
      maxTimeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    calculateFindersFee(
      tokensLeftAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateKeepersFee(
      tokensAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTimeDelayFee(
      timeDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTimePenaltyFee(
      request: IVolatilityToken.RequestStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxFees(overrides?: CallOverrides): Promise<BigNumber>;

    isLiquidable(
      request: IVolatilityToken.RequestStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

    setFindersFee(
      findersFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeepersFeeMax(
      keepersFeeMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeepersFeePercent(
      keepersFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinWaitTime(
      newMinWaitTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTimeDelayFeesParameters(
      minTimeDelayFeePercent: BigNumberish,
      maxTimeDelayFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTimePenaltyFeeParameters(
      beforeTargetTimeMaxPenaltyFeePercent: BigNumberish,
      afterTargetMidTime: BigNumberish,
      afterTargetMidTimePenaltyFeePercent: BigNumberish,
      afterTargetMaxTime: BigNumberish,
      afterTargetMaxTimePenaltyFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTimeWindow(
      minTimeWindow: BigNumberish,
      maxTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateFindersFee(
      tokensLeftAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateKeepersFee(
      tokensAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTimeDelayFee(
      timeDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTimePenaltyFee(
      request: IVolatilityToken.RequestStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLiquidable(
      request: IVolatilityToken.RequestStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minWaitTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFindersFee(
      findersFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeepersFeeMax(
      keepersFeeMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeepersFeePercent(
      keepersFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinWaitTime(
      newMinWaitTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTimeDelayFeesParameters(
      minTimeDelayFeePercent: BigNumberish,
      maxTimeDelayFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTimePenaltyFeeParameters(
      beforeTargetTimeMaxPenaltyFeePercent: BigNumberish,
      afterTargetMidTime: BigNumberish,
      afterTargetMidTimePenaltyFeePercent: BigNumberish,
      afterTargetMaxTime: BigNumberish,
      afterTargetMaxTimePenaltyFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTimeWindow(
      minTimeWindow: BigNumberish,
      maxTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
