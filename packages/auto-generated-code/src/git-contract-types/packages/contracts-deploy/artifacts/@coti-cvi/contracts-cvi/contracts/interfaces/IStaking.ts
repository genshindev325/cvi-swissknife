/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../../common";

export interface IStakingInterface extends utils.Interface {
  functions: {
    "addClaimableToken(address)": FunctionFragment;
    "claimAllProfits()": FunctionFragment;
    "claimProfit(address)": FunctionFragment;
    "getClaimableTokens()": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "profitOf(address,address)": FunctionFragment;
    "removeClaimableToken(address)": FunctionFragment;
    "rewardPerSecond()": FunctionFragment;
    "setRewardRate(uint256)": FunctionFragment;
    "setStakingLockupTime(uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addClaimableToken"
      | "claimAllProfits"
      | "claimProfit"
      | "getClaimableTokens"
      | "lastUpdateTime"
      | "profitOf"
      | "removeClaimableToken"
      | "rewardPerSecond"
      | "setRewardRate"
      | "setStakingLockupTime"
      | "stake"
      | "unstake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addClaimableToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllProfits",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimProfit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getClaimableTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "profitOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeClaimableToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingLockupTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addClaimableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAllProfits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "profitOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeClaimableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingLockupTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "ProfitAdded(address,uint256)": EventFragment;
    "RewardClaimed(address,address,uint256)": EventFragment;
    "Staked(address,uint256,uint256,uint256)": EventFragment;
    "Unstaked(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProfitAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
}

export interface ProfitAddedEventObject {
  token: string;
  profit: BigNumber;
}
export type ProfitAddedEvent = TypedEvent<
  [string, BigNumber],
  ProfitAddedEventObject
>;

export type ProfitAddedEventFilter = TypedEventFilter<ProfitAddedEvent>;

export interface RewardClaimedEventObject {
  account: string;
  token: string;
  reward: BigNumber;
}
export type RewardClaimedEvent = TypedEvent<
  [string, string, BigNumber],
  RewardClaimedEventObject
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export interface StakedEventObject {
  account: string;
  goviAmount: BigNumber;
  xGOVIMinted: BigNumber;
  xGOVIBalance: BigNumber;
}
export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface UnstakedEventObject {
  account: string;
  xGOVIBurned: BigNumber;
  goviReward: BigNumber;
  xGOVIBalance: BigNumber;
}
export type UnstakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  UnstakedEventObject
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export interface IStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addClaimableToken(
      newClaimableToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAllProfits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimProfit(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getClaimableTokens(overrides?: CallOverrides): Promise<[string[]]>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    profitOf(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeClaimableToken(
      removedClaimableToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    setRewardRate(
      newRewardPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingLockupTime(
      newLockupTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      goviAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      xGOVIAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addClaimableToken(
    newClaimableToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAllProfits(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimProfit(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getClaimableTokens(overrides?: CallOverrides): Promise<string[]>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  profitOf(
    account: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeClaimableToken(
    removedClaimableToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  setRewardRate(
    newRewardPerSecond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingLockupTime(
    newLockupTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    goviAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    xGOVIAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addClaimableToken(
      newClaimableToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAllProfits(overrides?: CallOverrides): Promise<BigNumber[]>;

    claimProfit(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableTokens(overrides?: CallOverrides): Promise<string[]>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    profitOf(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeClaimableToken(
      removedClaimableToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardRate(
      newRewardPerSecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingLockupTime(
      newLockupTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      goviAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      xGOVIAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ProfitAdded(address,uint256)"(
      token?: string | null,
      profit?: null
    ): ProfitAddedEventFilter;
    ProfitAdded(token?: string | null, profit?: null): ProfitAddedEventFilter;

    "RewardClaimed(address,address,uint256)"(
      account?: string | null,
      token?: string | null,
      reward?: null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      account?: string | null,
      token?: string | null,
      reward?: null
    ): RewardClaimedEventFilter;

    "Staked(address,uint256,uint256,uint256)"(
      account?: string | null,
      goviAmount?: null,
      xGOVIMinted?: null,
      xGOVIBalance?: null
    ): StakedEventFilter;
    Staked(
      account?: string | null,
      goviAmount?: null,
      xGOVIMinted?: null,
      xGOVIBalance?: null
    ): StakedEventFilter;

    "Unstaked(address,uint256,uint256,uint256)"(
      account?: string | null,
      xGOVIBurned?: null,
      goviReward?: null,
      xGOVIBalance?: null
    ): UnstakedEventFilter;
    Unstaked(
      account?: string | null,
      xGOVIBurned?: null,
      goviReward?: null,
      xGOVIBalance?: null
    ): UnstakedEventFilter;
  };

  estimateGas: {
    addClaimableToken(
      newClaimableToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAllProfits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimProfit(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getClaimableTokens(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    profitOf(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeClaimableToken(
      removedClaimableToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    setRewardRate(
      newRewardPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingLockupTime(
      newLockupTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      goviAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      xGOVIAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addClaimableToken(
      newClaimableToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAllProfits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimProfit(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getClaimableTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profitOf(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeClaimableToken(
      removedClaimableToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRewardRate(
      newRewardPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingLockupTime(
      newLockupTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      goviAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      xGOVIAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
