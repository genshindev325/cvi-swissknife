/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../../common";

export interface FeesCollectorInterface extends utils.Interface {
  functions: {
    "MAX_PERCENTAGE()": FunctionFragment;
    "allowedSenders(address)": FunctionFragment;
    "arbitrumContractAddress()": FunctionFragment;
    "arbitrumInbox()": FunctionFragment;
    "buyBack()": FunctionFragment;
    "checkUpkeep(bytes)": FunctionFragment;
    "convertUSDC()": FunctionFragment;
    "enableWhitelist()": FunctionFragment;
    "fundsSender()": FunctionFragment;
    "goviToken()": FunctionFragment;
    "initialize(address,address,address,address,address,address,address,address,address,address)": FunctionFragment;
    "maxSlippage()": FunctionFragment;
    "maxSubmissionFee()": FunctionFragment;
    "minETHForTransfer()": FunctionFragment;
    "minUSDCForConversion()": FunctionFragment;
    "owner()": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "sendFunds(uint256)": FunctionFragment;
    "sendPercentage()": FunctionFragment;
    "sendProfit(uint256,address)": FunctionFragment;
    "sendToArbitrum()": FunctionFragment;
    "setAllowedSenderAddress(address,bool)": FunctionFragment;
    "setArbitrumContractAddress(address)": FunctionFragment;
    "setArbitrumInbox(address)": FunctionFragment;
    "setBuyBack(bool)": FunctionFragment;
    "setConvertUSDC(bool)": FunctionFragment;
    "setEnableWhitelist(bool)": FunctionFragment;
    "setFundsSender(address)": FunctionFragment;
    "setMaxSlippage(uint16)": FunctionFragment;
    "setMaxSubmissionFee(uint256)": FunctionFragment;
    "setMinETHForTransfer(uint256)": FunctionFragment;
    "setMinUDSCForConversion(uint256)": FunctionFragment;
    "setRouter(address)": FunctionFragment;
    "setSendPercentage(uint16)": FunctionFragment;
    "setSendToArbitrum(bool)": FunctionFragment;
    "setStaking(address)": FunctionFragment;
    "setStakingVaultAddress(address)": FunctionFragment;
    "setTreasuryAddress(address)": FunctionFragment;
    "setTreasuryTransferPercentage(uint16)": FunctionFragment;
    "setUSDCETHPriceAggregator(address)": FunctionFragment;
    "setUseNative(bool)": FunctionFragment;
    "setWrappedToken(address)": FunctionFragment;
    "staking()": FunctionFragment;
    "stakingVaultAddress()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
    "treasuryTransferPercentage()": FunctionFragment;
    "usdcETHPriceAggregator()": FunctionFragment;
    "usdcToken()": FunctionFragment;
    "useNative()": FunctionFragment;
    "wrappedToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_PERCENTAGE"
      | "allowedSenders"
      | "arbitrumContractAddress"
      | "arbitrumInbox"
      | "buyBack"
      | "checkUpkeep"
      | "convertUSDC"
      | "enableWhitelist"
      | "fundsSender"
      | "goviToken"
      | "initialize"
      | "maxSlippage"
      | "maxSubmissionFee"
      | "minETHForTransfer"
      | "minUSDCForConversion"
      | "owner"
      | "performUpkeep"
      | "renounceOwnership"
      | "router"
      | "sendFunds"
      | "sendPercentage"
      | "sendProfit"
      | "sendToArbitrum"
      | "setAllowedSenderAddress"
      | "setArbitrumContractAddress"
      | "setArbitrumInbox"
      | "setBuyBack"
      | "setConvertUSDC"
      | "setEnableWhitelist"
      | "setFundsSender"
      | "setMaxSlippage"
      | "setMaxSubmissionFee"
      | "setMinETHForTransfer"
      | "setMinUDSCForConversion"
      | "setRouter"
      | "setSendPercentage"
      | "setSendToArbitrum"
      | "setStaking"
      | "setStakingVaultAddress"
      | "setTreasuryAddress"
      | "setTreasuryTransferPercentage"
      | "setUSDCETHPriceAggregator"
      | "setUseNative"
      | "setWrappedToken"
      | "staking"
      | "stakingVaultAddress"
      | "transferOwnership"
      | "treasuryAddress"
      | "treasuryTransferPercentage"
      | "usdcETHPriceAggregator"
      | "usdcToken"
      | "useNative"
      | "wrappedToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedSenders",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrumContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrumInbox",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyBack", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "convertUSDC",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundsSender",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "goviToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxSlippage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSubmissionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minETHForTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minUSDCForConversion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendProfit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendToArbitrum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedSenderAddress",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setArbitrumContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setArbitrumInbox",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setBuyBack", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setConvertUSDC",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnableWhitelist",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundsSender",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSlippage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSubmissionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinETHForTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinUDSCForConversion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setRouter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setSendPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSendToArbitrum",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setStaking", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setStakingVaultAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryTransferPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSDCETHPriceAggregator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUseNative",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakingVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryTransferPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usdcETHPriceAggregator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "useNative", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wrappedToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitrumContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitrumInbox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyBack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundsSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "goviToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSubmissionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minETHForTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minUSDCForConversion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendProfit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendToArbitrum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedSenderAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArbitrumContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArbitrumInbox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBuyBack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setConvertUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnableWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundsSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSubmissionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinETHForTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinUDSCForConversion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSendPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSendToArbitrum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStaking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStakingVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryTransferPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSDCETHPriceAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUseNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryTransferPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdcETHPriceAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "useNative", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrappedToken",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface FeesCollector extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeesCollectorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<[number]>;

    allowedSenders(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    arbitrumContractAddress(overrides?: CallOverrides): Promise<[string]>;

    arbitrumInbox(overrides?: CallOverrides): Promise<[string]>;

    buyBack(overrides?: CallOverrides): Promise<[boolean]>;

    checkUpkeep(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    convertUSDC(overrides?: CallOverrides): Promise<[boolean]>;

    enableWhitelist(overrides?: CallOverrides): Promise<[boolean]>;

    fundsSender(overrides?: CallOverrides): Promise<[string]>;

    goviToken(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _usdcToken: string,
      _goviToken: string,
      _staking: string,
      _stakingVaultAddress: string,
      _arbitrumContractAddress: string,
      _router: string,
      _usdcETHPriceAggregator: string,
      _arbitrumInbox: string,
      _treasuryAddress: string,
      _wrappedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxSlippage(overrides?: CallOverrides): Promise<[number]>;

    maxSubmissionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    minETHForTransfer(overrides?: CallOverrides): Promise<[BigNumber]>;

    minUSDCForConversion(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    performUpkeep(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    sendFunds(
      _goviETHPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendPercentage(overrides?: CallOverrides): Promise<[number]>;

    sendProfit(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendToArbitrum(overrides?: CallOverrides): Promise<[boolean]>;

    setAllowedSenderAddress(
      _account: string,
      _isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setArbitrumContractAddress(
      _newArbitrumContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setArbitrumInbox(
      _newArbitrumInbox: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuyBack(
      _newBuyBack: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConvertUSDC(
      _newConvertUSDC: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnableWhitelist(
      _enableWhitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundsSender(
      _newFundsSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxSlippage(
      _newMaxSlippagePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxSubmissionFee(
      _newMaxSubmissionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinETHForTransfer(
      _newMinETHForTransfer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinUDSCForConversion(
      _newMinUSDCForConversion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRouter(
      _newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSendPercentage(
      _newSendPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSendToArbitrum(
      _newSendToArbitrum: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStaking(
      _newStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingVaultAddress(
      _newStakingVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
      _newTreasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryTransferPercentage(
      _newTreasuryTransferPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUSDCETHPriceAggregator(
      _newUSDCETHPriceAggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUseNative(
      _newUseNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWrappedToken(
      _newWrappedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    staking(overrides?: CallOverrides): Promise<[string]>;

    stakingVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    treasuryTransferPercentage(overrides?: CallOverrides): Promise<[number]>;

    usdcETHPriceAggregator(overrides?: CallOverrides): Promise<[string]>;

    usdcToken(overrides?: CallOverrides): Promise<[string]>;

    useNative(overrides?: CallOverrides): Promise<[boolean]>;

    wrappedToken(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_PERCENTAGE(overrides?: CallOverrides): Promise<number>;

  allowedSenders(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  arbitrumContractAddress(overrides?: CallOverrides): Promise<string>;

  arbitrumInbox(overrides?: CallOverrides): Promise<string>;

  buyBack(overrides?: CallOverrides): Promise<boolean>;

  checkUpkeep(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string] & { upkeepNeeded: boolean; performData: string }
  >;

  convertUSDC(overrides?: CallOverrides): Promise<boolean>;

  enableWhitelist(overrides?: CallOverrides): Promise<boolean>;

  fundsSender(overrides?: CallOverrides): Promise<string>;

  goviToken(overrides?: CallOverrides): Promise<string>;

  initialize(
    _usdcToken: string,
    _goviToken: string,
    _staking: string,
    _stakingVaultAddress: string,
    _arbitrumContractAddress: string,
    _router: string,
    _usdcETHPriceAggregator: string,
    _arbitrumInbox: string,
    _treasuryAddress: string,
    _wrappedToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxSlippage(overrides?: CallOverrides): Promise<number>;

  maxSubmissionFee(overrides?: CallOverrides): Promise<BigNumber>;

  minETHForTransfer(overrides?: CallOverrides): Promise<BigNumber>;

  minUSDCForConversion(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  performUpkeep(
    arg0: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  sendFunds(
    _goviETHPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendPercentage(overrides?: CallOverrides): Promise<number>;

  sendProfit(
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendToArbitrum(overrides?: CallOverrides): Promise<boolean>;

  setAllowedSenderAddress(
    _account: string,
    _isAllowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setArbitrumContractAddress(
    _newArbitrumContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setArbitrumInbox(
    _newArbitrumInbox: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuyBack(
    _newBuyBack: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConvertUSDC(
    _newConvertUSDC: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnableWhitelist(
    _enableWhitelist: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundsSender(
    _newFundsSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxSlippage(
    _newMaxSlippagePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxSubmissionFee(
    _newMaxSubmissionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinETHForTransfer(
    _newMinETHForTransfer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinUDSCForConversion(
    _newMinUSDCForConversion: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRouter(
    _newRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSendPercentage(
    _newSendPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSendToArbitrum(
    _newSendToArbitrum: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStaking(
    _newStaking: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingVaultAddress(
    _newStakingVaultAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddress(
    _newTreasuryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryTransferPercentage(
    _newTreasuryTransferPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUSDCETHPriceAggregator(
    _newUSDCETHPriceAggregator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUseNative(
    _newUseNative: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWrappedToken(
    _newWrappedToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  staking(overrides?: CallOverrides): Promise<string>;

  stakingVaultAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  treasuryTransferPercentage(overrides?: CallOverrides): Promise<number>;

  usdcETHPriceAggregator(overrides?: CallOverrides): Promise<string>;

  usdcToken(overrides?: CallOverrides): Promise<string>;

  useNative(overrides?: CallOverrides): Promise<boolean>;

  wrappedToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<number>;

    allowedSenders(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    arbitrumContractAddress(overrides?: CallOverrides): Promise<string>;

    arbitrumInbox(overrides?: CallOverrides): Promise<string>;

    buyBack(overrides?: CallOverrides): Promise<boolean>;

    checkUpkeep(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    convertUSDC(overrides?: CallOverrides): Promise<boolean>;

    enableWhitelist(overrides?: CallOverrides): Promise<boolean>;

    fundsSender(overrides?: CallOverrides): Promise<string>;

    goviToken(overrides?: CallOverrides): Promise<string>;

    initialize(
      _usdcToken: string,
      _goviToken: string,
      _staking: string,
      _stakingVaultAddress: string,
      _arbitrumContractAddress: string,
      _router: string,
      _usdcETHPriceAggregator: string,
      _arbitrumInbox: string,
      _treasuryAddress: string,
      _wrappedToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    maxSlippage(overrides?: CallOverrides): Promise<number>;

    maxSubmissionFee(overrides?: CallOverrides): Promise<BigNumber>;

    minETHForTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    minUSDCForConversion(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    performUpkeep(arg0: BytesLike, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    sendFunds(
      _goviETHPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendPercentage(overrides?: CallOverrides): Promise<number>;

    sendProfit(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendToArbitrum(overrides?: CallOverrides): Promise<boolean>;

    setAllowedSenderAddress(
      _account: string,
      _isAllowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setArbitrumContractAddress(
      _newArbitrumContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setArbitrumInbox(
      _newArbitrumInbox: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyBack(_newBuyBack: boolean, overrides?: CallOverrides): Promise<void>;

    setConvertUSDC(
      _newConvertUSDC: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnableWhitelist(
      _enableWhitelist: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundsSender(
      _newFundsSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSlippage(
      _newMaxSlippagePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSubmissionFee(
      _newMaxSubmissionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinETHForTransfer(
      _newMinETHForTransfer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinUDSCForConversion(
      _newMinUSDCForConversion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouter(_newRouter: string, overrides?: CallOverrides): Promise<void>;

    setSendPercentage(
      _newSendPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSendToArbitrum(
      _newSendToArbitrum: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setStaking(_newStaking: string, overrides?: CallOverrides): Promise<void>;

    setStakingVaultAddress(
      _newStakingVaultAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddress(
      _newTreasuryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryTransferPercentage(
      _newTreasuryTransferPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUSDCETHPriceAggregator(
      _newUSDCETHPriceAggregator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUseNative(
      _newUseNative: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWrappedToken(
      _newWrappedToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    staking(overrides?: CallOverrides): Promise<string>;

    stakingVaultAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    treasuryTransferPercentage(overrides?: CallOverrides): Promise<number>;

    usdcETHPriceAggregator(overrides?: CallOverrides): Promise<string>;

    usdcToken(overrides?: CallOverrides): Promise<string>;

    useNative(overrides?: CallOverrides): Promise<boolean>;

    wrappedToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    allowedSenders(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    arbitrumContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    arbitrumInbox(overrides?: CallOverrides): Promise<BigNumber>;

    buyBack(overrides?: CallOverrides): Promise<BigNumber>;

    checkUpkeep(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    convertUSDC(overrides?: CallOverrides): Promise<BigNumber>;

    enableWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    fundsSender(overrides?: CallOverrides): Promise<BigNumber>;

    goviToken(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _usdcToken: string,
      _goviToken: string,
      _staking: string,
      _stakingVaultAddress: string,
      _arbitrumContractAddress: string,
      _router: string,
      _usdcETHPriceAggregator: string,
      _arbitrumInbox: string,
      _treasuryAddress: string,
      _wrappedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    maxSubmissionFee(overrides?: CallOverrides): Promise<BigNumber>;

    minETHForTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    minUSDCForConversion(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    performUpkeep(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    sendFunds(
      _goviETHPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    sendProfit(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendToArbitrum(overrides?: CallOverrides): Promise<BigNumber>;

    setAllowedSenderAddress(
      _account: string,
      _isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setArbitrumContractAddress(
      _newArbitrumContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setArbitrumInbox(
      _newArbitrumInbox: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuyBack(
      _newBuyBack: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConvertUSDC(
      _newConvertUSDC: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnableWhitelist(
      _enableWhitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundsSender(
      _newFundsSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxSlippage(
      _newMaxSlippagePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxSubmissionFee(
      _newMaxSubmissionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinETHForTransfer(
      _newMinETHForTransfer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinUDSCForConversion(
      _newMinUSDCForConversion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRouter(
      _newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSendPercentage(
      _newSendPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSendToArbitrum(
      _newSendToArbitrum: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStaking(
      _newStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingVaultAddress(
      _newStakingVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryAddress(
      _newTreasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryTransferPercentage(
      _newTreasuryTransferPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUSDCETHPriceAggregator(
      _newUSDCETHPriceAggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUseNative(
      _newUseNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWrappedToken(
      _newWrappedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    staking(overrides?: CallOverrides): Promise<BigNumber>;

    stakingVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryTransferPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    usdcETHPriceAggregator(overrides?: CallOverrides): Promise<BigNumber>;

    usdcToken(overrides?: CallOverrides): Promise<BigNumber>;

    useNative(overrides?: CallOverrides): Promise<BigNumber>;

    wrappedToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedSenders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    arbitrumContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    arbitrumInbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyBack(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkUpkeep(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertUSDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundsSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    goviToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _usdcToken: string,
      _goviToken: string,
      _staking: string,
      _stakingVaultAddress: string,
      _arbitrumContractAddress: string,
      _router: string,
      _usdcETHPriceAggregator: string,
      _arbitrumInbox: string,
      _treasuryAddress: string,
      _wrappedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxSlippage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSubmissionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minETHForTransfer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minUSDCForConversion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performUpkeep(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendFunds(
      _goviETHPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendProfit(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendToArbitrum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllowedSenderAddress(
      _account: string,
      _isAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setArbitrumContractAddress(
      _newArbitrumContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setArbitrumInbox(
      _newArbitrumInbox: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuyBack(
      _newBuyBack: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConvertUSDC(
      _newConvertUSDC: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnableWhitelist(
      _enableWhitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundsSender(
      _newFundsSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSlippage(
      _newMaxSlippagePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSubmissionFee(
      _newMaxSubmissionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinETHForTransfer(
      _newMinETHForTransfer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinUDSCForConversion(
      _newMinUSDCForConversion: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRouter(
      _newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSendPercentage(
      _newSendPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSendToArbitrum(
      _newSendToArbitrum: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStaking(
      _newStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingVaultAddress(
      _newStakingVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddress(
      _newTreasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryTransferPercentage(
      _newTreasuryTransferPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUSDCETHPriceAggregator(
      _newUSDCETHPriceAggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUseNative(
      _newUseNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWrappedToken(
      _newWrappedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    staking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingVaultAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryTransferPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usdcETHPriceAggregator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    useNative(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrappedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
