/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../../common";

export type TokenInfoStruct = {
  isUsed: boolean;
  isMinted: boolean;
  index: BigNumberish;
};

export type TokenInfoStructOutput = [boolean, boolean, BigNumber] & {
  isUsed: boolean;
  isMinted: boolean;
  index: BigNumber;
};

export interface ILProtectionDiscountNFTInterface extends utils.Interface {
  functions: {
    "getTokenInfo(address)": FunctionFragment;
    "setTokenInfo(address,(bool,bool,uint256))": FunctionFragment;
    "setUsed(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getTokenInfo" | "setTokenInfo" | "setUsed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenInfo",
    values: [string, TokenInfoStruct]
  ): string;
  encodeFunctionData(functionFragment: "setUsed", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUsed", data: BytesLike): Result;

  events: {};
}

export interface ILProtectionDiscountNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILProtectionDiscountNFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getTokenInfo(
      _to: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean, boolean]>;

    setTokenInfo(
      _to: string,
      _tokenInfo: TokenInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUsed(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getTokenInfo(
    _to: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean, boolean]>;

  setTokenInfo(
    _to: string,
    _tokenInfo: TokenInfoStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUsed(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getTokenInfo(
      _to: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean, boolean]>;

    setTokenInfo(
      _to: string,
      _tokenInfo: TokenInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setUsed(_to: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getTokenInfo(_to: string, overrides?: CallOverrides): Promise<BigNumber>;

    setTokenInfo(
      _to: string,
      _tokenInfo: TokenInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUsed(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getTokenInfo(
      _to: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTokenInfo(
      _to: string,
      _tokenInfo: TokenInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUsed(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
