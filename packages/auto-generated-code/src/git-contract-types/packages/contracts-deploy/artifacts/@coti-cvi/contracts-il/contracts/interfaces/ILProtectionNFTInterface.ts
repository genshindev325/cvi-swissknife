/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../../common";

export type ProtectionNFTDetailsStruct = {
  id: BigNumberish;
  owner: string;
  protectionStartTimestamp: BigNumberish;
  protectionEndTimestamp: BigNumberish;
  premiumCostUSD: BigNumberish;
  lpTokensWorthAtBuyTimeUSD: BigNumberish;
  token1Symbol: string;
  token2Symbol: string;
  policyPeriod: BigNumberish;
  discountNFTType: BigNumberish;
  premiumCostDiscountUSD: BigNumberish;
};

export type ProtectionNFTDetailsStructOutput = [
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  BigNumber,
  number,
  BigNumber
] & {
  id: BigNumber;
  owner: string;
  protectionStartTimestamp: BigNumber;
  protectionEndTimestamp: BigNumber;
  premiumCostUSD: BigNumber;
  lpTokensWorthAtBuyTimeUSD: BigNumber;
  token1Symbol: string;
  token2Symbol: string;
  policyPeriod: BigNumber;
  discountNFTType: number;
  premiumCostDiscountUSD: BigNumber;
};

export type ProtectionNFTCreationDetailsStruct = {
  owner: string;
  protectionStartTimestamp: BigNumberish;
  protectionEndTimestamp: BigNumberish;
  premiumCostUSD: BigNumberish;
  lpTokensWorthAtBuyTimeUSD: BigNumberish;
  token1Symbol: string;
  token2Symbol: string;
  policyPeriod: BigNumberish;
  discountNFTType: BigNumberish;
  premiumCostDiscountUSD: BigNumberish;
};

export type ProtectionNFTCreationDetailsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  BigNumber,
  number,
  BigNumber
] & {
  owner: string;
  protectionStartTimestamp: BigNumber;
  protectionEndTimestamp: BigNumber;
  premiumCostUSD: BigNumber;
  lpTokensWorthAtBuyTimeUSD: BigNumber;
  token1Symbol: string;
  token2Symbol: string;
  policyPeriod: BigNumber;
  discountNFTType: number;
  premiumCostDiscountUSD: BigNumber;
};

export interface ILProtectionNFTInterfaceInterface extends utils.Interface {
  functions: {
    "getOwnerProtections(address)": FunctionFragment;
    "getProtectionDetails(uint256)": FunctionFragment;
    "getProtectionDetailsByOwnerAndIndex(address,uint256)": FunctionFragment;
    "mint((address,uint256,uint256,uint256,uint256,string,string,uint256,uint8,uint256))": FunctionFragment;
    "protectionMetadataCID()": FunctionFragment;
    "setProtectionMetadataCID(string)": FunctionFragment;
    "tokenIdCounter()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getOwnerProtections"
      | "getProtectionDetails"
      | "getProtectionDetailsByOwnerAndIndex"
      | "mint"
      | "protectionMetadataCID"
      | "setProtectionMetadataCID"
      | "tokenIdCounter"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getOwnerProtections",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtectionDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtectionDetailsByOwnerAndIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [ProtectionNFTCreationDetailsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "protectionMetadataCID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProtectionMetadataCID",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdCounter",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getOwnerProtections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtectionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtectionDetailsByOwnerAndIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protectionMetadataCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtectionMetadataCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdCounter",
    data: BytesLike
  ): Result;

  events: {
    "ProtectionMetadataCIDChanged(string,string)": EventFragment;
    "ProtectionMint(uint256,address,uint256,uint256,uint256,uint256,string,string,uint256)": EventFragment;
    "ProtectionMintDiscountDetails(uint256,address,uint8,uint256,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ProtectionMetadataCIDChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtectionMint"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProtectionMintDiscountDetails"
  ): EventFragment;
}

export interface ProtectionMetadataCIDChangedEventObject {
  prevValue: string;
  newValue: string;
}
export type ProtectionMetadataCIDChangedEvent = TypedEvent<
  [string, string],
  ProtectionMetadataCIDChangedEventObject
>;

export type ProtectionMetadataCIDChangedEventFilter =
  TypedEventFilter<ProtectionMetadataCIDChangedEvent>;

export interface ProtectionMintEventObject {
  id: BigNumber;
  owner: string;
  protectionStartTimestamp: BigNumber;
  protectionEndTimestamp: BigNumber;
  premiumCostUSD: BigNumber;
  lpTokensWorthAtBuyTimeUSD: BigNumber;
  token1Symbol: string;
  token2Symbol: string;
  policyPeriod: BigNumber;
}
export type ProtectionMintEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber
  ],
  ProtectionMintEventObject
>;

export type ProtectionMintEventFilter = TypedEventFilter<ProtectionMintEvent>;

export interface ProtectionMintDiscountDetailsEventObject {
  id: BigNumber;
  owner: string;
  discountNFTType: number;
  premiumCostBeforeDiscount: BigNumber;
  premiumCostDiscount: BigNumber;
}
export type ProtectionMintDiscountDetailsEvent = TypedEvent<
  [BigNumber, string, number, BigNumber, BigNumber],
  ProtectionMintDiscountDetailsEventObject
>;

export type ProtectionMintDiscountDetailsEventFilter =
  TypedEventFilter<ProtectionMintDiscountDetailsEvent>;

export interface ILProtectionNFTInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILProtectionNFTInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getOwnerProtections(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[ProtectionNFTDetailsStructOutput[]]>;

    getProtectionDetails(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ProtectionNFTDetailsStructOutput]>;

    getProtectionDetailsByOwnerAndIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ProtectionNFTDetailsStructOutput]>;

    mint(
      _creationDetails: ProtectionNFTCreationDetailsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protectionMetadataCID(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtectionMetadataCID(
      _protectionMetadataCID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenIdCounter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getOwnerProtections(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<ProtectionNFTDetailsStructOutput[]>;

  getProtectionDetails(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ProtectionNFTDetailsStructOutput>;

  getProtectionDetailsByOwnerAndIndex(
    _owner: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ProtectionNFTDetailsStructOutput>;

  mint(
    _creationDetails: ProtectionNFTCreationDetailsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protectionMetadataCID(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtectionMetadataCID(
    _protectionMetadataCID: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenIdCounter(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getOwnerProtections(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<ProtectionNFTDetailsStructOutput[]>;

    getProtectionDetails(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ProtectionNFTDetailsStructOutput>;

    getProtectionDetailsByOwnerAndIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ProtectionNFTDetailsStructOutput>;

    mint(
      _creationDetails: ProtectionNFTCreationDetailsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    protectionMetadataCID(overrides?: CallOverrides): Promise<string>;

    setProtectionMetadataCID(
      _protectionMetadataCID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenIdCounter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ProtectionMetadataCIDChanged(string,string)"(
      prevValue?: null,
      newValue?: null
    ): ProtectionMetadataCIDChangedEventFilter;
    ProtectionMetadataCIDChanged(
      prevValue?: null,
      newValue?: null
    ): ProtectionMetadataCIDChangedEventFilter;

    "ProtectionMint(uint256,address,uint256,uint256,uint256,uint256,string,string,uint256)"(
      id?: BigNumberish | null,
      owner?: string | null,
      protectionStartTimestamp?: null,
      protectionEndTimestamp?: null,
      premiumCostUSD?: null,
      lpTokensWorthAtBuyTimeUSD?: null,
      token1Symbol?: null,
      token2Symbol?: null,
      policyPeriod?: null
    ): ProtectionMintEventFilter;
    ProtectionMint(
      id?: BigNumberish | null,
      owner?: string | null,
      protectionStartTimestamp?: null,
      protectionEndTimestamp?: null,
      premiumCostUSD?: null,
      lpTokensWorthAtBuyTimeUSD?: null,
      token1Symbol?: null,
      token2Symbol?: null,
      policyPeriod?: null
    ): ProtectionMintEventFilter;

    "ProtectionMintDiscountDetails(uint256,address,uint8,uint256,uint256)"(
      id?: BigNumberish | null,
      owner?: string | null,
      discountNFTType?: BigNumberish | null,
      premiumCostBeforeDiscount?: null,
      premiumCostDiscount?: null
    ): ProtectionMintDiscountDetailsEventFilter;
    ProtectionMintDiscountDetails(
      id?: BigNumberish | null,
      owner?: string | null,
      discountNFTType?: BigNumberish | null,
      premiumCostBeforeDiscount?: null,
      premiumCostDiscount?: null
    ): ProtectionMintDiscountDetailsEventFilter;
  };

  estimateGas: {
    getOwnerProtections(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtectionDetails(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtectionDetailsByOwnerAndIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _creationDetails: ProtectionNFTCreationDetailsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protectionMetadataCID(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtectionMetadataCID(
      _protectionMetadataCID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenIdCounter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getOwnerProtections(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtectionDetails(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtectionDetailsByOwnerAndIndex(
      _owner: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _creationDetails: ProtectionNFTCreationDetailsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protectionMetadataCID(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtectionMetadataCID(
      _protectionMetadataCID: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenIdCounter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
