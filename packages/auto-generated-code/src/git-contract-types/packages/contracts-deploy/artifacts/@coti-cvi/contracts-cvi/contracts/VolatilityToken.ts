/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../common";

export interface VolatilityTokenInterface extends utils.Interface {
  functions: {
    "BURN_REQUEST_TYPE()": FunctionFragment;
    "CVI_DECIMALS_FIX()": FunctionFragment;
    "DELTA_PRECISION_DECIMALS()": FunctionFragment;
    "MAX_PERCENTAGE()": FunctionFragment;
    "MINT_REQUEST_TYPE()": FunctionFragment;
    "PRECISION_DECIMALS()": FunctionFragment;
    "SCALING_FACTOR_DECIMALS()": FunctionFragment;
    "__ElasticToken_init(string,string,uint8)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfUnderlying(address)": FunctionFragment;
    "burnTokens(uint168)": FunctionFragment;
    "cappedRebase()": FunctionFragment;
    "cviOracle()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deviationPerSingleRebaseLag()": FunctionFragment;
    "feesCalculator()": FunctionFragment;
    "feesCollector()": FunctionFragment;
    "fulfillBurnRequest(uint256,bool)": FunctionFragment;
    "fulfillMintRequest(uint256,uint16,bool)": FunctionFragment;
    "fulfiller()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initSupply()": FunctionFragment;
    "initialTokenToLPTokenRate()": FunctionFragment;
    "initialize(address,string,string,uint8,uint256,address,address,address,address,address)": FunctionFragment;
    "keepersFeeVaultAddress()": FunctionFragment;
    "leverage()": FunctionFragment;
    "liquidateRequest(uint256)": FunctionFragment;
    "maxDeviationPercentage()": FunctionFragment;
    "maxMinRequestIncrements()": FunctionFragment;
    "maxScalingFactor()": FunctionFragment;
    "maxTotalRequestsAmount()": FunctionFragment;
    "minDeviationPercentage()": FunctionFragment;
    "minKeepersBurnAmount()": FunctionFragment;
    "minKeepersMintAmount()": FunctionFragment;
    "minRequestId()": FunctionFragment;
    "mintTokens(uint168)": FunctionFragment;
    "minter()": FunctionFragment;
    "name()": FunctionFragment;
    "nextRequestId()": FunctionFragment;
    "owner()": FunctionFragment;
    "platform()": FunctionFragment;
    "rebaseCVI()": FunctionFragment;
    "rebaser()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestFeesCalculator()": FunctionFragment;
    "requests(uint256)": FunctionFragment;
    "scalingFactor()": FunctionFragment;
    "setCVIOracle(address)": FunctionFragment;
    "setCappedRebase(bool)": FunctionFragment;
    "setDeviationParameters(uint16,uint16,uint16)": FunctionFragment;
    "setFeesCalculator(address)": FunctionFragment;
    "setFeesCollector(address)": FunctionFragment;
    "setFulfiller(address)": FunctionFragment;
    "setKeepersFeeVaultAddress(address)": FunctionFragment;
    "setMaxMinRequestIncrements(uint256)": FunctionFragment;
    "setMaxTotalRequestsAmount(uint256)": FunctionFragment;
    "setMinKeepersAmounts(uint256,uint256)": FunctionFragment;
    "setMinRequestId(uint256)": FunctionFragment;
    "setMinter(address)": FunctionFragment;
    "setNameAndSymbol(string,string)": FunctionFragment;
    "setPlatform(address)": FunctionFragment;
    "setRebaser(address)": FunctionFragment;
    "setRequestFeesCalculator(address)": FunctionFragment;
    "setVerifyTotalRequestsAmount(bool)": FunctionFragment;
    "submitBurnRequest(uint168,uint32)": FunctionFragment;
    "submitKeepersBurnRequest(uint168,uint32)": FunctionFragment;
    "submitKeepersMintRequest(uint168,uint32,uint16)": FunctionFragment;
    "submitMintRequest(uint168,uint32)": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "totalRequestsAmount()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "underlyingToValue(uint256)": FunctionFragment;
    "valueToUnderlying(uint256)": FunctionFragment;
    "verifyTotalRequestsAmount()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BURN_REQUEST_TYPE"
      | "CVI_DECIMALS_FIX"
      | "DELTA_PRECISION_DECIMALS"
      | "MAX_PERCENTAGE"
      | "MINT_REQUEST_TYPE"
      | "PRECISION_DECIMALS"
      | "SCALING_FACTOR_DECIMALS"
      | "__ElasticToken_init"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "balanceOfUnderlying"
      | "burnTokens"
      | "cappedRebase"
      | "cviOracle"
      | "decimals"
      | "decreaseAllowance"
      | "deviationPerSingleRebaseLag"
      | "feesCalculator"
      | "feesCollector"
      | "fulfillBurnRequest"
      | "fulfillMintRequest"
      | "fulfiller"
      | "increaseAllowance"
      | "initSupply"
      | "initialTokenToLPTokenRate"
      | "initialize"
      | "keepersFeeVaultAddress"
      | "leverage"
      | "liquidateRequest"
      | "maxDeviationPercentage"
      | "maxMinRequestIncrements"
      | "maxScalingFactor"
      | "maxTotalRequestsAmount"
      | "minDeviationPercentage"
      | "minKeepersBurnAmount"
      | "minKeepersMintAmount"
      | "minRequestId"
      | "mintTokens"
      | "minter"
      | "name"
      | "nextRequestId"
      | "owner"
      | "platform"
      | "rebaseCVI"
      | "rebaser"
      | "renounceOwnership"
      | "requestFeesCalculator"
      | "requests"
      | "scalingFactor"
      | "setCVIOracle"
      | "setCappedRebase"
      | "setDeviationParameters"
      | "setFeesCalculator"
      | "setFeesCollector"
      | "setFulfiller"
      | "setKeepersFeeVaultAddress"
      | "setMaxMinRequestIncrements"
      | "setMaxTotalRequestsAmount"
      | "setMinKeepersAmounts"
      | "setMinRequestId"
      | "setMinter"
      | "setNameAndSymbol"
      | "setPlatform"
      | "setRebaser"
      | "setRequestFeesCalculator"
      | "setVerifyTotalRequestsAmount"
      | "submitBurnRequest"
      | "submitKeepersBurnRequest"
      | "submitKeepersMintRequest"
      | "submitMintRequest"
      | "symbol"
      | "token"
      | "totalRequestsAmount"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "underlyingToValue"
      | "valueToUnderlying"
      | "verifyTotalRequestsAmount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BURN_REQUEST_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CVI_DECIMALS_FIX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DELTA_PRECISION_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINT_REQUEST_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRECISION_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SCALING_FACTOR_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__ElasticToken_init",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "burnTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cappedRebase",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cviOracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deviationPerSingleRebaseLag",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feesCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feesCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillBurnRequest",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillMintRequest",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "fulfiller", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialTokenToLPTokenRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "keepersFeeVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "leverage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidateRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDeviationPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMinRequestIncrements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxScalingFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTotalRequestsAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDeviationPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minKeepersBurnAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minKeepersMintAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "platform", values?: undefined): string;
  encodeFunctionData(functionFragment: "rebaseCVI", values?: undefined): string;
  encodeFunctionData(functionFragment: "rebaser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestFeesCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scalingFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCVIOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCappedRebase",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeviationParameters",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesCalculator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFulfiller",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeepersFeeVaultAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxMinRequestIncrements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTotalRequestsAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinKeepersAmounts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinRequestId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setNameAndSymbol",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "setPlatform", values: [string]): string;
  encodeFunctionData(functionFragment: "setRebaser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRequestFeesCalculator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifyTotalRequestsAmount",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "submitBurnRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitKeepersBurnRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitKeepersMintRequest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitMintRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalRequestsAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "valueToUnderlying",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTotalRequestsAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BURN_REQUEST_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CVI_DECIMALS_FIX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DELTA_PRECISION_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINT_REQUEST_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRECISION_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SCALING_FACTOR_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__ElasticToken_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cappedRebase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cviOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deviationPerSingleRebaseLag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillBurnRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillMintRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fulfiller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initSupply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialTokenToLPTokenRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keepersFeeVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leverage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDeviationPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMinRequestIncrements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxScalingFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalRequestsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDeviationPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minKeepersBurnAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minKeepersMintAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "platform", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebaseCVI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebaser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFeesCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "scalingFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCVIOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCappedRebase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeviationParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFulfiller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeepersFeeVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxMinRequestIncrements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTotalRequestsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinKeepersAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNameAndSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRebaser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRequestFeesCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifyTotalRequestsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitBurnRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitKeepersBurnRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitKeepersMintRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitMintRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRequestsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueToUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyTotalRequestsAmount",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Burn(uint256,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "FulfillRequest(uint256,uint8,address,uint256,bool,bool,bool,address,uint32)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LiquidateRequest(uint256,uint8,address,address,uint256,bool,uint32)": EventFragment;
    "Mint(uint256,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Rebase(uint256,uint256,uint256)": EventFragment;
    "SubmitRequest(uint256,uint8,address,uint256,uint256,uint32,uint32,bool,uint16)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FulfillRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidateRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rebase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BurnEventObject {
  requestId: BigNumber;
  account: string;
  tokenAmountBeforeFees: BigNumber;
  tokenAmount: BigNumber;
  burnedTokens: BigNumber;
  closePositionFee: BigNumber;
  closingPremiumFee: BigNumber;
}
export type BurnEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  BurnEventObject
>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface FulfillRequestEventObject {
  requestId: BigNumber;
  requestType: number;
  account: string;
  fulfillFeesAmount: BigNumber;
  isAborted: boolean;
  useKeepers: boolean;
  keepersCalled: boolean;
  fulfiller: string;
  fulfillTimestamp: number;
}
export type FulfillRequestEvent = TypedEvent<
  [
    BigNumber,
    number,
    string,
    BigNumber,
    boolean,
    boolean,
    boolean,
    string,
    number
  ],
  FulfillRequestEventObject
>;

export type FulfillRequestEventFilter = TypedEventFilter<FulfillRequestEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LiquidateRequestEventObject {
  requestId: BigNumber;
  requestType: number;
  account: string;
  liquidator: string;
  findersFeeAmount: BigNumber;
  useKeepers: boolean;
  liquidateTimestamp: number;
}
export type LiquidateRequestEvent = TypedEvent<
  [BigNumber, number, string, string, BigNumber, boolean, number],
  LiquidateRequestEventObject
>;

export type LiquidateRequestEventFilter =
  TypedEventFilter<LiquidateRequestEvent>;

export interface MintEventObject {
  requestId: BigNumber;
  account: string;
  tokenAmount: BigNumber;
  positionedTokenAmount: BigNumber;
  mintedTokens: BigNumber;
  openPositionFee: BigNumber;
  buyingPremiumFee: BigNumber;
}
export type MintEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RebaseEventObject {
  epoch: BigNumber;
  prevScalingFactor: BigNumber;
  newScalingFactor: BigNumber;
}
export type RebaseEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  RebaseEventObject
>;

export type RebaseEventFilter = TypedEventFilter<RebaseEvent>;

export interface SubmitRequestEventObject {
  requestId: BigNumber;
  requestType: number;
  account: string;
  tokenAmount: BigNumber;
  submitFeesAmount: BigNumber;
  requestTimestamp: number;
  targetTimestamp: number;
  useKeepers: boolean;
  maxBuyingPremiumFeePercentage: number;
}
export type SubmitRequestEvent = TypedEvent<
  [
    BigNumber,
    number,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    boolean,
    number
  ],
  SubmitRequestEventObject
>;

export type SubmitRequestEventFilter = TypedEventFilter<SubmitRequestEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface VolatilityToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VolatilityTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BURN_REQUEST_TYPE(overrides?: CallOverrides): Promise<[number]>;

    CVI_DECIMALS_FIX(overrides?: CallOverrides): Promise<[BigNumber]>;

    DELTA_PRECISION_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<[number]>;

    MINT_REQUEST_TYPE(overrides?: CallOverrides): Promise<[number]>;

    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    SCALING_FACTOR_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    __ElasticToken_init(
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner_: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(who: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfUnderlying(
      who: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burnTokens(
      burnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cappedRebase(overrides?: CallOverrides): Promise<[boolean]>;

    cviOracle(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deviationPerSingleRebaseLag(overrides?: CallOverrides): Promise<[number]>;

    feesCalculator(overrides?: CallOverrides): Promise<[string]>;

    feesCollector(overrides?: CallOverrides): Promise<[string]>;

    fulfillBurnRequest(
      _requestId: BigNumberish,
      _keepersCalled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillMintRequest(
      _requestId: BigNumberish,
      _maxBuyingPremiumFeePercentage: BigNumberish,
      _keepersCalled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfiller(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialTokenToLPTokenRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _token: string,
      _lpTokenName: string,
      _lpTokenSymbolName: string,
      _leverage: BigNumberish,
      _initialTokenToVolTokenRate: BigNumberish,
      _platform: string,
      _feesCollector: string,
      _feesCalculator: string,
      _requestFeesCalculator: string,
      _cviOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    keepersFeeVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    leverage(overrides?: CallOverrides): Promise<[number]>;

    liquidateRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxDeviationPercentage(overrides?: CallOverrides): Promise<[number]>;

    maxMinRequestIncrements(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxScalingFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTotalRequestsAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minDeviationPercentage(overrides?: CallOverrides): Promise<[number]>;

    minKeepersBurnAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minKeepersMintAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minRequestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintTokens(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minter(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextRequestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    platform(overrides?: CallOverrides): Promise<[string]>;

    rebaseCVI(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebaser(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestFeesCalculator(overrides?: CallOverrides): Promise<[string]>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        number,
        number,
        string,
        number,
        number,
        boolean,
        number
      ] & {
        requestType: number;
        tokenAmount: BigNumber;
        timeDelayRequestFeesPercent: number;
        maxRequestFeesPercent: number;
        owner: string;
        requestTimestamp: number;
        targetTimestamp: number;
        useKeepers: boolean;
        maxBuyingPremiumFeePercentage: number;
      }
    >;

    scalingFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCVIOracle(
      _newCVIOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCappedRebase(
      _newCappedRebase: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDeviationParameters(
      _newDeviationPercentagePerSingleRebaseLag: BigNumberish,
      _newMinDeviationPercentage: BigNumberish,
      _newMaxDeviationPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeesCalculator(
      _newFeesCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeesCollector(
      _newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFulfiller(
      _fulfiller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeepersFeeVaultAddress(
      _newKeepersFeeVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxMinRequestIncrements(
      _newMaxMinRequestIncrements: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTotalRequestsAmount(
      _maxTotalRequestsAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinKeepersAmounts(
      _newMinKeepersMintAmount: BigNumberish,
      _newMinKeepersBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinRequestId(
      _newMinRequestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinter(
      _newMinter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNameAndSymbol(
      _newName: string,
      _newSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlatform(
      _newPlatform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRebaser(
      _rebaser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRequestFeesCalculator(
      _newRequestFeesCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVerifyTotalRequestsAmount(
      _verifyTotalRequestsAmount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitBurnRequest(
      _tokenAmount: BigNumberish,
      _timeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitKeepersBurnRequest(
      _tokenAmount: BigNumberish,
      _timeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitKeepersMintRequest(
      _tokenAmount: BigNumberish,
      _timeDelay: BigNumberish,
      _maxBuyingPremiumFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitMintRequest(
      _tokenAmount: BigNumberish,
      _timeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalRequestsAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlyingToValue(
      unerlyingValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    valueToUnderlying(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    verifyTotalRequestsAmount(overrides?: CallOverrides): Promise<[boolean]>;
  };

  BURN_REQUEST_TYPE(overrides?: CallOverrides): Promise<number>;

  CVI_DECIMALS_FIX(overrides?: CallOverrides): Promise<BigNumber>;

  DELTA_PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PERCENTAGE(overrides?: CallOverrides): Promise<number>;

  MINT_REQUEST_TYPE(overrides?: CallOverrides): Promise<number>;

  PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  SCALING_FACTOR_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  __ElasticToken_init(
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner_: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(who: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfUnderlying(
    who: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burnTokens(
    burnAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cappedRebase(overrides?: CallOverrides): Promise<boolean>;

  cviOracle(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deviationPerSingleRebaseLag(overrides?: CallOverrides): Promise<number>;

  feesCalculator(overrides?: CallOverrides): Promise<string>;

  feesCollector(overrides?: CallOverrides): Promise<string>;

  fulfillBurnRequest(
    _requestId: BigNumberish,
    _keepersCalled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillMintRequest(
    _requestId: BigNumberish,
    _maxBuyingPremiumFeePercentage: BigNumberish,
    _keepersCalled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfiller(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initSupply(overrides?: CallOverrides): Promise<BigNumber>;

  initialTokenToLPTokenRate(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _token: string,
    _lpTokenName: string,
    _lpTokenSymbolName: string,
    _leverage: BigNumberish,
    _initialTokenToVolTokenRate: BigNumberish,
    _platform: string,
    _feesCollector: string,
    _feesCalculator: string,
    _requestFeesCalculator: string,
    _cviOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  keepersFeeVaultAddress(overrides?: CallOverrides): Promise<string>;

  leverage(overrides?: CallOverrides): Promise<number>;

  liquidateRequest(
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxDeviationPercentage(overrides?: CallOverrides): Promise<number>;

  maxMinRequestIncrements(overrides?: CallOverrides): Promise<BigNumber>;

  maxScalingFactor(overrides?: CallOverrides): Promise<BigNumber>;

  maxTotalRequestsAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minDeviationPercentage(overrides?: CallOverrides): Promise<number>;

  minKeepersBurnAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minKeepersMintAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minRequestId(overrides?: CallOverrides): Promise<BigNumber>;

  mintTokens(
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minter(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  nextRequestId(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  platform(overrides?: CallOverrides): Promise<string>;

  rebaseCVI(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebaser(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestFeesCalculator(overrides?: CallOverrides): Promise<string>;

  requests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      BigNumber,
      number,
      number,
      string,
      number,
      number,
      boolean,
      number
    ] & {
      requestType: number;
      tokenAmount: BigNumber;
      timeDelayRequestFeesPercent: number;
      maxRequestFeesPercent: number;
      owner: string;
      requestTimestamp: number;
      targetTimestamp: number;
      useKeepers: boolean;
      maxBuyingPremiumFeePercentage: number;
    }
  >;

  scalingFactor(overrides?: CallOverrides): Promise<BigNumber>;

  setCVIOracle(
    _newCVIOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCappedRebase(
    _newCappedRebase: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDeviationParameters(
    _newDeviationPercentagePerSingleRebaseLag: BigNumberish,
    _newMinDeviationPercentage: BigNumberish,
    _newMaxDeviationPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeesCalculator(
    _newFeesCalculator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeesCollector(
    _newCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFulfiller(
    _fulfiller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeepersFeeVaultAddress(
    _newKeepersFeeVaultAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxMinRequestIncrements(
    _newMaxMinRequestIncrements: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTotalRequestsAmount(
    _maxTotalRequestsAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinKeepersAmounts(
    _newMinKeepersMintAmount: BigNumberish,
    _newMinKeepersBurnAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinRequestId(
    _newMinRequestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinter(
    _newMinter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNameAndSymbol(
    _newName: string,
    _newSymbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlatform(
    _newPlatform: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRebaser(
    _rebaser: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRequestFeesCalculator(
    _newRequestFeesCalculator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVerifyTotalRequestsAmount(
    _verifyTotalRequestsAmount: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitBurnRequest(
    _tokenAmount: BigNumberish,
    _timeDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitKeepersBurnRequest(
    _tokenAmount: BigNumberish,
    _timeDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitKeepersMintRequest(
    _tokenAmount: BigNumberish,
    _timeDelay: BigNumberish,
    _maxBuyingPremiumFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitMintRequest(
    _tokenAmount: BigNumberish,
    _timeDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  totalRequestsAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlyingToValue(
    unerlyingValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  valueToUnderlying(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verifyTotalRequestsAmount(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    BURN_REQUEST_TYPE(overrides?: CallOverrides): Promise<number>;

    CVI_DECIMALS_FIX(overrides?: CallOverrides): Promise<BigNumber>;

    DELTA_PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<number>;

    MINT_REQUEST_TYPE(overrides?: CallOverrides): Promise<number>;

    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    SCALING_FACTOR_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    __ElasticToken_init(
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner_: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnTokens(
      burnAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cappedRebase(overrides?: CallOverrides): Promise<boolean>;

    cviOracle(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deviationPerSingleRebaseLag(overrides?: CallOverrides): Promise<number>;

    feesCalculator(overrides?: CallOverrides): Promise<string>;

    feesCollector(overrides?: CallOverrides): Promise<string>;

    fulfillBurnRequest(
      _requestId: BigNumberish,
      _keepersCalled: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fulfillMintRequest(
      _requestId: BigNumberish,
      _maxBuyingPremiumFeePercentage: BigNumberish,
      _keepersCalled: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { tokensMinted: BigNumber; success: boolean }
    >;

    fulfiller(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initSupply(overrides?: CallOverrides): Promise<BigNumber>;

    initialTokenToLPTokenRate(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _token: string,
      _lpTokenName: string,
      _lpTokenSymbolName: string,
      _leverage: BigNumberish,
      _initialTokenToVolTokenRate: BigNumberish,
      _platform: string,
      _feesCollector: string,
      _feesCalculator: string,
      _requestFeesCalculator: string,
      _cviOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    keepersFeeVaultAddress(overrides?: CallOverrides): Promise<string>;

    leverage(overrides?: CallOverrides): Promise<number>;

    liquidateRequest(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxDeviationPercentage(overrides?: CallOverrides): Promise<number>;

    maxMinRequestIncrements(overrides?: CallOverrides): Promise<BigNumber>;

    maxScalingFactor(overrides?: CallOverrides): Promise<BigNumber>;

    maxTotalRequestsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minDeviationPercentage(overrides?: CallOverrides): Promise<number>;

    minKeepersBurnAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minKeepersMintAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    mintTokens(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    nextRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    platform(overrides?: CallOverrides): Promise<string>;

    rebaseCVI(overrides?: CallOverrides): Promise<void>;

    rebaser(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestFeesCalculator(overrides?: CallOverrides): Promise<string>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        number,
        number,
        string,
        number,
        number,
        boolean,
        number
      ] & {
        requestType: number;
        tokenAmount: BigNumber;
        timeDelayRequestFeesPercent: number;
        maxRequestFeesPercent: number;
        owner: string;
        requestTimestamp: number;
        targetTimestamp: number;
        useKeepers: boolean;
        maxBuyingPremiumFeePercentage: number;
      }
    >;

    scalingFactor(overrides?: CallOverrides): Promise<BigNumber>;

    setCVIOracle(
      _newCVIOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCappedRebase(
      _newCappedRebase: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDeviationParameters(
      _newDeviationPercentagePerSingleRebaseLag: BigNumberish,
      _newMinDeviationPercentage: BigNumberish,
      _newMaxDeviationPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesCalculator(
      _newFeesCalculator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesCollector(
      _newCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFulfiller(_fulfiller: string, overrides?: CallOverrides): Promise<void>;

    setKeepersFeeVaultAddress(
      _newKeepersFeeVaultAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxMinRequestIncrements(
      _newMaxMinRequestIncrements: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTotalRequestsAmount(
      _maxTotalRequestsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinKeepersAmounts(
      _newMinKeepersMintAmount: BigNumberish,
      _newMinKeepersBurnAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinRequestId(
      _newMinRequestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinter(_newMinter: string, overrides?: CallOverrides): Promise<void>;

    setNameAndSymbol(
      _newName: string,
      _newSymbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatform(_newPlatform: string, overrides?: CallOverrides): Promise<void>;

    setRebaser(_rebaser: string, overrides?: CallOverrides): Promise<void>;

    setRequestFeesCalculator(
      _newRequestFeesCalculator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVerifyTotalRequestsAmount(
      _verifyTotalRequestsAmount: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    submitBurnRequest(
      _tokenAmount: BigNumberish,
      _timeDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitKeepersBurnRequest(
      _tokenAmount: BigNumberish,
      _timeDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitKeepersMintRequest(
      _tokenAmount: BigNumberish,
      _timeDelay: BigNumberish,
      _maxBuyingPremiumFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitMintRequest(
      _tokenAmount: BigNumberish,
      _timeDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    totalRequestsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingToValue(
      unerlyingValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueToUnderlying(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyTotalRequestsAmount(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      amount?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      amount?: null
    ): ApprovalEventFilter;

    "Burn(uint256,address,uint256,uint256,uint256,uint256,uint256)"(
      requestId?: null,
      account?: string | null,
      tokenAmountBeforeFees?: null,
      tokenAmount?: null,
      burnedTokens?: null,
      closePositionFee?: null,
      closingPremiumFee?: null
    ): BurnEventFilter;
    Burn(
      requestId?: null,
      account?: string | null,
      tokenAmountBeforeFees?: null,
      tokenAmount?: null,
      burnedTokens?: null,
      closePositionFee?: null,
      closingPremiumFee?: null
    ): BurnEventFilter;

    "FulfillRequest(uint256,uint8,address,uint256,bool,bool,bool,address,uint32)"(
      requestId?: null,
      requestType?: null,
      account?: string | null,
      fulfillFeesAmount?: null,
      isAborted?: null,
      useKeepers?: null,
      keepersCalled?: null,
      fulfiller?: string | null,
      fulfillTimestamp?: null
    ): FulfillRequestEventFilter;
    FulfillRequest(
      requestId?: null,
      requestType?: null,
      account?: string | null,
      fulfillFeesAmount?: null,
      isAborted?: null,
      useKeepers?: null,
      keepersCalled?: null,
      fulfiller?: string | null,
      fulfillTimestamp?: null
    ): FulfillRequestEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LiquidateRequest(uint256,uint8,address,address,uint256,bool,uint32)"(
      requestId?: null,
      requestType?: null,
      account?: string | null,
      liquidator?: string | null,
      findersFeeAmount?: null,
      useKeepers?: null,
      liquidateTimestamp?: null
    ): LiquidateRequestEventFilter;
    LiquidateRequest(
      requestId?: null,
      requestType?: null,
      account?: string | null,
      liquidator?: string | null,
      findersFeeAmount?: null,
      useKeepers?: null,
      liquidateTimestamp?: null
    ): LiquidateRequestEventFilter;

    "Mint(uint256,address,uint256,uint256,uint256,uint256,uint256)"(
      requestId?: null,
      account?: string | null,
      tokenAmount?: null,
      positionedTokenAmount?: null,
      mintedTokens?: null,
      openPositionFee?: null,
      buyingPremiumFee?: null
    ): MintEventFilter;
    Mint(
      requestId?: null,
      account?: string | null,
      tokenAmount?: null,
      positionedTokenAmount?: null,
      mintedTokens?: null,
      openPositionFee?: null,
      buyingPremiumFee?: null
    ): MintEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Rebase(uint256,uint256,uint256)"(
      epoch?: null,
      prevScalingFactor?: null,
      newScalingFactor?: null
    ): RebaseEventFilter;
    Rebase(
      epoch?: null,
      prevScalingFactor?: null,
      newScalingFactor?: null
    ): RebaseEventFilter;

    "SubmitRequest(uint256,uint8,address,uint256,uint256,uint32,uint32,bool,uint16)"(
      requestId?: null,
      requestType?: null,
      account?: string | null,
      tokenAmount?: null,
      submitFeesAmount?: null,
      requestTimestamp?: null,
      targetTimestamp?: null,
      useKeepers?: null,
      maxBuyingPremiumFeePercentage?: null
    ): SubmitRequestEventFilter;
    SubmitRequest(
      requestId?: null,
      requestType?: null,
      account?: string | null,
      tokenAmount?: null,
      submitFeesAmount?: null,
      requestTimestamp?: null,
      targetTimestamp?: null,
      useKeepers?: null,
      maxBuyingPremiumFeePercentage?: null
    ): SubmitRequestEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    BURN_REQUEST_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    CVI_DECIMALS_FIX(overrides?: CallOverrides): Promise<BigNumber>;

    DELTA_PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_REQUEST_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    SCALING_FACTOR_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    __ElasticToken_init(
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner_: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnTokens(
      burnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cappedRebase(overrides?: CallOverrides): Promise<BigNumber>;

    cviOracle(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deviationPerSingleRebaseLag(overrides?: CallOverrides): Promise<BigNumber>;

    feesCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    feesCollector(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillBurnRequest(
      _requestId: BigNumberish,
      _keepersCalled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillMintRequest(
      _requestId: BigNumberish,
      _maxBuyingPremiumFeePercentage: BigNumberish,
      _keepersCalled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfiller(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initSupply(overrides?: CallOverrides): Promise<BigNumber>;

    initialTokenToLPTokenRate(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _token: string,
      _lpTokenName: string,
      _lpTokenSymbolName: string,
      _leverage: BigNumberish,
      _initialTokenToVolTokenRate: BigNumberish,
      _platform: string,
      _feesCollector: string,
      _feesCalculator: string,
      _requestFeesCalculator: string,
      _cviOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    keepersFeeVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    leverage(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxDeviationPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    maxMinRequestIncrements(overrides?: CallOverrides): Promise<BigNumber>;

    maxScalingFactor(overrides?: CallOverrides): Promise<BigNumber>;

    maxTotalRequestsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minDeviationPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    minKeepersBurnAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minKeepersMintAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    mintTokens(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    platform(overrides?: CallOverrides): Promise<BigNumber>;

    rebaseCVI(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebaser(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestFeesCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    requests(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    scalingFactor(overrides?: CallOverrides): Promise<BigNumber>;

    setCVIOracle(
      _newCVIOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCappedRebase(
      _newCappedRebase: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDeviationParameters(
      _newDeviationPercentagePerSingleRebaseLag: BigNumberish,
      _newMinDeviationPercentage: BigNumberish,
      _newMaxDeviationPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeesCalculator(
      _newFeesCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeesCollector(
      _newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFulfiller(
      _fulfiller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeepersFeeVaultAddress(
      _newKeepersFeeVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxMinRequestIncrements(
      _newMaxMinRequestIncrements: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTotalRequestsAmount(
      _maxTotalRequestsAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinKeepersAmounts(
      _newMinKeepersMintAmount: BigNumberish,
      _newMinKeepersBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinRequestId(
      _newMinRequestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinter(
      _newMinter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNameAndSymbol(
      _newName: string,
      _newSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlatform(
      _newPlatform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRebaser(
      _rebaser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRequestFeesCalculator(
      _newRequestFeesCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVerifyTotalRequestsAmount(
      _verifyTotalRequestsAmount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitBurnRequest(
      _tokenAmount: BigNumberish,
      _timeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitKeepersBurnRequest(
      _tokenAmount: BigNumberish,
      _timeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitKeepersMintRequest(
      _tokenAmount: BigNumberish,
      _timeDelay: BigNumberish,
      _maxBuyingPremiumFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitMintRequest(
      _tokenAmount: BigNumberish,
      _timeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalRequestsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlyingToValue(
      unerlyingValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueToUnderlying(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyTotalRequestsAmount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BURN_REQUEST_TYPE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CVI_DECIMALS_FIX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DELTA_PRECISION_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINT_REQUEST_TYPE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SCALING_FACTOR_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __ElasticToken_init(
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner_: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfUnderlying(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnTokens(
      burnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cappedRebase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cviOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deviationPerSingleRebaseLag(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feesCalculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feesCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulfillBurnRequest(
      _requestId: BigNumberish,
      _keepersCalled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillMintRequest(
      _requestId: BigNumberish,
      _maxBuyingPremiumFeePercentage: BigNumberish,
      _keepersCalled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfiller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialTokenToLPTokenRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      _lpTokenName: string,
      _lpTokenSymbolName: string,
      _leverage: BigNumberish,
      _initialTokenToVolTokenRate: BigNumberish,
      _platform: string,
      _feesCollector: string,
      _feesCalculator: string,
      _requestFeesCalculator: string,
      _cviOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    keepersFeeVaultAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxDeviationPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMinRequestIncrements(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxScalingFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTotalRequestsAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDeviationPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minKeepersBurnAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minKeepersMintAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintTokens(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platform(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebaseCVI(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebaser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestFeesCalculator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scalingFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCVIOracle(
      _newCVIOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCappedRebase(
      _newCappedRebase: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDeviationParameters(
      _newDeviationPercentagePerSingleRebaseLag: BigNumberish,
      _newMinDeviationPercentage: BigNumberish,
      _newMaxDeviationPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeesCalculator(
      _newFeesCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeesCollector(
      _newCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFulfiller(
      _fulfiller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeepersFeeVaultAddress(
      _newKeepersFeeVaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxMinRequestIncrements(
      _newMaxMinRequestIncrements: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTotalRequestsAmount(
      _maxTotalRequestsAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinKeepersAmounts(
      _newMinKeepersMintAmount: BigNumberish,
      _newMinKeepersBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinRequestId(
      _newMinRequestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinter(
      _newMinter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNameAndSymbol(
      _newName: string,
      _newSymbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlatform(
      _newPlatform: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRebaser(
      _rebaser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRequestFeesCalculator(
      _newRequestFeesCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVerifyTotalRequestsAmount(
      _verifyTotalRequestsAmount: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitBurnRequest(
      _tokenAmount: BigNumberish,
      _timeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitKeepersBurnRequest(
      _tokenAmount: BigNumberish,
      _timeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitKeepersMintRequest(
      _tokenAmount: BigNumberish,
      _timeDelay: BigNumberish,
      _maxBuyingPremiumFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitMintRequest(
      _tokenAmount: BigNumberish,
      _timeDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRequestsAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlyingToValue(
      unerlyingValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueToUnderlying(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyTotalRequestsAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
