/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../common";

export interface CVIUSDCPlatform2XInterface extends utils.Interface {
  functions: {
    "MAX_FEE_PERCENTAGE()": FunctionFragment;
    "PRECISION_DECIMALS()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyersLockupPeriod()": FunctionFragment;
    "calculateLatestTurbulenceIndicatorPercent()": FunctionFragment;
    "calculatePositionBalance(address)": FunctionFragment;
    "calculatePositionPendingFees(address,uint168)": FunctionFragment;
    "closePosition(uint168,uint32)": FunctionFragment;
    "closePositionWithoutFee(uint168,uint32)": FunctionFragment;
    "cviOracle()": FunctionFragment;
    "cviSnapshots(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "emergencyWithdrawAllowed()": FunctionFragment;
    "feesCalculator()": FunctionFragment;
    "feesCollector()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "increaseSharedPool(uint256)": FunctionFragment;
    "increaseSharedPoolAllowedAddresses(address)": FunctionFragment;
    "initialTokenToLPTokenRate()": FunctionFragment;
    "initialize(address,string,string,uint256,uint32,address,address,address)": FunctionFragment;
    "lastDepositTimestamp(address)": FunctionFragment;
    "latestFundingFees()": FunctionFragment;
    "latestOracleRoundId()": FunctionFragment;
    "latestSnapshotTimestamp()": FunctionFragment;
    "liquidatePositions(address[])": FunctionFragment;
    "liquidation()": FunctionFragment;
    "liquidityProviders(address)": FunctionFragment;
    "lpsLockupPeriod()": FunctionFragment;
    "maxAllowedLeverage()": FunctionFragment;
    "maxCVIValue()": FunctionFragment;
    "maxTimeAllowedAfterLatestRound()": FunctionFragment;
    "name()": FunctionFragment;
    "noLockPositionAddresses(address)": FunctionFragment;
    "openPosition(uint168,uint32,uint16,uint8)": FunctionFragment;
    "openPositionWithoutFee(uint168,uint32,uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "positionHoldersAllowedAddresses(address)": FunctionFragment;
    "positions(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revertLockedTransfered(address)": FunctionFragment;
    "rewards()": FunctionFragment;
    "setAddressSpecificParameters(address,bool,bool,bool,bool)": FunctionFragment;
    "setEmergencyParameters(bool,bool)": FunctionFragment;
    "setFeesCalculator(address)": FunctionFragment;
    "setLatestOracleRoundId(uint80)": FunctionFragment;
    "setLockupPeriods(uint256,uint256)": FunctionFragment;
    "setMaxAllowedLeverage(uint8)": FunctionFragment;
    "setMaxTimeAllowedAfterLatestRound(uint32)": FunctionFragment;
    "setRevertLockedTransfers(bool)": FunctionFragment;
    "setSubContracts(address,address,address,address,address)": FunctionFragment;
    "stakingContractAddress()": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "totalBalance(bool)": FunctionFragment;
    "totalFundingFeesAmount()": FunctionFragment;
    "totalLeveragedTokensAmount()": FunctionFragment;
    "totalPositionUnitsAmount()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawLPTokens(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_FEE_PERCENTAGE"
      | "PRECISION_DECIMALS"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "buyersLockupPeriod"
      | "calculateLatestTurbulenceIndicatorPercent"
      | "calculatePositionBalance"
      | "calculatePositionPendingFees"
      | "closePosition"
      | "closePositionWithoutFee"
      | "cviOracle"
      | "cviSnapshots"
      | "decimals"
      | "decreaseAllowance"
      | "deposit"
      | "emergencyWithdrawAllowed"
      | "feesCalculator"
      | "feesCollector"
      | "increaseAllowance"
      | "increaseSharedPool"
      | "increaseSharedPoolAllowedAddresses"
      | "initialTokenToLPTokenRate"
      | "initialize"
      | "lastDepositTimestamp"
      | "latestFundingFees"
      | "latestOracleRoundId"
      | "latestSnapshotTimestamp"
      | "liquidatePositions"
      | "liquidation"
      | "liquidityProviders"
      | "lpsLockupPeriod"
      | "maxAllowedLeverage"
      | "maxCVIValue"
      | "maxTimeAllowedAfterLatestRound"
      | "name"
      | "noLockPositionAddresses"
      | "openPosition"
      | "openPositionWithoutFee"
      | "owner"
      | "positionHoldersAllowedAddresses"
      | "positions"
      | "renounceOwnership"
      | "revertLockedTransfered"
      | "rewards"
      | "setAddressSpecificParameters"
      | "setEmergencyParameters"
      | "setFeesCalculator"
      | "setLatestOracleRoundId"
      | "setLockupPeriods"
      | "setMaxAllowedLeverage"
      | "setMaxTimeAllowedAfterLatestRound"
      | "setRevertLockedTransfers"
      | "setSubContracts"
      | "stakingContractAddress"
      | "symbol"
      | "token"
      | "totalBalance"
      | "totalFundingFeesAmount"
      | "totalLeveragedTokensAmount"
      | "totalPositionUnitsAmount"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "withdraw"
      | "withdrawLPTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRECISION_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyersLockupPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLatestTurbulenceIndicatorPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePositionBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePositionPendingFees",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionWithoutFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cviOracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cviSnapshots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feesCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feesCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseSharedPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseSharedPoolAllowedAddresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialTokenToLPTokenRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastDepositTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestFundingFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestOracleRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestSnapshotTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePositions",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityProviders",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lpsLockupPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxAllowedLeverage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxCVIValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTimeAllowedAfterLatestRound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "noLockPositionAddresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionWithoutFee",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positionHoldersAllowedAddresses",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "positions", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revertLockedTransfered",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "rewards", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAddressSpecificParameters",
    values: [string, boolean, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyParameters",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesCalculator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLatestOracleRoundId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockupPeriods",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxAllowedLeverage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTimeAllowedAfterLatestRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevertLockedTransfers",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubContracts",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalFundingFeesAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLeveragedTokensAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPositionUnitsAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLPTokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRECISION_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyersLockupPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLatestTurbulenceIndicatorPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePositionBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePositionPendingFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionWithoutFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cviOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cviSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseSharedPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseSharedPoolAllowedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialTokenToLPTokenRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastDepositTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestFundingFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestOracleRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestSnapshotTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpsLockupPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAllowedLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCVIValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTimeAllowedAfterLatestRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "noLockPositionAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionWithoutFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionHoldersAllowedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertLockedTransfered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddressSpecificParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLatestOracleRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockupPeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxAllowedLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTimeAllowedAfterLatestRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevertLockedTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFundingFeesAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLeveragedTokensAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPositionUnitsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLPTokens",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ClosePosition(address,uint256,uint256,uint256,uint8,uint256)": EventFragment;
    "Deposit(address,uint256,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LiquidatePosition(address,uint256,bool,uint256)": EventFragment;
    "OpenPosition(address,uint256,uint8,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClosePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidatePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ClosePositionEventObject {
  account: string;
  tokenAmount: BigNumber;
  feeAmount: BigNumber;
  positionUnitsAmount: BigNumber;
  leverage: number;
  cviValue: BigNumber;
}
export type ClosePositionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, number, BigNumber],
  ClosePositionEventObject
>;

export type ClosePositionEventFilter = TypedEventFilter<ClosePositionEvent>;

export interface DepositEventObject {
  account: string;
  tokenAmount: BigNumber;
  lpTokensAmount: BigNumber;
  feeAmount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LiquidatePositionEventObject {
  positionAddress: string;
  currentPositionBalance: BigNumber;
  isBalancePositive: boolean;
  positionUnitsAmount: BigNumber;
}
export type LiquidatePositionEvent = TypedEvent<
  [string, BigNumber, boolean, BigNumber],
  LiquidatePositionEventObject
>;

export type LiquidatePositionEventFilter =
  TypedEventFilter<LiquidatePositionEvent>;

export interface OpenPositionEventObject {
  account: string;
  tokenAmount: BigNumber;
  leverage: number;
  feeAmount: BigNumber;
  positionUnitsAmount: BigNumber;
  cviValue: BigNumber;
}
export type OpenPositionEvent = TypedEvent<
  [string, BigNumber, number, BigNumber, BigNumber, BigNumber],
  OpenPositionEventObject
>;

export type OpenPositionEventFilter = TypedEventFilter<OpenPositionEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  account: string;
  tokenAmount: BigNumber;
  lpTokensAmount: BigNumber;
  feeAmount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface CVIUSDCPlatform2X extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CVIUSDCPlatform2XInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyersLockupPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateLatestTurbulenceIndicatorPercent(
      overrides?: CallOverrides
    ): Promise<[number]>;

    calculatePositionBalance(
      _positionAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, number, BigNumber, BigNumber] & {
        currentPositionBalance: BigNumber;
        isPositive: boolean;
        positionUnitsAmount: BigNumber;
        leverage: number;
        fundingFees: BigNumber;
        marginDebt: BigNumber;
      }
    >;

    calculatePositionPendingFees(
      _positionAddress: string,
      _positionUnitsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pendingFees: BigNumber }>;

    closePosition(
      _positionUnitsAmount: BigNumberish,
      _minCVI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePositionWithoutFee(
      _positionUnitsAmount: BigNumberish,
      _minCVI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cviOracle(overrides?: CallOverrides): Promise<[string]>;

    cviSnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _tokenAmount: BigNumberish,
      _minLPTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    feesCalculator(overrides?: CallOverrides): Promise<[string]>;

    feesCollector(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseSharedPool(
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseSharedPoolAllowedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialTokenToLPTokenRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _token: string,
      _lpTokenName: string,
      _lpTokenSymbolName: string,
      _initialTokenToLPTokenRate: BigNumberish,
      _maxCVIValue: BigNumberish,
      _feesCalculator: string,
      _cviOracle: string,
      _liquidation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastDepositTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    latestFundingFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestOracleRoundId(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestSnapshotTimestamp(overrides?: CallOverrides): Promise<[number]>;

    liquidatePositions(
      _positionOwners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidation(overrides?: CallOverrides): Promise<[string]>;

    liquidityProviders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lpsLockupPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxAllowedLeverage(overrides?: CallOverrides): Promise<[number]>;

    maxCVIValue(overrides?: CallOverrides): Promise<[number]>;

    maxTimeAllowedAfterLatestRound(
      overrides?: CallOverrides
    ): Promise<[number]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    noLockPositionAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    openPosition(
      _tokenAmount: BigNumberish,
      _maxCVI: BigNumberish,
      _maxBuyingPremiumFeePercentage: BigNumberish,
      _leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openPositionWithoutFee(
      _tokenAmount: BigNumberish,
      _maxCVI: BigNumberish,
      _leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    positionHoldersAllowedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number] & {
        positionUnitsAmount: BigNumber;
        leverage: number;
        openCVIValue: number;
        creationTimestamp: number;
        originalCreationTimestamp: number;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revertLockedTransfered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rewards(overrides?: CallOverrides): Promise<[string]>;

    setAddressSpecificParameters(
      _holderAddress: string,
      _shouldLockPosition: boolean,
      _positionHolderAllowed: boolean,
      _increaseSharedPoolAllowed: boolean,
      _isLiquidityProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmergencyParameters(
      _newEmergencyWithdrawAllowed: boolean,
      _newCanPurgeSnapshots: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeesCalculator(
      _newCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLatestOracleRoundId(
      _newOracleRoundId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLockupPeriods(
      _newLPLockupPeriod: BigNumberish,
      _newBuyersLockupPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxAllowedLeverage(
      _newMaxAllowedLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTimeAllowedAfterLatestRound(
      _newMaxTimeAllowedAfterLatestRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRevertLockedTransfers(
      _revertLockedTransfers: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSubContracts(
      _newCollector: string,
      _newOracle: string,
      _newRewards: string,
      _newLiquidation: string,
      _newStakingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingContractAddress(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalBalance(
      _withAddendum: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    totalFundingFeesAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLeveragedTokensAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPositionUnitsAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _tokenAmount: BigNumberish,
      _maxLPTokenBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLPTokens(
      _lpTokensAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyersLockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  calculateLatestTurbulenceIndicatorPercent(
    overrides?: CallOverrides
  ): Promise<number>;

  calculatePositionBalance(
    _positionAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber, number, BigNumber, BigNumber] & {
      currentPositionBalance: BigNumber;
      isPositive: boolean;
      positionUnitsAmount: BigNumber;
      leverage: number;
      fundingFees: BigNumber;
      marginDebt: BigNumber;
    }
  >;

  calculatePositionPendingFees(
    _positionAddress: string,
    _positionUnitsAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  closePosition(
    _positionUnitsAmount: BigNumberish,
    _minCVI: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePositionWithoutFee(
    _positionUnitsAmount: BigNumberish,
    _minCVI: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cviOracle(overrides?: CallOverrides): Promise<string>;

  cviSnapshots(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _tokenAmount: BigNumberish,
    _minLPTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawAllowed(overrides?: CallOverrides): Promise<boolean>;

  feesCalculator(overrides?: CallOverrides): Promise<string>;

  feesCollector(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseSharedPool(
    _tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseSharedPoolAllowedAddresses(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialTokenToLPTokenRate(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _token: string,
    _lpTokenName: string,
    _lpTokenSymbolName: string,
    _initialTokenToLPTokenRate: BigNumberish,
    _maxCVIValue: BigNumberish,
    _feesCalculator: string,
    _cviOracle: string,
    _liquidation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastDepositTimestamp(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  latestFundingFees(overrides?: CallOverrides): Promise<BigNumber>;

  latestOracleRoundId(overrides?: CallOverrides): Promise<BigNumber>;

  latestSnapshotTimestamp(overrides?: CallOverrides): Promise<number>;

  liquidatePositions(
    _positionOwners: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidation(overrides?: CallOverrides): Promise<string>;

  liquidityProviders(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  lpsLockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  maxAllowedLeverage(overrides?: CallOverrides): Promise<number>;

  maxCVIValue(overrides?: CallOverrides): Promise<number>;

  maxTimeAllowedAfterLatestRound(overrides?: CallOverrides): Promise<number>;

  name(overrides?: CallOverrides): Promise<string>;

  noLockPositionAddresses(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  openPosition(
    _tokenAmount: BigNumberish,
    _maxCVI: BigNumberish,
    _maxBuyingPremiumFeePercentage: BigNumberish,
    _leverage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openPositionWithoutFee(
    _tokenAmount: BigNumberish,
    _maxCVI: BigNumberish,
    _leverage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  positionHoldersAllowedAddresses(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  positions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number] & {
      positionUnitsAmount: BigNumber;
      leverage: number;
      openCVIValue: number;
      creationTimestamp: number;
      originalCreationTimestamp: number;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revertLockedTransfered(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rewards(overrides?: CallOverrides): Promise<string>;

  setAddressSpecificParameters(
    _holderAddress: string,
    _shouldLockPosition: boolean,
    _positionHolderAllowed: boolean,
    _increaseSharedPoolAllowed: boolean,
    _isLiquidityProvider: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmergencyParameters(
    _newEmergencyWithdrawAllowed: boolean,
    _newCanPurgeSnapshots: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeesCalculator(
    _newCalculator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLatestOracleRoundId(
    _newOracleRoundId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLockupPeriods(
    _newLPLockupPeriod: BigNumberish,
    _newBuyersLockupPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxAllowedLeverage(
    _newMaxAllowedLeverage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTimeAllowedAfterLatestRound(
    _newMaxTimeAllowedAfterLatestRound: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRevertLockedTransfers(
    _revertLockedTransfers: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSubContracts(
    _newCollector: string,
    _newOracle: string,
    _newRewards: string,
    _newLiquidation: string,
    _newStakingContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingContractAddress(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  totalBalance(
    _withAddendum: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalFundingFeesAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalLeveragedTokensAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalPositionUnitsAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _tokenAmount: BigNumberish,
    _maxLPTokenBurnAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLPTokens(
    _lpTokensAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyersLockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    calculateLatestTurbulenceIndicatorPercent(
      overrides?: CallOverrides
    ): Promise<number>;

    calculatePositionBalance(
      _positionAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, number, BigNumber, BigNumber] & {
        currentPositionBalance: BigNumber;
        isPositive: boolean;
        positionUnitsAmount: BigNumber;
        leverage: number;
        fundingFees: BigNumber;
        marginDebt: BigNumber;
      }
    >;

    calculatePositionPendingFees(
      _positionAddress: string,
      _positionUnitsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePosition(
      _positionUnitsAmount: BigNumberish,
      _minCVI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        tokenAmount: BigNumber;
        closePositionFee: BigNumber;
        closingPremiumFee: BigNumber;
      }
    >;

    closePositionWithoutFee(
      _positionUnitsAmount: BigNumberish,
      _minCVI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        tokenAmount: BigNumber;
        closePositionFee: BigNumber;
        closingPremiumFee: BigNumber;
      }
    >;

    cviOracle(overrides?: CallOverrides): Promise<string>;

    cviSnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      _tokenAmount: BigNumberish,
      _minLPTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdrawAllowed(overrides?: CallOverrides): Promise<boolean>;

    feesCalculator(overrides?: CallOverrides): Promise<string>;

    feesCollector(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseSharedPool(
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseSharedPoolAllowedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialTokenToLPTokenRate(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _token: string,
      _lpTokenName: string,
      _lpTokenSymbolName: string,
      _initialTokenToLPTokenRate: BigNumberish,
      _maxCVIValue: BigNumberish,
      _feesCalculator: string,
      _cviOracle: string,
      _liquidation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastDepositTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestFundingFees(overrides?: CallOverrides): Promise<BigNumber>;

    latestOracleRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    latestSnapshotTimestamp(overrides?: CallOverrides): Promise<number>;

    liquidatePositions(
      _positionOwners: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidation(overrides?: CallOverrides): Promise<string>;

    liquidityProviders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lpsLockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    maxAllowedLeverage(overrides?: CallOverrides): Promise<number>;

    maxCVIValue(overrides?: CallOverrides): Promise<number>;

    maxTimeAllowedAfterLatestRound(overrides?: CallOverrides): Promise<number>;

    name(overrides?: CallOverrides): Promise<string>;

    noLockPositionAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    openPosition(
      _tokenAmount: BigNumberish,
      _maxCVI: BigNumberish,
      _maxBuyingPremiumFeePercentage: BigNumberish,
      _leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        positionUnitsAmount: BigNumber;
        positionedTokenAmount: BigNumber;
        openPositionFee: BigNumber;
        buyingPremiumFee: BigNumber;
      }
    >;

    openPositionWithoutFee(
      _tokenAmount: BigNumberish,
      _maxCVI: BigNumberish,
      _leverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        positionUnitsAmount: BigNumber;
        positionedTokenAmount: BigNumber;
        openPositionFee: BigNumber;
        buyingPremiumFee: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    positionHoldersAllowedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number] & {
        positionUnitsAmount: BigNumber;
        leverage: number;
        openCVIValue: number;
        creationTimestamp: number;
        originalCreationTimestamp: number;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revertLockedTransfered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rewards(overrides?: CallOverrides): Promise<string>;

    setAddressSpecificParameters(
      _holderAddress: string,
      _shouldLockPosition: boolean,
      _positionHolderAllowed: boolean,
      _increaseSharedPoolAllowed: boolean,
      _isLiquidityProvider: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyParameters(
      _newEmergencyWithdrawAllowed: boolean,
      _newCanPurgeSnapshots: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesCalculator(
      _newCalculator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLatestOracleRoundId(
      _newOracleRoundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockupPeriods(
      _newLPLockupPeriod: BigNumberish,
      _newBuyersLockupPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxAllowedLeverage(
      _newMaxAllowedLeverage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTimeAllowedAfterLatestRound(
      _newMaxTimeAllowedAfterLatestRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevertLockedTransfers(
      _revertLockedTransfers: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubContracts(
      _newCollector: string,
      _newOracle: string,
      _newRewards: string,
      _newLiquidation: string,
      _newStakingContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingContractAddress(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    totalBalance(
      _withAddendum: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFundingFeesAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalLeveragedTokensAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalPositionUnitsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _tokenAmount: BigNumberish,
      _maxLPTokenBurnAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        burntAmount: BigNumber;
        withdrawnAmount: BigNumber;
      }
    >;

    withdrawLPTokens(
      _lpTokensAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        burntAmount: BigNumber;
        withdrawnAmount: BigNumber;
      }
    >;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "ClosePosition(address,uint256,uint256,uint256,uint8,uint256)"(
      account?: string | null,
      tokenAmount?: null,
      feeAmount?: null,
      positionUnitsAmount?: null,
      leverage?: null,
      cviValue?: null
    ): ClosePositionEventFilter;
    ClosePosition(
      account?: string | null,
      tokenAmount?: null,
      feeAmount?: null,
      positionUnitsAmount?: null,
      leverage?: null,
      cviValue?: null
    ): ClosePositionEventFilter;

    "Deposit(address,uint256,uint256,uint256)"(
      account?: string | null,
      tokenAmount?: null,
      lpTokensAmount?: null,
      feeAmount?: null
    ): DepositEventFilter;
    Deposit(
      account?: string | null,
      tokenAmount?: null,
      lpTokensAmount?: null,
      feeAmount?: null
    ): DepositEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LiquidatePosition(address,uint256,bool,uint256)"(
      positionAddress?: string | null,
      currentPositionBalance?: null,
      isBalancePositive?: null,
      positionUnitsAmount?: null
    ): LiquidatePositionEventFilter;
    LiquidatePosition(
      positionAddress?: string | null,
      currentPositionBalance?: null,
      isBalancePositive?: null,
      positionUnitsAmount?: null
    ): LiquidatePositionEventFilter;

    "OpenPosition(address,uint256,uint8,uint256,uint256,uint256)"(
      account?: string | null,
      tokenAmount?: null,
      leverage?: null,
      feeAmount?: null,
      positionUnitsAmount?: null,
      cviValue?: null
    ): OpenPositionEventFilter;
    OpenPosition(
      account?: string | null,
      tokenAmount?: null,
      leverage?: null,
      feeAmount?: null,
      positionUnitsAmount?: null,
      cviValue?: null
    ): OpenPositionEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Withdraw(address,uint256,uint256,uint256)"(
      account?: string | null,
      tokenAmount?: null,
      lpTokensAmount?: null,
      feeAmount?: null
    ): WithdrawEventFilter;
    Withdraw(
      account?: string | null,
      tokenAmount?: null,
      lpTokensAmount?: null,
      feeAmount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    MAX_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyersLockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    calculateLatestTurbulenceIndicatorPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePositionBalance(
      _positionAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePositionPendingFees(
      _positionAddress: string,
      _positionUnitsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closePosition(
      _positionUnitsAmount: BigNumberish,
      _minCVI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePositionWithoutFee(
      _positionUnitsAmount: BigNumberish,
      _minCVI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cviOracle(overrides?: CallOverrides): Promise<BigNumber>;

    cviSnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _tokenAmount: BigNumberish,
      _minLPTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    feesCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    feesCollector(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseSharedPool(
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseSharedPoolAllowedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialTokenToLPTokenRate(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _token: string,
      _lpTokenName: string,
      _lpTokenSymbolName: string,
      _initialTokenToLPTokenRate: BigNumberish,
      _maxCVIValue: BigNumberish,
      _feesCalculator: string,
      _cviOracle: string,
      _liquidation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastDepositTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestFundingFees(overrides?: CallOverrides): Promise<BigNumber>;

    latestOracleRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    latestSnapshotTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatePositions(
      _positionOwners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidation(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityProviders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpsLockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    maxAllowedLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    maxCVIValue(overrides?: CallOverrides): Promise<BigNumber>;

    maxTimeAllowedAfterLatestRound(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    noLockPositionAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPosition(
      _tokenAmount: BigNumberish,
      _maxCVI: BigNumberish,
      _maxBuyingPremiumFeePercentage: BigNumberish,
      _leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openPositionWithoutFee(
      _tokenAmount: BigNumberish,
      _maxCVI: BigNumberish,
      _leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    positionHoldersAllowedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revertLockedTransfered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    setAddressSpecificParameters(
      _holderAddress: string,
      _shouldLockPosition: boolean,
      _positionHolderAllowed: boolean,
      _increaseSharedPoolAllowed: boolean,
      _isLiquidityProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmergencyParameters(
      _newEmergencyWithdrawAllowed: boolean,
      _newCanPurgeSnapshots: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeesCalculator(
      _newCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLatestOracleRoundId(
      _newOracleRoundId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLockupPeriods(
      _newLPLockupPeriod: BigNumberish,
      _newBuyersLockupPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxAllowedLeverage(
      _newMaxAllowedLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTimeAllowedAfterLatestRound(
      _newMaxTimeAllowedAfterLatestRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRevertLockedTransfers(
      _revertLockedTransfers: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSubContracts(
      _newCollector: string,
      _newOracle: string,
      _newRewards: string,
      _newLiquidation: string,
      _newStakingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(
      _withAddendum: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFundingFeesAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalLeveragedTokensAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalPositionUnitsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _tokenAmount: BigNumberish,
      _maxLPTokenBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLPTokens(
      _lpTokensAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_FEE_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRECISION_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyersLockupPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateLatestTurbulenceIndicatorPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePositionBalance(
      _positionAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePositionPendingFees(
      _positionAddress: string,
      _positionUnitsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePosition(
      _positionUnitsAmount: BigNumberish,
      _minCVI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePositionWithoutFee(
      _positionUnitsAmount: BigNumberish,
      _minCVI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cviOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cviSnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _tokenAmount: BigNumberish,
      _minLPTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawAllowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feesCalculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feesCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseSharedPool(
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseSharedPoolAllowedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialTokenToLPTokenRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      _lpTokenName: string,
      _lpTokenSymbolName: string,
      _initialTokenToLPTokenRate: BigNumberish,
      _maxCVIValue: BigNumberish,
      _feesCalculator: string,
      _cviOracle: string,
      _liquidation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastDepositTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestFundingFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestOracleRoundId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestSnapshotTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidatePositions(
      _positionOwners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityProviders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpsLockupPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAllowedLeverage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxCVIValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTimeAllowedAfterLatestRound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    noLockPositionAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPosition(
      _tokenAmount: BigNumberish,
      _maxCVI: BigNumberish,
      _maxBuyingPremiumFeePercentage: BigNumberish,
      _leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openPositionWithoutFee(
      _tokenAmount: BigNumberish,
      _maxCVI: BigNumberish,
      _leverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionHoldersAllowedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revertLockedTransfered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAddressSpecificParameters(
      _holderAddress: string,
      _shouldLockPosition: boolean,
      _positionHolderAllowed: boolean,
      _increaseSharedPoolAllowed: boolean,
      _isLiquidityProvider: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyParameters(
      _newEmergencyWithdrawAllowed: boolean,
      _newCanPurgeSnapshots: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeesCalculator(
      _newCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLatestOracleRoundId(
      _newOracleRoundId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLockupPeriods(
      _newLPLockupPeriod: BigNumberish,
      _newBuyersLockupPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxAllowedLeverage(
      _newMaxAllowedLeverage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTimeAllowedAfterLatestRound(
      _newMaxTimeAllowedAfterLatestRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRevertLockedTransfers(
      _revertLockedTransfers: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSubContracts(
      _newCollector: string,
      _newOracle: string,
      _newRewards: string,
      _newLiquidation: string,
      _newStakingContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalance(
      _withAddendum: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFundingFeesAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLeveragedTokensAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPositionUnitsAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tokenAmount: BigNumberish,
      _maxLPTokenBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLPTokens(
      _lpTokensAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
