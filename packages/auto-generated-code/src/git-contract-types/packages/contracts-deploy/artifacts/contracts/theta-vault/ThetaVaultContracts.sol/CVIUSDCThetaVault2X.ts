/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../common";

export interface CVIUSDCThetaVault2XInterface extends utils.Interface {
  functions: {
    "DEPOSIT_REQUEST_TYPE()": FunctionFragment;
    "MAX_PERCENTAGE()": FunctionFragment;
    "PRECISION_DECIMALS()": FunctionFragment;
    "UNISWAP_REMOVE_MAX_FEE_PERCENTAGE()": FunctionFragment;
    "WITHDRAW_REQUEST_TYPE()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "depositCap()": FunctionFragment;
    "depositHoldingsPercentage()": FunctionFragment;
    "extraLiqidityPercentage()": FunctionFragment;
    "fulfillDepositRequest(uint256)": FunctionFragment;
    "fulfillWithdrawRequest(uint256)": FunctionFragment;
    "fulfiller()": FunctionFragment;
    "getReserves()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialTokenToThetaTokenRate()": FunctionFragment;
    "initialize(uint256,address,address,address,address,address,string,string)": FunctionFragment;
    "lastDepositTimestamp(address)": FunctionFragment;
    "liquidateRequest(uint256)": FunctionFragment;
    "liquidationPeriod()": FunctionFragment;
    "lockupPeriod()": FunctionFragment;
    "maxMinRequestIncrements()": FunctionFragment;
    "minDepositAmount()": FunctionFragment;
    "minDexPercentageAllowed()": FunctionFragment;
    "minPoolSkewPercentage()": FunctionFragment;
    "minRequestId()": FunctionFragment;
    "minWithdrawAmount()": FunctionFragment;
    "name()": FunctionFragment;
    "nextRequestId()": FunctionFragment;
    "owner()": FunctionFragment;
    "platform()": FunctionFragment;
    "rebalance()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestDelay()": FunctionFragment;
    "requests(uint256)": FunctionFragment;
    "rewardRouter()": FunctionFragment;
    "router()": FunctionFragment;
    "setDepositCap(uint256)": FunctionFragment;
    "setDepositHoldings(uint16)": FunctionFragment;
    "setFulfiller(address)": FunctionFragment;
    "setLiquidityPercentages(uint16,uint16)": FunctionFragment;
    "setMinAmounts(uint256,uint256)": FunctionFragment;
    "setMinPoolSkew(uint16)": FunctionFragment;
    "setPeriods(uint256,uint256)": FunctionFragment;
    "setRequestDelay(uint256)": FunctionFragment;
    "setRewardRouter(address)": FunctionFragment;
    "submitDepositRequest(uint168)": FunctionFragment;
    "submitWithdrawRequest(uint168)": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "totalDepositRequestsAmount()": FunctionFragment;
    "totalHoldingsAmount()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalVaultLeveragedAmount()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vaultPositionUnits()": FunctionFragment;
    "volToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEPOSIT_REQUEST_TYPE"
      | "MAX_PERCENTAGE"
      | "PRECISION_DECIMALS"
      | "UNISWAP_REMOVE_MAX_FEE_PERCENTAGE"
      | "WITHDRAW_REQUEST_TYPE"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "decimals"
      | "decreaseAllowance"
      | "depositCap"
      | "depositHoldingsPercentage"
      | "extraLiqidityPercentage"
      | "fulfillDepositRequest"
      | "fulfillWithdrawRequest"
      | "fulfiller"
      | "getReserves"
      | "increaseAllowance"
      | "initialTokenToThetaTokenRate"
      | "initialize"
      | "lastDepositTimestamp"
      | "liquidateRequest"
      | "liquidationPeriod"
      | "lockupPeriod"
      | "maxMinRequestIncrements"
      | "minDepositAmount"
      | "minDexPercentageAllowed"
      | "minPoolSkewPercentage"
      | "minRequestId"
      | "minWithdrawAmount"
      | "name"
      | "nextRequestId"
      | "owner"
      | "platform"
      | "rebalance"
      | "renounceOwnership"
      | "requestDelay"
      | "requests"
      | "rewardRouter"
      | "router"
      | "setDepositCap"
      | "setDepositHoldings"
      | "setFulfiller"
      | "setLiquidityPercentages"
      | "setMinAmounts"
      | "setMinPoolSkew"
      | "setPeriods"
      | "setRequestDelay"
      | "setRewardRouter"
      | "submitDepositRequest"
      | "submitWithdrawRequest"
      | "symbol"
      | "token"
      | "totalBalance"
      | "totalDepositRequestsAmount"
      | "totalHoldingsAmount"
      | "totalSupply"
      | "totalVaultLeveragedAmount"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "vaultPositionUnits"
      | "volToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEPOSIT_REQUEST_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRECISION_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNISWAP_REMOVE_MAX_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAW_REQUEST_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositHoldingsPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraLiqidityPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillDepositRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillWithdrawRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fulfiller", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialTokenToThetaTokenRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BigNumberish,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastDepositTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockupPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMinRequestIncrements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDexPercentageAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPoolSkewPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minWithdrawAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "platform", values?: undefined): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDepositCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositHoldings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFulfiller",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityPercentages",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAmounts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPoolSkew",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeriods",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequestDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitDepositRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitWithdrawRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDepositRequestsAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalHoldingsAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVaultLeveragedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultPositionUnits",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "volToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEPOSIT_REQUEST_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRECISION_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNISWAP_REMOVE_MAX_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAW_REQUEST_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositHoldingsPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraLiqidityPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillDepositRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillWithdrawRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fulfiller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialTokenToThetaTokenRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastDepositTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockupPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMinRequestIncrements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDexPercentageAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPoolSkewPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minWithdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "platform", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDepositCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositHoldings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFulfiller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityPercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPoolSkew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPeriods", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRequestDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitDepositRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitWithdrawRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDepositRequestsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalHoldingsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVaultLeveragedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultPositionUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "volToken", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "FulfillDeposit(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "FulfillWithdraw(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LiquidateRequest(uint256,uint8,address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SubmitRequest(uint256,uint8,uint256,uint32,address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FulfillDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FulfillWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidateRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface FulfillDepositEventObject {
  requestId: BigNumber;
  account: string;
  totalUSDCAmount: BigNumber;
  platformLiquidityAmount: BigNumber;
  dexVolTokenUSDCAmount: BigNumber;
  dexVolTokenAmount: BigNumber;
  dexUSDCAmount: BigNumber;
  mintedThetaTokens: BigNumber;
}
export type FulfillDepositEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  FulfillDepositEventObject
>;

export type FulfillDepositEventFilter = TypedEventFilter<FulfillDepositEvent>;

export interface FulfillWithdrawEventObject {
  requestId: BigNumber;
  account: string;
  totalUSDCAmount: BigNumber;
  platformLiquidityAmount: BigNumber;
  dexVolTokenAmount: BigNumber;
  dexUSDCVolTokenAmount: BigNumber;
  dexUSDCAmount: BigNumber;
  burnedThetaTokens: BigNumber;
}
export type FulfillWithdrawEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  FulfillWithdrawEventObject
>;

export type FulfillWithdrawEventFilter = TypedEventFilter<FulfillWithdrawEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LiquidateRequestEventObject {
  requestId: BigNumber;
  requestType: number;
  account: string;
  liquidator: string;
  tokenAmount: BigNumber;
}
export type LiquidateRequestEvent = TypedEvent<
  [BigNumber, number, string, string, BigNumber],
  LiquidateRequestEventObject
>;

export type LiquidateRequestEventFilter =
  TypedEventFilter<LiquidateRequestEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SubmitRequestEventObject {
  requestId: BigNumber;
  requestType: number;
  tokenAmount: BigNumber;
  targetTimestamp: number;
  account: string;
  totalUSDCBalance: BigNumber;
  totalSupply: BigNumber;
}
export type SubmitRequestEvent = TypedEvent<
  [BigNumber, number, BigNumber, number, string, BigNumber, BigNumber],
  SubmitRequestEventObject
>;

export type SubmitRequestEventFilter = TypedEventFilter<SubmitRequestEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface CVIUSDCThetaVault2X extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CVIUSDCThetaVault2XInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEPOSIT_REQUEST_TYPE(overrides?: CallOverrides): Promise<[number]>;

    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<[number]>;

    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNISWAP_REMOVE_MAX_FEE_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<[number]>;

    WITHDRAW_REQUEST_TYPE(overrides?: CallOverrides): Promise<[number]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositHoldingsPercentage(overrides?: CallOverrides): Promise<[number]>;

    extraLiqidityPercentage(overrides?: CallOverrides): Promise<[number]>;

    fulfillDepositRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillWithdrawRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfiller(overrides?: CallOverrides): Promise<[string]>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        volTokenAmount: BigNumber;
        usdcAmount: BigNumber;
      }
    >;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialTokenToThetaTokenRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _initialTokenToThetaTokenRate: BigNumberish,
      _platform: string,
      _volToken: string,
      _rewardRouter: string,
      _token: string,
      _router: string,
      _lpTokenName: string,
      _lpTokenSymbolName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastDepositTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidateRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidationPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockupPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxMinRequestIncrements(overrides?: CallOverrides): Promise<[BigNumber]>;

    minDepositAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minDexPercentageAllowed(overrides?: CallOverrides): Promise<[number]>;

    minPoolSkewPercentage(overrides?: CallOverrides): Promise<[number]>;

    minRequestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    minWithdrawAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextRequestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    platform(overrides?: CallOverrides): Promise<[string]>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number, string, boolean] & {
        requestType: number;
        tokenAmount: BigNumber;
        targetTimestamp: number;
        owner: string;
        shouldStake: boolean;
      }
    >;

    rewardRouter(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setDepositCap(
      _newDepositCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositHoldings(
      _newDepositHoldingsPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFulfiller(
      _newFulfiller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityPercentages(
      _newExtraLiquidityPercentage: BigNumberish,
      _minDexPercentageAllowed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinAmounts(
      _newMinDepositAmount: BigNumberish,
      _newMinWithdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinPoolSkew(
      _newMinPoolSkewPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPeriods(
      _newLockupPeriod: BigNumberish,
      _newLiquidationPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRequestDelay(
      _newRequestDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardRouter(
      _rewardRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitDepositRequest(
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitWithdrawRequest(
      _thetaTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalBalance(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        usdcPlatformLiquidity: BigNumber;
        intrinsicDEXVolTokenBalance: BigNumber;
        volTokenPositionBalance: BigNumber;
        dexUSDCAmount: BigNumber;
        dexVolTokensAmount: BigNumber;
      }
    >;

    totalDepositRequestsAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalHoldingsAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVaultLeveragedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultPositionUnits(overrides?: CallOverrides): Promise<[BigNumber]>;

    volToken(overrides?: CallOverrides): Promise<[string]>;
  };

  DEPOSIT_REQUEST_TYPE(overrides?: CallOverrides): Promise<number>;

  MAX_PERCENTAGE(overrides?: CallOverrides): Promise<number>;

  PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  UNISWAP_REMOVE_MAX_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<number>;

  WITHDRAW_REQUEST_TYPE(overrides?: CallOverrides): Promise<number>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCap(overrides?: CallOverrides): Promise<BigNumber>;

  depositHoldingsPercentage(overrides?: CallOverrides): Promise<number>;

  extraLiqidityPercentage(overrides?: CallOverrides): Promise<number>;

  fulfillDepositRequest(
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillWithdrawRequest(
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfiller(overrides?: CallOverrides): Promise<string>;

  getReserves(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      volTokenAmount: BigNumber;
      usdcAmount: BigNumber;
    }
  >;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialTokenToThetaTokenRate(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _initialTokenToThetaTokenRate: BigNumberish,
    _platform: string,
    _volToken: string,
    _rewardRouter: string,
    _token: string,
    _router: string,
    _lpTokenName: string,
    _lpTokenSymbolName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastDepositTimestamp(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidateRequest(
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  lockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  maxMinRequestIncrements(overrides?: CallOverrides): Promise<BigNumber>;

  minDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  minDexPercentageAllowed(overrides?: CallOverrides): Promise<number>;

  minPoolSkewPercentage(overrides?: CallOverrides): Promise<number>;

  minRequestId(overrides?: CallOverrides): Promise<BigNumber>;

  minWithdrawAmount(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nextRequestId(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  platform(overrides?: CallOverrides): Promise<string>;

  rebalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestDelay(overrides?: CallOverrides): Promise<BigNumber>;

  requests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, number, string, boolean] & {
      requestType: number;
      tokenAmount: BigNumber;
      targetTimestamp: number;
      owner: string;
      shouldStake: boolean;
    }
  >;

  rewardRouter(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  setDepositCap(
    _newDepositCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositHoldings(
    _newDepositHoldingsPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFulfiller(
    _newFulfiller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityPercentages(
    _newExtraLiquidityPercentage: BigNumberish,
    _minDexPercentageAllowed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinAmounts(
    _newMinDepositAmount: BigNumberish,
    _newMinWithdrawAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinPoolSkew(
    _newMinPoolSkewPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPeriods(
    _newLockupPeriod: BigNumberish,
    _newLiquidationPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRequestDelay(
    _newRequestDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardRouter(
    _rewardRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitDepositRequest(
    _tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitWithdrawRequest(
    _thetaTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  totalBalance(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      usdcPlatformLiquidity: BigNumber;
      intrinsicDEXVolTokenBalance: BigNumber;
      volTokenPositionBalance: BigNumber;
      dexUSDCAmount: BigNumber;
      dexVolTokensAmount: BigNumber;
    }
  >;

  totalDepositRequestsAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalHoldingsAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalVaultLeveragedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultPositionUnits(overrides?: CallOverrides): Promise<BigNumber>;

  volToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEPOSIT_REQUEST_TYPE(overrides?: CallOverrides): Promise<number>;

    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<number>;

    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    UNISWAP_REMOVE_MAX_FEE_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<number>;

    WITHDRAW_REQUEST_TYPE(overrides?: CallOverrides): Promise<number>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositCap(overrides?: CallOverrides): Promise<BigNumber>;

    depositHoldingsPercentage(overrides?: CallOverrides): Promise<number>;

    extraLiqidityPercentage(overrides?: CallOverrides): Promise<number>;

    fulfillDepositRequest(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fulfillWithdrawRequest(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fulfiller(overrides?: CallOverrides): Promise<string>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        volTokenAmount: BigNumber;
        usdcAmount: BigNumber;
      }
    >;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialTokenToThetaTokenRate(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _initialTokenToThetaTokenRate: BigNumberish,
      _platform: string,
      _volToken: string,
      _rewardRouter: string,
      _token: string,
      _router: string,
      _lpTokenName: string,
      _lpTokenSymbolName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastDepositTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateRequest(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    lockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    maxMinRequestIncrements(overrides?: CallOverrides): Promise<BigNumber>;

    minDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minDexPercentageAllowed(overrides?: CallOverrides): Promise<number>;

    minPoolSkewPercentage(overrides?: CallOverrides): Promise<number>;

    minRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    minWithdrawAmount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nextRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    platform(overrides?: CallOverrides): Promise<string>;

    rebalance(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestDelay(overrides?: CallOverrides): Promise<BigNumber>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number, string, boolean] & {
        requestType: number;
        tokenAmount: BigNumber;
        targetTimestamp: number;
        owner: string;
        shouldStake: boolean;
      }
    >;

    rewardRouter(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    setDepositCap(
      _newDepositCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositHoldings(
      _newDepositHoldingsPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFulfiller(
      _newFulfiller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityPercentages(
      _newExtraLiquidityPercentage: BigNumberish,
      _minDexPercentageAllowed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinAmounts(
      _newMinDepositAmount: BigNumberish,
      _newMinWithdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinPoolSkew(
      _newMinPoolSkewPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPeriods(
      _newLockupPeriod: BigNumberish,
      _newLiquidationPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequestDelay(
      _newRequestDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardRouter(
      _rewardRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submitDepositRequest(
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitWithdrawRequest(
      _thetaTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    totalBalance(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        usdcPlatformLiquidity: BigNumber;
        intrinsicDEXVolTokenBalance: BigNumber;
        volTokenPositionBalance: BigNumber;
        dexUSDCAmount: BigNumber;
        dexVolTokensAmount: BigNumber;
      }
    >;

    totalDepositRequestsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalHoldingsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalVaultLeveragedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultPositionUnits(overrides?: CallOverrides): Promise<BigNumber>;

    volToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "FulfillDeposit(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      requestId?: null,
      account?: string | null,
      totalUSDCAmount?: null,
      platformLiquidityAmount?: null,
      dexVolTokenUSDCAmount?: null,
      dexVolTokenAmount?: null,
      dexUSDCAmount?: null,
      mintedThetaTokens?: null
    ): FulfillDepositEventFilter;
    FulfillDeposit(
      requestId?: null,
      account?: string | null,
      totalUSDCAmount?: null,
      platformLiquidityAmount?: null,
      dexVolTokenUSDCAmount?: null,
      dexVolTokenAmount?: null,
      dexUSDCAmount?: null,
      mintedThetaTokens?: null
    ): FulfillDepositEventFilter;

    "FulfillWithdraw(uint256,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      requestId?: null,
      account?: string | null,
      totalUSDCAmount?: null,
      platformLiquidityAmount?: null,
      dexVolTokenAmount?: null,
      dexUSDCVolTokenAmount?: null,
      dexUSDCAmount?: null,
      burnedThetaTokens?: null
    ): FulfillWithdrawEventFilter;
    FulfillWithdraw(
      requestId?: null,
      account?: string | null,
      totalUSDCAmount?: null,
      platformLiquidityAmount?: null,
      dexVolTokenAmount?: null,
      dexUSDCVolTokenAmount?: null,
      dexUSDCAmount?: null,
      burnedThetaTokens?: null
    ): FulfillWithdrawEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LiquidateRequest(uint256,uint8,address,address,uint256)"(
      requestId?: null,
      requestType?: null,
      account?: string | null,
      liquidator?: string | null,
      tokenAmount?: null
    ): LiquidateRequestEventFilter;
    LiquidateRequest(
      requestId?: null,
      requestType?: null,
      account?: string | null,
      liquidator?: string | null,
      tokenAmount?: null
    ): LiquidateRequestEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SubmitRequest(uint256,uint8,uint256,uint32,address,uint256,uint256)"(
      requestId?: null,
      requestType?: null,
      tokenAmount?: null,
      targetTimestamp?: null,
      account?: string | null,
      totalUSDCBalance?: null,
      totalSupply?: null
    ): SubmitRequestEventFilter;
    SubmitRequest(
      requestId?: null,
      requestType?: null,
      tokenAmount?: null,
      targetTimestamp?: null,
      account?: string | null,
      totalUSDCBalance?: null,
      totalSupply?: null
    ): SubmitRequestEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    DEPOSIT_REQUEST_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    UNISWAP_REMOVE_MAX_FEE_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WITHDRAW_REQUEST_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCap(overrides?: CallOverrides): Promise<BigNumber>;

    depositHoldingsPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    extraLiqidityPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillDepositRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillWithdrawRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfiller(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialTokenToThetaTokenRate(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _initialTokenToThetaTokenRate: BigNumberish,
      _platform: string,
      _volToken: string,
      _rewardRouter: string,
      _token: string,
      _router: string,
      _lpTokenName: string,
      _lpTokenSymbolName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastDepositTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidationPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    lockupPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    maxMinRequestIncrements(overrides?: CallOverrides): Promise<BigNumber>;

    minDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    minDexPercentageAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    minPoolSkewPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    minRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    minWithdrawAmount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    platform(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestDelay(overrides?: CallOverrides): Promise<BigNumber>;

    requests(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rewardRouter(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setDepositCap(
      _newDepositCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositHoldings(
      _newDepositHoldingsPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFulfiller(
      _newFulfiller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityPercentages(
      _newExtraLiquidityPercentage: BigNumberish,
      _minDexPercentageAllowed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinAmounts(
      _newMinDepositAmount: BigNumberish,
      _newMinWithdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinPoolSkew(
      _newMinPoolSkewPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPeriods(
      _newLockupPeriod: BigNumberish,
      _newLiquidationPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRequestDelay(
      _newRequestDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardRouter(
      _rewardRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitDepositRequest(
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitWithdrawRequest(
      _thetaTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    totalDepositRequestsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalHoldingsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalVaultLeveragedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultPositionUnits(overrides?: CallOverrides): Promise<BigNumber>;

    volToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEPOSIT_REQUEST_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UNISWAP_REMOVE_MAX_FEE_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WITHDRAW_REQUEST_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositHoldingsPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extraLiqidityPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fulfillDepositRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillWithdrawRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfiller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialTokenToThetaTokenRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _initialTokenToThetaTokenRate: BigNumberish,
      _platform: string,
      _volToken: string,
      _rewardRouter: string,
      _token: string,
      _router: string,
      _lpTokenName: string,
      _lpTokenSymbolName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastDepositTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidationPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockupPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMinRequestIncrements(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDepositAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDexPercentageAllowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minPoolSkewPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minWithdrawAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platform(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDepositCap(
      _newDepositCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositHoldings(
      _newDepositHoldingsPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFulfiller(
      _newFulfiller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityPercentages(
      _newExtraLiquidityPercentage: BigNumberish,
      _minDexPercentageAllowed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinAmounts(
      _newMinDepositAmount: BigNumberish,
      _newMinWithdrawAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinPoolSkew(
      _newMinPoolSkewPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPeriods(
      _newLockupPeriod: BigNumberish,
      _newLiquidationPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRequestDelay(
      _newRequestDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardRouter(
      _rewardRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitDepositRequest(
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitWithdrawRequest(
      _thetaTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDepositRequestsAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalHoldingsAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVaultLeveragedAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultPositionUnits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    volToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
