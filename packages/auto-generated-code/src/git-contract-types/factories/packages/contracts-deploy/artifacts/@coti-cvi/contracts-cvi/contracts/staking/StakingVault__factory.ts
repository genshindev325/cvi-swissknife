/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakingVault,
  StakingVaultInterface,
} from "../../../../../../../../packages/contracts-deploy/artifacts/@coti-cvi/contracts-cvi/contracts/staking/StakingVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_goviToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "extractGOVI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "goviToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newWithdrawer",
        type: "address",
      },
    ],
    name: "setWithdrawer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161066d38038061066d83398101604081905261002f916100ad565b6100383361005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556100db565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100be578081fd5b81516001600160a01b03811681146100d4578182fd5b9392505050565b610583806100ea6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063849471a21161005b578063849471a2146100ec5780638da5cb5b146100f4578063cdc1842414610105578063f2fde38b1461011857600080fd5b80630d174c241461008d5780632d437a7b146100a25780632e1a7d4d146100d1578063715018a6146100e4575b600080fd5b6100a061009b36600461049a565b61012b565b005b6001546100b5906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6100a06100df3660046104e8565b610180565b6100a0610250565b6100a0610286565b6000546001600160a01b03166100b5565b6002546100b5906001600160a01b031681565b6100a061012636600461049a565b6103b6565b6000546001600160a01b0316331461015e5760405162461bcd60e51b815260040161015590610518565b60405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146101c85760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b6044820152606401610155565b60015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561021457600080fd5b505af1158015610228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024c91906104c8565b5050565b6000546001600160a01b0316331461027a5760405162461bcd60e51b815260040161015590610518565b610284600061044a565b565b6000546001600160a01b031633146102b05760405162461bcd60e51b815260040161015590610518565b6001546040516370a0823160e01b81523060048201526001600160a01b039091169063a9059cbb90339083906370a082319060240160206040518083038186803b1580156102fd57600080fd5b505afa158015610311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103359190610500565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561037b57600080fd5b505af115801561038f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b391906104c8565b50565b6000546001600160a01b031633146103e05760405162461bcd60e51b815260040161015590610518565b6001600160a01b0381166104455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610155565b6103b3815b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156104ab578081fd5b81356001600160a01b03811681146104c1578182fd5b9392505050565b6000602082840312156104d9578081fd5b815180151581146104c1578182fd5b6000602082840312156104f9578081fd5b5035919050565b600060208284031215610511578081fd5b5051919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea2646970667358221220afa2927a9d0582c7f7f4fca770fbaf6fcb898dda4bb51e27136b339839b8086664736f6c63430008040033";

type StakingVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingVault__factory extends ContractFactory {
  constructor(...args: StakingVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _goviToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakingVault> {
    return super.deploy(_goviToken, overrides || {}) as Promise<StakingVault>;
  }
  override getDeployTransaction(
    _goviToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_goviToken, overrides || {});
  }
  override attach(address: string): StakingVault {
    return super.attach(address) as StakingVault;
  }
  override connect(signer: Signer): StakingVault__factory {
    return super.connect(signer) as StakingVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingVaultInterface {
    return new utils.Interface(_abi) as StakingVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingVault {
    return new Contract(address, _abi, signerOrProvider) as StakingVault;
  }
}
