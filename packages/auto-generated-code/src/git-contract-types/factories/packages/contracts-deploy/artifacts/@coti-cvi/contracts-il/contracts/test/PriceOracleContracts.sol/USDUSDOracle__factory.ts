/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  USDUSDOracle,
  USDUSDOracleInterface,
} from "../../../../../../../../../packages/contracts-deploy/artifacts/@coti-cvi/contracts-il/contracts/test/PriceOracleContracts.sol/USDUSDOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "_price",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "requestedRoundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundIdAnswer",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startAnswerTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "answerTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "result",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundIdAnswer",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "answerTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "roundId",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_price",
        type: "int256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526001805460ff60501b19166a0800000000000000000000179055600060025534801561002f57600080fd5b5060405161042b38038061042b83398101604081905261004e91610093565b6000818155600180546001600160501b03191681178155905260036020527fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c556100ab565b6000602082840312156100a4578081fd5b5051919050565b610371806100ba6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638cd221c9116100665780638cd221c9146101285780639a6fc8f514610153578063a035b1fe146101c5578063f7a30806146101ce578063feaf968c146101e357600080fd5b8063313ce5671461009857806350d25bcd146100c357806354fd4d50146100ea5780637284e416146100f3575b600080fd5b6001546100ac90600160501b900460ff1681565b60405160ff90911681526020015b60405180910390f35b600080546001546001600160501b031690915260046020525b6040519081526020016100ba565b6100dc60025481565b60408051808201825260138152722a32b9ba1034b6b83632b6b2b73a30ba34b7b760691b602082015290516100ba91906102b1565b60015461013b906001600160501b031681565b6040516001600160501b0390911681526020016100ba565b610191610161366004610283565b6001600160501b038116600090815260036020908152604080832054600490925290912054919290919081908490565b604080516001600160501b03968716815260208101959095528401929092526060830152909116608082015260a0016100ba565b6100dc60005481565b6101e16101dc36600461026b565b610208565b005b600080546001546001600160501b031680835260046020526040909220548083610191565b60018054610221916001600160501b0390911690610304565b6001805469ffffffffffffffffffff19166001600160501b039283169081178255600084815590815260036020908152604080832095909555915490921682526004905220429055565b60006020828403121561027c578081fd5b5035919050565b600060208284031215610294578081fd5b81356001600160501b03811681146102aa578182fd5b9392505050565b6000602080835283518082850152825b818110156102dd578581018301518582016040015282016102c1565b818111156102ee5783604083870101525b50601f01601f1916929092016040019392505050565b60006001600160501b0380831681851680830382111561033257634e487b7160e01b84526011600452602484fd5b0194935050505056fea2646970667358221220d59b92a053c7db0886246299028fb5a9da150da3ad55de41ddbdfd1d353a9ce664736f6c63430008040033";

type USDUSDOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: USDUSDOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class USDUSDOracle__factory extends ContractFactory {
  constructor(...args: USDUSDOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<USDUSDOracle> {
    return super.deploy(_price, overrides || {}) as Promise<USDUSDOracle>;
  }
  override getDeployTransaction(
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_price, overrides || {});
  }
  override attach(address: string): USDUSDOracle {
    return super.attach(address) as USDUSDOracle;
  }
  override connect(signer: Signer): USDUSDOracle__factory {
    return super.connect(signer) as USDUSDOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): USDUSDOracleInterface {
    return new utils.Interface(_abi) as USDUSDOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): USDUSDOracle {
    return new Contract(address, _abi, signerOrProvider) as USDUSDOracle;
  }
}
