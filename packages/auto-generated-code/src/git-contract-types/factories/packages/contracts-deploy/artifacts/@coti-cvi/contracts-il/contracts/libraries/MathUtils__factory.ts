/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MathUtils,
  MathUtilsInterface,
} from "../../../../../../../../packages/contracts-deploy/artifacts/@coti-cvi/contracts-il/contracts/libraries/MathUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "min",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "numerator",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "denominator",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "precision",
        type: "uint8",
      },
    ],
    name: "ratio",
    outputs: [
      {
        internalType: "uint256",
        name: "quotient",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6102fd61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80637ae2b5c714610045578063c8b165201461006a575b600080fd5b6100586100533660046100e9565b61007d565b60405190815260200160405180910390f35b61005861007836600461010a565b610097565b600081831061008c578161008e565b825b90505b92915050565b6000806100a583600161015f565b6100b090600a6101e7565b6100ba9086610292565b90506000600a6100ca8684610184565b6100d5906005610147565b6100df9190610184565b9695505050505050565b600080604083850312156100fb578182fd5b50508035926020909101359150565b60008060006060848603121561011e578081fd5b8335925060208401359150604084013560ff8116811461013c578182fd5b809150509250925092565b6000821982111561015a5761015a6102b1565b500190565b600060ff821660ff84168060ff0382111561017c5761017c6102b1565b019392505050565b60008261019f57634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156101df5781600019048211156101c5576101c56102b1565b808516156101d257918102915b93841c93908002906101a9565b509250929050565b600061008e60ff84168360008261020057506001610091565b8161020d57506000610091565b8160018114610223576002811461022d57610249565b6001915050610091565b60ff84111561023e5761023e6102b1565b50506001821b610091565b5060208310610133831016604e8410600b841016171561026c575081810a610091565b61027683836101a4565b806000190482111561028a5761028a6102b1565b029392505050565b60008160001904831182151516156102ac576102ac6102b1565b500290565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220d9f6868762934aa9b96399050cfa5c0b24104a046bd9ef09e7516ed133f23c7964736f6c63430008040033";

type MathUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MathUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MathUtils__factory extends ContractFactory {
  constructor(...args: MathUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MathUtils> {
    return super.deploy(overrides || {}) as Promise<MathUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MathUtils {
    return super.attach(address) as MathUtils;
  }
  override connect(signer: Signer): MathUtils__factory {
    return super.connect(signer) as MathUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MathUtilsInterface {
    return new utils.Interface(_abi) as MathUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MathUtils {
    return new Contract(address, _abi, signerOrProvider) as MathUtils;
  }
}
