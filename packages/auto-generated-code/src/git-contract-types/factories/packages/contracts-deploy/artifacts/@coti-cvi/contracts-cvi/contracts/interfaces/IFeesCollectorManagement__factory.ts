/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IFeesCollectorManagement,
  IFeesCollectorManagementInterface,
} from "../../../../../../../../packages/contracts-deploy/artifacts/@coti-cvi/contracts-cvi/contracts/interfaces/IFeesCollectorManagement";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "ethGOVIPrice",
        type: "uint256",
      },
    ],
    name: "sendFunds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isAllowed",
        type: "bool",
      },
    ],
    name: "setAllowedSenderAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newArbitrumContractAddress",
        type: "address",
      },
    ],
    name: "setArbitrumContractAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IInbox",
        name: "newArbitrumInbox",
        type: "address",
      },
    ],
    name: "setArbitrumInbox",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "newBuyBack",
        type: "bool",
      },
    ],
    name: "setBuyBack",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "newConvertUSDC",
        type: "bool",
      },
    ],
    name: "setConvertUSDC",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "enableWhitelist",
        type: "bool",
      },
    ],
    name: "setEnableWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newFundsSender",
        type: "address",
      },
    ],
    name: "setFundsSender",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "newMaxSlippagePercent",
        type: "uint16",
      },
    ],
    name: "setMaxSlippage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newMaxSubmissionFee",
        type: "uint256",
      },
    ],
    name: "setMaxSubmissionFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newMinETHForTransfer",
        type: "uint256",
      },
    ],
    name: "setMinETHForTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newMinUSDCForConversion",
        type: "uint256",
      },
    ],
    name: "setMinUDSCForConversion",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IUniswapV2Router02",
        name: "newRouter",
        type: "address",
      },
    ],
    name: "setRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "newSendPercentage",
        type: "uint16",
      },
    ],
    name: "setSendPercentage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "newSendToArbitrum",
        type: "bool",
      },
    ],
    name: "setSendToArbitrum",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IFeesCollector",
        name: "newStaking",
        type: "address",
      },
    ],
    name: "setStaking",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newStakingVaultAddress",
        type: "address",
      },
    ],
    name: "setStakingVaultAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newTreasuryAddress",
        type: "address",
      },
    ],
    name: "setTreasuryAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "newTreasuryTransferPercentage",
        type: "uint16",
      },
    ],
    name: "setTreasuryTransferPercentage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "newUSDCETHPriceAggregator",
        type: "address",
      },
    ],
    name: "setUSDCETHPriceAggregator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "newUseNative",
        type: "bool",
      },
    ],
    name: "setUseNative",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Upgradeable",
        name: "newWrappedToken",
        type: "address",
      },
    ],
    name: "setWrappedToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

export class IFeesCollectorManagement__factory {
  static readonly abi = _abi;
  static createInterface(): IFeesCollectorManagementInterface {
    return new utils.Interface(_abi) as IFeesCollectorManagementInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IFeesCollectorManagement {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IFeesCollectorManagement;
  }
}
