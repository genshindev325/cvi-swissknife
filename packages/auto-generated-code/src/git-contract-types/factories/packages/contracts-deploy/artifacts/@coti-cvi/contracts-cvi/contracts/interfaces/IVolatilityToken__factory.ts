/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IVolatilityToken,
  IVolatilityTokenInterface,
} from "../../../../../../../../packages/contracts-deploy/artifacts/@coti-cvi/contracts-cvi/contracts/interfaces/IVolatilityToken";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenAmountBeforeFees",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "burnedTokens",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "closePositionFee",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "closingPremiumFee",
        type: "uint256",
      },
    ],
    name: "Burn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "requestType",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fulfillFeesAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isAborted",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "useKeepers",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "keepersCalled",
        type: "bool",
      },
      {
        indexed: true,
        internalType: "address",
        name: "fulfiller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "fulfillTimestamp",
        type: "uint32",
      },
    ],
    name: "FulfillRequest",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "requestType",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "liquidator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "findersFeeAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "useKeepers",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "liquidateTimestamp",
        type: "uint32",
      },
    ],
    name: "LiquidateRequest",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "positionedTokenAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "mintedTokens",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "openPositionFee",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "buyingPremiumFee",
        type: "uint256",
      },
    ],
    name: "Mint",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "requestType",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "submitFeesAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "requestTimestamp",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "targetTimestamp",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "useKeepers",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "maxBuyingPremiumFeePercentage",
        type: "uint16",
      },
    ],
    name: "SubmitRequest",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint168",
        name: "burnAmount",
        type: "uint168",
      },
    ],
    name: "burnTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "keepersCalled",
        type: "bool",
      },
    ],
    name: "fulfillBurnRequest",
    outputs: [
      {
        internalType: "uint256",
        name: "tokensBurned",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint16",
        name: "maxBuyingPremiumFeePercentage",
        type: "uint16",
      },
      {
        internalType: "bool",
        name: "keepersCalled",
        type: "bool",
      },
    ],
    name: "fulfillMintRequest",
    outputs: [
      {
        internalType: "uint256",
        name: "tokensMinted",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialTokenToLPTokenRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "leverage",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "liquidateRequest",
    outputs: [
      {
        internalType: "uint256",
        name: "findersFeeAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint168",
        name: "tokenAmount",
        type: "uint168",
      },
    ],
    name: "mintTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "mintedTokens",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "platform",
    outputs: [
      {
        internalType: "contract IPlatform",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rebaseCVI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestFeesCalculator",
    outputs: [
      {
        internalType: "contract IRequestFeesCalculator",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "requests",
    outputs: [
      {
        internalType: "uint8",
        name: "requestType",
        type: "uint8",
      },
      {
        internalType: "uint168",
        name: "tokenAmount",
        type: "uint168",
      },
      {
        internalType: "uint16",
        name: "timeDelayRequestFeesPercent",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "maxRequestFeesPercent",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "requestTimestamp",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "targetTimestamp",
        type: "uint32",
      },
      {
        internalType: "bool",
        name: "useKeepers",
        type: "bool",
      },
      {
        internalType: "uint16",
        name: "maxBuyingPremiumFeePercentage",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ICVIOracle",
        name: "newCVIOracle",
        type: "address",
      },
    ],
    name: "setCVIOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "newCappedRebase",
        type: "bool",
      },
    ],
    name: "setCappedRebase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "newDeviationPercentagePerSingleRebaseLag",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "newMinDeviationPercentage",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "newMaxDeviationPercentage",
        type: "uint16",
      },
    ],
    name: "setDeviationParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IFeesCalculator",
        name: "newFeesCalculator",
        type: "address",
      },
    ],
    name: "setFeesCalculator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IFeesCollector",
        name: "newCollector",
        type: "address",
      },
    ],
    name: "setFeesCollector",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fulfiller",
        type: "address",
      },
    ],
    name: "setFulfiller",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newKeepersFeeVaultAddress",
        type: "address",
      },
    ],
    name: "setKeepersFeeVaultAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newMaxMinRequestIncrements",
        type: "uint256",
      },
    ],
    name: "setMaxMinRequestIncrements",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxTotalRequestsAmount",
        type: "uint256",
      },
    ],
    name: "setMaxTotalRequestsAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newMinKeepersMintAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newMinKeepersBurnAmount",
        type: "uint256",
      },
    ],
    name: "setMinKeepersAmounts",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newMinRequestId",
        type: "uint256",
      },
    ],
    name: "setMinRequestId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "minter",
        type: "address",
      },
    ],
    name: "setMinter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IPlatform",
        name: "newPlatform",
        type: "address",
      },
    ],
    name: "setPlatform",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IRequestFeesCalculator",
        name: "newRequestFeesCalculator",
        type: "address",
      },
    ],
    name: "setRequestFeesCalculator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "verifyTotalRequestsAmount",
        type: "bool",
      },
    ],
    name: "setVerifyTotalRequestsAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint168",
        name: "tokenAmount",
        type: "uint168",
      },
      {
        internalType: "uint32",
        name: "timeDelay",
        type: "uint32",
      },
    ],
    name: "submitBurnRequest",
    outputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint168",
        name: "tokenAmount",
        type: "uint168",
      },
      {
        internalType: "uint32",
        name: "timeDelay",
        type: "uint32",
      },
    ],
    name: "submitKeepersBurnRequest",
    outputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint168",
        name: "tokenAmount",
        type: "uint168",
      },
      {
        internalType: "uint32",
        name: "timeDelay",
        type: "uint32",
      },
      {
        internalType: "uint16",
        name: "maxBuyingPremiumFeePercentage",
        type: "uint16",
      },
    ],
    name: "submitKeepersMintRequest",
    outputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint168",
        name: "tokenAmount",
        type: "uint168",
      },
      {
        internalType: "uint32",
        name: "timeDelay",
        type: "uint32",
      },
    ],
    name: "submitMintRequest",
    outputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IVolatilityToken__factory {
  static readonly abi = _abi;
  static createInterface(): IVolatilityTokenInterface {
    return new utils.Interface(_abi) as IVolatilityTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IVolatilityToken {
    return new Contract(address, _abi, signerOrProvider) as IVolatilityToken;
  }
}
