/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LibArbitrumL2Upgradeable,
  LibArbitrumL2UpgradeableInterface,
} from "../../../../../../node_modules/@openzeppelin/contracts-upgradeable/build/contracts/LibArbitrumL2Upgradeable";

const _abi = [
  {
    inputs: [],
    name: "ARBSYS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6091610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063bf0a12cf146038575b600080fd5b603f606481565b6040516001600160a01b03909116815260200160405180910390f3fea264697066735822122032dfb89ce3dbc69f31d49de089e218fd15012af8a45666307632f8a9a456761c64736f6c63430008090033";

type LibArbitrumL2UpgradeableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibArbitrumL2UpgradeableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibArbitrumL2Upgradeable__factory extends ContractFactory {
  constructor(...args: LibArbitrumL2UpgradeableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LibArbitrumL2Upgradeable> {
    return super.deploy(overrides || {}) as Promise<LibArbitrumL2Upgradeable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LibArbitrumL2Upgradeable {
    return super.attach(address) as LibArbitrumL2Upgradeable;
  }
  override connect(signer: Signer): LibArbitrumL2Upgradeable__factory {
    return super.connect(signer) as LibArbitrumL2Upgradeable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibArbitrumL2UpgradeableInterface {
    return new utils.Interface(_abi) as LibArbitrumL2UpgradeableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibArbitrumL2Upgradeable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as LibArbitrumL2Upgradeable;
  }
}
