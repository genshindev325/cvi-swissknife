apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: Helm
    cattle.io/creator: norman
    workload.user.cattle.io/workloadselector: deployment-default-chatgpt-server-wrapper
    app: chatgpt-server-wrapper
  name: chatgpt-server-wrapper
  namespace: {{ .Release.Namespace }}
spec:
  progressDeadlineSeconds: 100
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: deployment-default-chatgpt-server-wrapper
  template:
    metadata:
      labels:
        workload.user.cattle.io/workloadselector: deployment-default-chatgpt-server-wrapper
    spec:
      containers:
        - args:
            - node
            - packages/chatgpt-server-wrapper/dist/index.js
          env:
          - name: APP_ENV
            value: k8s
          image: {{ .Values.global.backend_image }}
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /
              port: 80
              scheme: HTTP
            initialDelaySeconds: 240
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /readiness
              port: 80
              scheme: HTTP
            initialDelaySeconds: 240
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: chatgpt-server-wrapper
          ports:
            - containerPort: 80
              name: tcpport01
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readiness      
              port: 80
              scheme: HTTP
            initialDelaySeconds: 40
            periodSeconds: 2
            successThreshold: 2
            timeoutSeconds: 10
          resources:
            requests: # min
              cpu: 250m
              memory: 2000Mi
            limits: # max
              cpu: 250m
              memory: 2000Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities: {}
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          stdin: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true
      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: dockerhub-secret
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
