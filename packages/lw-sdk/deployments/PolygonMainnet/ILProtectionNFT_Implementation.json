{
  "address": "0x0520b1e2ca40F413Cc9A0fF8Aa56c93165040Fd2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevValue",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        }
      ],
      "name": "ProtectionMetadataCIDChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protectionStartTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protectionEndTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premiumCostUSD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokensWorthAtBuyTimeUSD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "token1Symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "token2Symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "policyPeriod",
          "type": "uint256"
        }
      ],
      "name": "ProtectionMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum DiscountNFTType",
          "name": "discountNFTType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premiumCostBeforeDiscount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premiumCostDiscount",
          "type": "uint256"
        }
      ],
      "name": "ProtectionMintDiscountDetails",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PRECISION",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getOwnerProtections",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "protectionStartTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protectionEndTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "premiumCostUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpTokensWorthAtBuyTimeUSD",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "token1Symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "token2Symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "policyPeriod",
              "type": "uint256"
            },
            {
              "internalType": "enum DiscountNFTType",
              "name": "discountNFTType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "premiumCostDiscountUSD",
              "type": "uint256"
            }
          ],
          "internalType": "struct ProtectionNFTDetails[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getProtectionDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "protectionStartTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protectionEndTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "premiumCostUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpTokensWorthAtBuyTimeUSD",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "token1Symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "token2Symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "policyPeriod",
              "type": "uint256"
            },
            {
              "internalType": "enum DiscountNFTType",
              "name": "discountNFTType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "premiumCostDiscountUSD",
              "type": "uint256"
            }
          ],
          "internalType": "struct ProtectionNFTDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getProtectionDetailsByOwnerAndIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "protectionStartTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protectionEndTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "premiumCostUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpTokensWorthAtBuyTimeUSD",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "token1Symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "token2Symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "policyPeriod",
              "type": "uint256"
            },
            {
              "internalType": "enum DiscountNFTType",
              "name": "discountNFTType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "premiumCostDiscountUSD",
              "type": "uint256"
            }
          ],
          "internalType": "struct ProtectionNFTDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_protectionMetadataCID",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "protectionStartTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protectionEndTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "premiumCostUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpTokensWorthAtBuyTimeUSD",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "token1Symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "token2Symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "policyPeriod",
              "type": "uint256"
            },
            {
              "internalType": "enum DiscountNFTType",
              "name": "discountNFTType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "premiumCostDiscountUSD",
              "type": "uint256"
            }
          ],
          "internalType": "struct ProtectionNFTCreationDetails",
          "name": "_creationDetails",
          "type": "tuple"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protectionMetadataCID",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_protectionMetadataCID",
          "type": "string"
        }
      ],
      "name": "setProtectionMetadataCID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIdCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4c0e228c2f2d06b19bed8d9a779bb320b82c0613d8c0cedc136fb3b296ec4435",
  "receipt": {
    "to": null,
    "from": "0x0b3D7b3F149214f8f5281b5aE613B090fD39BD3F",
    "contractAddress": "0x0520b1e2ca40F413Cc9A0fF8Aa56c93165040Fd2",
    "transactionIndex": 33,
    "gasUsed": "2876679",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000400000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000020000400000000000000000000000004000800000000000000001000000008000000000000000000000100000000000000000020000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xacf3872672386e64f912838f1d7f3449bf564cd6300ef424d08c291e3f558ba8",
    "transactionHash": "0x4c0e228c2f2d06b19bed8d9a779bb320b82c0613d8c0cedc136fb3b296ec4435",
    "logs": [
      {
        "transactionIndex": 33,
        "blockNumber": 32550611,
        "transactionHash": "0x4c0e228c2f2d06b19bed8d9a779bb320b82c0613d8c0cedc136fb3b296ec4435",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000b3d7b3f149214f8f5281b5ae613b090fd39bd3f",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000015142b3c3f6100e0000000000000000000000000000000000000000000000001b09d36b810da1cf00000000000000000000000000000000000000000000053dc8f97a69c079c58e00000000000000000000000000000000000000000000000019b890b7bd1791c100000000000000000000000000000000000000000000053dca4abd1d846fd59c",
        "logIndex": 100,
        "blockHash": "0xacf3872672386e64f912838f1d7f3449bf564cd6300ef424d08c291e3f558ba8"
      }
    ],
    "blockNumber": 32550611,
    "cumulativeGasUsed": "7696331",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 19,
  "solcInputHash": "3e38164a73c777cd780c57ef82a1826e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevValue\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"ProtectionMetadataCIDChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protectionStartTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protectionEndTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premiumCostUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokensWorthAtBuyTimeUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"token2Symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"policyPeriod\",\"type\":\"uint256\"}],\"name\":\"ProtectionMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum DiscountNFTType\",\"name\":\"discountNFTType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premiumCostBeforeDiscount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premiumCostDiscount\",\"type\":\"uint256\"}],\"name\":\"ProtectionMintDiscountDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PRECISION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerProtections\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protectionStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protectionEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumCostUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokensWorthAtBuyTimeUSD\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token2Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"policyPeriod\",\"type\":\"uint256\"},{\"internalType\":\"enum DiscountNFTType\",\"name\":\"discountNFTType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"premiumCostDiscountUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct ProtectionNFTDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getProtectionDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protectionStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protectionEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumCostUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokensWorthAtBuyTimeUSD\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token2Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"policyPeriod\",\"type\":\"uint256\"},{\"internalType\":\"enum DiscountNFTType\",\"name\":\"discountNFTType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"premiumCostDiscountUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct ProtectionNFTDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getProtectionDetailsByOwnerAndIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protectionStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protectionEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumCostUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokensWorthAtBuyTimeUSD\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token2Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"policyPeriod\",\"type\":\"uint256\"},{\"internalType\":\"enum DiscountNFTType\",\"name\":\"discountNFTType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"premiumCostDiscountUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct ProtectionNFTDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_protectionMetadataCID\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protectionStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protectionEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumCostUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokensWorthAtBuyTimeUSD\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token2Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"policyPeriod\",\"type\":\"uint256\"},{\"internalType\":\"enum DiscountNFTType\",\"name\":\"discountNFTType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"premiumCostDiscountUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct ProtectionNFTCreationDetails\",\"name\":\"_creationDetails\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionMetadataCID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_protectionMetadataCID\",\"type\":\"string\"}],\"name\":\"setProtectionMetadataCID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol\":\"ILProtectionNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@coti-cvi/contracts-il/contracts/BaseController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport './interfaces/IBaseController.sol';\\n\\nabstract contract BaseController is IBaseController, OwnableUpgradeable, AccessControlUpgradeable {\\n  uint16 public constant MAX_PRECISION = 10000;\\n\\n  modifier onlyAdmin() {\\n    _checkRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n    _;\\n  }\\n\\n  modifier onlyValidAddress(address addr) {\\n    require(addr != address(0), 'Invalid address');\\n\\n    _;\\n  }\\n\\n  function initialize(address _owner) internal onlyInitializing {\\n    OwnableUpgradeable.__Ownable_init();\\n    AccessControlUpgradeable.__AccessControl_init();\\n\\n    _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n\\n    _transferOwnership(_owner);\\n  }\\n}\\n\",\"keccak256\":\"0xa2088b57b43ec091fba514001458c6e914ed541408a1a299d6b509e42be050c0\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';\\nimport './BaseController.sol';\\nimport './interfaces/ILProtectionNFTInterface.sol';\\n\\ncontract ILProtectionNFT is ILProtectionNFTInterface, BaseController, ERC721EnumerableUpgradeable {\\n  bytes32 public constant MINTER_ROLE = keccak256('MINTER_ROLE');\\n\\n  uint256 public override tokenIdCounter;\\n  mapping(uint256 => ProtectionNFTDetails) private protections;\\n  string public override protectionMetadataCID;\\n\\n  function initialize(\\n    address _owner,\\n    string calldata _name,\\n    string calldata _symbol,\\n    string calldata _protectionMetadataCID\\n  ) external initializer {\\n    BaseController.initialize(_owner);\\n\\n    ERC721Upgradeable.__ERC721_init(_name, _symbol);\\n\\n    protectionMetadataCID = _protectionMetadataCID;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC721EnumerableUpgradeable, AccessControlUpgradeable)\\n    returns (bool)\\n  {\\n    return ERC721Upgradeable.supportsInterface(interfaceId) || AccessControlUpgradeable.supportsInterface(interfaceId);\\n  }\\n\\n  function mint(ProtectionNFTCreationDetails calldata _creationDetails) external override onlyRole(MINTER_ROLE) {\\n    protections[tokenIdCounter] = ProtectionNFTDetails({\\n      id: tokenIdCounter,\\n      owner: _creationDetails.owner,\\n      protectionStartTimestamp: _creationDetails.protectionStartTimestamp,\\n      protectionEndTimestamp: _creationDetails.protectionEndTimestamp,\\n      premiumCostUSD: _creationDetails.premiumCostUSD,\\n      premiumCostDiscountUSD: _creationDetails.premiumCostDiscountUSD,\\n      discountNFTType: _creationDetails.discountNFTType,\\n      lpTokensWorthAtBuyTimeUSD: _creationDetails.lpTokensWorthAtBuyTimeUSD,\\n      token1Symbol: _creationDetails.token1Symbol,\\n      token2Symbol: _creationDetails.token2Symbol,\\n      policyPeriod: _creationDetails.policyPeriod\\n    });\\n\\n    _mint(_creationDetails.owner, tokenIdCounter);\\n\\n    emit ProtectionMint(\\n      tokenIdCounter,\\n      _creationDetails.owner,\\n      _creationDetails.protectionStartTimestamp,\\n      _creationDetails.protectionEndTimestamp,\\n      _creationDetails.premiumCostUSD,\\n      _creationDetails.lpTokensWorthAtBuyTimeUSD,\\n      _creationDetails.token1Symbol,\\n      _creationDetails.token2Symbol,\\n      _creationDetails.policyPeriod\\n    );\\n\\n    emit ProtectionMintDiscountDetails(\\n      tokenIdCounter,\\n      _creationDetails.owner,\\n      _creationDetails.discountNFTType,\\n      _creationDetails.premiumCostUSD,\\n      _creationDetails.premiumCostDiscountUSD\\n    );\\n\\n    tokenIdCounter++;\\n  }\\n\\n  function setProtectionMetadataCID(string calldata _protectionMetadataCID) external override onlyAdmin {\\n    emit ProtectionMetadataCIDChanged(protectionMetadataCID, _protectionMetadataCID);\\n\\n    protectionMetadataCID = _protectionMetadataCID;\\n  }\\n\\n  function getProtectionDetailsByOwnerAndIndex(address _owner, uint256 _index)\\n    public\\n    view\\n    override\\n    returns (ProtectionNFTDetails memory)\\n  {\\n    uint256 protectionId = tokenOfOwnerByIndex(_owner, _index);\\n\\n    return protections[protectionId];\\n  }\\n\\n  function getOwnerProtections(address _owner) external view override returns (ProtectionNFTDetails[] memory) {\\n    uint256 balance = balanceOf(_owner);\\n\\n    require(balance > 0, 'Owner has no protections');\\n\\n    ProtectionNFTDetails[] memory retProtections = new ProtectionNFTDetails[](balance);\\n\\n    for (uint256 i; i < balance; i++) {\\n      retProtections[i] = getProtectionDetailsByOwnerAndIndex(_owner, i);\\n    }\\n\\n    return retProtections;\\n  }\\n\\n  function getProtectionDetails(uint256 _id) external view override returns (ProtectionNFTDetails memory) {\\n    require(_exists(_id), 'Non existing protection id');\\n\\n    return protections[_id];\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');\\n\\n    return string(abi.encodePacked(_baseURI(), protectionMetadataCID));\\n  }\\n\\n  function _baseURI() internal pure override returns (string memory) {\\n    return 'ipfs://';\\n  }\\n}\\n\",\"keccak256\":\"0xade51003e53dbe93456952570361c863fb40e85193a37c36f5f3cd28defc0663\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-il/contracts/interfaces/IBaseController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\ninterface IBaseController {}\\n\",\"keccak256\":\"0x5ce158d7ac4b0911045948ba2e597bc6cf6bcf5ddedd354d878c458dcd993509\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-il/contracts/interfaces/ILProtectionDiscountNFTControllerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\nimport './IBaseController.sol';\\nimport './ILProtectionDiscountNFTInterface.sol';\\n\\nenum DiscountNFTType {\\n  NONE,\\n  GOLD,\\n  DIAMOND\\n}\\n\\nstruct DiscountNFTDetails {\\n  DiscountNFTType discountType;\\n  bool isUsed;\\n  uint16 premiumDiscountComponent;\\n  uint256 freeOfChargeTokensWorth;\\n}\\n\\ninterface ILProtectionDiscountNFTControllerInterface is IBaseController {\\n  event ProtectionDiscountNFTChanged(\\n    ILProtectionDiscountNFTInterface prevValue,\\n    ILProtectionDiscountNFTInterface newValue\\n  );\\n  event PremiumDiscountComponentChanged(uint16 prevValue, uint16 newValue);\\n  event FreeOfChargeTokensWorthChanged(uint256 prevValue, uint256 newValue);\\n  event DiscountMarkedAsUsed(address indexed owner);\\n\\n  function markDiscountAsUsed(address _owner) external;\\n\\n  function setProtectionDiscountNFT(ILProtectionDiscountNFTInterface _newInstance) external;\\n\\n  function setPremiumDiscountComponent(uint16 _premiumDiscountComponent) external;\\n\\n  function setFreeOfChargeTokensWorth(uint256 _freeOfChargeTokensWorth) external;\\n\\n  function setEnabled(bool _enabled) external;\\n\\n  function premiumDiscountComponent() external view returns (uint16);\\n\\n  function freeOfChargeTokensWorth() external view returns (uint256);\\n\\n  function enabled() external view returns (bool);\\n\\n  function getDiscountDetails(address _owner) external view returns (DiscountNFTDetails memory);\\n}\\n\",\"keccak256\":\"0x77b6c973888ceaa925b4924ea0aa7347b89474a4924471bd32abad36e0818ed1\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-il/contracts/interfaces/ILProtectionDiscountNFTInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\ninterface ILProtectionDiscountNFTInterface {\\n  function setUsed(address _to) external;\\n\\n  function getTokenInfo(address _to)\\n    external\\n    view\\n    returns (\\n      uint256 index,\\n      bool minted,\\n      bool used\\n    );\\n}\\n\",\"keccak256\":\"0x66863fa5e3c1dc84de73547714762973c1a8a034948c0cc6f93e391bb361b475\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-il/contracts/interfaces/ILProtectionNFTInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\nimport './ILProtectionDiscountNFTControllerInterface.sol';\\n\\nstruct ProtectionNFTDetails {\\n  uint256 id;\\n  address owner;\\n  uint256 protectionStartTimestamp;\\n  uint256 protectionEndTimestamp;\\n  uint256 premiumCostUSD;\\n  uint256 lpTokensWorthAtBuyTimeUSD;\\n  string token1Symbol;\\n  string token2Symbol;\\n  uint256 policyPeriod;\\n  DiscountNFTType discountNFTType;\\n  uint256 premiumCostDiscountUSD;\\n}\\n\\nstruct ProtectionNFTCreationDetails {\\n  address owner;\\n  uint256 protectionStartTimestamp;\\n  uint256 protectionEndTimestamp;\\n  uint256 premiumCostUSD;\\n  uint256 lpTokensWorthAtBuyTimeUSD;\\n  string token1Symbol;\\n  string token2Symbol;\\n  uint256 policyPeriod;\\n  DiscountNFTType discountNFTType;\\n  uint256 premiumCostDiscountUSD;\\n}\\n\\ninterface ILProtectionNFTInterface {\\n  event ProtectionMint(\\n    uint256 indexed id,\\n    address indexed owner,\\n    uint256 protectionStartTimestamp,\\n    uint256 protectionEndTimestamp,\\n    uint256 premiumCostUSD,\\n    uint256 lpTokensWorthAtBuyTimeUSD,\\n    string token1Symbol,\\n    string token2Symbol,\\n    uint256 policyPeriod\\n  );\\n  event ProtectionMetadataCIDChanged(string prevValue, string newValue);\\n  event ProtectionMintDiscountDetails(\\n    uint256 indexed id,\\n    address indexed owner,\\n    DiscountNFTType indexed discountNFTType,\\n    uint256 premiumCostBeforeDiscount,\\n    uint256 premiumCostDiscount\\n  );\\n\\n  function mint(ProtectionNFTCreationDetails calldata _creationDetails) external;\\n\\n  function setProtectionMetadataCID(string calldata _protectionMetadataCID) external;\\n\\n  function tokenIdCounter() external returns (uint256);\\n\\n  function protectionMetadataCID() external returns (string memory);\\n\\n  function getProtectionDetailsByOwnerAndIndex(address _owner, uint256 _index)\\n    external\\n    view\\n    returns (ProtectionNFTDetails memory);\\n\\n  function getOwnerProtections(address _owner) external view returns (ProtectionNFTDetails[] memory);\\n\\n  function getProtectionDetails(uint256 _id) external view returns (ProtectionNFTDetails memory);\\n}\\n\",\"keccak256\":\"0x6275c660e8de8270933b8280bfe8d6f5e35ea115cc6d4ddd4c953cecb3e54fe5\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xa9ee8ba9953f4339e308abde06d64195b81852b5c605cfb738582a03ddf20099\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5d3b80a09c746aed89446a14d0e8f5ba5212520360d00a495a2156a7a51497e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x56035505d62f05f5e5040532b749ab25237f6dd87c7a514614acda96af996751\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613312806100206000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c806373f599da11610125578063c87b56dd116100ad578063e042af9d1161007c578063e042af9d14610483578063e2ec7c4014610496578063e985e9c5146104a9578063f0bd163f146104e5578063f2fde38b1461050557600080fd5b8063c87b56dd1461042e578063d539139314610441578063d547741f14610468578063d5cecb0c1461047b57600080fd5b806398bdf6f5116100f457806398bdf6f5146103e3578063a08b2ef8146103ed578063a217fddf14610400578063a22cb46514610408578063b88d4fde1461041b57600080fd5b806373f599da1461039b5780638da5cb5b146103b757806391d14854146103c857806395d89b41146103db57600080fd5b80632f745c59116101a85780634f6ccce7116101775780634f6ccce7146103475780635f1e6f6d1461035a5780636352211e1461036d57806370a0823114610380578063715018a61461039357600080fd5b80632f745c59146102ee57806336568abe1461030157806342842e0e14610314578063477d9e951461032757600080fd5b806318160ddd116101e457806318160ddd1461029357806323b872dd146102a5578063248a9ca3146102b85780632f2ff15d146102db57600080fd5b806301ffc9a71461021657806306fdde031461023e578063081812fc14610253578063095ea7b31461027e575b600080fd5b610229610224366004612b94565b610518565b60405190151581526020015b60405180910390f35b610246610538565b6040516102359190612f28565b610266610261366004612b5a565b6105ca565b6040516001600160a01b039091168152602001610235565b61029161028c366004612b31565b610664565b005b60fd545b604051908152602001610235565b6102916102b3366004612940565b61077a565b6102976102c6366004612b5a565b60009081526097602052604090206001015490565b6102916102e9366004612b72565b6107ab565b6102976102fc366004612b31565b6107d0565b61029161030f366004612b72565b610866565b610291610322366004612940565b6108e4565b61033a610335366004612b31565b6108ff565b6040516102359190613105565b610297610355366004612b5a565b610b0c565b610291610368366004612a8a565b610bad565b61026661037b366004612b5a565b610cab565b61029761038e3660046128f4565b610d22565b610291610da9565b6103a461271081565b60405161ffff9091168152602001610235565b6033546001600160a01b0316610266565b6102296103d6366004612b72565b610e0f565b610246610e3a565b61029761012d5481565b61033a6103fb366004612b5a565b610e49565b610297600081565b610291610416366004612a50565b6110aa565b61029161042936600461297b565b6110b5565b61024661043c366004612b5a565b6110ed565b6102977f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b610291610476366004612b72565b6111b4565b6102466111d9565b610291610491366004612c2b565b611268565b6102916104a4366004612beb565b611609565b6102296104b736600461290e565b6001600160a01b03918216600090815260ce6020908152604080832093909416825291909152205460ff1690565b6104f86104f33660046128f4565b61165e565b6040516102359190612ec7565b6102916105133660046128f4565b61177d565b600061052382611848565b80610532575061053282611883565b92915050565b606060c9805461054790613244565b80601f016020809104026020016040519081016040528092919081815260200182805461057390613244565b80156105c05780601f10610595576101008083540402835291602001916105c0565b820191906000526020600020905b8154815290600101906020018083116105a357829003601f168201915b5050505050905090565b600081815260cb60205260408120546001600160a01b03166106485760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b50600090815260cd60205260409020546001600160a01b031690565b600061066f82610cab565b9050806001600160a01b0316836001600160a01b031614156106dd5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161063f565b336001600160a01b03821614806106f957506106f981336104b7565b61076b5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161063f565b61077583836118b8565b505050565b6107843382611926565b6107a05760405162461bcd60e51b815260040161063f90613069565b610775838383611a1d565b6000828152609760205260409020600101546107c681611bc4565b6107758383611bce565b60006107db83610d22565b821061083d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161063f565b506001600160a01b0391909116600090815260fb60209081526040808320938352929052205490565b6001600160a01b03811633146108d65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161063f565b6108e08282611c54565b5050565b610775838383604051806020016040528060008152506110b5565b610907612707565b600061091384846107d0565b600081815261012e60209081526040918290208251610160810184528154815260018201546001600160a01b0316928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682018054939450909260c08401919061098c90613244565b80601f01602080910402602001604051908101604052809291908181526020018280546109b890613244565b8015610a055780601f106109da57610100808354040283529160200191610a05565b820191906000526020600020905b8154815290600101906020018083116109e857829003601f168201915b50505050508152602001600782018054610a1e90613244565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4a90613244565b8015610a975780601f10610a6c57610100808354040283529160200191610a97565b820191906000526020600020905b815481529060010190602001808311610a7a57829003601f168201915b505050918352505060088201546020820152600982015460409091019060ff166002811115610ad657634e487b7160e01b600052602160045260246000fd5b6002811115610af557634e487b7160e01b600052602160045260246000fd5b8152602001600a8201548152505091505092915050565b6000610b1760fd5490565b8210610b7a5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161063f565b60fd8281548110610b9b57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000610bb96001611cbb565b90508015610bd1576000805461ff0019166101001790555b610bda88611d48565b610c4d87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b018190048102820181019092528981529250899150889081908401838280828437600092019190915250611d8a92505050565b610c5a61012f8484612789565b508015610ca1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b600081815260cb60205260408120546001600160a01b0316806105325760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161063f565b60006001600160a01b038216610d8d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161063f565b506001600160a01b0316600090815260cc602052604090205490565b6033546001600160a01b03163314610e035760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161063f565b610e0d6000611dbb565b565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060ca805461054790613244565b610e51612707565b600082815260cb60205260409020546001600160a01b0316610eb55760405162461bcd60e51b815260206004820152601a60248201527f4e6f6e206578697374696e672070726f74656374696f6e206964000000000000604482015260640161063f565b600082815261012e60209081526040918290208251610160810184528154815260018201546001600160a01b0316928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a082015260068201805491929160c084019190610f2c90613244565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5890613244565b8015610fa55780601f10610f7a57610100808354040283529160200191610fa5565b820191906000526020600020905b815481529060010190602001808311610f8857829003601f168201915b50505050508152602001600782018054610fbe90613244565b80601f0160208091040260200160405190810160405280929190818152602001828054610fea90613244565b80156110375780601f1061100c57610100808354040283529160200191611037565b820191906000526020600020905b81548152906001019060200180831161101a57829003601f168201915b505050918352505060088201546020820152600982015460409091019060ff16600281111561107657634e487b7160e01b600052602160045260246000fd5b600281111561109557634e487b7160e01b600052602160045260246000fd5b8152602001600a820154815250509050919050565b6108e0338383611e0d565b6110bf3383611926565b6110db5760405162461bcd60e51b815260040161063f90613069565b6110e784848484611edc565b50505050565b600081815260cb60205260409020546060906001600160a01b031661116c5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161063f565b604080518082019091526007815266697066733a2f2f60c81b602082015261012f60405160200161119e929190612d90565b6040516020818303038152906040529050919050565b6000828152609760205260409020600101546111cf81611bc4565b6107758383611c54565b61012f80546111e790613244565b80601f016020809104026020016040519081016040528092919081815260200182805461121390613244565b80156112605780601f1061123557610100808354040283529160200191611260565b820191906000526020600020905b81548152906001019060200180831161124357829003601f168201915b505050505081565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661129281611bc4565b60408051610160810190915261012d5481526020808201906112b6908501856128f4565b6001600160a01b0316815260200183602001358152602001836040013581526020018360600135815260200183608001358152602001838060a001906112fc919061316e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060200161134360c085018561316e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060e0840135602082015260400161139961012085016101008601612bcc565b60028111156113b857634e487b7160e01b600052602160045260246000fd5b815261012084013560209182015261012d54600090815261012e825260409081902083518155838301516001820180546001600160a01b0319166001600160a01b03909216919091179055908301516002820155606083015160038201556080830151600482015560a0830151600582015560c0830151805191926114459260068501929091019061280d565b5060e0820151805161146191600784019160209091019061280d565b50610100820151600882015561012082015160098201805460ff1916600183600281111561149f57634e487b7160e01b600052602160045260246000fd5b02179055506101409190910151600a909101556114cb6114c260208401846128f4565b61012d54611f0f565b6114d860208301836128f4565b6001600160a01b031661012d547f19bbc7519e073520568318bda59e33b1c8e8a70ba891ba343d70788112cc51e28460200135856040013586606001358760800135888060a0019061152a919061316e565b61153760c08c018c61316e565b8c60e0013560405161155199989796959493929190613118565b60405180910390a361156b61012083016101008401612bcc565b600281111561158a57634e487b7160e01b600052602160045260246000fd5b61159760208401846128f4565b6001600160a01b031661012d547f2b34f70306452e1d6e04783621fc22bb573ce8d75d4200494bdb4a09bddd272d85606001358661012001356040516115e7929190918252602082015260400190565b60405180910390a461012d80549060006116008361327f565b91905055505050565b61161460003361205d565b7f3a02078fe6f8996987e50e710bee1b46db25a6c6b6768893676202cc6e308e2561012f838360405161164993929190612f3b565b60405180910390a161077561012f8383612789565b6060600061166b83610d22565b9050600081116116bd5760405162461bcd60e51b815260206004820152601860248201527f4f776e657220686173206e6f2070726f74656374696f6e730000000000000000604482015260640161063f565b60008167ffffffffffffffff8111156116e657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561171f57816020015b61170c612707565b8152602001906001900390816117045790505b50905060005b828110156117755761173785826108ff565b82828151811061175757634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061176d9061327f565b915050611725565b509392505050565b6033546001600160a01b031633146117d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161063f565b6001600160a01b03811661183c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161063f565b61184581611dbb565b50565b60006001600160e01b031982166380ac58cd60e01b148061052357506001600160e01b03198216635b5e139f60e01b14806105325750610532825b60006001600160e01b03198216637965db0b60e01b148061053257506301ffc9a760e01b6001600160e01b0319831614610532565b600081815260cd6020526040902080546001600160a01b0319166001600160a01b03841690811790915581906118ed82610cab565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081815260cb60205260408120546001600160a01b031661199f5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161063f565b60006119aa83610cab565b9050806001600160a01b0316846001600160a01b031614806119f157506001600160a01b03808216600090815260ce602090815260408083209388168352929052205460ff165b80611a155750836001600160a01b0316611a0a846105ca565b6001600160a01b0316145b949350505050565b826001600160a01b0316611a3082610cab565b6001600160a01b031614611a945760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161063f565b6001600160a01b038216611af65760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161063f565b611b018383836120c1565b611b0c6000826118b8565b6001600160a01b038316600090815260cc60205260408120805460019290611b359084906131ea565b90915550506001600160a01b038216600090815260cc60205260408120805460019290611b639084906131b3565b9091555050600081815260cb602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611845813361205d565b611bd88282610e0f565b6108e05760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611c103390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611c5e8282610e0f565b156108e05760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008054610100900460ff1615611d02578160ff166001148015611cde5750303b155b611cfa5760405162461bcd60e51b815260040161063f9061301b565b506000919050565b60005460ff808416911610611d295760405162461bcd60e51b815260040161063f9061301b565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16611d6f5760405162461bcd60e51b815260040161063f906130ba565b611d77612179565b611d7f6121a8565b61183c6000826121cf565b600054610100900460ff16611db15760405162461bcd60e51b815260040161063f906130ba565b6108e082826121d9565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415611e6f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161063f565b6001600160a01b03838116600081815260ce6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611ee7848484611a1d565b611ef384848484612227565b6110e75760405162461bcd60e51b815260040161063f90612fc9565b6001600160a01b038216611f655760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161063f565b600081815260cb60205260409020546001600160a01b031615611fca5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161063f565b611fd6600083836120c1565b6001600160a01b038216600090815260cc60205260408120805460019290611fff9084906131b3565b9091555050600081815260cb602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6120678282610e0f565b6108e05761207f816001600160a01b03166014612334565b61208a836020612334565b60405160200161209b929190612e15565b60408051601f198184030181529082905262461bcd60e51b825261063f91600401612f28565b6001600160a01b03831661211c576121178160fd8054600083815260fe60205260408120829055600182018355919091527f9346ac6dd7de6b96975fec380d4d994c4c12e6a8897544f22915316cc6cca2800155565b61213f565b816001600160a01b0316836001600160a01b03161461213f5761213f838261251d565b6001600160a01b03821661215657610775816125ba565b826001600160a01b0316826001600160a01b031614610775576107758282612693565b600054610100900460ff166121a05760405162461bcd60e51b815260040161063f906130ba565b610e0d6126d7565b600054610100900460ff16610e0d5760405162461bcd60e51b815260040161063f906130ba565b6108e08282611bce565b600054610100900460ff166122005760405162461bcd60e51b815260040161063f906130ba565b81516122139060c990602085019061280d565b5080516107759060ca90602084019061280d565b60006001600160a01b0384163b1561232957604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061226b903390899088908890600401612e8a565b602060405180830381600087803b15801561228557600080fd5b505af19250505080156122b5575060408051601f3d908101601f191682019092526122b291810190612bb0565b60015b61230f573d8080156122e3576040519150601f19603f3d011682016040523d82523d6000602084013e6122e8565b606091505b5080516123075760405162461bcd60e51b815260040161063f90612fc9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611a15565b506001949350505050565b606060006123438360026131cb565b61234e9060026131b3565b67ffffffffffffffff81111561237457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561239e576020820181803683370190505b509050600360fc1b816000815181106123c757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061240457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006124288460026131cb565b6124339060016131b3565b90505b60018111156124c7576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061247557634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061249957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936124c08161322d565b9050612436565b5083156125165760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161063f565b9392505050565b6000600161252a84610d22565b61253491906131ea565b600083815260fc6020526040902054909150808214612587576001600160a01b038416600090815260fb60209081526040808320858452825280832054848452818420819055835260fc90915290208190555b50600091825260fc602090815260408084208490556001600160a01b03909416835260fb81528383209183525290812055565b60fd546000906125cc906001906131ea565b600083815260fe602052604081205460fd805493945090928490811061260257634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060fd838154811061263157634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260fe909152604080822084905585825281205560fd80548061267757634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061269e83610d22565b6001600160a01b03909316600090815260fb60209081526040808320868452825280832085905593825260fc9052919091209190915550565b600054610100900460ff166126fe5760405162461bcd60e51b815260040161063f906130ba565b610e0d33611dbb565b6040518061016001604052806000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016060815260200160608152602001600081526020016000600281111561277c57634e487b7160e01b600052602160045260246000fd5b8152602001600081525090565b82805461279590613244565b90600052602060002090601f0160209004810192826127b757600085556127fd565b82601f106127d05782800160ff198235161785556127fd565b828001600101855582156127fd579182015b828111156127fd5782358255916020019190600101906127e2565b50612809929150612881565b5090565b82805461281990613244565b90600052602060002090601f01602090048101928261283b57600085556127fd565b82601f1061285457805160ff19168380011785556127fd565b828001600101855582156127fd579182015b828111156127fd578251825591602001919060010190612866565b5b808211156128095760008155600101612882565b80356001600160a01b0381168114611d4357600080fd5b60008083601f8401126128be578182fd5b50813567ffffffffffffffff8111156128d5578182fd5b6020830191508360208285010111156128ed57600080fd5b9250929050565b600060208284031215612905578081fd5b61251682612896565b60008060408385031215612920578081fd5b61292983612896565b915061293760208401612896565b90509250929050565b600080600060608486031215612954578081fd5b61295d84612896565b925061296b60208501612896565b9150604084013590509250925092565b60008060008060808587031215612990578081fd5b61299985612896565b93506129a760208601612896565b925060408501359150606085013567ffffffffffffffff808211156129ca578283fd5b818701915087601f8301126129dd578283fd5b8135818111156129ef576129ef6132b0565b604051601f8201601f19908116603f01168101908382118183101715612a1757612a176132b0565b816040528281528a6020848701011115612a2f578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215612a62578182fd5b612a6b83612896565b915060208301358015158114612a7f578182fd5b809150509250929050565b60008060008060008060006080888a031215612aa4578283fd5b612aad88612896565b9650602088013567ffffffffffffffff80821115612ac9578485fd5b612ad58b838c016128ad565b909850965060408a0135915080821115612aed578485fd5b612af98b838c016128ad565b909650945060608a0135915080821115612b11578384fd5b50612b1e8a828b016128ad565b989b979a50959850939692959293505050565b60008060408385031215612b43578182fd5b612b4c83612896565b946020939093013593505050565b600060208284031215612b6b578081fd5b5035919050565b60008060408385031215612b84578182fd5b8235915061293760208401612896565b600060208284031215612ba5578081fd5b8135612516816132c6565b600060208284031215612bc1578081fd5b8151612516816132c6565b600060208284031215612bdd578081fd5b813560038110612516578182fd5b60008060208385031215612bfd578182fd5b823567ffffffffffffffff811115612c13578283fd5b612c1f858286016128ad565b90969095509350505050565b600060208284031215612c3c578081fd5b813567ffffffffffffffff811115612c52578182fd5b82016101408185031215612516578182fd5b60008151808452612c7c816020860160208601613201565b601f01601f19169290920160200192915050565b60038110612cae57634e487b7160e01b600052602160045260246000fd5b9052565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000610160825184526020830151612cfe60208601826001600160a01b03169052565b5060408301516040850152606083015160608501526080830151608085015260a083015160a085015260c08301518160c0860152612d3e82860182612c64565b91505060e083015184820360e0860152612d588282612c64565b91505061010080840151818601525061012080840151612d7a82870182612c90565b5050610140928301519390920192909252919050565b600083516020612da38285838901613201565b8184019150828554612db481613244565b60018281168015612dcc5760018114612ddd57612e06565b60ff19841687528287019450612e06565b898852858820885b84811015612dfe57815489820152908301908701612de5565b505082870194505b50929998505050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612e4d816017850160208801613201565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612e7e816028840160208801613201565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612ebd90830184612c64565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b82811015612f1b57603f19888603018452612f09858351612cdb565b94509285019290850190600101612eed565b5092979650505050505050565b6020815260006125166020830184612c64565b604081526000808554612f4d81613244565b8060408601526060600180841660008114612f6f5760018114612f8357612fb1565b60ff19851688840152608088019550612fb1565b8a87526020808820885b86811015612fa85781548b8201870152908401908201612f8d565b8a018501975050505b50505050508281036020840152612ebd818587612cb2565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020815260006125166020830184612cdb565b89815288602082015287604082015286606082015260e06080820152600061314460e083018789612cb2565b82810360a0840152613157818688612cb2565b9150508260c08301529a9950505050505050505050565b6000808335601e19843603018112613184578283fd5b83018035915067ffffffffffffffff82111561319e578283fd5b6020019150368190038213156128ed57600080fd5b600082198211156131c6576131c661329a565b500190565b60008160001904831182151516156131e5576131e561329a565b500290565b6000828210156131fc576131fc61329a565b500390565b60005b8381101561321c578181015183820152602001613204565b838111156110e75750506000910152565b60008161323c5761323c61329a565b506000190190565b600181811c9082168061325857607f821691505b6020821081141561327957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156132935761329361329a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461184557600080fdfea2646970667358221220e0529d8ccc0670e7ec52917898f7b92aedf41e848006e1e00d130080283314b964736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c806373f599da11610125578063c87b56dd116100ad578063e042af9d1161007c578063e042af9d14610483578063e2ec7c4014610496578063e985e9c5146104a9578063f0bd163f146104e5578063f2fde38b1461050557600080fd5b8063c87b56dd1461042e578063d539139314610441578063d547741f14610468578063d5cecb0c1461047b57600080fd5b806398bdf6f5116100f457806398bdf6f5146103e3578063a08b2ef8146103ed578063a217fddf14610400578063a22cb46514610408578063b88d4fde1461041b57600080fd5b806373f599da1461039b5780638da5cb5b146103b757806391d14854146103c857806395d89b41146103db57600080fd5b80632f745c59116101a85780634f6ccce7116101775780634f6ccce7146103475780635f1e6f6d1461035a5780636352211e1461036d57806370a0823114610380578063715018a61461039357600080fd5b80632f745c59146102ee57806336568abe1461030157806342842e0e14610314578063477d9e951461032757600080fd5b806318160ddd116101e457806318160ddd1461029357806323b872dd146102a5578063248a9ca3146102b85780632f2ff15d146102db57600080fd5b806301ffc9a71461021657806306fdde031461023e578063081812fc14610253578063095ea7b31461027e575b600080fd5b610229610224366004612b94565b610518565b60405190151581526020015b60405180910390f35b610246610538565b6040516102359190612f28565b610266610261366004612b5a565b6105ca565b6040516001600160a01b039091168152602001610235565b61029161028c366004612b31565b610664565b005b60fd545b604051908152602001610235565b6102916102b3366004612940565b61077a565b6102976102c6366004612b5a565b60009081526097602052604090206001015490565b6102916102e9366004612b72565b6107ab565b6102976102fc366004612b31565b6107d0565b61029161030f366004612b72565b610866565b610291610322366004612940565b6108e4565b61033a610335366004612b31565b6108ff565b6040516102359190613105565b610297610355366004612b5a565b610b0c565b610291610368366004612a8a565b610bad565b61026661037b366004612b5a565b610cab565b61029761038e3660046128f4565b610d22565b610291610da9565b6103a461271081565b60405161ffff9091168152602001610235565b6033546001600160a01b0316610266565b6102296103d6366004612b72565b610e0f565b610246610e3a565b61029761012d5481565b61033a6103fb366004612b5a565b610e49565b610297600081565b610291610416366004612a50565b6110aa565b61029161042936600461297b565b6110b5565b61024661043c366004612b5a565b6110ed565b6102977f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b610291610476366004612b72565b6111b4565b6102466111d9565b610291610491366004612c2b565b611268565b6102916104a4366004612beb565b611609565b6102296104b736600461290e565b6001600160a01b03918216600090815260ce6020908152604080832093909416825291909152205460ff1690565b6104f86104f33660046128f4565b61165e565b6040516102359190612ec7565b6102916105133660046128f4565b61177d565b600061052382611848565b80610532575061053282611883565b92915050565b606060c9805461054790613244565b80601f016020809104026020016040519081016040528092919081815260200182805461057390613244565b80156105c05780601f10610595576101008083540402835291602001916105c0565b820191906000526020600020905b8154815290600101906020018083116105a357829003601f168201915b5050505050905090565b600081815260cb60205260408120546001600160a01b03166106485760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b50600090815260cd60205260409020546001600160a01b031690565b600061066f82610cab565b9050806001600160a01b0316836001600160a01b031614156106dd5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161063f565b336001600160a01b03821614806106f957506106f981336104b7565b61076b5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161063f565b61077583836118b8565b505050565b6107843382611926565b6107a05760405162461bcd60e51b815260040161063f90613069565b610775838383611a1d565b6000828152609760205260409020600101546107c681611bc4565b6107758383611bce565b60006107db83610d22565b821061083d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161063f565b506001600160a01b0391909116600090815260fb60209081526040808320938352929052205490565b6001600160a01b03811633146108d65760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161063f565b6108e08282611c54565b5050565b610775838383604051806020016040528060008152506110b5565b610907612707565b600061091384846107d0565b600081815261012e60209081526040918290208251610160810184528154815260018201546001600160a01b0316928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682018054939450909260c08401919061098c90613244565b80601f01602080910402602001604051908101604052809291908181526020018280546109b890613244565b8015610a055780601f106109da57610100808354040283529160200191610a05565b820191906000526020600020905b8154815290600101906020018083116109e857829003601f168201915b50505050508152602001600782018054610a1e90613244565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4a90613244565b8015610a975780601f10610a6c57610100808354040283529160200191610a97565b820191906000526020600020905b815481529060010190602001808311610a7a57829003601f168201915b505050918352505060088201546020820152600982015460409091019060ff166002811115610ad657634e487b7160e01b600052602160045260246000fd5b6002811115610af557634e487b7160e01b600052602160045260246000fd5b8152602001600a8201548152505091505092915050565b6000610b1760fd5490565b8210610b7a5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161063f565b60fd8281548110610b9b57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000610bb96001611cbb565b90508015610bd1576000805461ff0019166101001790555b610bda88611d48565b610c4d87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b018190048102820181019092528981529250899150889081908401838280828437600092019190915250611d8a92505050565b610c5a61012f8484612789565b508015610ca1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b600081815260cb60205260408120546001600160a01b0316806105325760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161063f565b60006001600160a01b038216610d8d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161063f565b506001600160a01b0316600090815260cc602052604090205490565b6033546001600160a01b03163314610e035760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161063f565b610e0d6000611dbb565b565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060ca805461054790613244565b610e51612707565b600082815260cb60205260409020546001600160a01b0316610eb55760405162461bcd60e51b815260206004820152601a60248201527f4e6f6e206578697374696e672070726f74656374696f6e206964000000000000604482015260640161063f565b600082815261012e60209081526040918290208251610160810184528154815260018201546001600160a01b0316928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a082015260068201805491929160c084019190610f2c90613244565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5890613244565b8015610fa55780601f10610f7a57610100808354040283529160200191610fa5565b820191906000526020600020905b815481529060010190602001808311610f8857829003601f168201915b50505050508152602001600782018054610fbe90613244565b80601f0160208091040260200160405190810160405280929190818152602001828054610fea90613244565b80156110375780601f1061100c57610100808354040283529160200191611037565b820191906000526020600020905b81548152906001019060200180831161101a57829003601f168201915b505050918352505060088201546020820152600982015460409091019060ff16600281111561107657634e487b7160e01b600052602160045260246000fd5b600281111561109557634e487b7160e01b600052602160045260246000fd5b8152602001600a820154815250509050919050565b6108e0338383611e0d565b6110bf3383611926565b6110db5760405162461bcd60e51b815260040161063f90613069565b6110e784848484611edc565b50505050565b600081815260cb60205260409020546060906001600160a01b031661116c5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161063f565b604080518082019091526007815266697066733a2f2f60c81b602082015261012f60405160200161119e929190612d90565b6040516020818303038152906040529050919050565b6000828152609760205260409020600101546111cf81611bc4565b6107758383611c54565b61012f80546111e790613244565b80601f016020809104026020016040519081016040528092919081815260200182805461121390613244565b80156112605780601f1061123557610100808354040283529160200191611260565b820191906000526020600020905b81548152906001019060200180831161124357829003601f168201915b505050505081565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661129281611bc4565b60408051610160810190915261012d5481526020808201906112b6908501856128f4565b6001600160a01b0316815260200183602001358152602001836040013581526020018360600135815260200183608001358152602001838060a001906112fc919061316e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060200161134360c085018561316e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060e0840135602082015260400161139961012085016101008601612bcc565b60028111156113b857634e487b7160e01b600052602160045260246000fd5b815261012084013560209182015261012d54600090815261012e825260409081902083518155838301516001820180546001600160a01b0319166001600160a01b03909216919091179055908301516002820155606083015160038201556080830151600482015560a0830151600582015560c0830151805191926114459260068501929091019061280d565b5060e0820151805161146191600784019160209091019061280d565b50610100820151600882015561012082015160098201805460ff1916600183600281111561149f57634e487b7160e01b600052602160045260246000fd5b02179055506101409190910151600a909101556114cb6114c260208401846128f4565b61012d54611f0f565b6114d860208301836128f4565b6001600160a01b031661012d547f19bbc7519e073520568318bda59e33b1c8e8a70ba891ba343d70788112cc51e28460200135856040013586606001358760800135888060a0019061152a919061316e565b61153760c08c018c61316e565b8c60e0013560405161155199989796959493929190613118565b60405180910390a361156b61012083016101008401612bcc565b600281111561158a57634e487b7160e01b600052602160045260246000fd5b61159760208401846128f4565b6001600160a01b031661012d547f2b34f70306452e1d6e04783621fc22bb573ce8d75d4200494bdb4a09bddd272d85606001358661012001356040516115e7929190918252602082015260400190565b60405180910390a461012d80549060006116008361327f565b91905055505050565b61161460003361205d565b7f3a02078fe6f8996987e50e710bee1b46db25a6c6b6768893676202cc6e308e2561012f838360405161164993929190612f3b565b60405180910390a161077561012f8383612789565b6060600061166b83610d22565b9050600081116116bd5760405162461bcd60e51b815260206004820152601860248201527f4f776e657220686173206e6f2070726f74656374696f6e730000000000000000604482015260640161063f565b60008167ffffffffffffffff8111156116e657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561171f57816020015b61170c612707565b8152602001906001900390816117045790505b50905060005b828110156117755761173785826108ff565b82828151811061175757634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061176d9061327f565b915050611725565b509392505050565b6033546001600160a01b031633146117d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161063f565b6001600160a01b03811661183c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161063f565b61184581611dbb565b50565b60006001600160e01b031982166380ac58cd60e01b148061052357506001600160e01b03198216635b5e139f60e01b14806105325750610532825b60006001600160e01b03198216637965db0b60e01b148061053257506301ffc9a760e01b6001600160e01b0319831614610532565b600081815260cd6020526040902080546001600160a01b0319166001600160a01b03841690811790915581906118ed82610cab565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081815260cb60205260408120546001600160a01b031661199f5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161063f565b60006119aa83610cab565b9050806001600160a01b0316846001600160a01b031614806119f157506001600160a01b03808216600090815260ce602090815260408083209388168352929052205460ff165b80611a155750836001600160a01b0316611a0a846105ca565b6001600160a01b0316145b949350505050565b826001600160a01b0316611a3082610cab565b6001600160a01b031614611a945760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161063f565b6001600160a01b038216611af65760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161063f565b611b018383836120c1565b611b0c6000826118b8565b6001600160a01b038316600090815260cc60205260408120805460019290611b359084906131ea565b90915550506001600160a01b038216600090815260cc60205260408120805460019290611b639084906131b3565b9091555050600081815260cb602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611845813361205d565b611bd88282610e0f565b6108e05760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611c103390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611c5e8282610e0f565b156108e05760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008054610100900460ff1615611d02578160ff166001148015611cde5750303b155b611cfa5760405162461bcd60e51b815260040161063f9061301b565b506000919050565b60005460ff808416911610611d295760405162461bcd60e51b815260040161063f9061301b565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16611d6f5760405162461bcd60e51b815260040161063f906130ba565b611d77612179565b611d7f6121a8565b61183c6000826121cf565b600054610100900460ff16611db15760405162461bcd60e51b815260040161063f906130ba565b6108e082826121d9565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415611e6f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161063f565b6001600160a01b03838116600081815260ce6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611ee7848484611a1d565b611ef384848484612227565b6110e75760405162461bcd60e51b815260040161063f90612fc9565b6001600160a01b038216611f655760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161063f565b600081815260cb60205260409020546001600160a01b031615611fca5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161063f565b611fd6600083836120c1565b6001600160a01b038216600090815260cc60205260408120805460019290611fff9084906131b3565b9091555050600081815260cb602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6120678282610e0f565b6108e05761207f816001600160a01b03166014612334565b61208a836020612334565b60405160200161209b929190612e15565b60408051601f198184030181529082905262461bcd60e51b825261063f91600401612f28565b6001600160a01b03831661211c576121178160fd8054600083815260fe60205260408120829055600182018355919091527f9346ac6dd7de6b96975fec380d4d994c4c12e6a8897544f22915316cc6cca2800155565b61213f565b816001600160a01b0316836001600160a01b03161461213f5761213f838261251d565b6001600160a01b03821661215657610775816125ba565b826001600160a01b0316826001600160a01b031614610775576107758282612693565b600054610100900460ff166121a05760405162461bcd60e51b815260040161063f906130ba565b610e0d6126d7565b600054610100900460ff16610e0d5760405162461bcd60e51b815260040161063f906130ba565b6108e08282611bce565b600054610100900460ff166122005760405162461bcd60e51b815260040161063f906130ba565b81516122139060c990602085019061280d565b5080516107759060ca90602084019061280d565b60006001600160a01b0384163b1561232957604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061226b903390899088908890600401612e8a565b602060405180830381600087803b15801561228557600080fd5b505af19250505080156122b5575060408051601f3d908101601f191682019092526122b291810190612bb0565b60015b61230f573d8080156122e3576040519150601f19603f3d011682016040523d82523d6000602084013e6122e8565b606091505b5080516123075760405162461bcd60e51b815260040161063f90612fc9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611a15565b506001949350505050565b606060006123438360026131cb565b61234e9060026131b3565b67ffffffffffffffff81111561237457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561239e576020820181803683370190505b509050600360fc1b816000815181106123c757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061240457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006124288460026131cb565b6124339060016131b3565b90505b60018111156124c7576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061247557634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061249957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936124c08161322d565b9050612436565b5083156125165760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161063f565b9392505050565b6000600161252a84610d22565b61253491906131ea565b600083815260fc6020526040902054909150808214612587576001600160a01b038416600090815260fb60209081526040808320858452825280832054848452818420819055835260fc90915290208190555b50600091825260fc602090815260408084208490556001600160a01b03909416835260fb81528383209183525290812055565b60fd546000906125cc906001906131ea565b600083815260fe602052604081205460fd805493945090928490811061260257634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060fd838154811061263157634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260fe909152604080822084905585825281205560fd80548061267757634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061269e83610d22565b6001600160a01b03909316600090815260fb60209081526040808320868452825280832085905593825260fc9052919091209190915550565b600054610100900460ff166126fe5760405162461bcd60e51b815260040161063f906130ba565b610e0d33611dbb565b6040518061016001604052806000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016060815260200160608152602001600081526020016000600281111561277c57634e487b7160e01b600052602160045260246000fd5b8152602001600081525090565b82805461279590613244565b90600052602060002090601f0160209004810192826127b757600085556127fd565b82601f106127d05782800160ff198235161785556127fd565b828001600101855582156127fd579182015b828111156127fd5782358255916020019190600101906127e2565b50612809929150612881565b5090565b82805461281990613244565b90600052602060002090601f01602090048101928261283b57600085556127fd565b82601f1061285457805160ff19168380011785556127fd565b828001600101855582156127fd579182015b828111156127fd578251825591602001919060010190612866565b5b808211156128095760008155600101612882565b80356001600160a01b0381168114611d4357600080fd5b60008083601f8401126128be578182fd5b50813567ffffffffffffffff8111156128d5578182fd5b6020830191508360208285010111156128ed57600080fd5b9250929050565b600060208284031215612905578081fd5b61251682612896565b60008060408385031215612920578081fd5b61292983612896565b915061293760208401612896565b90509250929050565b600080600060608486031215612954578081fd5b61295d84612896565b925061296b60208501612896565b9150604084013590509250925092565b60008060008060808587031215612990578081fd5b61299985612896565b93506129a760208601612896565b925060408501359150606085013567ffffffffffffffff808211156129ca578283fd5b818701915087601f8301126129dd578283fd5b8135818111156129ef576129ef6132b0565b604051601f8201601f19908116603f01168101908382118183101715612a1757612a176132b0565b816040528281528a6020848701011115612a2f578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215612a62578182fd5b612a6b83612896565b915060208301358015158114612a7f578182fd5b809150509250929050565b60008060008060008060006080888a031215612aa4578283fd5b612aad88612896565b9650602088013567ffffffffffffffff80821115612ac9578485fd5b612ad58b838c016128ad565b909850965060408a0135915080821115612aed578485fd5b612af98b838c016128ad565b909650945060608a0135915080821115612b11578384fd5b50612b1e8a828b016128ad565b989b979a50959850939692959293505050565b60008060408385031215612b43578182fd5b612b4c83612896565b946020939093013593505050565b600060208284031215612b6b578081fd5b5035919050565b60008060408385031215612b84578182fd5b8235915061293760208401612896565b600060208284031215612ba5578081fd5b8135612516816132c6565b600060208284031215612bc1578081fd5b8151612516816132c6565b600060208284031215612bdd578081fd5b813560038110612516578182fd5b60008060208385031215612bfd578182fd5b823567ffffffffffffffff811115612c13578283fd5b612c1f858286016128ad565b90969095509350505050565b600060208284031215612c3c578081fd5b813567ffffffffffffffff811115612c52578182fd5b82016101408185031215612516578182fd5b60008151808452612c7c816020860160208601613201565b601f01601f19169290920160200192915050565b60038110612cae57634e487b7160e01b600052602160045260246000fd5b9052565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000610160825184526020830151612cfe60208601826001600160a01b03169052565b5060408301516040850152606083015160608501526080830151608085015260a083015160a085015260c08301518160c0860152612d3e82860182612c64565b91505060e083015184820360e0860152612d588282612c64565b91505061010080840151818601525061012080840151612d7a82870182612c90565b5050610140928301519390920192909252919050565b600083516020612da38285838901613201565b8184019150828554612db481613244565b60018281168015612dcc5760018114612ddd57612e06565b60ff19841687528287019450612e06565b898852858820885b84811015612dfe57815489820152908301908701612de5565b505082870194505b50929998505050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612e4d816017850160208801613201565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612e7e816028840160208801613201565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612ebd90830184612c64565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b82811015612f1b57603f19888603018452612f09858351612cdb565b94509285019290850190600101612eed565b5092979650505050505050565b6020815260006125166020830184612c64565b604081526000808554612f4d81613244565b8060408601526060600180841660008114612f6f5760018114612f8357612fb1565b60ff19851688840152608088019550612fb1565b8a87526020808820885b86811015612fa85781548b8201870152908401908201612f8d565b8a018501975050505b50505050508281036020840152612ebd818587612cb2565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020815260006125166020830184612cdb565b89815288602082015287604082015286606082015260e06080820152600061314460e083018789612cb2565b82810360a0840152613157818688612cb2565b9150508260c08301529a9950505050505050505050565b6000808335601e19843603018112613184578283fd5b83018035915067ffffffffffffffff82111561319e578283fd5b6020019150368190038213156128ed57600080fd5b600082198211156131c6576131c661329a565b500190565b60008160001904831182151516156131e5576131e561329a565b500290565b6000828210156131fc576131fc61329a565b500390565b60005b8381101561321c578181015183820152602001613204565b838111156110e75750506000910152565b60008161323c5761323c61329a565b506000190190565b600181811c9082168061325857607f821691505b6020821081141561327957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156132935761329361329a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461184557600080fdfea2646970667358221220e0529d8ccc0670e7ec52917898f7b92aedf41e848006e1e00d130080283314b964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29805,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 29808,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 32662,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 29685,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 29797,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 32909,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 29301,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)29296_storage)"
      },
      {
        "astId": 29600,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 30966,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "_name",
        "offset": 0,
        "slot": "201",
        "type": "t_string_storage"
      },
      {
        "astId": 30968,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "202",
        "type": "t_string_storage"
      },
      {
        "astId": 30972,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 30976,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 30980,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 30986,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 31827,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 31992,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 31996,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 31999,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "_allTokens",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 32003,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 32319,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 26081,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "tokenIdCounter",
        "offset": 0,
        "slot": "301",
        "type": "t_uint256"
      },
      {
        "astId": 26086,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "protections",
        "offset": 0,
        "slot": "302",
        "type": "t_mapping(t_uint256,t_struct(ProtectionNFTDetails)28356_storage)"
      },
      {
        "astId": 26089,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
        "label": "protectionMetadataCID",
        "offset": 0,
        "slot": "303",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(DiscountNFTType)28224": {
        "encoding": "inplace",
        "label": "enum DiscountNFTType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)29296_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)29296_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(ProtectionNFTDetails)28356_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ProtectionNFTDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(ProtectionNFTDetails)28356_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ProtectionNFTDetails)28356_storage": {
        "encoding": "inplace",
        "label": "struct ProtectionNFTDetails",
        "members": [
          {
            "astId": 28334,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 28336,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 28338,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
            "label": "protectionStartTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 28340,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
            "label": "protectionEndTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 28342,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
            "label": "premiumCostUSD",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 28344,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
            "label": "lpTokensWorthAtBuyTimeUSD",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 28346,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
            "label": "token1Symbol",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 28348,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
            "label": "token2Symbol",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 28350,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
            "label": "policyPeriod",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 28353,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
            "label": "discountNFTType",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(DiscountNFTType)28224"
          },
          {
            "astId": 28355,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
            "label": "premiumCostDiscountUSD",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(RoleData)29296_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 29293,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 29295,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionNFT.sol:ILProtectionNFT",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}