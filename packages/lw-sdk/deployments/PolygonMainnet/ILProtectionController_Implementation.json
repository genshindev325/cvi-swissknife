{
  "address": "0x5fa994e5c6aF1Ed32a2C2AC3B4f47bED41f87aaa",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "token1Symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "token2Symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protectionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevPairCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPairCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevLiquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidity",
          "type": "uint256"
        }
      ],
      "name": "CollateralUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ILProtectionDiscountNFTControllerInterface",
          "name": "prevValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ILProtectionDiscountNFTControllerInterface",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "ILProtectionDiscountNFTControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "MaxProtectionsInUpkeepChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protectionStartTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protectionEndTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premiumCostUSD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "token1Symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "token2Symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "policyPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token1EntryPriceUSD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token2EntryPriceUSD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "ProtectionBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaidUSD",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protectionStartTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protectionEndTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premiumCostUSD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "token1Symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "token2Symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "policyPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token1EndPriceUSD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "token2EndPriceUSD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "ProtectionClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CVI_DECIMALS_TRUNCATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDITY_PROVIDER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PRECISION",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_token1Symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_token2Symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_lpTokensWorthAtBuyTimeUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPremiumCostUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_policyPeriod",
          "type": "uint256"
        }
      ],
      "name": "buyProtection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpTokensWorthAtBuyTimeUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_token1EntryPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_token2EntryPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_token1EndPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_token2EndPrice",
          "type": "uint256"
        }
      ],
      "name": "calcAmountToBePaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protectionId",
          "type": "uint256"
        }
      ],
      "name": "calcAmountToBePaidWithProtectionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpTokensWorthAtBuyTimeUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_expectedLPTokensValueGrowth",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_impermanentLoss",
          "type": "uint16"
        }
      ],
      "name": "calcEstimatedAmountToBePaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_token1Symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_token2Symbol",
          "type": "string"
        }
      ],
      "name": "calcMaxValueOfTokensWorthToProtect",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpTokensWorthAtBuyTimeUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_feeComponent",
          "type": "uint16"
        }
      ],
      "name": "calculateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_token1EntryPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_token2EntryPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_token1EndPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_token2EndPriceUSD",
          "type": "uint256"
        }
      ],
      "name": "calculateIL",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protectionId",
          "type": "uint256"
        }
      ],
      "name": "calculateOpenProtectionIL",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpTokensWorthAtBuyTimeUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalLPTokensWorthAtBuyTimeUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_expectedLPTokensValueGrowth",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_maxILProtected",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "A",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "X0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "C",
              "type": "int256"
            }
          ],
          "internalType": "struct PremiumParams",
          "name": "_premiumParams",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_cvi",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_premiumGrowthStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_premiumSlope",
          "type": "uint256"
        }
      ],
      "name": "calculateParameterizedPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_token1Symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_token2Symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_lpTokensWorthAtBuyTimeUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_policyPeriod",
          "type": "uint256"
        }
      ],
      "name": "calculatePremiumDetailsAndMaxAmountToBePaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premiumDiscount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeDiscount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountToBePaid",
          "type": "uint256"
        },
        {
          "internalType": "enum DiscountNFTType",
          "name": "discountNFTType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_protectionsIds",
          "type": "uint256[]"
        }
      ],
      "name": "closeProtections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "closedProtectionsWithMetadata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "protectionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1EntryPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token2EntryPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1EndPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token2EndPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountToBePaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountPaidOnPolicyClose",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mappingIdx",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "feeComponent",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cumulativeSumLPTokensWorthAtBuyTimeUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cviOracle",
      "outputs": [
        {
          "internalType": "contract CVIOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFinalizedProtectionsIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract ILProtectionConfigInterface",
          "name": "_protectionConfig",
          "type": "address"
        },
        {
          "internalType": "contract ILiquidityController",
          "name": "_liquidityController",
          "type": "address"
        },
        {
          "internalType": "contract ITokenPairRepository",
          "name": "_tokenPairRepository",
          "type": "address"
        },
        {
          "internalType": "contract ILProtectionNFTInterface",
          "name": "_protectionNFT",
          "type": "address"
        },
        {
          "internalType": "contract ILProtectionDiscountNFTControllerInterface",
          "name": "_protectionDiscountNFTController",
          "type": "address"
        },
        {
          "internalType": "contract CVIOracle",
          "name": "_cviOracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxProtectionsInUpkeep",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityController",
      "outputs": [
        {
          "internalType": "contract ILiquidityController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxProtectionsInUpkeep",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "openProtectionsIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "openProtectionsWithMetadata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "protectionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1EntryPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token2EntryPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1EndPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token2EndPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountToBePaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountPaidOnPolicyClose",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mappingIdx",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "feeComponent",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "pairsCollaterals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protectionConfig",
      "outputs": [
        {
          "internalType": "contract ILProtectionConfigInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protectionDiscountNFTController",
      "outputs": [
        {
          "internalType": "contract ILProtectionDiscountNFTControllerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protectionNFT",
      "outputs": [
        {
          "internalType": "contract ILProtectionNFTInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILProtectionDiscountNFTControllerInterface",
          "name": "_newInstance",
          "type": "address"
        }
      ],
      "name": "setILProtectionDiscountNFTController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_maxILProtected",
          "type": "uint16"
        }
      ],
      "name": "setMaxILProtected",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_maxProtectionsInUpkeep",
          "type": "uint8"
        }
      ],
      "name": "setMaxProtectionsInUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPairRepository",
      "outputs": [
        {
          "internalType": "contract ITokenPairRepository",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLPTokensWorthAtBuyTimeUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a4d74e51ff08769ea5f60532f4b5c691a5563e89e9681d10c65a2352b3ccc14",
  "receipt": {
    "to": null,
    "from": "0x0b3D7b3F149214f8f5281b5aE613B090fD39BD3F",
    "contractAddress": "0x5fa994e5c6aF1Ed32a2C2AC3B4f47bED41f87aaa",
    "transactionIndex": 41,
    "gasUsed": "5149770",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000400000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000020000400000000000000000000000004000000000000000000001000000000000080000000000000000100000000000000000000000000000000000000000000000000000000004000000000000100020",
    "blockHash": "0x2a4915a7627e818fd2c29369b15337dbed90e792988ac3a7c8c2404c3966358c",
    "transactionHash": "0x5a4d74e51ff08769ea5f60532f4b5c691a5563e89e9681d10c65a2352b3ccc14",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 32550872,
        "transactionHash": "0x5a4d74e51ff08769ea5f60532f4b5c691a5563e89e9681d10c65a2352b3ccc14",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000b3d7b3f149214f8f5281b5ae613b090fd39bd3f",
          "0x000000000000000000000000127685d6dd6683085da4b6a041efcef1681e5c9c"
        ],
        "data": "0x000000000000000000000000000000000000000000000000025bc1b8b58d3528000000000000000000000000000000000000000000000000176e32fe20258f2c000000000000000000000000000000000000000000000179bdd8cd54f28f1a54000000000000000000000000000000000000000000000000151271456a985a04000000000000000000000000000000000000000000000179c0348f0da81c4f7c",
        "logIndex": 191,
        "blockHash": "0x2a4915a7627e818fd2c29369b15337dbed90e792988ac3a7c8c2404c3966358c"
      }
    ],
    "blockNumber": 32550872,
    "cumulativeGasUsed": "13561085",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 28,
  "solcInputHash": "3e38164a73c777cd780c57ef82a1826e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"token2Symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevPairCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPairCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidity\",\"type\":\"uint256\"}],\"name\":\"CollateralUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ILProtectionDiscountNFTControllerInterface\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ILProtectionDiscountNFTControllerInterface\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ILProtectionDiscountNFTControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxProtectionsInUpkeepChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protectionStartTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protectionEndTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premiumCostUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"token2Symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"policyPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token1EntryPriceUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token2EntryPriceUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"ProtectionBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaidUSD\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protectionStartTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protectionEndTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premiumCostUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"token2Symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"policyPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token1EndPriceUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token2EndPriceUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"ProtectionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CVI_DECIMALS_TRUNCATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDITY_PROVIDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PRECISION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_token1Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_token2Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokensWorthAtBuyTimeUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPremiumCostUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_policyPeriod\",\"type\":\"uint256\"}],\"name\":\"buyProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokensWorthAtBuyTimeUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token1EntryPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token2EntryPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token1EndPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token2EndPrice\",\"type\":\"uint256\"}],\"name\":\"calcAmountToBePaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protectionId\",\"type\":\"uint256\"}],\"name\":\"calcAmountToBePaidWithProtectionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokensWorthAtBuyTimeUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_expectedLPTokensValueGrowth\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_impermanentLoss\",\"type\":\"uint16\"}],\"name\":\"calcEstimatedAmountToBePaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_token1Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_token2Symbol\",\"type\":\"string\"}],\"name\":\"calcMaxValueOfTokensWorthToProtect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokensWorthAtBuyTimeUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_feeComponent\",\"type\":\"uint16\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token1EntryPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token2EntryPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token1EndPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token2EndPriceUSD\",\"type\":\"uint256\"}],\"name\":\"calculateIL\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protectionId\",\"type\":\"uint256\"}],\"name\":\"calculateOpenProtectionIL\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokensWorthAtBuyTimeUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalLPTokensWorthAtBuyTimeUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_expectedLPTokensValueGrowth\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_maxILProtected\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"A\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"X0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"C\",\"type\":\"int256\"}],\"internalType\":\"struct PremiumParams\",\"name\":\"_premiumParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_cvi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_premiumGrowthStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_premiumSlope\",\"type\":\"uint256\"}],\"name\":\"calculateParameterizedPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_token1Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_token2Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokensWorthAtBuyTimeUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_policyPeriod\",\"type\":\"uint256\"}],\"name\":\"calculatePremiumDetailsAndMaxAmountToBePaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountToBePaid\",\"type\":\"uint256\"},{\"internalType\":\"enum DiscountNFTType\",\"name\":\"discountNFTType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_protectionsIds\",\"type\":\"uint256[]\"}],\"name\":\"closeProtections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"closedProtectionsWithMetadata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1EntryPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2EntryPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1EndPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2EndPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountToBePaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPaidOnPolicyClose\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mappingIdx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"feeComponent\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeSumLPTokensWorthAtBuyTimeUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cviOracle\",\"outputs\":[{\"internalType\":\"contract CVIOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFinalizedProtectionsIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract ILProtectionConfigInterface\",\"name\":\"_protectionConfig\",\"type\":\"address\"},{\"internalType\":\"contract ILiquidityController\",\"name\":\"_liquidityController\",\"type\":\"address\"},{\"internalType\":\"contract ITokenPairRepository\",\"name\":\"_tokenPairRepository\",\"type\":\"address\"},{\"internalType\":\"contract ILProtectionNFTInterface\",\"name\":\"_protectionNFT\",\"type\":\"address\"},{\"internalType\":\"contract ILProtectionDiscountNFTControllerInterface\",\"name\":\"_protectionDiscountNFTController\",\"type\":\"address\"},{\"internalType\":\"contract CVIOracle\",\"name\":\"_cviOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxProtectionsInUpkeep\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityController\",\"outputs\":[{\"internalType\":\"contract ILiquidityController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxProtectionsInUpkeep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openProtectionsIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openProtectionsWithMetadata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1EntryPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2EntryPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1EndPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token2EndPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountToBePaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPaidOnPolicyClose\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mappingIdx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"feeComponent\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"pairsCollaterals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionConfig\",\"outputs\":[{\"internalType\":\"contract ILProtectionConfigInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionDiscountNFTController\",\"outputs\":[{\"internalType\":\"contract ILProtectionDiscountNFTControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionNFT\",\"outputs\":[{\"internalType\":\"contract ILProtectionNFTInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILProtectionDiscountNFTControllerInterface\",\"name\":\"_newInstance\",\"type\":\"address\"}],\"name\":\"setILProtectionDiscountNFTController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_maxILProtected\",\"type\":\"uint16\"}],\"name\":\"setMaxILProtected\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_maxProtectionsInUpkeep\",\"type\":\"uint8\"}],\"name\":\"setMaxProtectionsInUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPairRepository\",\"outputs\":[{\"internalType\":\"contract ITokenPairRepository\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPTokensWorthAtBuyTimeUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@coti-cvi/contracts-il/contracts/ILProtectionController.sol\":\"ILProtectionController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easilly be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xc4a031d4b6e3fa6d40a09bfbf99d3fdd22bbe77ba97065bc790b4cab22adee85\",\"license\":\"MIT\"},\"@coti-cvi/contracts-cvi/contracts/CVIOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./interfaces/ICVIOracle.sol\\\";\\nimport \\\"./interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract CVIOracle is ICVIOracle, Ownable {\\n\\n    uint256 private constant PRECISION_DECIMALS = 10000;\\n    uint256 private constant CVI_DECIMALS_TRUNCATE = 1e16;\\n\\n    AggregatorV3Interface public immutable cviAggregator;\\n    AggregatorV3Interface public cviDeviationAggregator;\\n    bool public deviationCheck = false;\\n    uint16 public maxDeviation = 1000;\\n\\n    uint256 public maxCVIValue;\\n\\n    constructor(AggregatorV3Interface _cviAggregator, AggregatorV3Interface _cviDeviationAggregator, uint256 _maxCVIValue) {\\n    \\tcviAggregator = _cviAggregator;\\n        cviDeviationAggregator = _cviDeviationAggregator;\\n        maxCVIValue = _maxCVIValue;\\n    }\\n\\n    function getCVIRoundData(uint80 _roundId) external view override returns (uint16 cviValue, uint256 cviTimestamp) {\\n        (, int256 cviOracleValue,, uint256 cviOracleTimestamp,) = cviAggregator.getRoundData(_roundId);\\n        cviTimestamp = cviOracleTimestamp;\\n        cviValue = getTruncatedCVIValue(cviOracleValue);\\n    }\\n\\n    function getCVILatestRoundData() external view override returns (uint16 cviValue, uint80 cviRoundId, uint256 cviTimestamp) {\\n        (uint80 oracleRoundId, int256 cviOracleValue,, uint256 oracleTimestamp,) = cviAggregator.latestRoundData();\\n        uint16 truncatedCVIOracleValue = getTruncatedCVIValue(cviOracleValue);\\n\\n        if (deviationCheck) {\\n            (, int256 cviDeviationOracleValue,,,) = cviDeviationAggregator.latestRoundData();\\n            uint16 truncatedCVIDeviationOracleValue = getTruncatedCVIValue(cviDeviationOracleValue);\\n\\n            uint256 deviation = truncatedCVIDeviationOracleValue > truncatedCVIOracleValue ? truncatedCVIDeviationOracleValue - truncatedCVIOracleValue : truncatedCVIOracleValue - truncatedCVIDeviationOracleValue;\\n\\n            require(deviation * PRECISION_DECIMALS / truncatedCVIDeviationOracleValue <= maxDeviation, \\\"Deviation too large\\\");\\n        }\\n\\n        return (truncatedCVIOracleValue, oracleRoundId, oracleTimestamp);\\n    }\\n\\n    function setDeviationCheck(bool _newDeviationCheck) external override onlyOwner {\\n        deviationCheck = _newDeviationCheck;\\n    }\\n\\n    function setMaxDeviation(uint16 _newMaxDeviation) external override onlyOwner {\\n        maxDeviation = _newMaxDeviation;\\n    }\\n\\n    function getTruncatedCVIValue(int256 cviOracleValue) private view returns (uint16) {\\n        uint256 cviValue = uint256(cviOracleValue);\\n        if (cviValue > maxCVIValue) {\\n            require(uint16(maxCVIValue / CVI_DECIMALS_TRUNCATE) > 0, \\\"CVI must be positive\\\");\\n            return uint16(maxCVIValue / CVI_DECIMALS_TRUNCATE);\\n        }\\n\\n        require(uint16(cviValue / CVI_DECIMALS_TRUNCATE) > 0, \\\"CVI must be positive\\\");\\n        return uint16(cviValue / CVI_DECIMALS_TRUNCATE);\\n    }\\n}\\n\",\"keccak256\":\"0x07a45bf7893d5ca21b51091dd694dbc8a783677c1e98a86776c45a8516a3bf1c\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface AggregatorV3Interface {\\n\\n    function decimals() external view returns (uint8);\\n    function description() external view returns (string memory);\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0xced5b5caed5589268ef29bffb270ce32e3d5611a80cb0a67755276a1a5c82669\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/ICVIOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface ICVIOracle {\\n    function getCVIRoundData(uint80 roundId) external view returns (uint16 cviValue, uint256 cviTimestamp);\\n    function getCVILatestRoundData() external view returns (uint16 cviValue, uint80 cviRoundId, uint256 cviTimestamp);\\n\\n    function setDeviationCheck(bool newDeviationCheck) external;\\n    function setMaxDeviation(uint16 newMaxDeviation) external;\\n}\\n\",\"keccak256\":\"0x81a01f1aef798fd75e40fc420568f3eab710604615e8cc4b32292e86ceabca08\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-il/contracts/BaseController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport './interfaces/IBaseController.sol';\\n\\nabstract contract BaseController is IBaseController, OwnableUpgradeable, AccessControlUpgradeable {\\n  uint16 public constant MAX_PRECISION = 10000;\\n\\n  modifier onlyAdmin() {\\n    _checkRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n    _;\\n  }\\n\\n  modifier onlyValidAddress(address addr) {\\n    require(addr != address(0), 'Invalid address');\\n\\n    _;\\n  }\\n\\n  function initialize(address _owner) internal onlyInitializing {\\n    OwnableUpgradeable.__Ownable_init();\\n    AccessControlUpgradeable.__AccessControl_init();\\n\\n    _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n\\n    _transferOwnership(_owner);\\n  }\\n}\\n\",\"keccak256\":\"0xa2088b57b43ec091fba514001458c6e914ed541408a1a299d6b509e42be050c0\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-il/contracts/ILProtectionController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\nimport './BaseController.sol';\\nimport './interfaces/ILProtectionControllerInterface.sol';\\nimport './libraries/ILUtils.sol';\\nimport './libraries/PremiumCalculator.sol';\\nimport './libraries/MathUtils.sol';\\n\\nstruct ILProtectionWithMetadata {\\n  uint256 protectionId;\\n  uint256 token1EntryPriceUSD;\\n  uint256 token2EntryPriceUSD;\\n  uint256 token1EndPriceUSD;\\n  uint256 token2EndPriceUSD;\\n  uint256 maxAmountToBePaid;\\n  uint256 amountPaidOnPolicyClose;\\n  uint256 mappingIdx;\\n  bool exists;\\n  uint256 fee;\\n  uint16 feeComponent;\\n}\\n\\ncontract ILProtectionController is ILProtectionControllerInterface, BaseController {\\n  bytes32 public constant LIQUIDITY_PROVIDER_ROLE = keccak256('LIQUIDITY_PROVIDER_ROLE');\\n  uint256 public constant CVI_DECIMALS_TRUNCATE = 1e16;\\n\\n  ILProtectionNFTInterface public override protectionNFT;\\n  ILProtectionConfigInterface public override protectionConfig;\\n  ITokenPairRepository public override tokenPairRepository;\\n  ILiquidityController public override liquidityController;\\n  CVIOracle public override cviOracle;\\n\\n  uint256 public override collateral;\\n  uint256 public override totalLPTokensWorthAtBuyTimeUSD;\\n  uint256[] public openProtectionsIds;\\n  mapping(uint256 => ILProtectionWithMetadata) public openProtectionsWithMetadata;\\n  mapping(uint256 => ILProtectionWithMetadata) public closedProtectionsWithMetadata;\\n  uint256 public maxProtectionsInUpkeep;\\n  uint256 public override cumulativeSumLPTokensWorthAtBuyTimeUSD;\\n  mapping(string => mapping(string => uint256)) public pairsCollaterals;\\n\\n  ILProtectionDiscountNFTControllerInterface public override protectionDiscountNFTController;\\n\\n  modifier noOpenProtections() {\\n    require(openProtectionsIds.length == 0, 'Cannot change value with existing open protections');\\n\\n    _;\\n  }\\n\\n  function initialize(\\n    address _owner,\\n    ILProtectionConfigInterface _protectionConfig,\\n    ILiquidityController _liquidityController,\\n    ITokenPairRepository _tokenPairRepository,\\n    ILProtectionNFTInterface _protectionNFT,\\n    ILProtectionDiscountNFTControllerInterface _protectionDiscountNFTController,\\n    CVIOracle _cviOracle,\\n    uint256 _maxProtectionsInUpkeep\\n  ) external initializer {\\n    BaseController.initialize(_owner);\\n\\n    protectionConfig = _protectionConfig;\\n    liquidityController = _liquidityController;\\n    tokenPairRepository = _tokenPairRepository;\\n    protectionNFT = _protectionNFT;\\n    protectionDiscountNFTController = _protectionDiscountNFTController;\\n    cviOracle = _cviOracle;\\n    maxProtectionsInUpkeep = _maxProtectionsInUpkeep;\\n  }\\n\\n  function addLiquidity(uint256 _amount) external override onlyRole(LIQUIDITY_PROVIDER_ROLE) {\\n    require(_amount > 0, 'Invalid liquidity amount');\\n\\n    liquidityController.addLiquidity(msg.sender, _amount);\\n  }\\n\\n  function withdrawLiquidity(uint256 _amount, address _to)\\n    external\\n    override\\n    onlyRole(LIQUIDITY_PROVIDER_ROLE)\\n    onlyValidAddress(_to)\\n  {\\n    uint256 liquidity = liquidityController.liquidity();\\n\\n    require(_amount > 0 && _amount <= liquidity, 'Invalid amount to withdraw');\\n    require(collateral <= liquidity - _amount, 'Not enough collateral');\\n\\n    liquidityController.withdrawLiquidity(_amount, _to);\\n  }\\n\\n  function buyProtection(\\n    string calldata _token1Symbol,\\n    string calldata _token2Symbol,\\n    uint256 _lpTokensWorthAtBuyTimeUSD,\\n    uint256 _maxPremiumCostUSD,\\n    uint256 _policyPeriod\\n  ) external override {\\n    require(protectionConfig.policyPeriodExists(_policyPeriod), 'Invalid policy period');\\n    require(_lpTokensWorthAtBuyTimeUSD > 0, 'lpTokensWorthAtBuyTimeUSD value must be larger than 0');\\n    require(protectionConfig.buyILProtectionEnabled(), 'Buying protection is disabled');\\n    require(liquidityController.liquidity() > 0, 'No liquidity');\\n\\n    TokenPair memory pair = tokenPairRepository.getOrderedTokenPairIfExists(_token1Symbol, _token2Symbol);\\n\\n    totalLPTokensWorthAtBuyTimeUSD += _lpTokensWorthAtBuyTimeUSD;\\n    cumulativeSumLPTokensWorthAtBuyTimeUSD += _lpTokensWorthAtBuyTimeUSD;\\n\\n    (\\n      uint256 premiumCost,\\n      uint256 premiumCostDiscount,\\n      uint256 fee,\\n      uint256 feeDiscount,\\n      uint256 maxAmountToBePaid,\\n      DiscountNFTType discountNFTType\\n    ) = calculatePremiumDetailsAndMaxAmountToBePaid(\\n        msg.sender,\\n        pair.token1Symbol,\\n        pair.token2Symbol,\\n        _lpTokensWorthAtBuyTimeUSD,\\n        _policyPeriod\\n      );\\n\\n    collateral += maxAmountToBePaid;\\n\\n    require(premiumCost > 0, 'Premium cost is too low');\\n\\n    require(premiumCost <= _maxPremiumCostUSD, 'Max premium cost exceeded');\\n\\n    uint256 premiumCostAfterDiscount = premiumCost - premiumCostDiscount;\\n\\n    require(\\n      collateral < liquidityController.liquidity() + premiumCostAfterDiscount,\\n      'Not enough collateral to pay back buyer'\\n    );\\n\\n    validateAndUpdatePairCollateral(\\n      pair.token1Symbol,\\n      pair.token2Symbol,\\n      maxAmountToBePaid,\\n      liquidityController.liquidity() + premiumCostAfterDiscount\\n    );\\n\\n    uint256 createdProtectionId = protectionNFT.tokenIdCounter();\\n\\n    if (premiumCostAfterDiscount > 0) {\\n      if (fee - feeDiscount > 0) {\\n        liquidityController.addLiquidityWithProtectionFee(\\n          createdProtectionId,\\n          msg.sender,\\n          premiumCostAfterDiscount,\\n          fee - feeDiscount,\\n          protectionConfig.feeComponent()\\n        );\\n      } else {\\n        liquidityController.addLiquidity(msg.sender, premiumCostAfterDiscount);\\n      }\\n    }\\n\\n    if (premiumCostDiscount > 0) {\\n      protectionDiscountNFTController.markDiscountAsUsed(msg.sender);\\n    }\\n\\n    afterBuyProtectionOperations(\\n      msg.sender,\\n      pair,\\n      createdProtectionId,\\n      _lpTokensWorthAtBuyTimeUSD,\\n      _policyPeriod,\\n      premiumCost,\\n      premiumCostDiscount,\\n      fee,\\n      feeDiscount,\\n      discountNFTType,\\n      maxAmountToBePaid\\n    );\\n  }\\n\\n  function closeProtections(uint256[] memory _protectionsIds) public override {\\n    require(_protectionsIds.length > 0, 'Protections Ids array is empty');\\n\\n    for (uint256 i; i < _protectionsIds.length; i++) {\\n      ILProtectionWithMetadata storage protectionWithMetadata = openProtectionsWithMetadata[_protectionsIds[i]];\\n\\n      if (!protectionWithMetadata.exists) {\\n        continue;\\n      }\\n\\n      ProtectionNFTDetails memory protectionDetails = protectionNFT.getProtectionDetails(_protectionsIds[i]);\\n\\n      if (protectionDetails.protectionEndTimestamp <= block.timestamp) {\\n        uint256 token1Price = tokenPairRepository.getTokenPrice(\\n          protectionDetails.token1Symbol,\\n          protectionDetails.token2Symbol,\\n          true\\n        );\\n\\n        uint256 token2Price = tokenPairRepository.getTokenPrice(\\n          protectionDetails.token1Symbol,\\n          protectionDetails.token2Symbol,\\n          false\\n        );\\n\\n        (uint256 amountToBePaid, bool isBelowMin) = calcAmountToBePaidWithProtectionDetails(\\n          protectionDetails,\\n          protectionWithMetadata,\\n          token1Price,\\n          token2Price\\n        );\\n\\n        if (!isBelowMin) {\\n          liquidityController.withdrawLiquidity(amountToBePaid, protectionDetails.owner);\\n        }\\n\\n        protectionWithMetadata.token1EndPriceUSD = token1Price;\\n        protectionWithMetadata.token2EndPriceUSD = token2Price;\\n        protectionWithMetadata.amountPaidOnPolicyClose = amountToBePaid;\\n\\n        collateral -= protectionWithMetadata.maxAmountToBePaid;\\n        pairsCollaterals[protectionDetails.token1Symbol][protectionDetails.token2Symbol] -= protectionWithMetadata\\n          .maxAmountToBePaid;\\n\\n        totalLPTokensWorthAtBuyTimeUSD -= protectionDetails.lpTokensWorthAtBuyTimeUSD;\\n\\n        if (openProtectionsIds.length > 1) {\\n          uint256 topProtectionId = openProtectionsIds[openProtectionsIds.length - 1];\\n          openProtectionsIds[protectionWithMetadata.mappingIdx] = topProtectionId;\\n          openProtectionsWithMetadata[topProtectionId].mappingIdx = protectionWithMetadata.mappingIdx;\\n        }\\n\\n        openProtectionsIds.pop();\\n\\n        closedProtectionsWithMetadata[protectionDetails.id] = protectionWithMetadata;\\n        delete openProtectionsWithMetadata[protectionDetails.id];\\n\\n        emit ProtectionClosed(\\n          amountToBePaid,\\n          protectionDetails.id,\\n          protectionDetails.owner,\\n          protectionDetails.protectionStartTimestamp,\\n          protectionDetails.protectionEndTimestamp,\\n          protectionDetails.premiumCostUSD,\\n          protectionDetails.token1Symbol,\\n          protectionDetails.token2Symbol,\\n          protectionDetails.policyPeriod,\\n          token1Price,\\n          token2Price,\\n          collateral\\n        );\\n\\n        emitCollateralUpdatedEvent(\\n          protectionDetails.token1Symbol,\\n          protectionDetails.token2Symbol,\\n          protectionDetails.id,\\n          pairsCollaterals[protectionDetails.token1Symbol][protectionDetails.token2Symbol] +\\n            closedProtectionsWithMetadata[protectionDetails.id].maxAmountToBePaid,\\n          pairsCollaterals[protectionDetails.token1Symbol][protectionDetails.token2Symbol],\\n          collateral + closedProtectionsWithMetadata[protectionDetails.id].maxAmountToBePaid,\\n          collateral,\\n          liquidityController.liquidity() + amountToBePaid,\\n          liquidityController.liquidity()\\n        );\\n      }\\n    }\\n  }\\n\\n  function checkUpkeep(\\n    bytes calldata /* _checkData*/\\n  ) external view override returns (bool upkeepNeeded, bytes memory performData) {\\n    uint256[] memory finalizedProtectionsIds = getFinalizedProtectionsIds();\\n\\n    if (finalizedProtectionsIds.length > 0) {\\n      upkeepNeeded = true;\\n\\n      uint256 safeProtectionsIdsLen = finalizedProtectionsIds.length > maxProtectionsInUpkeep\\n        ? maxProtectionsInUpkeep\\n        : finalizedProtectionsIds.length;\\n\\n      uint256[] memory safeProtectionIds = new uint256[](safeProtectionsIdsLen);\\n\\n      for (uint256 i = 0; i < safeProtectionsIdsLen; i++) {\\n        safeProtectionIds[i] = finalizedProtectionsIds[i];\\n      }\\n\\n      performData = abi.encode(safeProtectionIds);\\n    } else {\\n      upkeepNeeded = false;\\n    }\\n  }\\n\\n  function performUpkeep(bytes calldata _performData) external override {\\n    uint256[] memory protectionsIds = abi.decode(_performData, (uint256[]));\\n\\n    closeProtections(protectionsIds);\\n  }\\n\\n  function setMaxILProtected(uint16 _maxILProtected) external override onlyAdmin noOpenProtections {\\n    protectionConfig.setMaxILProtected(_maxILProtected);\\n  }\\n\\n  function setMaxProtectionsInUpkeep(uint8 _maxProtectionsInUpkeep) external override onlyAdmin {\\n    require(_maxProtectionsInUpkeep > 0, 'invalid maxProtectionsInUpkeep value');\\n\\n    emit MaxProtectionsInUpkeepChanged(maxProtectionsInUpkeep, _maxProtectionsInUpkeep);\\n\\n    maxProtectionsInUpkeep = _maxProtectionsInUpkeep;\\n  }\\n\\n  function setILProtectionDiscountNFTController(ILProtectionDiscountNFTControllerInterface _newInstance)\\n    external\\n    override\\n    onlyAdmin\\n    onlyValidAddress(address(_newInstance))\\n  {\\n    emit ILProtectionDiscountNFTControllerChanged(protectionDiscountNFTController, _newInstance);\\n\\n    protectionDiscountNFTController = _newInstance;\\n  }\\n\\n  function getFinalizedProtectionsIds() public view override returns (uint256[] memory) {\\n    uint256[] memory finalizedProtectionIds = new uint256[](getNumOfFinalizedProtections());\\n    uint256 count;\\n\\n    for (uint256 i; i < openProtectionsIds.length; i++) {\\n      ProtectionNFTDetails memory protectionDetails = protectionNFT.getProtectionDetails(openProtectionsIds[i]);\\n\\n      if (protectionDetails.protectionEndTimestamp <= block.timestamp) {\\n        finalizedProtectionIds[count++] = openProtectionsIds[i];\\n      }\\n    }\\n\\n    return finalizedProtectionIds;\\n  }\\n\\n  function calculateParameterizedPremium(\\n    uint256 _lpTokensWorthAtBuyTimeUSD,\\n    uint256 _totalLPTokensWorthAtBuyTimeUSD,\\n    uint16 _expectedLPTokensValueGrowth,\\n    uint256 _liquidity,\\n    uint16 _maxILProtected,\\n    PremiumParams calldata _premiumParams,\\n    uint256 _cvi,\\n    uint256 _premiumGrowthStart,\\n    uint256 _premiumSlope\\n  ) public pure override returns (uint256) {\\n    require(_liquidity > 0, 'Liquidity must be larger than 0');\\n\\n    uint256 estimatedCollateral = calcEstimatedAmountToBePaid(\\n      _totalLPTokensWorthAtBuyTimeUSD + _lpTokensWorthAtBuyTimeUSD,\\n      _expectedLPTokensValueGrowth,\\n      _maxILProtected\\n    );\\n\\n    require(estimatedCollateral <= _liquidity, 'Collateral must be smaller than liquidity');\\n\\n    return\\n      PremiumCalculator.calculatePremium(\\n        _lpTokensWorthAtBuyTimeUSD,\\n        estimatedCollateral,\\n        _liquidity,\\n        _premiumParams,\\n        _cvi,\\n        _premiumGrowthStart,\\n        _premiumSlope\\n      );\\n  }\\n\\n  function calculatePremiumDetailsAndMaxAmountToBePaid(\\n    address _buyer,\\n    string memory _token1Symbol,\\n    string memory _token2Symbol,\\n    uint256 _lpTokensWorthAtBuyTimeUSD,\\n    uint256 _policyPeriod\\n  )\\n    public\\n    view\\n    override\\n    returns (\\n      uint256 premium,\\n      uint256 premiumDiscount,\\n      uint256 fee,\\n      uint256 feeDiscount,\\n      uint256 maxAmountToBePaid,\\n      DiscountNFTType discountNFTType\\n    )\\n  {\\n    require(\\n      _lpTokensWorthAtBuyTimeUSD <= calcMaxValueOfTokensWorthToProtect(_token1Symbol, _token2Symbol),\\n      'lpTokensWorthAtBuyTimeUSD > maxValueOfTokensWorthToProtect'\\n    );\\n\\n    uint256 liquidity = liquidityController.liquidity();\\n\\n    PremiumParams memory premiumParams = tokenPairRepository.getPremiumParams(\\n      _token1Symbol,\\n      _token2Symbol,\\n      _policyPeriod\\n    );\\n\\n    maxAmountToBePaid = calcEstimatedAmountToBePaid(\\n      _lpTokensWorthAtBuyTimeUSD,\\n      protectionConfig.expectedLPTokensValueGrowth(),\\n      protectionConfig.maxILProtected()\\n    );\\n\\n    premium = PremiumCalculator.calculatePremium(\\n      _lpTokensWorthAtBuyTimeUSD,\\n      collateral + maxAmountToBePaid,\\n      liquidity,\\n      premiumParams,\\n      getCVI(),\\n      protectionConfig.premiumGrowthStart(),\\n      protectionConfig.premiumSlope()\\n    );\\n\\n    fee = calculateFee(_lpTokensWorthAtBuyTimeUSD, protectionConfig.feeComponent());\\n\\n    DiscountNFTDetails memory discountDetails = protectionDiscountNFTController.getDiscountDetails(_buyer);\\n    discountNFTType = discountDetails.discountType;\\n\\n    uint256 premiumAfterWorthDeduction;\\n    uint256 feeAfterWorthDeduction;\\n\\n    if (\\n      protectionDiscountNFTController.enabled() && discountNFTType != DiscountNFTType.NONE && !discountDetails.isUsed\\n    ) {\\n      if (discountDetails.discountType == DiscountNFTType.DIAMOND) {\\n        if (_lpTokensWorthAtBuyTimeUSD > discountDetails.freeOfChargeTokensWorth) {\\n          uint256 actualTokensWorth = _lpTokensWorthAtBuyTimeUSD - discountDetails.freeOfChargeTokensWorth;\\n\\n          premiumAfterWorthDeduction =\\n            (PremiumCalculator.calculatePremium(\\n              actualTokensWorth,\\n              collateral + maxAmountToBePaid,\\n              liquidity,\\n              premiumParams,\\n              getCVI(),\\n              protectionConfig.premiumGrowthStart(),\\n              protectionConfig.premiumSlope()\\n            ) * (MAX_PRECISION - discountDetails.premiumDiscountComponent)) /\\n            MAX_PRECISION;\\n          feeAfterWorthDeduction =\\n            (calculateFee(actualTokensWorth, protectionConfig.feeComponent()) *\\n              (MAX_PRECISION - discountDetails.premiumDiscountComponent)) /\\n            MAX_PRECISION;\\n        }\\n        // GOLD\\n      } else {\\n        feeAfterWorthDeduction = (fee * (MAX_PRECISION - discountDetails.premiumDiscountComponent)) / MAX_PRECISION;\\n\\n        premiumAfterWorthDeduction =\\n          (premium * (MAX_PRECISION - discountDetails.premiumDiscountComponent)) /\\n          MAX_PRECISION;\\n      }\\n    } else {\\n      premiumAfterWorthDeduction = premium;\\n      feeAfterWorthDeduction = fee;\\n    }\\n\\n    premiumDiscount = premium - premiumAfterWorthDeduction;\\n    feeDiscount = fee - feeAfterWorthDeduction;\\n  }\\n\\n  function calcMaxValueOfTokensWorthToProtect(string memory _token1Symbol, string memory _token2Symbol)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    TokenPair memory pair = tokenPairRepository.getOrderedTokenPairIfExists(_token1Symbol, _token2Symbol);\\n\\n    uint256 tokensValueGrowth = protectionConfig.expectedLPTokensValueGrowth();\\n\\n    uint256 denominator = (tokensValueGrowth * MAX_PRECISION) /\\n      (MAX_PRECISION - protectionConfig.maxILProtected()) -\\n      tokensValueGrowth;\\n\\n    uint256 liquidity = liquidityController.liquidity();\\n    uint256 collateralCap = calcCollateralCap(liquidity, _token1Symbol, _token2Symbol);\\n\\n    if (collateralCap > pairsCollaterals[pair.token1Symbol][pair.token2Symbol]) {\\n      uint256 liquidityDelta = MathUtils.min(\\n        collateralCap - pairsCollaterals[pair.token1Symbol][pair.token2Symbol],\\n        liquidity - collateral\\n      );\\n\\n      return (liquidityDelta * MAX_PRECISION) / denominator;\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  function calcAmountToBePaidWithProtectionId(uint256 _protectionId) public view override returns (uint256) {\\n    require(openProtectionsWithMetadata[_protectionId].exists, \\\"Protection is either closed or doesn't exist\\\");\\n\\n    ProtectionNFTDetails memory protection = protectionNFT.getProtectionDetails(_protectionId);\\n    ILProtectionWithMetadata storage protectionWithMetadata = openProtectionsWithMetadata[_protectionId];\\n\\n    uint256 token1Price = tokenPairRepository.getTokenPrice(protection.token1Symbol, protection.token2Symbol, true);\\n    uint256 token2Price = tokenPairRepository.getTokenPrice(protection.token1Symbol, protection.token2Symbol, false);\\n\\n    (uint256 amountToBePaid, ) = calcAmountToBePaidWithProtectionDetails(\\n      protection,\\n      protectionWithMetadata,\\n      token1Price,\\n      token2Price\\n    );\\n\\n    return amountToBePaid;\\n  }\\n\\n  function calcAmountToBePaid(\\n    uint256 _lpTokensWorthAtBuyTimeUSD,\\n    uint256 _token1EntryPrice,\\n    uint256 _token2EntryPrice,\\n    uint256 _token1EndPrice,\\n    uint256 _token2EndPrice\\n  ) public view override returns (uint256) {\\n    uint8 priceTokenDecimals = tokenPairRepository.priceTokenDecimals();\\n\\n    uint16 impermanentLoss = calculateIL(_token1EntryPrice, _token2EntryPrice, _token1EndPrice, _token2EndPrice);\\n\\n    uint256 pricesRatio = MathUtils.ratio(\\n      (MathUtils.ratio(_token1EndPrice, _token1EntryPrice, priceTokenDecimals) +\\n        MathUtils.ratio(_token2EndPrice, _token2EntryPrice, priceTokenDecimals)),\\n      2 * 10**priceTokenDecimals,\\n      priceTokenDecimals\\n    );\\n\\n    uint256 lpTokensWorthIfHeldUSD = (_lpTokensWorthAtBuyTimeUSD * pricesRatio) / 10**priceTokenDecimals;\\n\\n    return (lpTokensWorthIfHeldUSD * impermanentLoss) / MAX_PRECISION;\\n  }\\n\\n  function calculateIL(\\n    uint256 _token1EntryPriceUSD,\\n    uint256 _token2EntryPriceUSD,\\n    uint256 _token1EndPriceUSD,\\n    uint256 _token2EndPriceUSD\\n  ) public pure override returns (uint16) {\\n    return\\n      ILUtils.calculateIL(\\n        _token1EntryPriceUSD,\\n        _token2EntryPriceUSD,\\n        _token1EndPriceUSD,\\n        _token2EndPriceUSD,\\n        MAX_PRECISION\\n      );\\n  }\\n\\n  function calculateOpenProtectionIL(uint256 _protectionId) external view override returns (uint16) {\\n    require(openProtectionsWithMetadata[_protectionId].exists, \\\"Protection is either closed or doesn't exist\\\");\\n    ProtectionNFTDetails memory protectionDetails = protectionNFT.getProtectionDetails(_protectionId);\\n\\n    uint256 token1Price = tokenPairRepository.getTokenPrice(\\n      protectionDetails.token1Symbol,\\n      protectionDetails.token2Symbol,\\n      true\\n    );\\n    uint256 token2Price = tokenPairRepository.getTokenPrice(\\n      protectionDetails.token1Symbol,\\n      protectionDetails.token2Symbol,\\n      false\\n    );\\n\\n    return\\n      calculateIL(\\n        openProtectionsWithMetadata[_protectionId].token1EntryPriceUSD,\\n        openProtectionsWithMetadata[_protectionId].token2EntryPriceUSD,\\n        token1Price,\\n        token2Price\\n      );\\n  }\\n\\n  function calcEstimatedAmountToBePaid(\\n    uint256 _lpTokensWorthAtBuyTimeUSD,\\n    uint16 _expectedLPTokensValueGrowth,\\n    uint16 _impermanentLoss\\n  ) public pure override returns (uint256) {\\n    uint256 estimatedTokensWorthAtEnd = (_lpTokensWorthAtBuyTimeUSD * _expectedLPTokensValueGrowth) / MAX_PRECISION;\\n\\n    return (estimatedTokensWorthAtEnd * MAX_PRECISION) / (MAX_PRECISION - _impermanentLoss) - estimatedTokensWorthAtEnd;\\n  }\\n\\n  function calculateFee(uint256 _lpTokensWorthAtBuyTimeUSD, uint16 _feeComponent)\\n    public\\n    pure\\n    override\\n    returns (uint256)\\n  {\\n    return (_lpTokensWorthAtBuyTimeUSD * _feeComponent) / MAX_PRECISION;\\n  }\\n\\n  function afterBuyProtectionOperations(\\n    address _buyer,\\n    TokenPair memory _pair,\\n    uint256 _createdProtectionId,\\n    uint256 _lpTokensWorthAtBuyTimeUSD,\\n    uint256 _policyPeriod,\\n    uint256 _premiumCost,\\n    uint256 _premiumCostDiscount,\\n    uint256 _fee,\\n    uint256 _feeDiscount,\\n    DiscountNFTType _discountNFTType,\\n    uint256 _maxAmountToBePaid\\n  ) private {\\n    mintNFT(\\n      _buyer,\\n      _pair,\\n      _lpTokensWorthAtBuyTimeUSD,\\n      _policyPeriod,\\n      _premiumCost,\\n      _premiumCostDiscount,\\n      _fee,\\n      _feeDiscount,\\n      _discountNFTType\\n    );\\n\\n    openProtectionsIds.push(_createdProtectionId);\\n    openProtectionsWithMetadata[_createdProtectionId] = ILProtectionWithMetadata({\\n      protectionId: _createdProtectionId,\\n      token1EntryPriceUSD: tokenPairRepository.getTokenPrice(_pair.token1Symbol, _pair.token2Symbol, true),\\n      token2EntryPriceUSD: tokenPairRepository.getTokenPrice(_pair.token1Symbol, _pair.token2Symbol, false),\\n      token1EndPriceUSD: 0,\\n      token2EndPriceUSD: 0,\\n      amountPaidOnPolicyClose: 0,\\n      maxAmountToBePaid: _maxAmountToBePaid,\\n      mappingIdx: openProtectionsIds.length - 1,\\n      exists: true,\\n      fee: _fee,\\n      feeComponent: protectionConfig.feeComponent()\\n    });\\n\\n    emitProtectionBoughtEvent(_buyer, _pair, _createdProtectionId, _policyPeriod, _premiumCost, _fee);\\n\\n    emitCollateralUpdatedEvent(\\n      _pair.token1Symbol,\\n      _pair.token2Symbol,\\n      _createdProtectionId,\\n      pairsCollaterals[_pair.token1Symbol][_pair.token2Symbol] - _maxAmountToBePaid,\\n      pairsCollaterals[_pair.token1Symbol][_pair.token2Symbol],\\n      collateral - _maxAmountToBePaid,\\n      collateral,\\n      liquidityController.liquidity() - (_premiumCost - _premiumCostDiscount),\\n      liquidityController.liquidity()\\n    );\\n  }\\n\\n  function mintNFT(\\n    address _buyer,\\n    TokenPair memory _pair,\\n    uint256 _lpTokensWorthAtBuyTimeUSD,\\n    uint256 _policyPeriod,\\n    uint256 _premiumCost,\\n    uint256 _premiumCostDiscount,\\n    uint256 _fee,\\n    uint256 _feeDiscount,\\n    DiscountNFTType _discountNFTType\\n  ) private {\\n    protectionNFT.mint(\\n      ProtectionNFTCreationDetails({\\n        owner: _buyer,\\n        protectionStartTimestamp: block.timestamp,\\n        protectionEndTimestamp: calcPolicyPeriodEnd(_policyPeriod),\\n        premiumCostUSD: _premiumCost + _fee,\\n        premiumCostDiscountUSD: _premiumCostDiscount + _feeDiscount,\\n        discountNFTType: _discountNFTType,\\n        lpTokensWorthAtBuyTimeUSD: _lpTokensWorthAtBuyTimeUSD,\\n        token1Symbol: _pair.token1Symbol,\\n        token2Symbol: _pair.token2Symbol,\\n        policyPeriod: _policyPeriod\\n      })\\n    );\\n  }\\n\\n  function emitProtectionBoughtEvent(\\n    address _buyer,\\n    TokenPair memory _pair,\\n    uint256 _createdProtectionId,\\n    uint256 _policyPeriod,\\n    uint256 _premiumCostAfterDiscount,\\n    uint256 _fee\\n  ) private {\\n    emit ProtectionBought(\\n      _createdProtectionId,\\n      _buyer,\\n      block.timestamp,\\n      calcPolicyPeriodEnd(_policyPeriod),\\n      _premiumCostAfterDiscount + _fee,\\n      _pair.token1Symbol,\\n      _pair.token2Symbol,\\n      _policyPeriod,\\n      openProtectionsWithMetadata[_createdProtectionId].token1EntryPriceUSD,\\n      openProtectionsWithMetadata[_createdProtectionId].token2EntryPriceUSD,\\n      collateral\\n    );\\n  }\\n\\n  function emitCollateralUpdatedEvent(\\n    string memory _token1Symbol,\\n    string memory _token2Symbol,\\n    uint256 _protectionId,\\n    uint256 _prevPairCollateral,\\n    uint256 _newPairCollateral,\\n    uint256 _prevCollateral,\\n    uint256 _newCollateral,\\n    uint256 _prevLiquidity,\\n    uint256 _newLiquidity\\n  ) private {\\n    emit CollateralUpdated(\\n      _token1Symbol,\\n      _token2Symbol,\\n      _protectionId,\\n      _prevPairCollateral,\\n      _newPairCollateral,\\n      _prevCollateral,\\n      _newCollateral,\\n      _prevLiquidity,\\n      _newLiquidity\\n    );\\n  }\\n\\n  function validateAndUpdatePairCollateral(\\n    string memory _token1Symbol,\\n    string memory _token2Symbol,\\n    uint256 _additionalCollateral,\\n    uint256 _liquidity\\n  ) private {\\n    uint256 cap = calcCollateralCap(_liquidity, _token1Symbol, _token2Symbol);\\n\\n    require(\\n      cap >= pairsCollaterals[_token1Symbol][_token2Symbol] + _additionalCollateral,\\n      'Pair collateral cap has been reached'\\n    );\\n\\n    pairsCollaterals[_token1Symbol][_token2Symbol] += _additionalCollateral;\\n  }\\n\\n  function calcCollateralCap(\\n    uint256 _liquidity,\\n    string memory _token1Symbol,\\n    string memory _token2Symbol\\n  ) private view returns (uint256) {\\n    return (_liquidity * tokenPairRepository.getCollateralCapComponent(_token1Symbol, _token2Symbol)) / MAX_PRECISION;\\n  }\\n\\n  function calcAmountToBePaidWithProtectionDetails(\\n    ProtectionNFTDetails memory _protection,\\n    ILProtectionWithMetadata storage _protectionWithMetadata,\\n    uint256 _token1EndPrice,\\n    uint256 _token2EndPrice\\n  ) private view returns (uint256, bool) {\\n    uint256 amountToBePaid = calcAmountToBePaid(\\n      _protection.lpTokensWorthAtBuyTimeUSD,\\n      _protectionWithMetadata.token1EntryPriceUSD,\\n      _protectionWithMetadata.token2EntryPriceUSD,\\n      _token1EndPrice,\\n      _token2EndPrice\\n    );\\n\\n    bool isBelowMin = protectionConfig.minAmountToBePaid() > amountToBePaid;\\n\\n    if (isBelowMin) {\\n      amountToBePaid = 0;\\n    } else if (amountToBePaid > _protectionWithMetadata.maxAmountToBePaid) {\\n      amountToBePaid = _protectionWithMetadata.maxAmountToBePaid;\\n    }\\n\\n    return (amountToBePaid, isBelowMin);\\n  }\\n\\n  function getNumOfFinalizedProtections() private view returns (uint256 count) {\\n    for (uint256 i; i < openProtectionsIds.length; i++) {\\n      ProtectionNFTDetails memory protectionDetails = protectionNFT.getProtectionDetails(openProtectionsIds[i]);\\n\\n      if (protectionDetails.protectionEndTimestamp <= block.timestamp) {\\n        count++;\\n      }\\n    }\\n  }\\n\\n  function getCVI() private view returns (uint256) {\\n    (\\n      uint16 cviValue, /*uint80 cviRoundId*/ /*uint256 cviTimestamp*/\\n      ,\\n\\n    ) = cviOracle.getCVILatestRoundData();\\n\\n    return uint256(cviValue) * CVI_DECIMALS_TRUNCATE;\\n  }\\n\\n  function calcPolicyPeriodEnd(uint256 _policyPeriod) private view returns (uint256) {\\n    return block.timestamp + _policyPeriod;\\n  }\\n}\\n\",\"keccak256\":\"0x383a5f193621c4569bd9204d64b2b76662f01246f6682a2193a68ed975aef78d\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-il/contracts/interfaces/IBaseController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\ninterface IBaseController {}\\n\",\"keccak256\":\"0x5ce158d7ac4b0911045948ba2e597bc6cf6bcf5ddedd354d878c458dcd993509\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-il/contracts/interfaces/ILProtectionConfigInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\ninterface ILProtectionConfigInterface {\\n  event MinAmountToBePaidChanged(uint256 prevValue, uint256 newValue);\\n  event MaxILProtectedChanged(uint16 prevValue, uint16 newValue);\\n  event BuyILProtectionEnabledChanged(bool prevValue, bool newValue);\\n  event PolicyPeriodChanged(uint256[] prevValue, uint256[] newValue);\\n  event FeeComponentChanged(uint16 prevValue, uint16 newValue);\\n  event ExpectedLPTokensValueGrowthChanged(uint16 prevValue, uint16 newValue);\\n  event PremiumGrowthStartChanged(uint256 prevValue, uint256 newValue);\\n  event PremiumSlopeChanged(uint256 prevValue, uint256 newValue);\\n\\n  function setMinAmountToBePaid(uint256 _minAmountToBePaid) external;\\n\\n  function setMaxILProtected(uint16 _maxILProtected) external;\\n\\n  function setBuyILProtectionEnabled(bool _isEnabled) external;\\n\\n  function setFeeComponent(uint16 _feeComponent) external;\\n\\n  function setPolicyPeriodsInSeconds(uint256[] calldata _policyPeriods) external;\\n\\n  function setExpectedLPTokensValueGrowth(uint16 _expectedLPTokensValueGrowth) external;\\n\\n  function minAmountToBePaid() external view returns (uint256);\\n\\n  function maxILProtected() external view returns (uint16);\\n\\n  function buyILProtectionEnabled() external view returns (bool);\\n\\n  function feeComponent() external view returns (uint16);\\n\\n  function expectedLPTokensValueGrowth() external view returns (uint16);\\n\\n  function getPolicyPeriodsInSeconds() external view returns (uint256[] memory);\\n\\n  function policyPeriodExists(uint256 _policyPeriod) external view returns (bool);\\n\\n  function premiumGrowthStart() external view returns (uint256);\\n\\n  function premiumSlope() external view returns (uint256);\\n\\n  function setPremiumGrowthStart(uint256 _premiumGrowthStart) external;\\n\\n  function setPremiumSlope(uint256 _premiumSlope) external;\\n}\\n\",\"keccak256\":\"0x8bf31fc12c4cd75164d4acb2ac8c583877739664ead7a247b6d3f92b9d90f00e\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-il/contracts/interfaces/ILProtectionControllerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\nimport '@chainlink/contracts/src/v0.8/KeeperCompatible.sol';\\nimport '@coti-cvi/contracts-cvi/contracts/CVIOracle.sol';\\nimport './ILProtectionNFTInterface.sol';\\nimport './ITokenPairRepository.sol';\\nimport './ILiquidityController.sol';\\nimport './IBaseController.sol';\\nimport '../libraries/PremiumCalculator.sol';\\nimport './ILProtectionDiscountNFTControllerInterface.sol';\\n\\ninterface ILProtectionControllerInterface is IBaseController, KeeperCompatibleInterface {\\n  event ProtectionBought(\\n    uint256 indexed id,\\n    address indexed owner,\\n    uint256 protectionStartTimestamp,\\n    uint256 protectionEndTimestamp,\\n    uint256 premiumCostUSD,\\n    string token1Symbol,\\n    string token2Symbol,\\n    uint256 policyPeriod,\\n    uint256 token1EntryPriceUSD,\\n    uint256 token2EntryPriceUSD,\\n    uint256 collateral\\n  );\\n  event ProtectionClosed(\\n    uint256 amountPaidUSD,\\n    uint256 indexed id,\\n    address indexed owner,\\n    uint256 protectionStartTimestamp,\\n    uint256 protectionEndTimestamp,\\n    uint256 premiumCostUSD,\\n    string token1Symbol,\\n    string token2Symbol,\\n    uint256 policyPeriod,\\n    uint256 token1EndPriceUSD,\\n    uint256 token2EndPriceUSD,\\n    uint256 collateral\\n  );\\n  event MaxProtectionsInUpkeepChanged(uint256 prevValue, uint256 newValue);\\n  event CollateralUpdated(\\n    string token1Symbol,\\n    string token2Symbol,\\n    uint256 protectionId,\\n    uint256 prevPairCollateral,\\n    uint256 newPairCollateral,\\n    uint256 prevCollateral,\\n    uint256 newCollateral,\\n    uint256 prevLiquidity,\\n    uint256 newLiquidity\\n  );\\n  event ILProtectionDiscountNFTControllerChanged(\\n    ILProtectionDiscountNFTControllerInterface prevValue,\\n    ILProtectionDiscountNFTControllerInterface newValue\\n  );\\n\\n  function addLiquidity(uint256 _amount) external;\\n\\n  function withdrawLiquidity(uint256 _amount, address _to) external;\\n\\n  function buyProtection(\\n    string calldata _token1Symbol,\\n    string calldata _token2Symbol,\\n    uint256 _lpTokensWorthAtBuyTimeUSD,\\n    uint256 _maxPremiumCostUSD,\\n    uint256 _policyPeriod\\n  ) external;\\n\\n  function closeProtections(uint256[] calldata _protectionsIds) external;\\n\\n  function checkUpkeep(bytes calldata _checkData)\\n    external\\n    view\\n    override\\n    returns (bool upkeepNeeded, bytes memory performData);\\n\\n  function performUpkeep(bytes calldata _performData) external override;\\n\\n  function setMaxILProtected(uint16 _maxILProtected) external;\\n\\n  function setMaxProtectionsInUpkeep(uint8 _maxProtectionsInUpkeep) external;\\n\\n  function setILProtectionDiscountNFTController(ILProtectionDiscountNFTControllerInterface _newInstance) external;\\n\\n  function collateral() external view returns (uint256);\\n\\n  function totalLPTokensWorthAtBuyTimeUSD() external view returns (uint256);\\n\\n  function cumulativeSumLPTokensWorthAtBuyTimeUSD() external view returns (uint256);\\n\\n  function protectionNFT() external view returns (ILProtectionNFTInterface);\\n\\n  function protectionDiscountNFTController() external view returns (ILProtectionDiscountNFTControllerInterface);\\n\\n  function protectionConfig() external view returns (ILProtectionConfigInterface);\\n\\n  function tokenPairRepository() external view returns (ITokenPairRepository);\\n\\n  function liquidityController() external view returns (ILiquidityController);\\n\\n  function cviOracle() external view returns (CVIOracle);\\n\\n  function getFinalizedProtectionsIds() external view returns (uint256[] memory);\\n\\n  function calculatePremiumDetailsAndMaxAmountToBePaid(\\n    address _buyer,\\n    string calldata _token1Symbol,\\n    string calldata _token2Symbol,\\n    uint256 _lpTokensWorthAtBuyTimeUSD,\\n    uint256 _policyPeriod\\n  )\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      DiscountNFTType\\n    );\\n\\n  function calculateParameterizedPremium(\\n    uint256 _lpTokensWorthAtBuyTimeUSD,\\n    uint256 _totalLPTokensWorthAtBuyTimeUSD,\\n    uint16 _expectedLPTokensValueGrowth,\\n    uint256 _liquidity,\\n    uint16 _impermanentLoss,\\n    PremiumParams calldata _premiumParams,\\n    uint256 _cvi,\\n    uint256 _initialGlobalPremiumParam,\\n    uint256 _maxGlobalPremiumParam\\n  ) external pure returns (uint256);\\n\\n  function calcEstimatedAmountToBePaid(\\n    uint256 _lpTokensWorthAtBuyTimeUSD,\\n    uint16 _expectedLPTokensValueGrowth,\\n    uint16 _impermanentLoss\\n  ) external pure returns (uint256);\\n\\n  function calculateIL(\\n    uint256 _token1EntryPriceUSD,\\n    uint256 _token2EntryPriceUSD,\\n    uint256 _token1EndPriceUSD,\\n    uint256 _token2EndPriceUSD\\n  ) external pure returns (uint16);\\n\\n  function calculateOpenProtectionIL(uint256 _protectionId) external view returns (uint16);\\n\\n  function calcAmountToBePaid(\\n    uint256 _lpTokensWorthAtBuyTimeUSD,\\n    uint256 _token1EntryPrice,\\n    uint256 _token2EntryPrice,\\n    uint256 _token1EndPrice,\\n    uint256 _token2EndPrice\\n  ) external view returns (uint256);\\n\\n  function calcMaxValueOfTokensWorthToProtect(string memory _token1Symbol, string memory _token2Symbol)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function calcAmountToBePaidWithProtectionId(uint256 _protectionId) external view returns (uint256);\\n\\n  function calculateFee(uint256 _lpTokensWorthAtBuyTimeUSD, uint16 _feeComponent) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0x905589307c292bfea30403999bdd57ec711ed91aa5d917625e3a977d40b296f0\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-il/contracts/interfaces/ILProtectionDiscountNFTControllerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\nimport './IBaseController.sol';\\nimport './ILProtectionDiscountNFTInterface.sol';\\n\\nenum DiscountNFTType {\\n  NONE,\\n  GOLD,\\n  DIAMOND\\n}\\n\\nstruct DiscountNFTDetails {\\n  DiscountNFTType discountType;\\n  bool isUsed;\\n  uint16 premiumDiscountComponent;\\n  uint256 freeOfChargeTokensWorth;\\n}\\n\\ninterface ILProtectionDiscountNFTControllerInterface is IBaseController {\\n  event ProtectionDiscountNFTChanged(\\n    ILProtectionDiscountNFTInterface prevValue,\\n    ILProtectionDiscountNFTInterface newValue\\n  );\\n  event PremiumDiscountComponentChanged(uint16 prevValue, uint16 newValue);\\n  event FreeOfChargeTokensWorthChanged(uint256 prevValue, uint256 newValue);\\n  event DiscountMarkedAsUsed(address indexed owner);\\n\\n  function markDiscountAsUsed(address _owner) external;\\n\\n  function setProtectionDiscountNFT(ILProtectionDiscountNFTInterface _newInstance) external;\\n\\n  function setPremiumDiscountComponent(uint16 _premiumDiscountComponent) external;\\n\\n  function setFreeOfChargeTokensWorth(uint256 _freeOfChargeTokensWorth) external;\\n\\n  function setEnabled(bool _enabled) external;\\n\\n  function premiumDiscountComponent() external view returns (uint16);\\n\\n  function freeOfChargeTokensWorth() external view returns (uint256);\\n\\n  function enabled() external view returns (bool);\\n\\n  function getDiscountDetails(address _owner) external view returns (DiscountNFTDetails memory);\\n}\\n\",\"keccak256\":\"0x77b6c973888ceaa925b4924ea0aa7347b89474a4924471bd32abad36e0818ed1\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-il/contracts/interfaces/ILProtectionDiscountNFTInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\ninterface ILProtectionDiscountNFTInterface {\\n  function setUsed(address _to) external;\\n\\n  function getTokenInfo(address _to)\\n    external\\n    view\\n    returns (\\n      uint256 index,\\n      bool minted,\\n      bool used\\n    );\\n}\\n\",\"keccak256\":\"0x66863fa5e3c1dc84de73547714762973c1a8a034948c0cc6f93e391bb361b475\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-il/contracts/interfaces/ILProtectionNFTInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\nimport './ILProtectionDiscountNFTControllerInterface.sol';\\n\\nstruct ProtectionNFTDetails {\\n  uint256 id;\\n  address owner;\\n  uint256 protectionStartTimestamp;\\n  uint256 protectionEndTimestamp;\\n  uint256 premiumCostUSD;\\n  uint256 lpTokensWorthAtBuyTimeUSD;\\n  string token1Symbol;\\n  string token2Symbol;\\n  uint256 policyPeriod;\\n  DiscountNFTType discountNFTType;\\n  uint256 premiumCostDiscountUSD;\\n}\\n\\nstruct ProtectionNFTCreationDetails {\\n  address owner;\\n  uint256 protectionStartTimestamp;\\n  uint256 protectionEndTimestamp;\\n  uint256 premiumCostUSD;\\n  uint256 lpTokensWorthAtBuyTimeUSD;\\n  string token1Symbol;\\n  string token2Symbol;\\n  uint256 policyPeriod;\\n  DiscountNFTType discountNFTType;\\n  uint256 premiumCostDiscountUSD;\\n}\\n\\ninterface ILProtectionNFTInterface {\\n  event ProtectionMint(\\n    uint256 indexed id,\\n    address indexed owner,\\n    uint256 protectionStartTimestamp,\\n    uint256 protectionEndTimestamp,\\n    uint256 premiumCostUSD,\\n    uint256 lpTokensWorthAtBuyTimeUSD,\\n    string token1Symbol,\\n    string token2Symbol,\\n    uint256 policyPeriod\\n  );\\n  event ProtectionMetadataCIDChanged(string prevValue, string newValue);\\n  event ProtectionMintDiscountDetails(\\n    uint256 indexed id,\\n    address indexed owner,\\n    DiscountNFTType indexed discountNFTType,\\n    uint256 premiumCostBeforeDiscount,\\n    uint256 premiumCostDiscount\\n  );\\n\\n  function mint(ProtectionNFTCreationDetails calldata _creationDetails) external;\\n\\n  function setProtectionMetadataCID(string calldata _protectionMetadataCID) external;\\n\\n  function tokenIdCounter() external returns (uint256);\\n\\n  function protectionMetadataCID() external returns (string memory);\\n\\n  function getProtectionDetailsByOwnerAndIndex(address _owner, uint256 _index)\\n    external\\n    view\\n    returns (ProtectionNFTDetails memory);\\n\\n  function getOwnerProtections(address _owner) external view returns (ProtectionNFTDetails[] memory);\\n\\n  function getProtectionDetails(uint256 _id) external view returns (ProtectionNFTDetails memory);\\n}\\n\",\"keccak256\":\"0x6275c660e8de8270933b8280bfe8d6f5e35ea115cc6d4ddd4c953cecb3e54fe5\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-il/contracts/interfaces/ILiquidityController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport './IBaseController.sol';\\nimport './ITreasuryController.sol';\\n\\ninterface ILiquidityController is IBaseController {\\n  event LiquidityAdded(address indexed from, uint256 amount, uint256 updatedTotalLiquidity);\\n  event LiquidityWithdrawn(address indexed to, uint256 amount, uint256 updatedTotalLiquidity);\\n  event LiquidityTokenChanged(IERC20 prevValue, IERC20 newValue);\\n  event TreasuryControllerChanged(ITreasuryController prevValue, ITreasuryController newValue);\\n\\n  function addLiquidity(address _from, uint256 _amount) external;\\n\\n  function addLiquidityWithProtectionFee(\\n    uint256 _protectionId,\\n    address _from,\\n    uint256 _amountWithoutFee,\\n    uint256 _fee,\\n    uint16 _feeComponent\\n  ) external;\\n\\n  function withdrawLiquidity(uint256 _amount, address _to) external;\\n\\n  function approveTreasury(uint256 _amount) external;\\n\\n  function setLiquidityToken(IERC20 _token) external;\\n\\n  function setTreasuryController(ITreasuryController _newInstance) external;\\n\\n  function treasuryController() external view returns (ITreasuryController);\\n\\n  function liquidityToken() external view returns (IERC20);\\n\\n  function liquidityTokenDecimals() external view returns (uint8);\\n\\n  function liquidity() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3f624161037836c2dc2034802c07bf501a4a6f8ac6a07c6cdb8fc8a0b5a216bc\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-il/contracts/interfaces/ITokenPairRepository.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\nimport '@coti-cvi/contracts-cvi/contracts/interfaces/AggregatorV3Interface.sol';\\nimport './IBaseController.sol';\\nimport './ILProtectionConfigInterface.sol';\\nimport '../libraries/PremiumCalculator.sol';\\n\\nstruct TokenPair {\\n  string token1Symbol;\\n  string token2Symbol;\\n  AggregatorV3Interface token1PriceAggregator;\\n  AggregatorV3Interface token2PriceAggregator;\\n  bool exists;\\n}\\n\\ninterface ITokenPairRepository is IBaseController {\\n  event PairSet(TokenPair prevValue, TokenPair newValue);\\n  event PremiumParamsChanged(\\n    string token1Symbol,\\n    string token2Symbol,\\n    uint256 policyPeriod,\\n    PremiumParams prevValue,\\n    PremiumParams newValue\\n  );\\n  event PremiumParamsDeleted(\\n    string token1Symbol,\\n    string token2Symbol,\\n    uint256 policyPeriod,\\n    PremiumParams deletedParams\\n  );\\n  event CollateralCapComponentChanged(string token1Symbol, string token2Symbol, uint16 prevValue, uint16 newValue);\\n  event PriceTokenDecimalsChanged(uint8 prevValue, uint8 newValue);\\n  event ILProtectionConfigChanged(ILProtectionConfigInterface prevValue, ILProtectionConfigInterface newValue);\\n\\n  function setPair(\\n    string calldata _token1Symbol,\\n    string calldata _token2Symbol,\\n    AggregatorV3Interface _token1PriceAggregator,\\n    AggregatorV3Interface _token2PriceAggregator\\n  ) external;\\n\\n  function setPremiumsParams(\\n    string calldata _token1Symbol,\\n    string calldata _token2Symbol,\\n    uint256[] calldata _policyPeriods,\\n    PremiumParams[] calldata _premiumsParams\\n  ) external;\\n\\n  function setCollateralCapComponent(\\n    string calldata _token1Symbol,\\n    string calldata _token2Symbol,\\n    uint16 _collateralCapComponent\\n  ) external;\\n\\n  function setPriceTokenDecimals(uint8 _priceTokenDecimals) external;\\n\\n  function setILProtectionConfig(ILProtectionConfigInterface _newInstance) external;\\n\\n  function deletePremiumsParams(\\n    string calldata _token1Symbol,\\n    string calldata _token2Symbol,\\n    uint256[] calldata _policyPeriods\\n  ) external;\\n\\n  function priceTokenDecimals() external view returns (uint8);\\n\\n  function getPair(string calldata _token1Symbol, string calldata _token2Symbol)\\n    external\\n    view\\n    returns (TokenPair memory);\\n\\n  function getPairs() external view returns (TokenPair[] memory);\\n\\n  function getPremiumParams(\\n    string calldata _token1Symbol,\\n    string calldata _token2Symbol,\\n    uint256 _policyPeriod\\n  ) external view returns (PremiumParams memory);\\n\\n  function getCollateralCapComponent(string calldata _token1Symbol, string calldata _token2Symbol)\\n    external\\n    view\\n    returns (uint16);\\n\\n  function getTokenPrice(\\n    string calldata _token1Symbol,\\n    string calldata _token2Symbol,\\n    bool _isFirstTokenPrice\\n  ) external view returns (uint256);\\n\\n  function protectionConfig() external view returns (ILProtectionConfigInterface);\\n\\n  function getOrderedTokenPairIfExists(string calldata _token1Symbol, string calldata _token2Symbol)\\n    external\\n    view\\n    returns (TokenPair memory);\\n}\\n\",\"keccak256\":\"0x13a3ea335f5cef48f5b09ecff095f271c73e5926e8cbcfd6f7d030e990551896\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-il/contracts/interfaces/ITreasuryController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './IBaseController.sol';\\n\\ninterface ITreasuryController is IBaseController {\\n  event DepositFee(\\n    uint256 indexed protectionId,\\n    address indexed from,\\n    uint256 fee,\\n    uint16 feeComponent,\\n    address indexed treasury,\\n    IERC20 treasuryToken\\n  );\\n  event TreasuryChanged(address prevValue, address newValue);\\n  event TreasuryTokenChanged(IERC20 prevValue, IERC20 newValue);\\n\\n  function depositFee(\\n    uint256 _protectionId,\\n    uint256 _fee,\\n    uint16 _feeComponent\\n  ) external;\\n\\n  function setTreasury(address _treasury) external;\\n\\n  function setTreasuryToken(IERC20 _treasuryToken) external;\\n\\n  function treasury() external view returns (address);\\n\\n  function treasuryToken() external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0xbdb4786144b7d0619d926b7edb24c0ec77d3511cbf3881ea95bfc452f9c6478b\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-il/contracts/libraries/ILUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\nimport 'prb-math/contracts/PRBMathUD60x18.sol';\\n\\nlibrary ILUtils {\\n  using PRBMathUD60x18 for uint256;\\n\\n  function calculateIL(\\n    uint256 token1EntryPrice,\\n    uint256 token2EntryPrice,\\n    uint256 token1EndPrice,\\n    uint256 token2EndPrice,\\n    uint16 maxPrecision\\n  ) external pure returns (uint16) {\\n    uint256 rt1 = token1EntryPrice.div(token2EntryPrice);\\n    uint256 rt2 = token1EndPrice.div(token2EndPrice);\\n\\n    uint256 p = rt1.div(rt2);\\n\\n    return\\n      uint16(\\n        (PRBMathUD60x18.SCALE - (2 * PRBMathUD60x18.sqrt(p).div(p + PRBMathUD60x18.SCALE))) /\\n          (PRBMathUD60x18.SCALE / maxPrecision)\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x30e3ffa1e581cfe8fcaec28060f615e05aeb74947a0d860ae2aaf6885ae21bda\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-il/contracts/libraries/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\nlibrary MathUtils {\\n  function ratio(\\n    uint256 numerator,\\n    uint256 denominator,\\n    uint8 precision\\n  ) external pure returns (uint256 quotient) {\\n    uint256 _numerator = numerator * 10**(precision + 1);\\n\\n    // with rounding of last digit\\n    uint256 _quotient = ((_numerator / denominator) + 5) / 10;\\n    return (_quotient);\\n  }\\n\\n  function min(uint256 a, uint256 b) external pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n}\\n\",\"keccak256\":\"0xb67639bf294cb260e3c0226d9b4f9d9f66d186dd67fe7fcc3373cf3c1ffbf318\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-il/contracts/libraries/PremiumCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\nimport 'prb-math/contracts/PRBMathUD60x18.sol';\\nimport 'prb-math/contracts/PRBMathSD59x18.sol';\\n\\nstruct PremiumParams {\\n  int256 A;\\n  int256 X0;\\n  int256 C;\\n}\\n\\nlibrary PremiumCalculator {\\n  using PRBMathUD60x18 for uint256;\\n  using PRBMathSD59x18 for int256;\\n\\n  function calculatePremium(\\n    uint256 lpTokensWorthAtBuyTimeUSD,\\n    uint256 collateral,\\n    uint256 liquidity,\\n    PremiumParams memory premiumParams,\\n    uint256 cvi,\\n    uint256 premiumGrowthStart,\\n    uint256 premiumSlope\\n  ) external pure returns (uint256) {\\n    uint256 P = calculateP(collateral, liquidity, premiumGrowthStart, premiumSlope);\\n\\n    int256 xt = int256(cvi);\\n\\n    return\\n      uint256(\\n        int256(lpTokensWorthAtBuyTimeUSD).mul(\\n          (premiumParams.A.mul((xt - premiumParams.X0).powu(2)) + premiumParams.C).mul(int256(P))\\n        )\\n      );\\n  }\\n\\n  function calculateP(\\n    uint256 collateral,\\n    uint256 liquidity,\\n    uint256 premiumGrowthStart,\\n    uint256 premiumSlope\\n  ) private pure returns (uint256) {\\n    int256 signedCollateral = int256(collateral);\\n    int256 signedLiquidity = int256(liquidity);\\n    int256 signedPremiumGrowthStart = int256(premiumGrowthStart);\\n    int256 signedPremiumSlope = int256(premiumSlope);\\n\\n    // Due to how pow is calculated - there is an inner log2 calculation that can be negative -\\n    // we convert the input values to be signed\\n\\n    return\\n      PRBMathUD60x18.exp(\\n        uint256((signedCollateral.div(signedLiquidity)).pow(signedPremiumGrowthStart).div(signedPremiumSlope))\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0xc133a655d0c4d57556a21691c6f147c8c9b46f2563dd07d5983d42695900cad1\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathSD59x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\n\\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_WHOLE_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\n\\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_WHOLE_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Calculate the absolute value of x.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than MIN_SD59x18.\\n    ///\\n    /// @param x The number to calculate the absolute value for.\\n    /// @param result The absolute value of x.\\n    function abs(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x == MIN_SD59x18) {\\n                revert PRBMathSD59x18__AbsInputTooSmall();\\n            }\\n            result = x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            int256 sum = (x >> 1) + (y >> 1);\\n            if (sum < 0) {\\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\\n                // right rounds down to infinity.\\n                assembly {\\n                    result := add(sum, and(or(x, y), 1))\\n                }\\n            } else {\\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\\n                // remainder gets truncated twice.\\n                result = sum + (x & y & 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function ceil(int256 x) internal pure returns (int256 result) {\\n        if (x > MAX_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__CeilOverflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x > 0) {\\n                    result += SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    /// - None of the inputs can be MIN_SD59x18.\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within int256.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    ///\\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__DivInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x and y.\\n        uint256 ax;\\n        uint256 ay;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n        }\\n\\n        // Compute the absolute value of (x*SCALE)\\u00f7y. The result must fit within int256.\\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__DivOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x and y.\\n        uint256 sx;\\n        uint256 sy;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n        }\\n\\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\\n        // should be positive. Otherwise, it should be negative.\\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (int256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\".\\n    /// - For any x less than -41.446531673892822322, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59.794705707972522261.\\n        if (x < -41_446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathSD59x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            int256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59.794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^(-x) = 1/2^x.\\n        if (x < 0) {\\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\\n            if (x < -59_794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            unchecked {\\n                result = 1e36 / exp2(-x);\\n            }\\n        } else {\\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n            if (x >= 192e18) {\\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\\n            }\\n\\n            unchecked {\\n                // Convert x to the 192.64-bit fixed-point format.\\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\\n\\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\\n                result = int256(PRBMath.exp2(x192x64));\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function floor(int256 x) internal pure returns (int256 result) {\\n        if (x < MIN_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__FloorUnderflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x < 0) {\\n                    result -= SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\\n    /// of the radix point for negative numbers.\\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\\n    function frac(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x % SCALE;\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\\n    function fromInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < MIN_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntUnderflow(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\\n    /// - x * y cannot be negative.\\n    ///\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            int256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathSD59x18__GmOverflow(x, y);\\n            }\\n\\n            // The product cannot be negative.\\n            if (xy < 0) {\\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = int256(PRBMath.sqrt(uint256(xy)));\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\\n    function inv(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\\n    function ln(int256 x) internal pure returns (int256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 195205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\\n    function log10(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly mul operation, not the \\\"mul\\\" function defined in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            default {\\n                result := MAX_SD59x18\\n            }\\n        }\\n\\n        if (result == MAX_SD59x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n    function log2(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n                assembly {\\n                    x := div(1000000000000000000000000000000000000, x)\\n                }\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\\n\\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n            result = int256(n) * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            int256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result * sign;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n            result *= sign;\\n        }\\n    }\\n\\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\\n    /// fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers and employs constant folding, i.e. the denominator is\\n    /// always 1e18.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - None of the inputs can be MIN_SD59x18\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    ///\\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__MulInputTooSmall();\\n        }\\n\\n        unchecked {\\n            uint256 ax;\\n            uint256 ay;\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n\\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\\n            if (rAbs > uint256(MAX_SD59x18)) {\\n                revert PRBMathSD59x18__MulOverflow(rAbs);\\n            }\\n\\n            uint256 sx;\\n            uint256 sy;\\n            assembly {\\n                sx := sgt(x, sub(0, 1))\\n                sy := sgt(y, sub(0, 1))\\n            }\\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n        }\\n    }\\n\\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\\n    function pi() internal pure returns (int256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - z cannot be zero.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : int256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"abs\\\" and \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\\n        uint256 xAbs = uint256(abs(x));\\n\\n        // Calculate the first iteration of the loop in advance.\\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        uint256 yAux = y;\\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (yAux & 1 > 0) {\\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\\n            }\\n        }\\n\\n        // The result must fit within the 59.18-decimal fixed-point representation.\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\\n        }\\n\\n        // Is the base negative and the exponent an odd number?\\n        bool isNegative = x < 0 && y & 1 == 1;\\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\\n    function scale() internal pure returns (int256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x cannot be negative.\\n    /// - x must be less than MAX_SD59x18 / SCALE.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as a signed 59.18-decimal fixed-point .\\n    function sqrt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < 0) {\\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\\n        }\\n    }\\n\\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1886d687eace717c05b7dcc20e43a088df0e549df86b453c2222961b520308f0\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102955760003560e01c80636f7d78281161016757806392f44448116100ce578063d8dfeb4511610087578063d8dfeb4514610746578063e1e702681461074f578063e5aebe8414610758578063f2fde38b1461076b578063f66496f71461077e578063ffc17ba71461079157600080fd5b806392f44448146106e757806395c196dd146106fa578063a217fddf1461070f578063b5e2452114610717578063d547741f1461072a578063d56f28511461073d57600080fd5b8063871ad1e611610120578063871ad1e614610566578063883019111461062e5780638da5cb5b146106415780638efe1fce146106525780638f29d12d146106c157806391d14854146106d457600080fd5b80636f7d782814610509578063715018a61461051c57806371fd02e01461052457806373f599da14610537578063768da62314610540578063821ff2c51461055357600080fd5b80632d5948071161020b5780634de6df43116101c45780634de6df431461047157806351c6590a146104845780635d77cf191461049757806368fc0c9a146104c25780636e04ff0d146104d55780636f40670d146104f657600080fd5b80632d594807146103f65780632f2ff15d146103ff57806336568abe146104125780633b37bf981461042557806343ebd06e1461044b5780634585e33b1461045e57600080fd5b8063175ef65e1161025d578063175ef65e1461033057806319edb4bd1461033e5780631f3d8c741461035157806320037cdd14610399578063206a2296146103c0578063248a9ca3146103d357600080fd5b806301ffc9a71461029a57806306bebf3c146102c25780630fed70a2146102d757806312d0ad4e146102f857806313c02e5e1461030b575b600080fd5b6102ad6102a8366004614d92565b6107a4565b60405190151581526020015b60405180910390f35b6102d56102d036600461536b565b6107db565b005b6102ea6102e536600461520e565b610890565b6040519081526020016102b9565b6102d5610306366004614b4b565b6108b4565b61031e610319366004614c06565b610972565b6040516102b9969594939291906158f5565b6102ea662386f26fc1000081565b6102ea61034c366004614d4b565b611306565b6102ea61035f366004614e7c565b815160208184018101805160d582529282019482019490942091909352815180830184018051928152908401929093019190912091525481565b6102ea7f42802a37d17e698ec3d88f7a6917f1f5a6abb4d99a8f4255c389e56d10218a6481565b6102ea6103ce366004615232565b611327565b6102ea6103e1366004614d4b565b60009081526097602052604090206001015490565b6102ea60cf5481565b6102d561040d366004614d63565b611381565b6102d5610420366004614d63565b6113ab565b610438610433366004614d4b565b611429565b60405161ffff90911681526020016102b9565b6102d5610459366004614c8a565b611627565b6102d561046c366004614dba565b611e91565b6102ea61047f366004614d4b565b611eaa565b6102d5610492366004614d4b565b6120ab565b60cc546104aa906001600160a01b031681565b6040516001600160a01b0390911681526020016102b9565b6102d56104d0366004614d63565b61218c565b6104e86104e3366004614dba565b61239a565b6040516102b99291906154ef565b60c9546104aa906001600160a01b031681565b60cd546104aa906001600160a01b031681565b6102d56124ca565b6102ea610532366004615273565b612530565b61043861271081565b6102d561054e36600461516e565b6126cd565b6102ea610561366004614e7c565b6127a7565b6105d5610574366004614d4b565b60d160205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a909a01549899979896979596949593949293919260ff909116919061ffff168b565b604080519b8c5260208c019a909a52988a01979097526060890195909552608088019390935260a087019190915260c086015260e0850152151561010084015261012083015261ffff16610140820152610160016102b9565b6102d561063c366004614b67565b612b7e565b6033546001600160a01b03166104aa565b6105d5610660366004614d4b565b60d260205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a909a01549899979896979596949593949293919260ff909116919061ffff168b565b6102d56106cf366004614df9565b612c63565b6102ad6106e2366004614d63565b613500565b60ca546104aa906001600160a01b031681565b61070261352b565b6040516102b991906154ab565b6102ea600081565b6102ea610725366004615331565b6136d8565b6102d5610738366004614d63565b61398c565b6102ea60d35481565b6102ea60ce5481565b6102ea60d45481565b610438610766366004615300565b6139b1565b6102d5610779366004614b4b565b613a54565b60cb546104aa906001600160a01b031681565b60d6546104aa906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806107d557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6107e6600033613b1f565b60008160ff161161084a5760405162461bcd60e51b8152602060048201526024808201527f696e76616c6964206d617850726f74656374696f6e73496e55706b6565702076604482015263616c756560e01b60648201526084015b60405180910390fd5b60d3546040805191825260ff831660208301527f35b3f6968a3b29e3aaeff49ca8f509f08777a354c815de29c8b748a14eaf4113910160405180910390a160ff1660d355565b60006127106108a361ffff841685615ae5565b6108ad91906159df565b9392505050565b6108bf600033613b1f565b806001600160a01b0381166109085760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610841565b60d654604080516001600160a01b03928316815291841660208301527f42e5d6b0b85ac07d54cc4598c40fdb8bfc151df0f2aab57cb52080254a44cdc7910160405180910390a15060d680546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000806000806109858a8a6127a7565b8811156109fa5760405162461bcd60e51b815260206004820152603a60248201527f6c70546f6b656e73576f727468417442757954696d65555344203e206d61785660448201527f616c75654f66546f6b656e73576f727468546f50726f746563740000000000006064820152608401610841565b60cc5460408051630d34328160e11b815290516000926001600160a01b031691631a686502916004808301926020929190829003018186803b158015610a3f57600080fd5b505afa158015610a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7791906151f6565b60cb5460405163326625a760e21b81529192506000916001600160a01b039091169063c998969c90610ab1908f908f908e906004016155ac565b60606040518083038186803b158015610ac957600080fd5b505afa158015610add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b019190614f54565b9050610c138a60ca60009054906101000a90046001600160a01b03166001600160a01b03166363aa3bd96040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5557600080fd5b505afa158015610b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8d919061518a565b60ca60009054906101000a90046001600160a01b03166001600160a01b031663da25cb0c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bdb57600080fd5b505afa158015610bef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ce919061518a565b935073__$3f85fbde44ed1f43c30acc3829f71e1fe6$__63f5a6a39f8b8660ce54610c3e91906159c7565b8585610c48613b83565b60ca60009054906101000a90046001600160a01b03166001600160a01b0316638a981d316040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9657600080fd5b505afa158015610caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cce91906151f6565b60ca60009054906101000a90046001600160a01b03166001600160a01b031663a0c5d2136040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1c57600080fd5b505afa158015610d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5491906151f6565b6040518863ffffffff1660e01b8152600401610d769796959493929190615840565b60206040518083038186803b158015610d8e57600080fd5b505af4158015610da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc691906151f6565b9750610e528a60ca60009054906101000a90046001600160a01b03166001600160a01b031663edb1192e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1a57600080fd5b505afa158015610e2e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e5919061518a565b9550600060d660009054906101000a90046001600160a01b03166001600160a01b03166389c9f0f88f6040518263ffffffff1660e01b8152600401610ea691906001600160a01b0391909116815260200190565b60806040518083038186803b158015610ebe57600080fd5b505afa158015610ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef69190614edc565b90508060000151935060008060d660009054906101000a90046001600160a01b03166001600160a01b031663238dafe06040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5057600080fd5b505afa158015610f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f889190614d31565b8015610fb457506000866002811115610fb157634e487b7160e01b600052602160045260246000fd5b14155b8015610fc257508260200151155b156112d657600283516002811115610fea57634e487b7160e01b600052602160045260246000fd5b14156112765782606001518d111561127157600083606001518e61100e9190615b27565b6040850151909150612710906110249082615b04565b61ffff1673__$3f85fbde44ed1f43c30acc3829f71e1fe6$__63f5a6a39f848c60ce5461105191906159c7565b8b8b61105b613b83565b60ca60009054906101000a90046001600160a01b03166001600160a01b0316638a981d316040518163ffffffff1660e01b815260040160206040518083038186803b1580156110a957600080fd5b505afa1580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e191906151f6565b60ca60009054906101000a90046001600160a01b03166001600160a01b031663a0c5d2136040518163ffffffff1660e01b815260040160206040518083038186803b15801561112f57600080fd5b505afa158015611143573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116791906151f6565b6040518863ffffffff1660e01b81526004016111899796959493929190615840565b60206040518083038186803b1580156111a157600080fd5b505af41580156111b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d991906151f6565b6111e39190615ae5565b6111ed91906159df565b6040850151909350612710906112039082615b04565b61ffff166112598360ca60009054906101000a90046001600160a01b03166001600160a01b031663edb1192e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1a57600080fd5b6112639190615ae5565b61126d91906159df565b9150505b6112dc565b6040830151612710906112899082615b04565b6112979061ffff168b615ae5565b6112a191906159df565b6040840151909150612710906112b79082615b04565b6112c59061ffff168d615ae5565b6112cf91906159df565b91506112dc565b50899050875b6112e6828c615b27565b99506112f2818a615b27565b975050505050509550955095509550955095565b60d0818154811061131657600080fd5b600091825260209091200154905081565b60008061271061133b61ffff861687615ae5565b61134591906159df565b90508061135484612710615b04565b61ffff1661136461271084615ae5565b61136e91906159df565b6113789190615b27565b95945050505050565b60008281526097602052604090206001015461139c81613c2d565b6113a68383613c37565b505050565b6001600160a01b038116331461141b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610841565b6114258282613cbd565b5050565b600081815260d1602052604081206008015460ff1661145a5760405162461bcd60e51b8152600401610841906156dc565b60c95460405163141165df60e31b8152600481018490526000916001600160a01b03169063a08b2ef89060240160006040518083038186803b15801561149f57600080fd5b505afa1580156114b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114db9190810190614fae565b60cb5460c082015160e083015160405163ccc0628160e01b81529394506000936001600160a01b039093169263ccc062819261151e929091600190600401615574565b60206040518083038186803b15801561153657600080fd5b505afa15801561154a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156e91906151f6565b60cb5460c084015160e085015160405163ccc0628160e01b81529394506000936001600160a01b039093169263ccc06281926115b09290918690600401615574565b60206040518083038186803b1580156115c857600080fd5b505afa1580156115dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160091906151f6565b600086815260d16020526040902060018101546002909101549192506113789184846139b1565b60008151116116785760405162461bcd60e51b815260206004820152601e60248201527f50726f74656374696f6e732049647320617272617920697320656d70747900006044820152606401610841565b60005b815181101561142557600060d160008484815181106116aa57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002090508060080160009054906101000a900460ff166116de5750611e7f565b60c95483516000916001600160a01b03169063a08b2ef89086908690811061171657634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161173c91815260200190565b60006040518083038186803b15801561175457600080fd5b505afa158015611768573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117909190810190614fae565b905042816060015111611e7c5760cb5460c082015160e083015160405163ccc0628160e01b81526000936001600160a01b03169263ccc06281926117d992600190600401615574565b60206040518083038186803b1580156117f157600080fd5b505afa158015611805573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182991906151f6565b60cb5460c084015160e085015160405163ccc0628160e01b81529394506000936001600160a01b039093169263ccc062819261186b9290918690600401615574565b60206040518083038186803b15801561188357600080fd5b505afa158015611897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bb91906151f6565b90506000806118cc85878686613d24565b91509150806119405760cc54602086015160405163347e064d60e11b8152600481018590526001600160a01b0391821660248201529116906368fc0c9a90604401600060405180830381600087803b15801561192757600080fd5b505af115801561193b573d6000803e3d6000fd5b505050505b600386018490556004860183905560068601829055600586015460ce805460009061196c908490615b27565b9091555050600586015460c086015160405160d59161198a9161541a565b90815260200160405180910390208660e001516040516119aa919061541a565b908152602001604051809103902060008282546119c79190615b27565b909155505060a085015160cf80546000906119e3908490615b27565b909155505060d05460011015611a7e5760d0805460009190611a0790600190615b27565b81548110611a2557634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060d0886007015481548110611a5857634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092556007808a015493825260d19092526040902001555b60d0805480611a9d57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560d260008760000151815260200190815260200160002060008201548160000155600182015481600101556002820154816002015560038201548160030155600482015481600401556005820154816005015560068201548160060155600782015481600701556008820160009054906101000a900460ff168160080160006101000a81548160ff02191690831515021790555060098201548160090155600a820160009054906101000a900461ffff1681600a0160006101000a81548161ffff021916908361ffff16021790555090505060d160008660000151815260200190815260200160002060008082016000905560018201600090556002820160009055600382016000905560048201600090556005820160009055600682016000905560078201600090556008820160006101000a81549060ff02191690556009820160009055600a820160006101000a81549061ffff0219169055505084602001516001600160a01b031685600001517f42ed01b98174011efdf2fdef7f80bb58590411efd2604313948ab455bef77b7484886040015189606001518a608001518b60c001518c60e001518d61010001518d8d60ce54604051611c809a99989796959493929190615889565b60405180910390a360c08501805160e08701518751600081815260d26020526040908190206005015494519051611e77959160d591611cbf919061541a565b90815260200160405180910390208a60e00151604051611cdf919061541a565b908152602001604051809103902054611cf891906159c7565b60d58a60c00151604051611d0c919061541a565b90815260200160405180910390208a60e00151604051611d2c919061541a565b90815260200160405180910390205460d260008c6000015181526020019081526020016000206005015460ce54611d6391906159c7565b60ce5460cc5460408051630d34328160e11b815290518c926001600160a01b031691631a686502916004808301926020929190829003018186803b158015611daa57600080fd5b505afa158015611dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de291906151f6565b611dec91906159c7565b60cc60009054906101000a90046001600160a01b03166001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015611e3a57600080fd5b505afa158015611e4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7291906151f6565b613e00565b505050505b50505b80611e8981615b85565b91505061167b565b6000611e9f82840184614c8a565b90506113a681611627565b600081815260d1602052604081206008015460ff16611edb5760405162461bcd60e51b8152600401610841906156dc565b60c95460405163141165df60e31b8152600481018490526000916001600160a01b03169063a08b2ef89060240160006040518083038186803b158015611f2057600080fd5b505afa158015611f34573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f5c9190810190614fae565b600084815260d1602052604080822060cb5460c085015160e0860151935163ccc0628160e01b815295965091946001600160a01b039091169263ccc0628192611fad92909190600190600401615574565b60206040518083038186803b158015611fc557600080fd5b505afa158015611fd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffd91906151f6565b60cb5460c085015160e086015160405163ccc0628160e01b81529394506000936001600160a01b039093169263ccc062819261203f9290918690600401615574565b60206040518083038186803b15801561205757600080fd5b505afa15801561206b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061208f91906151f6565b9050600061209f85858585613d24565b50979650505050505050565b7f42802a37d17e698ec3d88f7a6917f1f5a6abb4d99a8f4255c389e56d10218a646120d581613c2d565b600082116121255760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206c697175696469747920616d6f756e7400000000000000006044820152606401610841565b60cc546040516256688760e81b8152336004820152602481018490526001600160a01b0390911690635668870090604401600060405180830381600087803b15801561217057600080fd5b505af1158015612184573d6000803e3d6000fd5b505050505050565b7f42802a37d17e698ec3d88f7a6917f1f5a6abb4d99a8f4255c389e56d10218a646121b681613c2d565b816001600160a01b0381166121ff5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610841565b60cc5460408051630d34328160e11b815290516000926001600160a01b031691631a686502916004808301926020929190829003018186803b15801561224457600080fd5b505afa158015612258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227c91906151f6565b905060008511801561228e5750808511155b6122da5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420616d6f756e7420746f2077697468647261770000000000006044820152606401610841565b6122e48582615b27565b60ce54111561232d5760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b6044820152606401610841565b60cc5460405163347e064d60e11b8152600481018790526001600160a01b038681166024830152909116906368fc0c9a90604401600060405180830381600087803b15801561237b57600080fd5b505af115801561238f573d6000803e3d6000fd5b505050505050505050565b6000606060006123a861352b565b8051909150156124bd5760019250600060d3548251116123c95781516123cd565b60d3545b90506000816001600160401b038111156123f757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612420578160200160208202803683370190505b50905060005b828110156124935783818151811061244e57634e487b7160e01b600052603260045260246000fd5b602002602001015182828151811061247657634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061248b81615b85565b915050612426565b50806040516020016124a591906154ab565b604051602081830303815290604052935050506124c2565b600092505b509250929050565b6033546001600160a01b031633146125245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610841565b61252e6000613e3f565b565b60008087116125815760405162461bcd60e51b815260206004820152601f60248201527f4c6971756964697479206d757374206265206c6172676572207468616e2030006044820152606401610841565b60006125976125908c8c6159c7565b8a89611327565b9050878111156125fb5760405162461bcd60e51b815260206004820152602960248201527f436f6c6c61746572616c206d75737420626520736d616c6c6572207468616e206044820152686c697175696469747960b81b6064820152608401610841565b6040805163f5a6a39f60e01b8152600481018d905260248101839052604481018a905287356064820152602088013560848201529087013560a482015260c4810186905260e48101859052610104810184905273__$3f85fbde44ed1f43c30acc3829f71e1fe6$__9063f5a6a39f906101240160206040518083038186803b15801561268657600080fd5b505af415801561269a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126be91906151f6565b9b9a5050505050505050505050565b6126d8600033613b1f565b60d054156127435760405162461bcd60e51b815260206004820152603260248201527f43616e6e6f74206368616e67652076616c75652077697468206578697374696e60448201527167206f70656e2070726f74656374696f6e7360701b6064820152608401610841565b60ca5460405163768da62360e01b815261ffff831660048201526001600160a01b039091169063768da62390602401600060405180830381600087803b15801561278c57600080fd5b505af11580156127a0573d6000803e3d6000fd5b5050505050565b60cb54604051626597ad60e71b815260009182916001600160a01b03909116906332cbd680906127dd908790879060040161554f565b60006040518083038186803b1580156127f557600080fd5b505afa158015612809573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261283191908101906150ab565b9050600060ca60009054906101000a90046001600160a01b03166001600160a01b03166363aa3bd96040518163ffffffff1660e01b815260040160206040518083038186803b15801561288357600080fd5b505afa158015612897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128bb919061518a565b61ffff16905060008160ca60009054906101000a90046001600160a01b03166001600160a01b031663da25cb0c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561291257600080fd5b505afa158015612926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294a919061518a565b61295690612710615b04565b61ffff1661296661271085615ae5565b61297091906159df565b61297a9190615b27565b9050600060cc60009054906101000a90046001600160a01b03166001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b1580156129cc57600080fd5b505afa1580156129e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0491906151f6565b90506000612a13828989613e91565b905060d58560000151604051612a29919061541a565b90815260200160405180910390208560200151604051612a49919061541a565b908152602001604051809103902054811115612b7057600073__$74c27fde70ce8ad359fdaa0b0e8bcf95a8$__637ae2b5c760d58860000151604051612a8f919061541a565b90815260200160405180910390208860200151604051612aaf919061541a565b90815260200160405180910390205484612ac99190615b27565b60ce54612ad69087615b27565b6040516001600160e01b031960e085901b1681526004810192909252602482015260440160206040518083038186803b158015612b1257600080fd5b505af4158015612b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4a91906151f6565b905083612b5961271083615ae5565b612b6391906159df565b96505050505050506107d5565b6000955050505050506107d5565b6000612b8a6001613f3a565b90508015612ba2576000805461ff0019166101001790555b612bab89613fc7565b60ca80546001600160a01b03199081166001600160a01b038b81169190911790925560cc805482168a841617905560cb8054821689841617905560c98054821688841617905560d68054821687841617905560cd805490911691851691909117905560d3829055801561238f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a1505050505050505050565b60ca54604051631373a3b760e21b8152600481018390526001600160a01b0390911690634dce8edc9060240160206040518083038186803b158015612ca757600080fd5b505afa158015612cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdf9190614d31565b612d235760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081c1bdb1a58de481c195c9a5bd9605a1b6044820152606401610841565b60008311612d915760405162461bcd60e51b815260206004820152603560248201527f6c70546f6b656e73576f727468417442757954696d655553442076616c75652060448201527406d757374206265206c6172676572207468616e203605c1b6064820152608401610841565b60ca60009054906101000a90046001600160a01b03166001600160a01b0316639852a4366040518163ffffffff1660e01b815260040160206040518083038186803b158015612ddf57600080fd5b505afa158015612df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e179190614d31565b612e635760405162461bcd60e51b815260206004820152601d60248201527f427579696e672070726f74656374696f6e2069732064697361626c65640000006044820152606401610841565b60cc5460408051630d34328160e11b815290516000926001600160a01b031691631a686502916004808301926020929190829003018186803b158015612ea857600080fd5b505afa158015612ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee091906151f6565b11612f1c5760405162461bcd60e51b815260206004820152600c60248201526b4e6f206c697175696469747960a01b6044820152606401610841565b60cb54604051626597ad60e71b81526000916001600160a01b0316906332cbd68090612f52908b908b908b908b9060040161550a565b60006040518083038186803b158015612f6a57600080fd5b505afa158015612f7e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612fa691908101906150ab565b90508360cf6000828254612fba91906159c7565b925050819055508360d46000828254612fd391906159c7565b92505081905550600080600080600080612ff833886000015189602001518d8c610972565b9550955095509550955095508160ce600082825461301691906159c7565b9091555050856130685760405162461bcd60e51b815260206004820152601760248201527f5072656d69756d20636f737420697320746f6f206c6f770000000000000000006044820152606401610841565b888611156130b85760405162461bcd60e51b815260206004820152601960248201527f4d6178207072656d69756d20636f7374206578636565646564000000000000006044820152606401610841565b60006130c48688615b27565b90508060cc60009054906101000a90046001600160a01b03166001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561311557600080fd5b505afa158015613129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061314d91906151f6565b61315791906159c7565b60ce54106131b75760405162461bcd60e51b815260206004820152602760248201527f4e6f7420656e6f75676820636f6c6c61746572616c20746f20706179206261636044820152663590313abcb2b960c91b6064820152608401610841565b61325b88600001518960200151858460cc60009054906101000a90046001600160a01b03166001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561321457600080fd5b505afa158015613228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061324c91906151f6565b61325691906159c7565b614009565b60c954604080516398bdf6f560e01b815290516000926001600160a01b0316916398bdf6f591600480830192602092919082900301818787803b1580156132a157600080fd5b505af11580156132b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d991906151f6565b905081156134775760006132ed8688615b27565b11156134135760cc546001600160a01b031663140216978233856133118a8c615b27565b60ca60009054906101000a90046001600160a01b03166001600160a01b031663edb1192e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561335f57600080fd5b505afa158015613373573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613397919061518a565b6040516001600160e01b031960e088901b16815260048101959095526001600160a01b0390931660248501526044840191909152606483015261ffff16608482015260a401600060405180830381600087803b1580156133f657600080fd5b505af115801561340a573d6000803e3d6000fd5b50505050613477565b60cc546040516256688760e81b8152336004820152602481018490526001600160a01b0390911690635668870090604401600060405180830381600087803b15801561345e57600080fd5b505af1158015613472573d6000803e3d6000fd5b505050505b86156134db5760d654604051632b385bbb60e01b81523360048201526001600160a01b0390911690632b385bbb90602401600060405180830381600087803b1580156134c257600080fd5b505af11580156134d6573d6000803e3d6000fd5b505050505b6134ee338a838f8e8d8d8d8d8c8e61410f565b50505050505050505050505050505050565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606000613537614557565b6001600160401b0381111561355c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613585578160200160208202803683370190505b5090506000805b60d0548110156136d05760c95460d080546000926001600160a01b03169163a08b2ef891859081106135ce57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546040518263ffffffff1660e01b81526004016135f791815260200190565b60006040518083038186803b15801561360f57600080fd5b505afa158015613623573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261364b9190810190614fae565b9050428160600151116136bd5760d0828154811061367957634e487b7160e01b600052603260045260246000fd5b906000526020600020015484848061369090615b85565b9550815181106136b057634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b50806136c881615b85565b91505061358c565b509092915050565b60008060cb60009054906101000a90046001600160a01b03166001600160a01b0316631af855fd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561372957600080fd5b505afa15801561373d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137619190615387565b90506000613771878787876139b1565b6040516306458b2960e51b8152600481018690526024810188905260ff8416604482015290915060009073__$74c27fde70ce8ad359fdaa0b0e8bcf95a8$__9063c8b16520908290829060640160206040518083038186803b1580156137d657600080fd5b505af41580156137ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380e91906151f6565b6040516306458b2960e51b8152600481018a9052602481018c905260ff8716604482015273__$74c27fde70ce8ad359fdaa0b0e8bcf95a8$__9063c8b165209060640160206040518083038186803b15801561386957600080fd5b505af415801561387d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138a191906151f6565b6138ab91906159c7565b6138b686600a615a3a565b6138c1906002615ae5565b6040516001600160e01b031960e085901b1681526004810192909252602482015260ff8616604482015260640160206040518083038186803b15801561390657600080fd5b505af415801561391a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061393e91906151f6565b9050600061394d84600a615a3a565b613957838c615ae5565b61396191906159df565b905061271061397461ffff851683615ae5565b61397e91906159df565b9a9950505050505050505050565b6000828152609760205260409020600101546139a781613c2d565b6113a68383613cbd565b604051635c441f0160e01b815260048101859052602481018490526044810183905260648101829052612710608482015260009073__$ea0342ddb0b76de250ae80bcd06f968256$__90635c441f019060a40160206040518083038186803b158015613a1c57600080fd5b505af4158015613a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611378919061518a565b6033546001600160a01b03163314613aae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610841565b6001600160a01b038116613b135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610841565b613b1c81613e3f565b50565b613b298282613500565b61142557613b41816001600160a01b0316601461464c565b613b4c83602061464c565b604051602001613b5d929190615436565b60408051601f198184030181529082905262461bcd60e51b82526108419160040161553c565b60008060cd60009054906101000a90046001600160a01b03166001600160a01b031663c1639a2b6040518163ffffffff1660e01b815260040160606040518083038186803b158015613bd457600080fd5b505afa158015613be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c0c91906151a6565b50509050662386f26fc100008161ffff16613c279190615ae5565b91505090565b613b1c8133613b1f565b613c418282613500565b6114255760008281526097602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613c793390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b613cc78282613500565b156114255760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000806000613d428760a001518760010154886002015488886136d8565b905060008160ca60009054906101000a90046001600160a01b03166001600160a01b031663a38d0aef6040518163ffffffff1660e01b815260040160206040518083038186803b158015613d9557600080fd5b505afa158015613da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dcd91906151f6565b1190508015613ddf5760009150613df3565b8660050154821115613df357866005015491505b9097909650945050505050565b7f98a18ec4dddf286e417c85b9ee7e8130a54129d8d1248c8be36f3b25530f43f7898989898989898989604051612c50999897969594939291906155e2565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60cb5460405163cdf6dab760e01b8152600091612710916001600160a01b039091169063cdf6dab790613eca908790879060040161554f565b60206040518083038186803b158015613ee257600080fd5b505afa158015613ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f1a919061518a565b613f289061ffff1686615ae5565b613f3291906159df565b949350505050565b60008054610100900460ff1615613f81578160ff166001148015613f5d5750303b155b613f795760405162461bcd60e51b815260040161084190615643565b506000919050565b60005460ff808416911610613fa85760405162461bcd60e51b815260040161084190615643565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16613fee5760405162461bcd60e51b815260040161084190615691565b613ff661482d565b613ffe61485c565b613b13600082614883565b6000614016828686613e91565b90508260d586604051614029919061541a565b908152602001604051809103902085604051614045919061541a565b90815260200160405180910390205461405e91906159c7565b8110156140b95760405162461bcd60e51b8152602060048201526024808201527f5061697220636f6c6c61746572616c2063617020686173206265656e2072656160448201526318da195960e21b6064820152608401610841565b8260d5866040516140ca919061541a565b9081526020016040518091039020856040516140e6919061541a565b9081526020016040518091039020600082825461410391906159c7565b90915550505050505050565b6141208b8b8a8a8a8a8a8a8a61488d565b60d08054600181810183556000929092527fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb018a905560408051610160810182528b815260cb548d5160208f810151945163ccc0628160e01b81529395908601946001600160a01b039093169363ccc06281936141a293929091600401615574565b60206040518083038186803b1580156141ba57600080fd5b505afa1580156141ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141f291906151f6565b815260cb548c5160208e81015160405163ccc0628160e01b815291909401936001600160a01b039093169263ccc062819261423592909190600090600401615574565b60206040518083038186803b15801561424d57600080fd5b505afa158015614261573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061428591906151f6565b8152602001600081526020016000815260200182815260200160008152602001600160d0805490506142b79190615b27565b815260200160011515815260200185815260200160ca60009054906101000a90046001600160a01b03166001600160a01b031663edb1192e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561431957600080fd5b505afa15801561432d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614351919061518a565b61ffff90811690915260008b815260d1602090815260409182902084518155908401516001820155908301516002820155606083015160038201556080830151600482015560a0830151600582015560c0830151600682015560e0830151600782015561010083015160088201805460ff1916911515919091179055610120830151600982015561014090920151600a909201805461ffff1916929091169190911790556144038b8b8b8a8a89614982565b61454a8a600001518b602001518b8460d58f60000151604051614426919061541a565b90815260200160405180910390208f60200151604051614446919061541a565b90815260200160405180910390205461445f9190615b27565b8e5160405160d5916144709161541a565b90815260200160405180910390208f60200151604051614490919061541a565b9081526020016040518091039020548660ce546144ad9190615b27565b60ce546144ba8d8f615b27565b60cc60009054906101000a90046001600160a01b03166001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561450857600080fd5b505afa15801561451c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061454091906151f6565b611dec9190615b27565b5050505050505050505050565b6000805b60d0548110156146485760c95460d080546000926001600160a01b03169163a08b2ef8918590811061459d57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546040518263ffffffff1660e01b81526004016145c691815260200190565b60006040518083038186803b1580156145de57600080fd5b505afa1580156145f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261461a9190810190614fae565b905042816060015111614635578261463181615b85565b9350505b508061464081615b85565b91505061455b565b5090565b6060600061465b836002615ae5565b6146669060026159c7565b6001600160401b0381111561468b57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156146b5576020820181803683370190505b509050600360fc1b816000815181106146de57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061471b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061473f846002615ae5565b61474a9060016159c7565b90505b60018111156147de576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061478c57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106147b057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936147d781615b6e565b905061474d565b5083156108ad5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610841565b600054610100900460ff166148545760405162461bcd60e51b815260040161084190615691565b61252e614a0b565b600054610100900460ff1661252e5760405162461bcd60e51b815260040161084190615691565b6114258282613c37565b60c95460408051610140810182526001600160a01b038c811682524260208301529092169163e042af9d9181016148c38a614a3b565b81526020016148d2878a6159c7565b81526020018a81526020018b6000015181526020018b60200151815260200189815260200184600281111561491757634e487b7160e01b600052602160045260246000fd5b815260200161492686896159c7565b8152506040518263ffffffff1660e01b81526004016149459190615728565b600060405180830381600087803b15801561495f57600080fd5b505af1158015614973573d6000803e3d6000fd5b50505050505050505050505050565b856001600160a01b0316847f7b8fe50e11f1dd5b25013705912a6af2f4961cf940564ad8cb70ab43c169d526426149b887614a3b565b6149c286886159c7565b8a516020808d015160008d815260d1909252604091829020600181015460029091015460ce5493516149fb98979695948f9392916157dc565b60405180910390a3505050505050565b600054610100900460ff16614a325760405162461bcd60e51b815260040161084190615691565b61252e33613e3f565b60006107d582426159c7565b8051613fc281615bcc565b80518015158114613fc257600080fd5b60008083601f840112614a73578182fd5b5081356001600160401b03811115614a89578182fd5b602083019150836020828501011115614aa157600080fd5b9250929050565b805160038110613fc257600080fd5b600082601f830112614ac7578081fd5b8135614ada614ad5826159a0565b615970565b818152846020838601011115614aee578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112614b18578081fd5b8151614b26614ad5826159a0565b818152846020838601011115614b3a578283fd5b613f32826020830160208701615b3e565b600060208284031215614b5c578081fd5b81356108ad81615bcc565b600080600080600080600080610100898b031215614b83578384fd5b8835614b8e81615bcc565b97506020890135614b9e81615bcc565b96506040890135614bae81615bcc565b95506060890135614bbe81615bcc565b94506080890135614bce81615bcc565b935060a0890135614bde81615bcc565b925060c0890135614bee81615bcc565b8092505060e089013590509295985092959890939650565b600080600080600060a08688031215614c1d578283fd5b8535614c2881615bcc565b945060208601356001600160401b0380821115614c43578485fd5b614c4f89838a01614ab7565b95506040880135915080821115614c64578485fd5b50614c7188828901614ab7565b9598949750949560608101359550608001359392505050565b60006020808385031215614c9c578182fd5b82356001600160401b0380821115614cb2578384fd5b818501915085601f830112614cc5578384fd5b813581811115614cd757614cd7615bb6565b8060051b9150614ce8848301615970565b8181528481019084860184860187018a1015614d02578788fd5b8795505b83861015614d24578035835260019590950194918601918601614d06565b5098975050505050505050565b600060208284031215614d42578081fd5b6108ad82614a52565b600060208284031215614d5c578081fd5b5035919050565b60008060408385031215614d75578182fd5b823591506020830135614d8781615bcc565b809150509250929050565b600060208284031215614da3578081fd5b81356001600160e01b0319811681146108ad578182fd5b60008060208385031215614dcc578182fd5b82356001600160401b03811115614de1578283fd5b614ded85828601614a62565b90969095509350505050565b600080600080600080600060a0888a031215614e13578081fd5b87356001600160401b0380821115614e29578283fd5b614e358b838c01614a62565b909950975060208a0135915080821115614e4d578283fd5b50614e5a8a828b01614a62565b989b979a50986040810135976060820135975060809091013595509350505050565b60008060408385031215614e8e578182fd5b82356001600160401b0380821115614ea4578384fd5b614eb086838701614ab7565b93506020850135915080821115614ec5578283fd5b50614ed285828601614ab7565b9150509250929050565b600060808284031215614eed578081fd5b604051608081018181106001600160401b0382111715614f0f57614f0f615bb6565b604052614f1b83614aa8565b8152614f2960208401614a52565b60208201526040830151614f3c81615be1565b60408201526060928301519281019290925250919050565b600060608284031215614f65578081fd5b604051606081018181106001600160401b0382111715614f8757614f87615bb6565b80604052508251815260208301516020820152604083015160408201528091505092915050565b600060208284031215614fbf578081fd5b81516001600160401b0380821115614fd5578283fd5b908301906101608286031215614fe9578283fd5b614ff1615925565b8251815261500160208401614a47565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c08301518281111561503f578485fd5b61504b87828601614b08565b60c08301525060e083015182811115615062578485fd5b61506e87828601614b08565b60e0830152506101008381015190820152610120915061508f828401614aa8565b9181019190915261014091820151918101919091529392505050565b6000602082840312156150bc578081fd5b81516001600160401b03808211156150d2578283fd5b9083019060a082860312156150e5578283fd5b6150ed61594e565b8251828111156150fb578485fd5b61510787828601614b08565b82525060208301518281111561511b578485fd5b61512787828601614b08565b6020830152506040830151915061513d82615bcc565b81604082015261514f60608401614a47565b606082015261516060808401614a52565b608082015295945050505050565b60006020828403121561517f578081fd5b81356108ad81615be1565b60006020828403121561519b578081fd5b81516108ad81615be1565b6000806000606084860312156151ba578081fd5b83516151c581615be1565b602085015190935069ffffffffffffffffffff811681146151e4578182fd5b80925050604084015190509250925092565b600060208284031215615207578081fd5b5051919050565b60008060408385031215615220578182fd5b823591506020830135614d8781615be1565b600080600060608486031215615246578081fd5b83359250602084013561525881615be1565b9150604084013561526881615be1565b809150509250925092565b6000806000806000806000806000898b03610160811215615292578384fd5b8a35995060208b0135985060408b01356152ab81615be1565b975060608b0135965060808b01356152c281615be1565b95506060609f19820112156152d5578384fd5b50979a9699509497939650919460a08401945061010084013593610120810135935061014001359150565b60008060008060808587031215615315578182fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a08688031215615348578283fd5b505083359560208501359550604085013594606081013594506080013592509050565b60006020828403121561537c578081fd5b81356108ad81615bf1565b600060208284031215615398578081fd5b81516108ad81615bf1565b600081518084526153bb816020860160208601615b3e565b601f01601f19169290920160200192915050565b600381106153ed57634e487b7160e01b600052602160045260246000fd5b9052565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000825161542c818460208701615b3e565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161546e816017850160208801615b3e565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161549f816028840160208801615b3e565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b818110156154e3578351835292840192918401916001016154c7565b50909695505050505050565b8215158152604060208201526000613f3260408301846153a3565b60408152600061551e6040830186886153f1565b82810360208401526155318185876153f1565b979650505050505050565b6020815260006108ad60208301846153a3565b60408152600061556260408301856153a3565b828103602084015261137881856153a3565b60608152600061558760608301866153a3565b828103602084015261559981866153a3565b9150508215156040830152949350505050565b6060815260006155bf60608301866153a3565b82810360208401526155d181866153a3565b915050826040830152949350505050565b60006101208083526155f68184018d6153a3565b9050828103602084015261560a818c6153a3565b604084019a909a5250506060810196909652608086019490945260a085019290925260c084015260e08301526101009091015292915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252602c908201527f50726f74656374696f6e2069732065697468657220636c6f736564206f72206460408201526b1bd95cdb89dd08195e1a5cdd60a21b606082015260800190565b602081526157426020820183516001600160a01b03169052565b602082015160408201526040820151606082015260608201516080820152608082015160a0820152600060a08301516101408060c08501526157886101608501836153a3565b915060c0850151601f198584030160e08601526157a583826153a3565b92505060e08501516101008181870152808701519150506101206157cb818701836153cf565b959095015193019290925250919050565b60006101208b83528a60208401528960408401528060608401526158028184018a6153a3565b9050828103608084015261581681896153a3565b9150508560a08301528460c08301528360e0830152826101008301529a9950505050505050505050565b96875260208088019690965260408088019590955283516060880152948301516080870152919092015160a085015260c084019190915260e08301526101008201526101200190565b60006101408c83528b60208401528a60408401528960608401528060808401526158b58184018a6153a3565b905082810360a08401526158c981896153a3565b9150508560c08301528460e083015283610100830152826101208301529b9a5050505050505050505050565b600060c08201905087825286602083015285604083015284606083015283608083015261553160a08301846153cf565b60405161016081016001600160401b038111828210171561594857615948615bb6565b60405290565b60405160a081016001600160401b038111828210171561594857615948615bb6565b604051601f8201601f191681016001600160401b038111828210171561599857615998615bb6565b604052919050565b60006001600160401b038211156159b9576159b9615bb6565b50601f01601f191660200190565b600082198211156159da576159da615ba0565b500190565b6000826159fa57634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156124c2578160001904821115615a2057615a20615ba0565b80851615615a2d57918102915b93841c9390800290615a04565b60006108ad60ff841683600082615a53575060016107d5565b81615a60575060006107d5565b8160018114615a765760028114615a8057615a9c565b60019150506107d5565b60ff841115615a9157615a91615ba0565b50506001821b6107d5565b5060208310610133831016604e8410600b8410161715615abf575081810a6107d5565b615ac983836159ff565b8060001904821115615add57615add615ba0565b029392505050565b6000816000190483118215151615615aff57615aff615ba0565b500290565b600061ffff83811690831681811015615b1f57615b1f615ba0565b039392505050565b600082821015615b3957615b39615ba0565b500390565b60005b83811015615b59578181015183820152602001615b41565b83811115615b68576000848401525b50505050565b600081615b7d57615b7d615ba0565b506000190190565b6000600019821415615b9957615b99615ba0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613b1c57600080fd5b61ffff81168114613b1c57600080fd5b60ff81168114613b1c57600080fdfea2646970667358221220d89116edc8ddb3a58f1a5c3e23cd10be0f8c8b57683a9bcbe5343c719f169a7f64736f6c63430008040033",
  "libraries": {
    "ILUtils": "0x71b42bEef3ebEeEa766312bEfA26B5fE054d2137",
    "MathUtils": "0xE1db41617188103cD5E4B2EBdA9C2fb2D0f0a375",
    "PremiumCalculator": "0xA44Fd9588BFf29Ba405E428F21224b035A9f13bf"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29805,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 29808,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 32662,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 29685,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 29797,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 32909,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 29301,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)29296_storage)"
      },
      {
        "astId": 29600,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 23756,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "protectionNFT",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(ILProtectionNFTInterface)28466"
      },
      {
        "astId": 23760,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "protectionConfig",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(ILProtectionConfigInterface)27876"
      },
      {
        "astId": 23764,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "tokenPairRepository",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(ITokenPairRepository)28778"
      },
      {
        "astId": 23768,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "liquidityController",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(ILiquidityController)28572"
      },
      {
        "astId": 23772,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "cviOracle",
        "offset": 0,
        "slot": "205",
        "type": "t_contract(CVIOracle)296"
      },
      {
        "astId": 23775,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "collateral",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 23778,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "totalLPTokensWorthAtBuyTimeUSD",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 23781,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "openProtectionsIds",
        "offset": 0,
        "slot": "208",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 23786,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "openProtectionsWithMetadata",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_uint256,t_struct(ILProtectionWithMetadata)23740_storage)"
      },
      {
        "astId": 23791,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "closedProtectionsWithMetadata",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_uint256,t_struct(ILProtectionWithMetadata)23740_storage)"
      },
      {
        "astId": 23793,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "maxProtectionsInUpkeep",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 23796,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "cumulativeSumLPTokensWorthAtBuyTimeUSD",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 23802,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "pairsCollaterals",
        "offset": 0,
        "slot": "213",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_uint256))"
      },
      {
        "astId": 23806,
        "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
        "label": "protectionDiscountNFTController",
        "offset": 0,
        "slot": "214",
        "type": "t_contract(ILProtectionDiscountNFTControllerInterface)28310"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CVIOracle)296": {
        "encoding": "inplace",
        "label": "contract CVIOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ILProtectionConfigInterface)27876": {
        "encoding": "inplace",
        "label": "contract ILProtectionConfigInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ILProtectionDiscountNFTControllerInterface)28310": {
        "encoding": "inplace",
        "label": "contract ILProtectionDiscountNFTControllerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ILProtectionNFTInterface)28466": {
        "encoding": "inplace",
        "label": "contract ILProtectionNFTInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ILiquidityController)28572": {
        "encoding": "inplace",
        "label": "contract ILiquidityController",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenPairRepository)28778": {
        "encoding": "inplace",
        "label": "contract ITokenPairRepository",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)29296_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)29296_storage"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(string => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(ILProtectionWithMetadata)23740_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ILProtectionWithMetadata)",
        "numberOfBytes": "32",
        "value": "t_struct(ILProtectionWithMetadata)23740_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ILProtectionWithMetadata)23740_storage": {
        "encoding": "inplace",
        "label": "struct ILProtectionWithMetadata",
        "members": [
          {
            "astId": 23719,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
            "label": "protectionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23721,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
            "label": "token1EntryPriceUSD",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 23723,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
            "label": "token2EntryPriceUSD",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 23725,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
            "label": "token1EndPriceUSD",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 23727,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
            "label": "token2EndPriceUSD",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 23729,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
            "label": "maxAmountToBePaid",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 23731,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
            "label": "amountPaidOnPolicyClose",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 23733,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
            "label": "mappingIdx",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 23735,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
            "label": "exists",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 23737,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
            "label": "fee",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 23739,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
            "label": "feeComponent",
            "offset": 0,
            "slot": "10",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(RoleData)29296_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 29293,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 29295,
            "contract": "@coti-cvi/contracts-il/contracts/ILProtectionController.sol:ILProtectionController",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}