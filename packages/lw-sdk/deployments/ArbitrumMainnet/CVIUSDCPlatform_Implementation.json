{
  "address": "0x8a53460ea9Cd297B2283085AF8ff675cd9f8FC09",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionUnitsAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "leverage",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cviValue",
          "type": "uint256"
        }
      ],
      "name": "ClosePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokensAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "positionAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentPositionBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBalancePositive",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionUnitsAmount",
          "type": "uint256"
        }
      ],
      "name": "LiquidatePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "leverage",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionUnitsAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cviValue",
          "type": "uint256"
        }
      ],
      "name": "OpenPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokensAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_FEE_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint168",
          "name": "",
          "type": "uint168"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyersLockupPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateLatestTurbulenceIndicatorPercent",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionAddress",
          "type": "address"
        }
      ],
      "name": "calculatePositionBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentPositionBalance",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPositive",
          "type": "bool"
        },
        {
          "internalType": "uint168",
          "name": "positionUnitsAmount",
          "type": "uint168"
        },
        {
          "internalType": "uint8",
          "name": "leverage",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "fundingFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "marginDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionAddress",
          "type": "address"
        },
        {
          "internalType": "uint168",
          "name": "_positionUnitsAmount",
          "type": "uint168"
        }
      ],
      "name": "calculatePositionPendingFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingFees",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint168",
          "name": "_positionUnitsAmount",
          "type": "uint168"
        },
        {
          "internalType": "uint32",
          "name": "_minCVI",
          "type": "uint32"
        }
      ],
      "name": "closePosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "closePositionFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "closingPremiumFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint168",
          "name": "_positionUnitsAmount",
          "type": "uint168"
        },
        {
          "internalType": "uint32",
          "name": "_minCVI",
          "type": "uint32"
        }
      ],
      "name": "closePositionWithoutFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "closePositionFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "closingPremiumFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cviOracle",
      "outputs": [
        {
          "internalType": "contract ICVIOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cviSnapshots",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minLPTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdrawAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesCalculator",
      "outputs": [
        {
          "internalType": "contract IFeesCalculator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesCollector",
      "outputs": [
        {
          "internalType": "contract IFeesCollector",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "increaseSharedPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "increaseSharedPoolAllowedAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialTokenToLPTokenRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_lpTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_lpTokenSymbolName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_initialTokenToLPTokenRate",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_maxCVIValue",
          "type": "uint32"
        },
        {
          "internalType": "contract IFeesCalculator",
          "name": "_feesCalculator",
          "type": "address"
        },
        {
          "internalType": "contract ICVIOracle",
          "name": "_cviOracle",
          "type": "address"
        },
        {
          "internalType": "contract ILiquidation",
          "name": "_liquidation",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastDepositTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestFundingFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestOracleRoundId",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestSnapshotTimestamp",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_positionOwners",
          "type": "address[]"
        }
      ],
      "name": "liquidatePositions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "finderFeeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidation",
      "outputs": [
        {
          "internalType": "contract ILiquidation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidityProviders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpsLockupPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAllowedLeverage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCVIValue",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTimeAllowedAfterLatestRound",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "noLockPositionAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint168",
          "name": "_tokenAmount",
          "type": "uint168"
        },
        {
          "internalType": "uint32",
          "name": "_maxCVI",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_maxBuyingPremiumFeePercentage",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "_leverage",
          "type": "uint8"
        }
      ],
      "name": "openPosition",
      "outputs": [
        {
          "internalType": "uint168",
          "name": "positionUnitsAmount",
          "type": "uint168"
        },
        {
          "internalType": "uint168",
          "name": "positionedTokenAmount",
          "type": "uint168"
        },
        {
          "internalType": "uint168",
          "name": "openPositionFee",
          "type": "uint168"
        },
        {
          "internalType": "uint168",
          "name": "buyingPremiumFee",
          "type": "uint168"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint168",
          "name": "_tokenAmount",
          "type": "uint168"
        },
        {
          "internalType": "uint32",
          "name": "_maxCVI",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "_leverage",
          "type": "uint8"
        }
      ],
      "name": "openPositionWithoutFee",
      "outputs": [
        {
          "internalType": "uint168",
          "name": "positionUnitsAmount",
          "type": "uint168"
        },
        {
          "internalType": "uint168",
          "name": "positionedTokenAmount",
          "type": "uint168"
        },
        {
          "internalType": "uint168",
          "name": "openPositionFee",
          "type": "uint168"
        },
        {
          "internalType": "uint168",
          "name": "buyingPremiumFee",
          "type": "uint168"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "positionHoldersAllowedAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "uint168",
          "name": "positionUnitsAmount",
          "type": "uint168"
        },
        {
          "internalType": "uint8",
          "name": "leverage",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "openCVIValue",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "creationTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "originalCreationTimestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "revertLockedTransfered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "contract IRewardsCollector",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holderAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_shouldLockPosition",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_positionHolderAllowed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_increaseSharedPoolAllowed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_isLiquidityProvider",
          "type": "bool"
        }
      ],
      "name": "setAddressSpecificParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_newEmergencyWithdrawAllowed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_newCanPurgeSnapshots",
          "type": "bool"
        }
      ],
      "name": "setEmergencyParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFeesCalculator",
          "name": "_newCalculator",
          "type": "address"
        }
      ],
      "name": "setFeesCalculator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_newOracleRoundId",
          "type": "uint80"
        }
      ],
      "name": "setLatestOracleRoundId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newLPLockupPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newBuyersLockupPeriod",
          "type": "uint256"
        }
      ],
      "name": "setLockupPeriods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_newMaxAllowedLeverage",
          "type": "uint8"
        }
      ],
      "name": "setMaxAllowedLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_newMaxTimeAllowedAfterLatestRound",
          "type": "uint32"
        }
      ],
      "name": "setMaxTimeAllowedAfterLatestRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_revertLockedTransfers",
          "type": "bool"
        }
      ],
      "name": "setRevertLockedTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFeesCollector",
          "name": "_newCollector",
          "type": "address"
        },
        {
          "internalType": "contract ICVIOracle",
          "name": "_newOracle",
          "type": "address"
        },
        {
          "internalType": "contract IRewardsCollector",
          "name": "_newRewards",
          "type": "address"
        },
        {
          "internalType": "contract ILiquidation",
          "name": "_newLiquidation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newStakingContractAddress",
          "type": "address"
        }
      ],
      "name": "setSubContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_withAddendum",
          "type": "bool"
        }
      ],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFundingFeesAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLeveragedTokensAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPositionUnitsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxLPTokenBurnAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "burntAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpTokensAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawLPTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "burntAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x22460c3db1e25d75be16071ee953ba2f12c02718b57a11f4136e7ce7e6f6ec97",
  "receipt": {
    "to": null,
    "from": "0x0b3D7b3F149214f8f5281b5aE613B090fD39BD3F",
    "contractAddress": "0x8a53460ea9Cd297B2283085AF8ff675cd9f8FC09",
    "transactionIndex": 1,
    "gasUsed": "23874335",
    "logsBloom": "0x
    "blockHash": "0xe8d8caaf22e3a4adf59ff3679545ecd1c83129d4ffab3294e0a6aa9d229b6640",
    "transactionHash": "0x22460c3db1e25d75be16071ee953ba2f12c02718b57a11f4136e7ce7e6f6ec97",
    "logs": [],
    "blockNumber": 29537836,
    "cumulativeGasUsed": "23874335",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8d836039a3333aa7ff1a69dee5a5f235",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionUnitsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"leverage\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cviValue\",\"type\":\"uint256\"}],\"name\":\"ClosePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"positionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPositionBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBalancePositive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionUnitsAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidatePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"leverage\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionUnitsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cviValue\",\"type\":\"uint256\"}],\"name\":\"OpenPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint168\",\"name\":\"\",\"type\":\"uint168\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyersLockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateLatestTurbulenceIndicatorPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionAddress\",\"type\":\"address\"}],\"name\":\"calculatePositionBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPositionBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPositive\",\"type\":\"bool\"},{\"internalType\":\"uint168\",\"name\":\"positionUnitsAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint8\",\"name\":\"leverage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fundingFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marginDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionAddress\",\"type\":\"address\"},{\"internalType\":\"uint168\",\"name\":\"_positionUnitsAmount\",\"type\":\"uint168\"}],\"name\":\"calculatePositionPendingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint168\",\"name\":\"_positionUnitsAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint32\",\"name\":\"_minCVI\",\"type\":\"uint32\"}],\"name\":\"closePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closePositionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closingPremiumFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint168\",\"name\":\"_positionUnitsAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint32\",\"name\":\"_minCVI\",\"type\":\"uint32\"}],\"name\":\"closePositionWithoutFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closePositionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closingPremiumFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cviOracle\",\"outputs\":[{\"internalType\":\"contract ICVIOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cviSnapshots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minLPTokenAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCalculator\",\"outputs\":[{\"internalType\":\"contract IFeesCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCollector\",\"outputs\":[{\"internalType\":\"contract IFeesCollector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"increaseSharedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"increaseSharedPoolAllowedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTokenToLPTokenRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_lpTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_lpTokenSymbolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_initialTokenToLPTokenRate\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_maxCVIValue\",\"type\":\"uint32\"},{\"internalType\":\"contract IFeesCalculator\",\"name\":\"_feesCalculator\",\"type\":\"address\"},{\"internalType\":\"contract ICVIOracle\",\"name\":\"_cviOracle\",\"type\":\"address\"},{\"internalType\":\"contract ILiquidation\",\"name\":\"_liquidation\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDepositTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestFundingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestOracleRoundId\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestSnapshotTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_positionOwners\",\"type\":\"address[]\"}],\"name\":\"liquidatePositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finderFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidation\",\"outputs\":[{\"internalType\":\"contract ILiquidation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityProviders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpsLockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllowedLeverage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCVIValue\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTimeAllowedAfterLatestRound\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noLockPositionAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint168\",\"name\":\"_tokenAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint32\",\"name\":\"_maxCVI\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_maxBuyingPremiumFeePercentage\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_leverage\",\"type\":\"uint8\"}],\"name\":\"openPosition\",\"outputs\":[{\"internalType\":\"uint168\",\"name\":\"positionUnitsAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint168\",\"name\":\"positionedTokenAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint168\",\"name\":\"openPositionFee\",\"type\":\"uint168\"},{\"internalType\":\"uint168\",\"name\":\"buyingPremiumFee\",\"type\":\"uint168\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint168\",\"name\":\"_tokenAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint32\",\"name\":\"_maxCVI\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_leverage\",\"type\":\"uint8\"}],\"name\":\"openPositionWithoutFee\",\"outputs\":[{\"internalType\":\"uint168\",\"name\":\"positionUnitsAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint168\",\"name\":\"positionedTokenAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint168\",\"name\":\"openPositionFee\",\"type\":\"uint168\"},{\"internalType\":\"uint168\",\"name\":\"buyingPremiumFee\",\"type\":\"uint168\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"positionHoldersAllowedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint168\",\"name\":\"positionUnitsAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint8\",\"name\":\"leverage\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"openCVIValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"creationTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"originalCreationTimestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"revertLockedTransfered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"contract IRewardsCollector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holderAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_shouldLockPosition\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_positionHolderAllowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_increaseSharedPoolAllowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isLiquidityProvider\",\"type\":\"bool\"}],\"name\":\"setAddressSpecificParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newEmergencyWithdrawAllowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_newCanPurgeSnapshots\",\"type\":\"bool\"}],\"name\":\"setEmergencyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeesCalculator\",\"name\":\"_newCalculator\",\"type\":\"address\"}],\"name\":\"setFeesCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_newOracleRoundId\",\"type\":\"uint80\"}],\"name\":\"setLatestOracleRoundId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLPLockupPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBuyersLockupPeriod\",\"type\":\"uint256\"}],\"name\":\"setLockupPeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newMaxAllowedLeverage\",\"type\":\"uint8\"}],\"name\":\"setMaxAllowedLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_newMaxTimeAllowedAfterLatestRound\",\"type\":\"uint32\"}],\"name\":\"setMaxTimeAllowedAfterLatestRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_revertLockedTransfers\",\"type\":\"bool\"}],\"name\":\"setRevertLockedTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeesCollector\",\"name\":\"_newCollector\",\"type\":\"address\"},{\"internalType\":\"contract ICVIOracle\",\"name\":\"_newOracle\",\"type\":\"address\"},{\"internalType\":\"contract IRewardsCollector\",\"name\":\"_newRewards\",\"type\":\"address\"},{\"internalType\":\"contract ILiquidation\",\"name\":\"_newLiquidation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newStakingContractAddress\",\"type\":\"address\"}],\"name\":\"setSubContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withAddendum\",\"type\":\"bool\"}],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFundingFeesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLeveragedTokensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPositionUnitsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLPTokenBurnAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokensAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawLPTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/platform/PlatformContracts.sol\":\"CVIUSDCPlatform\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@coti-cvi/contracts-cvi/contracts/Platform.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IPlatform.sol\\\";\\n\\ncontract Platform is Initializable, IPlatform, OwnableUpgradeable, ERC20Upgradeable, ReentrancyGuardUpgradeable {\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    uint80 public latestOracleRoundId;\\n    uint32 public latestSnapshotTimestamp;\\n    uint32 public maxTimeAllowedAfterLatestRound;\\n\\n    bool private canPurgeLatestSnapshot;\\n    bool public emergencyWithdrawAllowed;\\n    bool private purgeSnapshots;\\n\\n    uint8 public maxAllowedLeverage;\\n    uint32 public override maxCVIValue;\\n\\n    uint168 public constant MAX_FEE_PERCENTAGE = 10000;\\n    uint256 public override constant PRECISION_DECIMALS = 1e10;\\n\\n    uint256 public initialTokenToLPTokenRate;\\n\\n    IERC20Upgradeable public token;\\n    ICVIOracle public override cviOracle;\\n    ILiquidation public liquidation;\\n    IFeesCalculator public override feesCalculator;\\n    IFeesCollector public feesCollector;\\n    IRewardsCollector public rewards;\\n\\n    uint256 public lpsLockupPeriod;\\n    uint256 public override buyersLockupPeriod;\\n\\n    uint256 public override totalPositionUnitsAmount;\\n    uint256 public override totalFundingFeesAmount;\\n    uint256 public override totalLeveragedTokensAmount;\\n\\n    address public stakingContractAddress;\\n    \\n    mapping(uint256 => uint256) public cviSnapshots;\\n\\n    mapping(address => uint256) public lastDepositTimestamp;\\n    mapping(address => Position) public override positions;\\n\\n    mapping(address => bool) public noLockPositionAddresses;\\n    mapping(address => bool) public positionHoldersAllowedAddresses;\\n    mapping(address => bool) public increaseSharedPoolAllowedAddresses;\\n\\n    mapping(address => bool) public revertLockedTransfered;\\n\\n    mapping(address => bool) public liquidityProviders;\\n\\n    function initialize(IERC20Upgradeable _token, string memory _lpTokenName, string memory _lpTokenSymbolName, uint256 _initialTokenToLPTokenRate, uint32 _maxCVIValue,\\n        IFeesCalculator _feesCalculator,\\n        ICVIOracle _cviOracle,\\n        ILiquidation _liquidation) public initializer {\\n\\n        maxTimeAllowedAfterLatestRound = 5 hours;\\n        canPurgeLatestSnapshot = false;\\n        emergencyWithdrawAllowed = false;\\n        purgeSnapshots = true;\\n\\n        maxAllowedLeverage = 1;\\n\\n        lpsLockupPeriod = 3 days;\\n        buyersLockupPeriod = 6 hours;\\n\\n        stakingContractAddress = address(0);\\n\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        OwnableUpgradeable.__Ownable_init();\\n        ERC20Upgradeable.__ERC20_init(_lpTokenName, _lpTokenSymbolName);\\n\\n        token = _token;\\n        initialTokenToLPTokenRate = _initialTokenToLPTokenRate;\\n        maxCVIValue = _maxCVIValue;\\n        feesCalculator = _feesCalculator;\\n        cviOracle = _cviOracle;\\n        liquidation = _liquidation;\\n    }\\n\\n    function deposit(uint256 _tokenAmount, uint256 _minLPTokenAmount) external virtual override returns (uint256 lpTokenAmount) {\\n        require(liquidityProviders[msg.sender]); // \\\"Not allowed\\\"\\n        return _deposit(_tokenAmount, _minLPTokenAmount);\\n    }\\n\\n    function withdraw(uint256 _tokenAmount, uint256 _maxLPTokenBurnAmount) external override returns (uint256 burntAmount, uint256 withdrawnAmount) {\\n        require(liquidityProviders[msg.sender]); // \\\"Not allowed\\\"\\n        (burntAmount, withdrawnAmount) = _withdraw(_tokenAmount, false, _maxLPTokenBurnAmount);\\n    }\\n\\n    function withdrawLPTokens(uint256 _lpTokensAmount) external override returns (uint256 burntAmount, uint256 withdrawnAmount) {\\n        require(liquidityProviders[msg.sender]); // \\\"Not allowed\\\"\\n        require(_lpTokensAmount > 0); // \\\"Amount must be positive\\\"\\n        (burntAmount, withdrawnAmount) = _withdraw(0, true, _lpTokensAmount);\\n    }\\n\\n    function increaseSharedPool(uint256 _tokenAmount) external virtual override {\\n        _increaseSharedPool(_tokenAmount);\\n    }\\n\\n    function openPositionWithoutFee(uint168 _tokenAmount, uint32 _maxCVI, uint8 _leverage) external override virtual returns (uint168 positionUnitsAmount, uint168 positionedTokenAmount, uint168 openPositionFee, uint168 buyingPremiumFee) {\\n        return _openPosition(_tokenAmount, _maxCVI, 0, _leverage, false);\\n    }\\n\\n    function openPosition(uint168 _tokenAmount, uint32 _maxCVI, uint16 _maxBuyingPremiumFeePercentage, uint8 _leverage) external override virtual returns (uint168 positionUnitsAmount, uint168 positionedTokenAmount, uint168 openPositionFee, uint168 buyingPremiumFee) {\\n        return _openPosition(_tokenAmount, _maxCVI, _maxBuyingPremiumFeePercentage, _leverage, true);\\n    }\\n\\n    function closePositionWithoutFee(uint168 _positionUnitsAmount, uint32 _minCVI) external override returns (uint256 tokenAmount, uint256 closePositionFee, uint256 closingPremiumFee) {\\n        return _closePosition(_positionUnitsAmount, _minCVI, false);\\n    }\\n\\n    function closePosition(uint168 _positionUnitsAmount, uint32 _minCVI) external override virtual returns (uint256 tokenAmount, uint256 closePositionFee, uint256 closingPremiumFee) {\\n        return _closePosition(_positionUnitsAmount, _minCVI, true);\\n    }\\n\\n    function _closePosition(uint168 _positionUnitsAmount, uint32 _minCVI, bool _chargeCloseFee) private nonReentrant returns (uint256 tokenAmount, uint256 closePositionFee, uint256 closingPremiumFee) {\\n        require(positionHoldersAllowedAddresses[msg.sender]); // \\\"Not allowed\\\"\\n        require(_positionUnitsAmount > 0); // \\\"Position units not positive\\\"\\n        require(_minCVI > 0 && _minCVI <= maxCVIValue); // \\\"Bad min CVI value\\\"\\n\\n        Position storage position = positions[msg.sender];\\n\\n        require(position.positionUnitsAmount >= _positionUnitsAmount); // \\\"Not enough opened position units\\\"\\n        require(block.timestamp - position.creationTimestamp >= buyersLockupPeriod  || noLockPositionAddresses[msg.sender], \\\"Position locked\\\");\\n\\n        uint256 positionBalance;\\n        uint256 fundingFees;\\n        uint256 marginDebt;\\n        uint32 cviValue;\\n\\n        {\\n            uint256 latestSnapshot;\\n            (cviValue, latestSnapshot,) = updateSnapshots(true);\\n            require(cviValue >= _minCVI, \\\"CVI too low\\\");\\n\\n            {\\n                bool wasLiquidated;\\n\\n                (positionBalance, fundingFees, marginDebt, wasLiquidated) = _closePosition(position, _positionUnitsAmount, latestSnapshot, cviValue);\\n\\n                // If was liquidated, balance is negative, nothing to return\\n                if (wasLiquidated) {\\n                    return (0,0,0);\\n                }\\n            }\\n        }\\n\\n        (totalPositionUnitsAmount, totalFundingFeesAmount) = subtractTotalPositionUnits(_positionUnitsAmount, fundingFees);\\n\\n        uint256 closingPremiumFeePercentage = 0;\\n\\n        if (_chargeCloseFee && feesCalculator.openPositionLPFeePercent() > 0) {\\n            closingPremiumFeePercentage = feesCalculator.closePositionLPFeePercent();\\n        }\\n\\n        position.positionUnitsAmount = position.positionUnitsAmount - _positionUnitsAmount;\\n\\n        closePositionFee = _chargeCloseFee ? positionBalance * feesCalculator.calculateClosePositionFeePercent(position.creationTimestamp, noLockPositionAddresses[msg.sender]) / MAX_FEE_PERCENTAGE : 0;\\n        closingPremiumFee = positionBalance * closingPremiumFeePercentage / MAX_FEE_PERCENTAGE;\\n\\n        emit ClosePosition(msg.sender, positionBalance + fundingFees, closePositionFee + closingPremiumFee + fundingFees, position.positionUnitsAmount, position.leverage, cviValue);\\n\\n        if (position.positionUnitsAmount == 0) {\\n            delete positions[msg.sender];\\n        }\\n\\n        totalLeveragedTokensAmount = totalLeveragedTokensAmount - positionBalance - marginDebt + closingPremiumFee;\\n        tokenAmount = positionBalance - closePositionFee - closingPremiumFee;\\n\\n        collectProfit(closePositionFee);\\n        transferFunds(tokenAmount);\\n    }\\n\\n    function _closePosition(Position storage _position, uint256 _positionUnitsAmount, uint256 _latestSnapshot, uint32 _cviValue) private returns (uint256 positionBalance, uint256 fundingFees, uint256 marginDebt, bool wasLiquidated) {\\n        fundingFees = _calculateFundingFees(cviSnapshots[_position.creationTimestamp], _latestSnapshot, _positionUnitsAmount);\\n        \\n        (uint256 currentPositionBalance, bool isPositive, uint256 __marginDebt) = __calculatePositionBalance(_positionUnitsAmount, _position.leverage, _cviValue, _position.openCVIValue, fundingFees);\\n        \\n        // Position might be liquidable but balance is positive, we allow to avoid liquidity in such a condition\\n        if (!isPositive) {\\n            checkAndLiquidatePosition(msg.sender, false); // Will always liquidate\\n            wasLiquidated = true;\\n            fundingFees = 0;\\n        } else {\\n            positionBalance = currentPositionBalance;\\n            marginDebt = __marginDebt;\\n        }\\n    }\\n\\n    function liquidatePositions(address[] calldata _positionOwners) external override nonReentrant returns (uint256 finderFeeAmount) {\\n        updateSnapshots(true);\\n        bool liquidationOccured = false;\\n        for ( uint256 i = 0; i < _positionOwners.length; i++) {\\n            Position memory position = positions[_positionOwners[i]];\\n\\n            if (position.positionUnitsAmount > 0) {\\n                (bool wasLiquidated, uint256 liquidatedAmount, bool isPositive) = checkAndLiquidatePosition(_positionOwners[i], false);\\n\\n                if (wasLiquidated) {\\n                    liquidationOccured = true;\\n                    finderFeeAmount = finderFeeAmount + liquidation.getLiquidationReward(liquidatedAmount, isPositive, position.positionUnitsAmount, position.openCVIValue, position.leverage);\\n                }\\n            }\\n        }\\n\\n        require(liquidationOccured, \\\"No liquidable position\\\");\\n\\n        totalLeveragedTokensAmount = totalLeveragedTokensAmount - finderFeeAmount;\\n        transferFunds(finderFeeAmount);\\n    }\\n\\n    function setSubContracts(IFeesCollector _newCollector, ICVIOracle _newOracle, IRewardsCollector _newRewards, ILiquidation _newLiquidation, address _newStakingContractAddress) external override onlyOwner {\\n        if (address(feesCollector) != address(0) && address(token) != address(0)) {\\n            token.safeApprove(address(feesCollector), 0);\\n        }\\n\\n        feesCollector = _newCollector;\\n\\n        if (address(_newCollector) != address(0) && address(token) != address(0)) {\\n            token.safeApprove(address(_newCollector), type(uint256).max);\\n        }\\n\\n        cviOracle = _newOracle;\\n        rewards = _newRewards;\\n        liquidation = _newLiquidation;\\n        stakingContractAddress = _newStakingContractAddress;\\n    }\\n\\n    function setFeesCalculator(IFeesCalculator _newCalculator) external override onlyOwner {\\n        feesCalculator = _newCalculator;\\n    }\\n\\n    function setLatestOracleRoundId(uint80 _newOracleRoundId) external override onlyOwner {\\n        latestOracleRoundId = _newOracleRoundId;\\n    }\\n\\n    function setMaxTimeAllowedAfterLatestRound(uint32 _newMaxTimeAllowedAfterLatestRound) external override onlyOwner {\\n        require(_newMaxTimeAllowedAfterLatestRound >= 1 hours); // \\\"Max time too short\\\"\\n        maxTimeAllowedAfterLatestRound = _newMaxTimeAllowedAfterLatestRound;\\n    }\\n\\n    function setLockupPeriods(uint256 _newLPLockupPeriod, uint256 _newBuyersLockupPeriod) external override onlyOwner {\\n        require(_newLPLockupPeriod <= 2 weeks); // \\\"Lockup too long\\\"\\n        lpsLockupPeriod = _newLPLockupPeriod;\\n\\n        require(_newBuyersLockupPeriod <= 1 weeks); // \\\"Lockup too long\\\"\\n        buyersLockupPeriod = _newBuyersLockupPeriod;\\n    }\\n\\n    function setAddressSpecificParameters(address _holderAddress, bool _shouldLockPosition, bool _positionHolderAllowed, bool _increaseSharedPoolAllowed, bool _isLiquidityProvider) external override onlyOwner {\\n        noLockPositionAddresses[_holderAddress] = !_shouldLockPosition;\\n        positionHoldersAllowedAddresses[_holderAddress] = _positionHolderAllowed;\\n        increaseSharedPoolAllowedAddresses[_holderAddress] = _increaseSharedPoolAllowed;\\n        liquidityProviders[_holderAddress] = _isLiquidityProvider;\\n    }\\n\\n    function setRevertLockedTransfers(bool _revertLockedTransfers) external override {\\n        revertLockedTransfered[msg.sender] = _revertLockedTransfers;   \\n    }\\n\\n    function setEmergencyParameters(bool _newEmergencyWithdrawAllowed, bool _newCanPurgeSnapshots) external override onlyOwner {\\n        emergencyWithdrawAllowed = _newEmergencyWithdrawAllowed;\\n        purgeSnapshots = _newCanPurgeSnapshots;\\n    }\\n\\n    function setMaxAllowedLeverage(uint8 _newMaxAllowedLeverage) external override onlyOwner {\\n        maxAllowedLeverage = _newMaxAllowedLeverage;\\n    }\\n\\n    function calculatePositionBalance(address _positionAddress) external view override returns (uint256 currentPositionBalance, bool isPositive, uint168 positionUnitsAmount, uint8 leverage, uint256 fundingFees, uint256 marginDebt) {\\n        positionUnitsAmount = positions[_positionAddress].positionUnitsAmount;\\n        leverage = positions[_positionAddress].leverage;\\n        require(positionUnitsAmount > 0); // \\\"No position for given address\\\"\\n        (currentPositionBalance, isPositive, fundingFees, marginDebt) = _calculatePositionBalance(_positionAddress, true);\\n    }\\n\\n    function calculatePositionPendingFees(address _positionAddress, uint168 _positionUnitsAmount) external view override returns (uint256 pendingFees) {\\n        Position memory position = positions[_positionAddress];\\n        require(position.positionUnitsAmount > 0); // \\\"No position for given address\\\"\\n        require(_positionUnitsAmount <= position.positionUnitsAmount); // \\\"Too many position units\\\"\\n        pendingFees = _calculateFundingFees(cviSnapshots[position.creationTimestamp], \\n            cviSnapshots[latestSnapshotTimestamp], _positionUnitsAmount) + calculateLatestFundingFees(latestSnapshotTimestamp, _positionUnitsAmount);\\n    }\\n\\n    function totalBalance(bool _withAddendum) public view override returns (uint256 balance) {\\n        (uint32 cviValue,,) = cviOracle.getCVILatestRoundData();\\n        return _totalBalance(cviValue) + (_withAddendum ? calculateLatestFundingFees(latestSnapshotTimestamp, totalPositionUnitsAmount) : 0);\\n    }\\n\\n    function calculateLatestTurbulenceIndicatorPercent() external view override returns (uint16) {\\n        (uint32 latestCVIValue, ) = cviOracle.getCVIRoundData(latestOracleRoundId);\\n        IFeesCalculator.SnapshotUpdate memory updateData = \\n            feesCalculator.updateSnapshots(latestSnapshotTimestamp, cviSnapshots[block.timestamp], cviSnapshots[latestSnapshotTimestamp], latestOracleRoundId, totalLeveragedTokensAmount, totalPositionUnitsAmount);\\n        if (updateData.updatedTurbulenceData) {\\n            return feesCalculator.calculateTurbulenceIndicatorPercent(updateData.totalTime, updateData.totalRounds, latestCVIValue, updateData.cviValue);\\n        } else {\\n            return feesCalculator.turbulenceIndicatorPercent();\\n        }\\n    }\\n\\n    function latestFundingFees() external view override returns (uint256) {\\n        return calculateLatestFundingFees(latestSnapshotTimestamp, totalPositionUnitsAmount);\\n    }\\n\\n    function collectTokens(uint256 _tokenAmount) internal virtual {\\n        token.safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n    }\\n\\n    function _deposit(uint256 _tokenAmount, uint256 _minLPTokenAmount) internal nonReentrant returns (uint256 lpTokenAmount) {\\n        require(_tokenAmount > 0); // \\\"Tokens amount must be positive\\\"\\n        lastDepositTimestamp[msg.sender] = block.timestamp;\\n\\n        (uint32 cviValue,, uint256 cviValueTimestamp) = updateSnapshots(true);\\n        require(cviValueTimestamp + maxTimeAllowedAfterLatestRound >= block.timestamp, \\\"Latest cvi too long ago\\\");\\n\\n        uint256 depositFee = _tokenAmount * feesCalculator.depositFeePercent() / MAX_FEE_PERCENTAGE;\\n\\n        uint256 tokenAmountToDeposit = _tokenAmount - depositFee;\\n        uint256 supply = totalSupply();\\n        uint256 balance = _totalBalance(cviValue);\\n    \\n        if (supply > 0 && balance > 0) {\\n            lpTokenAmount = tokenAmountToDeposit * supply / balance;\\n        } else {\\n            lpTokenAmount = tokenAmountToDeposit * initialTokenToLPTokenRate;\\n        }\\n\\n        emit Deposit(msg.sender, _tokenAmount, lpTokenAmount, depositFee);\\n\\n        require(lpTokenAmount >= _minLPTokenAmount, \\\"Too few LP tokens\\\");\\n        require(lpTokenAmount > 0); // \\\"Too few tokens\\\"\\n\\n        totalLeveragedTokensAmount = totalLeveragedTokensAmount + tokenAmountToDeposit;\\n\\n        _mint(msg.sender, lpTokenAmount);\\n        collectTokens(_tokenAmount);\\n        collectProfit(depositFee);\\n    }\\n\\n    function _withdraw(uint256 _tokenAmount, bool _shouldBurnMax, uint256 _maxLPTokenBurnAmount) internal nonReentrant returns (uint256 burntAmount, uint256 withdrawnAmount) {\\n        require(lastDepositTimestamp[msg.sender] + lpsLockupPeriod <= block.timestamp, \\\"Funds are locked\\\");\\n\\n        (uint32 cviValue,,) = updateSnapshots(true);\\n\\n        if (_shouldBurnMax) {\\n            burntAmount = _maxLPTokenBurnAmount;\\n            _tokenAmount = burntAmount * _totalBalance(cviValue) / totalSupply();\\n        } else {\\n            require(_tokenAmount > 0); // \\\"Tokens amount must be positive\\\"\\n\\n            // Note: rounding up (ceiling) the to-burn amount to prevent precision loss\\n            burntAmount = (_tokenAmount * totalSupply() - 1) / _totalBalance(cviValue) + 1;\\n            require(burntAmount <= _maxLPTokenBurnAmount, \\\"Too much LP tokens to burn\\\");\\n        }\\n\\n        require(burntAmount <= balanceOf(msg.sender), \\\"Not enough LP tokens for account\\\");\\n        require(emergencyWithdrawAllowed || totalLeveragedTokensAmount - totalPositionUnitsAmount >= _tokenAmount, \\\"Collateral ratio broken\\\");\\n\\n        totalLeveragedTokensAmount = totalLeveragedTokensAmount - _tokenAmount;\\n\\n        uint256 withdrawFee = _tokenAmount * feesCalculator.withdrawFeePercent() / MAX_FEE_PERCENTAGE;\\n        withdrawnAmount = _tokenAmount - withdrawFee;\\n\\n        emit Withdraw(msg.sender, _tokenAmount, burntAmount, withdrawFee);\\n        \\n        _burn(msg.sender, burntAmount);\\n\\n        collectProfit(withdrawFee);\\n        transferFunds(withdrawnAmount);\\n    }\\n\\n    function _increaseSharedPool(uint256 _tokenAmount) internal nonReentrant {\\n        require(increaseSharedPoolAllowedAddresses[msg.sender]); // \\\"Not allowed\\\"\\n        totalLeveragedTokensAmount = totalLeveragedTokensAmount + _tokenAmount;\\n        collectTokens(_tokenAmount);\\n    }\\n\\n    struct OpenPositionLocals {\\n        uint256 totalLeveragedTokensAmount;\\n        uint256 latestSnapshot;\\n        uint256 maxPositionUnitsAmount;\\n        uint256 __positionUnitsAmount;\\n        uint256 cviValueTimestamp;\\n        uint168 addedPositionUnitsAmount;\\n        uint168 buyingPremiumFeePercentage;\\n        uint32 cviValue;\\n        uint16 openPositionFeePercent;\\n        uint16 buyingPremiumFeeMaxPercent;\\n    }\\n\\n    function _openPosition(uint168 _tokenAmount, uint32 _maxCVI, uint168 _maxBuyingPremiumFeePercentage, uint8 _leverage, bool _chargeOpenFee) internal nonReentrant returns (uint168 positionUnitsAmount, uint168 positionedTokenAmount, uint168 openPositionFee, uint168 buyingPremiumFee) {\\n        require(positionHoldersAllowedAddresses[msg.sender]); // \\\"Not allowed\\\"\\n        require(_leverage > 0); // \\\"Leverage must be positive\\\"\\n        require(_leverage <= maxAllowedLeverage); // \\\"Leverage excceeds max allowed\\\"\\n        require(_tokenAmount > 0); // \\\"Tokens amount must be positive\\\"\\n        require(_maxCVI > 0 && _maxCVI <= maxCVIValue); // \\\"Bad max CVI value\\\"\\n\\n        OpenPositionLocals memory locals;\\n\\n        (locals.cviValue, locals.latestSnapshot, locals.cviValueTimestamp) = updateSnapshots(false);\\n        require(locals.cviValue <= _maxCVI, \\\"CVI too high\\\");\\n        require(locals.cviValueTimestamp + maxTimeAllowedAfterLatestRound >= block.timestamp, \\\"Latest cvi too long ago\\\");\\n\\n        (locals.openPositionFeePercent, locals.buyingPremiumFeeMaxPercent) = feesCalculator.openPositionFees();\\n\\n        openPositionFee = _chargeOpenFee ? _tokenAmount * _leverage * locals.openPositionFeePercent / MAX_FEE_PERCENTAGE : 0;\\n\\n        // Calculate buying premium fee, assuming the maxmimum \\n\\n        locals.totalLeveragedTokensAmount = totalLeveragedTokensAmount;\\n\\n        if (_chargeOpenFee) {\\n            locals.maxPositionUnitsAmount = (uint256(_tokenAmount) - openPositionFee) * _leverage * maxCVIValue / locals.cviValue;\\n\\n            uint256 leveragedTokensAmount = locals.totalLeveragedTokensAmount + (_tokenAmount - openPositionFee) * _leverage;\\n            (buyingPremiumFee, locals.buyingPremiumFeePercentage) = \\n                feesCalculator.calculateBuyingPremiumFee(_tokenAmount, _leverage, locals.totalLeveragedTokensAmount, totalPositionUnitsAmount,\\n                    leveragedTokensAmount, \\n                    totalPositionUnitsAmount + locals.maxPositionUnitsAmount);\\n\\n            require(locals.buyingPremiumFeePercentage <= _maxBuyingPremiumFeePercentage, \\\"Premium fee too high\\\");\\n        }\\n        \\n        // Leaving buying premium in shared pool\\n        positionedTokenAmount = uint168((_tokenAmount - openPositionFee - buyingPremiumFee) * _leverage);\\n        \\n        Position storage position = positions[msg.sender];\\n\\n        if (position.positionUnitsAmount > 0) {\\n            require(_leverage == position.leverage); // \\\"Cannot merge different margin\\\"\\n            MergePositionResults memory mergePositionResults = _mergePosition(position, locals.latestSnapshot, locals.cviValue, positionedTokenAmount, _leverage);\\n            positionUnitsAmount = mergePositionResults.positionUnitsAmount;\\n            locals.addedPositionUnitsAmount = mergePositionResults.addedPositionUnitsAmount;\\n            totalLeveragedTokensAmount = locals.totalLeveragedTokensAmount + positionedTokenAmount + mergePositionResults.positionBalance * _leverage + buyingPremiumFee -\\n                mergePositionResults.marginDebt - mergePositionResults.positionBalance;\\n        } else {\\n            locals.__positionUnitsAmount = uint256(positionedTokenAmount) * maxCVIValue / locals.cviValue;\\n            positionUnitsAmount = uint168(locals.__positionUnitsAmount);\\n            require(positionUnitsAmount == locals.__positionUnitsAmount); // \\\"Too much position units\\\"\\n\\n            locals.addedPositionUnitsAmount = positionUnitsAmount;\\n\\n            Position memory newPosition = Position(positionUnitsAmount, _leverage, locals.cviValue, uint32(block.timestamp), uint32(block.timestamp));\\n\\n            positions[msg.sender] = newPosition;\\n            totalPositionUnitsAmount = totalPositionUnitsAmount + positionUnitsAmount;\\n\\n            totalLeveragedTokensAmount = locals.totalLeveragedTokensAmount + positionedTokenAmount + buyingPremiumFee;\\n        }\\n\\n        emit OpenPosition(msg.sender, _tokenAmount, _leverage, openPositionFee + buyingPremiumFee, positionUnitsAmount, locals.cviValue);\\n\\n        collectTokens(_tokenAmount);\\n\\n        if (openPositionFee > 0) {\\n            collectProfit(openPositionFee);\\n        }\\n\\n        require(totalPositionUnitsAmount <= totalLeveragedTokensAmount, \\\"Not enough liquidity\\\");\\n\\n        if (address(rewards) != address(0) && locals.addedPositionUnitsAmount != 0) {\\n            rewards.reward(msg.sender, locals.addedPositionUnitsAmount, _leverage);\\n        }\\n    }\\n\\n    struct MergePositionResults {\\n        uint168 positionUnitsAmount;\\n        uint168 addedPositionUnitsAmount;\\n        uint256 marginDebt;\\n        uint256 positionBalance;\\n    }\\n\\n    struct MergePositionLocals {\\n        uint32 originalCreationTimestamp;\\n        uint168 oldPositionUnits;\\n        uint256 newPositionUnits;\\n        uint256 newTotalPositionUnitsAmount;\\n        uint256 newTotalFundingFeesAmount;\\n    }\\n\\n    function _mergePosition(Position storage _position, uint256 _latestSnapshot, uint32 _cviValue, uint256 _leveragedTokenAmount, uint8 _leverage) private returns (MergePositionResults memory mergePositionResults) {\\n        MergePositionLocals memory locals;\\n\\n        locals.oldPositionUnits = _position.positionUnitsAmount;\\n        locals.originalCreationTimestamp = _position.originalCreationTimestamp;\\n        (uint256 currentPositionBalance, uint256 fundingFees, uint256 __marginDebt, bool wasLiquidated) = _closePosition(_position, locals.oldPositionUnits, _latestSnapshot, _cviValue);\\n        \\n        // If was liquidated, balance is negative\\n        if (wasLiquidated) {\\n            currentPositionBalance = 0;\\n            locals.oldPositionUnits = 0;\\n            __marginDebt = 0;\\n\\n            _position.originalCreationTimestamp = locals.originalCreationTimestamp;\\n        }\\n\\n        locals.newPositionUnits = (currentPositionBalance * _leverage + _leveragedTokenAmount) * maxCVIValue / _cviValue;\\n        mergePositionResults.positionUnitsAmount = uint168(locals.newPositionUnits);\\n        require(mergePositionResults.positionUnitsAmount == locals.newPositionUnits); // \\\"Too much position units\\\"\\n\\n        _position.creationTimestamp = uint32(block.timestamp);\\n        _position.positionUnitsAmount = mergePositionResults.positionUnitsAmount;\\n        _position.openCVIValue = _cviValue;\\n        _position.leverage = _leverage;\\n\\n        (locals.newTotalPositionUnitsAmount, locals.newTotalFundingFeesAmount) = subtractTotalPositionUnits(locals.oldPositionUnits, fundingFees);\\n        totalFundingFeesAmount = locals.newTotalFundingFeesAmount;\\n        totalPositionUnitsAmount = locals.newTotalPositionUnitsAmount + mergePositionResults.positionUnitsAmount;\\n        mergePositionResults.marginDebt = __marginDebt;\\n        mergePositionResults.positionBalance = currentPositionBalance;\\n\\n        if (locals.oldPositionUnits < mergePositionResults.positionUnitsAmount) {\\n            mergePositionResults.addedPositionUnitsAmount = mergePositionResults.positionUnitsAmount - locals.oldPositionUnits;\\n        }\\n    }\\n\\n    function transferFunds(uint256 _tokenAmount) internal virtual {\\n        token.safeTransfer(msg.sender, _tokenAmount);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256) internal override {\\n        if (from == stakingContractAddress) {\\n            lastDepositTimestamp[to] = block.timestamp;\\n        } else if (lastDepositTimestamp[from] + lpsLockupPeriod > block.timestamp && \\n            lastDepositTimestamp[from] > lastDepositTimestamp[to] && \\n            to != stakingContractAddress) {\\n                require(!revertLockedTransfered[to], \\\"Recipient refuses locked tokens\\\");\\n                lastDepositTimestamp[to] = lastDepositTimestamp[from];\\n        }\\n    }\\n\\n    function sendProfit(uint256 _amount, IERC20Upgradeable _token) internal virtual {\\n        feesCollector.sendProfit(_amount, IERC20(address(_token)));\\n    }\\n\\n    function updateSnapshots(bool _canPurgeLatestSnapshot) private returns (uint32 latestCVIValue, uint256 latestSnapshot, uint256 latestCVIValueTimestamp) {\\n        uint80 originalLatestRoundId = latestOracleRoundId;\\n        uint256 latestTimestamp = latestSnapshotTimestamp;\\n\\n        IFeesCalculator.SnapshotUpdate memory updateData = \\n            feesCalculator.updateSnapshots(latestTimestamp, cviSnapshots[block.timestamp], cviSnapshots[latestTimestamp], \\n                latestOracleRoundId, totalLeveragedTokensAmount, totalPositionUnitsAmount);\\n\\n        if (updateData.updatedSnapshot) {\\n            cviSnapshots[block.timestamp] = updateData.latestSnapshot;\\n            totalFundingFeesAmount = totalFundingFeesAmount + (updateData.singleUnitFundingFee * totalPositionUnitsAmount / PRECISION_DECIMALS);\\n        }\\n\\n        if (updateData.updatedLatestRoundId) {\\n            latestOracleRoundId = updateData.newLatestRoundId;\\n        }\\n\\n        if (updateData.updatedTurbulenceData) {\\n            (latestCVIValue, ) = cviOracle.getCVIRoundData(originalLatestRoundId);\\n            feesCalculator.updateTurbulenceIndicatorPercent(updateData.totalTime, updateData.totalRounds, latestCVIValue, updateData.cviValue);\\n        }\\n\\n        if (updateData.updatedLatestTimestamp) {\\n            latestSnapshotTimestamp = uint32(block.timestamp);\\n\\n            // Delete old snapshot if it can be deleted (not an open snapshot) to save gas\\n            if (canPurgeLatestSnapshot && purgeSnapshots) {\\n                delete cviSnapshots[latestTimestamp];\\n            }\\n\\n            // Update purge since timestamp has changed and it is safe\\n            canPurgeLatestSnapshot = _canPurgeLatestSnapshot;\\n        } else if (canPurgeLatestSnapshot) {\\n            // Update purge only from true to false, so if an open was in the block, will never be purged\\n            canPurgeLatestSnapshot = _canPurgeLatestSnapshot;\\n        }\\n\\n        return (updateData.cviValue, updateData.latestSnapshot, updateData.cviValueTimestamp);\\n    }\\n\\n    function _totalBalance(uint32 _cviValue) private view returns (uint256 balance) {\\n        return totalLeveragedTokensAmount + totalFundingFeesAmount - (totalPositionUnitsAmount * _cviValue) / maxCVIValue;\\n    }\\n\\n    function collectProfit(uint256 amount) private {\\n        if (amount > 0 && address(feesCollector) != address(0)) {\\n            sendProfit(amount, token);\\n        }\\n    }\\n\\n    function checkAndLiquidatePosition(address _positionAddress, bool _withAddendum) private returns (bool wasLiquidated, uint256 liquidatedAmount, bool isPositive) {\\n        (uint256 currentPositionBalance, bool isBalancePositive, uint256 fundingFees, uint256 marginDebt) = _calculatePositionBalance(_positionAddress, _withAddendum);\\n        isPositive = isBalancePositive;\\n        liquidatedAmount = currentPositionBalance;\\n\\n        Position memory position = positions[_positionAddress];\\n\\n        if (liquidation.isLiquidationCandidate(currentPositionBalance, isBalancePositive, position.positionUnitsAmount, position.openCVIValue, position.leverage)) {\\n            (uint256 newTotalPositionUnitsAmount, uint256 newTotalFundingFeesAmount) = subtractTotalPositionUnits(position.positionUnitsAmount, fundingFees);\\n            totalPositionUnitsAmount = newTotalPositionUnitsAmount;\\n            totalFundingFeesAmount = newTotalFundingFeesAmount;\\n            totalLeveragedTokensAmount = totalLeveragedTokensAmount - marginDebt;\\n\\n            emit LiquidatePosition(_positionAddress, currentPositionBalance, isBalancePositive, position.positionUnitsAmount);\\n\\n            delete positions[_positionAddress];\\n            wasLiquidated = true;\\n        }\\n    }\\n\\n    function subtractTotalPositionUnits(uint168 _positionUnitsAmountToSubtract, uint256 _fundingFeesToSubtract) private view returns (uint256 newTotalPositionUnitsAmount, uint256 newTotalFundingFeesAmount) {\\n        newTotalPositionUnitsAmount = totalPositionUnitsAmount - _positionUnitsAmountToSubtract;\\n        newTotalFundingFeesAmount = _fundingFeesToSubtract > totalFundingFeesAmount ? 0 : totalFundingFeesAmount - _fundingFeesToSubtract;\\n    }\\n\\n    function _calculatePositionBalance(address _positionAddress, bool _withAddendum) private view returns (uint256 currentPositionBalance, bool isPositive, uint256 fundingFees, uint256 marginDebt) {\\n        Position memory position = positions[_positionAddress];\\n\\n        (uint32 cviValue,,) = cviOracle.getCVILatestRoundData();\\n\\n        fundingFees = _calculateFundingFees(cviSnapshots[position.creationTimestamp], cviSnapshots[latestSnapshotTimestamp], position.positionUnitsAmount);\\n        if (_withAddendum) {\\n            fundingFees = calculateLatestFundingFees(position.creationTimestamp, position.positionUnitsAmount);\\n        }\\n        \\n        (currentPositionBalance, isPositive, marginDebt) = __calculatePositionBalance(position.positionUnitsAmount, position.leverage, cviValue, position.openCVIValue, fundingFees);\\n    }\\n\\n    function __calculatePositionBalance(uint256 _positionUnits, uint8 _leverage, uint32 _cviValue, uint32 _openCVIValue, uint256 _fundingFees) private view returns (uint256 currentPositionBalance, bool isPositive, uint256 marginDebt) {\\n        uint256 positionBalanceWithoutFees = _positionUnits * _cviValue / maxCVIValue;\\n\\n        marginDebt = _leverage > 1 ? _positionUnits * _openCVIValue * (_leverage - 1) / maxCVIValue / _leverage : 0;\\n        uint256 totalDebt = marginDebt + _fundingFees;\\n\\n        if (positionBalanceWithoutFees >= totalDebt) {\\n            currentPositionBalance = positionBalanceWithoutFees - totalDebt;\\n            isPositive = true;\\n        } else {\\n            currentPositionBalance = totalDebt - positionBalanceWithoutFees;\\n        }\\n    }\\n\\n    function calculateLatestFundingFees(uint256 startTime, uint256 positionUnitsAmount) private view returns (uint256) {\\n        IFeesCalculator.SnapshotUpdate memory updateData = \\n            feesCalculator.updateSnapshots(latestSnapshotTimestamp, cviSnapshots[block.timestamp], cviSnapshots[latestSnapshotTimestamp], latestOracleRoundId, totalLeveragedTokensAmount, totalPositionUnitsAmount);\\n        return _calculateFundingFees(cviSnapshots[startTime], updateData.latestSnapshot, positionUnitsAmount);\\n    }\\n\\n    function _calculateFundingFees(uint256 startTimeSnapshot, uint256 endTimeSnapshot, uint256 positionUnitsAmount) internal pure returns (uint256) {\\n        return (endTimeSnapshot - startTimeSnapshot) * positionUnitsAmount / PRECISION_DECIMALS;\\n    }\\n}\\n\",\"keccak256\":\"0xae6788e16bcde7d1b8ef918582797ec6efe1de732344ca68c0765a2f5b985c79\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/ICVIOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface ICVIOracle {\\n    function getCVIRoundData(uint80 roundId) external view returns (uint32 cviValue, uint256 cviTimestamp);\\n    function getCVILatestRoundData() external view returns (uint32 cviValue, uint80 cviRoundId, uint256 cviTimestamp);\\n\\n    function setDeviationCheck(bool newDeviationCheck) external;\\n    function setMaxDeviation(uint16 newMaxDeviation) external;\\n}\\n\",\"keccak256\":\"0xf1871b2e9219f7a11e63d8e3276b7a0a46d8d726d54e385a6326dbdb2bcb1bad\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IFeesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./ICVIOracle.sol\\\";\\nimport \\\"./IThetaVaultInfo.sol\\\";\\n\\ninterface IFeesCalculator {\\n\\n    struct CVIValue {\\n        uint256 period;\\n        uint32 cviValue;\\n    }\\n\\n    struct SnapshotUpdate {\\n        uint256 latestSnapshot;\\n        uint256 singleUnitFundingFee;\\n        uint256 totalTime;\\n        uint256 totalRounds;\\n        uint256 cviValueTimestamp;\\n        uint80 newLatestRoundId;\\n        uint32 cviValue;\\n        bool updatedSnapshot;\\n        bool updatedLatestRoundId;\\n        bool updatedLatestTimestamp;\\n        bool updatedTurbulenceData;\\n    }\\n\\n    function updateTurbulenceIndicatorPercent(uint256 totalTime, uint256 newRounds, uint32 lastCVIValue, uint32 currCVIValue) external;\\n\\n    function setOracle(ICVIOracle cviOracle) external;\\n    function setThetaVault(IThetaVaultInfo thetaVault) external;\\n\\n    function setStateUpdator(address newUpdator) external;\\n\\n    function setDepositFee(uint16 newDepositFeePercentage) external;\\n    function setWithdrawFee(uint16 newWithdrawFeePercentage) external;\\n    function setOpenPositionFee(uint16 newOpenPositionFeePercentage) external;\\n    function setOpenPositionLPFee(uint16 newOpenPositionLPFeePercent) external;\\n    function setClosePositionLPFee(uint16 newClosePositionLPFeePercent) external;\\n    function setClosePositionFee(uint16 newClosePositionFeePercentage) external;\\n    function setClosePositionMaxFee(uint16 newClosePositionMaxFeePercentage) external;\\n    function setClosePositionFeeDecay(uint256 newClosePositionFeeDecayPeriod) external;\\n    \\n    function setOracleHeartbeatPeriod(uint256 newOracleHeartbeatPeriod) external;\\n    function setBuyingPremiumFeeMax(uint16 newBuyingPremiumFeeMaxPercentage) external;\\n    function setBuyingPremiumThreshold(uint16 newBuyingPremiumThreshold) external;\\n    function setClosingPremiumFeeMax(uint16 newClosingPremiumFeeMaxPercentage) external;\\n    function setCollateralToBuyingPremiumMapping(uint16[] calldata newCollateralToBuyingPremiumMapping) external;\\n    function setFundingFeeConstantRate(uint16 newfundingFeeConstantRate) external;\\n    function setCollateralToExtraFundingFeeMapping(uint32[] calldata newCollateralToExtraFundingFeeMapping) external;\\n    function setTurbulenceStep(uint16 newTurbulenceStepPercentage) external;\\n    function setMaxTurbulenceFeePercentToTrim(uint16 newMaxTurbulenceFeePercentToTrim) external;\\n    function setTurbulenceDeviationThresholdPercent(uint16 newTurbulenceDeviationThresholdPercent) external;\\n    function setTurbulenceDeviationPercent(uint16 newTurbulenceDeviationPercentage) external;\\n\\n    function calculateTurbulenceIndicatorPercent(uint256 totalTime, uint256 newRounds, uint32 _lastCVIValue, uint32 _currCVIValue) external view returns (uint16);\\n\\n    function calculateBuyingPremiumFee(uint168 tokenAmount, uint8 leverage, uint256 lastTotalLeveragedTokens, uint256 lastTotalPositionUnits, uint256 totalLeveragedTokens, uint256 totalPositionUnits) external view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage);\\n    function calculateBuyingPremiumFeeWithAddendum(uint168 tokenAmount, uint8 leverage, uint256 lastTotalLeveragedTokens, uint256 lastTotalPositionUnits, uint256 totalLeveragedTokens, uint256 totalPositionUnits, uint16 _turbulenceIndicatorPercent) external view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage);\\n\\n    function calculateClosingPremiumFee() external view returns (uint16 combinedPremiumFeePercentage);\\n\\n    function calculateSingleUnitFundingFee(CVIValue[] memory cviValues, uint256 totalLeveragedTokens, uint256 totalPositionUnits) external view returns (uint256 fundingFee);\\n    function calculateSingleUnitPeriodFundingFee(CVIValue memory cviValue, uint256 collateralRatio) external view returns (uint256 fundingFee, uint256 fundingFeeRatePercents);\\n    function updateSnapshots(uint256 latestTimestamp, uint256 blockTimestampSnapshot, uint256 latestTimestampSnapshot, uint80 latestOracleRoundId, uint256 totalLeveragedTokens, uint256 totalPositionUnits) external view returns (SnapshotUpdate memory snapshotUpdate);\\n\\n    function calculateClosePositionFeePercent(uint256 creationTimestamp, bool isNoLockPositionAddress) external view returns (uint16);\\n    function calculateWithdrawFeePercent(uint256 lastDepositTimestamp) external view returns (uint16);\\n\\n    function calculateCollateralRatio(uint256 totalLeveragedTokens, uint256 totalPositionUnits) external view returns (uint256 collateralRatio);\\n\\n    function depositFeePercent() external view returns (uint16);\\n    function withdrawFeePercent() external view returns (uint16);\\n    function openPositionFeePercent() external view returns (uint16);\\n    function closePositionFeePercent() external view returns (uint16);\\n    function openPositionLPFeePercent() external view returns (uint16);\\n    function closePositionLPFeePercent() external view returns (uint16);\\n\\n    function openPositionFees() external view returns (uint16 openPositionFeePercentResult, uint16 buyingPremiumFeeMaxPercentResult);\\n\\n    function turbulenceIndicatorPercent() external view returns (uint16);\\n    function oracleLeverage() external view returns (uint8);\\n\\n    function getCollateralToBuyingPremiumMapping() external view returns(uint16[] memory);\\n    function getCollateralToExtraFundingFeeMapping() external view returns(uint32[] memory);\\n}\\n\",\"keccak256\":\"0xfba7d565b0a7d83dbe5d1abb0bf35897145a96d28e35b0b91864e321606c5734\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IFeesCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFeesCollector {\\n    function sendProfit(uint256 amount, IERC20 token) external;\\n}\\n\",\"keccak256\":\"0xb16b7c5d985657716ccacf0f1e61de587c06fe4f6591bee6fafc0a3658229b4c\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/ILiquidation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface ILiquidation {\\t\\n\\tfunction setMinLiquidationThresholdPercents(uint16[8] calldata newMinThresholdPercents) external;\\n\\tfunction setMinLiquidationRewardPercent(uint16 newMinRewardPercent) external;\\n\\tfunction setMaxLiquidationRewardPercents(uint16[8] calldata newMaxRewardPercents) external;\\n\\tfunction isLiquidationCandidate(uint256 positionBalance, bool isPositive, uint168 positionUnitsAmount, uint32 openCVIValue, uint8 leverage) external view returns (bool);\\n\\tfunction getLiquidationReward(uint256 positionBalance, bool isPositive, uint168 positionUnitsAmount, uint32 openCVIValue, uint8 leverage) external view returns (uint256 finderFeeAmount);\\n}\\n\",\"keccak256\":\"0x0799656b324ed8d65391313156e1dfe7d99b6dadb08e71cd6a515d19731539bd\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IPlatform.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./ICVIOracle.sol\\\";\\nimport \\\"./IFeesCalculator.sol\\\";\\nimport \\\"./IRewardsCollector.sol\\\";\\nimport \\\"./IFeesCollector.sol\\\";\\nimport \\\"./ILiquidation.sol\\\";\\n\\ninterface IPlatform {\\n\\n    struct Position {\\n        uint168 positionUnitsAmount;\\n        uint8 leverage;\\n        uint32 openCVIValue;\\n        uint32 creationTimestamp;\\n        uint32 originalCreationTimestamp;\\n    }\\n\\n    event Deposit(address indexed account, uint256 tokenAmount, uint256 lpTokensAmount, uint256 feeAmount);\\n    event Withdraw(address indexed account, uint256 tokenAmount, uint256 lpTokensAmount, uint256 feeAmount);\\n    event OpenPosition(address indexed account, uint256 tokenAmount, uint8 leverage, uint256 feeAmount, uint256 positionUnitsAmount, uint256 cviValue);\\n    event ClosePosition(address indexed account, uint256 tokenAmount, uint256 feeAmount, uint256 positionUnitsAmount, uint8 leverage, uint256 cviValue);\\n    event LiquidatePosition(address indexed positionAddress, uint256 currentPositionBalance, bool isBalancePositive, uint256 positionUnitsAmount);\\n\\n    function deposit(uint256 tokenAmount, uint256 minLPTokenAmount) external returns (uint256 lpTokenAmount);\\n    function withdraw(uint256 tokenAmount, uint256 maxLPTokenBurnAmount) external returns (uint256 burntAmount, uint256 withdrawnAmount);\\n    function withdrawLPTokens(uint256 lpTokenAmount) external returns (uint256 burntAmount, uint256 withdrawnAmount);\\n\\n    function increaseSharedPool(uint256 tokenAmount) external;\\n\\n    function openPositionWithoutFee(uint168 tokenAmount, uint32 maxCVI, uint8 leverage) external returns (uint168 positionUnitsAmount, uint168 positionedTokenAmount, uint168 openPositionFee, uint168 buyingPremiumFee);\\n    function openPosition(uint168 tokenAmount, uint32 maxCVI, uint16 maxBuyingPremiumFeePercentage, uint8 leverage) external returns (uint168 positionUnitsAmount, uint168 positionedTokenAmount, uint168 openPositionFee, uint168 buyingPremiumFee);\\n    function closePositionWithoutFee(uint168 positionUnitsAmount, uint32 minCVI) external returns (uint256 tokenAmount, uint256 closePositionFee, uint256 closingPremiumFee);\\n    function closePosition(uint168 positionUnitsAmount, uint32 minCVI) external returns (uint256 tokenAmount, uint256 closePositionFee, uint256 closingPremiumFee);\\n\\n    function liquidatePositions(address[] calldata positionOwners) external returns (uint256 finderFeeAmount);\\n\\n    function setAddressSpecificParameters(address holderAddress, bool shouldLockPosition, bool noPremiumFeeAllowed, bool increaseSharedPoolAllowed, bool isLiquidityProvider) external;\\n\\n    function setRevertLockedTransfers(bool revertLockedTransfers) external;\\n\\n    function setSubContracts(IFeesCollector newCollector, ICVIOracle newOracle, IRewardsCollector newRewards, ILiquidation newLiquidation, address _newStakingContractAddress) external;\\n    function setFeesCalculator(IFeesCalculator newCalculator) external;\\n\\n    function setLatestOracleRoundId(uint80 newOracleRoundId) external;\\n    function setMaxTimeAllowedAfterLatestRound(uint32 newMaxTimeAllowedAfterLatestRound) external;\\n\\n    function setLockupPeriods(uint256 newLPLockupPeriod, uint256 newBuyersLockupPeriod) external;\\n\\n    function setEmergencyParameters(bool newEmergencyWithdrawAllowed, bool newCanPurgeSnapshots) external;\\n\\n    function setMaxAllowedLeverage(uint8 newMaxAllowedLeverage) external;\\n\\n    function calculatePositionBalance(address positionAddress) external view returns (uint256 currentPositionBalance, bool isPositive, uint168 positionUnitsAmount, uint8 leverage, uint256 fundingFees, uint256 marginDebt);\\n    function calculatePositionPendingFees(address positionAddress, uint168 positionUnitsAmount) external view returns (uint256 pendingFees);\\n\\n    function totalBalance(bool _withAddendum) external view returns (uint256 balance);\\n\\n    function calculateLatestTurbulenceIndicatorPercent() external view returns (uint16);\\n\\n    function cviOracle() external view returns (ICVIOracle);\\n    function feesCalculator() external view returns (IFeesCalculator);\\n\\n    function PRECISION_DECIMALS() external view returns (uint256);\\n\\n    function totalPositionUnitsAmount() external view returns (uint256);\\n    function totalLeveragedTokensAmount() external view returns (uint256);\\n    function totalFundingFeesAmount() external view returns (uint256);\\n    function latestFundingFees() external view returns (uint256);\\n\\n    function positions(address positionAddress) external view returns (uint168 positionUnitsAmount, uint8 leverage, uint32 openCVIValue, uint32 creationTimestamp, uint32 originalCreationTimestamp);\\n    function buyersLockupPeriod() external view returns (uint256);\\n    function maxCVIValue() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x11f55f686514975c2dd5adf87856f8df5f85b015621f01e1528addb6b7194686\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IRewardsCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface IRewardsCollector {\\n\\tfunction reward(address account, uint256 positionUnits, uint8 leverage) external;\\n}\\n\",\"keccak256\":\"0xaae3f1399202cccfb2e7302f69868a1f9adfbc53c968668e79201692c5724ca5\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IThetaVaultInfo.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface IThetaVaultInfo {\\n    function totalVaultLeveragedAmount() external view returns (uint256);\\n    function vaultPositionUnits() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8077ab6dec8937112a2e2567d9b524a10ba640b7891c4bb40729bfbb648c0c1e\",\"license\":\"GPL-3.0\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/platform/PlatformContracts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport '@coti-cvi/contracts-cvi/contracts/Platform.sol';\\n\\ncontract CVIUSDCPlatform is Platform {\\n  constructor() Platform() {}\\n}\\n\\ncontract CVIUSDCPlatform2X is Platform {\\n  constructor() Platform() {}\\n}\",\"keccak256\":\"0x784a1b8816340ad61f8a879608ceecffc867135971ba101205ed0fb61804ec82\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061544c806100206000396000f3fe608060405234801561001057600080fd5b50600436106103f15760003560e01c806383d3b20e11610215578063b17e141111610125578063dd907e8b116100b8578063f2217fe411610087578063f2217fe414610a60578063f2dfbf6614610a73578063f2fde38b14610a86578063f9c47ead14610a99578063fc0c546a14610abc57600080fd5b8063dd907e8b14610a19578063e2bbb15814610a21578063e51379ba14610a34578063ebc1daf614610a5757600080fd5b8063d934c20b116100f4578063d934c20b146109b9578063d9c36290146109d0578063dbd94267146109e3578063dd62ed3e14610a0657600080fd5b8063b17e141114610952578063ba6af83214610965578063c657549114610993578063ca832799146109a657600080fd5b80639c266c32116101a8578063a6ca982c11610177578063a6ca982c146108a4578063a9059cbb146108f5578063aceda7f914610908578063b152b2951461091c578063b17b849f1461093f57600080fd5b80639c266c32146108545780639cf160f61461086b5780639ec5a8941461087e578063a457c2d71461089157600080fd5b80638eb50a38116101e45780638eb50a381461081d578063913536381461082657806395d89b411461083957806395f20fac1461084157600080fd5b806383d3b20e146107dc5780638c7e7475146107ef5780638d4d7e31146108035780638da5cb5b1461080c57600080fd5b8063452d003f116103105780636185aa3a116102a357806370a082311161027257806370a0823114610732578063715018a61461075b578063745dd850146107635780637b04bc06146107915780638202c681146107bc57600080fd5b80636185aa3a146106c0578063655d8dec146106ec5780636c7156411461070c5780636f7d78281461071f57600080fd5b8063558e44d3116102df578063558e44d3146105e257806355f575101461060357806360ebfee6146106995780636162129b146106a557600080fd5b8063452d003f1461056d578063486072501461058057806353997f6114610593578063547ef3e6146105d957600080fd5b806323b872dd116103885780633535f48b116103575780633535f48b146104f457806335a03bfa1461051f5780633950935114610532578063441a3e701461054557600080fd5b806323b872dd146104ba5780632f811c22146104cd578063313ce567146104d657806332527992146104eb57600080fd5b80630a545fe5116103c45780630a545fe5146104695780630af127b91461047c578063124805861461049f57806318160ddd146104b257600080fd5b806302b1ba6f146103f657806305621f1a1461041c57806306fdde0314610431578063095ea7b314610446575b600080fd5b610409610404366004614ae4565b610acf565b6040519081526020015b60405180910390f35b61042f61042a366004615002565b610be8565b005b610439610c3b565b6040516104139190615054565b610459610454366004614b11565b610ccd565b6040519015158152602001610413565b61042f610477366004614f56565b610ce5565b61045961048a3660046149e0565b60dc6020526000908152604090205460ff1681565b6104096104ad366004614b3c565b610d3a565b606754610409565b6104596104c8366004614a34565b610fcc565b61040960d35481565b60125b60405160ff9091168152602001610413565b61040960d15481565b60d654610507906001600160a01b031681565b6040516001600160a01b039091168152602001610413565b60ce54610507906001600160a01b031681565b610459610540366004614b11565b610ff2565b610558610553366004614f56565b611014565b60408051928352602083019190915201610413565b61055861057b366004614f26565b611049565b61042f61058e36600461501c565b61108b565b6105a66105a1366004614ea7565b6110da565b604080516001600160a81b0395861681529385166020850152918416918301919091529091166060820152608001610413565b61040960d45481565b6105eb61271081565b6040516001600160a81b039091168152602001610413565b61065a6106113660046149e0565b60d960205260009081526040902080546001909101546001600160a81b0382169160ff600160a81b8204169163ffffffff600160b01b8304811692600160d01b90048116911685565b604080516001600160a81b03909616865260ff909416602086015263ffffffff928316938501939093528116606084015216608082015260a001610413565b6104096402540be40081565b6106ad611100565b60405161ffff9091168152602001610413565b60c9546106d790600160501b900463ffffffff1681565b60405163ffffffff9091168152602001610413565b6104096106fa3660046149e0565b60d86020526000908152604090205481565b61042f61071a3660046149e0565b61136a565b60cc54610507906001600160a01b031681565b6104096107403660046149e0565b6001600160a01b031660009081526065602052604090205490565b61042f6113b6565b61042f610771366004614bac565b33600090815260dd60205260409020805460ff1916911515919091179055565b60c9546107a4906001600160501b031681565b6040516001600160501b039091168152602001610413565b6104096107ca366004614f26565b60d76020526000908152604090205481565b61042f6107ea366004614cdb565b6113ec565b60c9546104d990600160a81b900460ff1681565b61040960d55481565b6033546001600160a01b0316610507565b61040960ca5481565b61042f610834366004614c11565b611502565b61043961163b565b61042f61084f366004614f26565b61164a565b60c9546106d790600160701b900463ffffffff1681565b60cf54610507906001600160a01b031681565b60d054610507906001600160a01b031681565b61045961089f366004614b11565b611656565b6108b76108b23660046149e0565b6116dc565b6040805196875294151560208701526001600160a81b039093169385019390935260ff166060840152608083019190915260a082015260c001610413565b610459610903366004614b11565b611734565b60c95461045990600160981b900460ff1681565b61045961092a3660046149e0565b60dd6020526000908152604090205460ff1681565b61042f61094d366004614a74565b611742565b61042f610960366004614f77565b6117d6565b610978610973366004614e21565b61183b565b60408051938452602084019290925290820152606001610413565b6109786109a1366004614e21565b611859565b61042f6109b4366004614be4565b61186a565b60c9546106d790600160b01b900463ffffffff1681565b6104096109de366004614bac565b6118c8565b6104596109f13660046149e0565b60de6020526000908152604090205460ff1681565b610409610a143660046149fc565b611991565b6104096119bc565b610409610a2f366004614f56565b6119e7565b610459610a423660046149e0565b60da6020526000908152604090205460ff1681565b61040960d25481565b6105a6610a6e366004614e4e565b611a0d565b60cd54610507906001600160a01b031681565b61042f610a943660046149e0565b611a37565b610459610aa73660046149e0565b60db6020526000908152604090205460ff1681565b60cb54610507906001600160a01b031681565b6001600160a01b038216600090815260d960209081526040808320815160a08101835281546001600160a81b03811680835260ff600160a81b8304169583019590955263ffffffff600160b01b8204811694830194909452600160d01b900483166060820152600190910154909116608082015290610b4d57600080fd5b80600001516001600160a81b0316836001600160a81b03161115610b7057600080fd5b60c954610b9390600160501b900463ffffffff166001600160a81b038516611acf565b606082015163ffffffff908116600090815260d760205260408082205460c954600160501b90049093168252902054610bd691906001600160a81b038716611bbe565b610be091906151e1565b949350505050565b6033546001600160a01b03163314610c1b5760405162461bcd60e51b8152600401610c12906150d5565b60405180910390fd5b60c9805460ff909216600160a81b0260ff60a81b19909216919091179055565b606060688054610c4a9061530f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c769061530f565b8015610cc35780601f10610c9857610100808354040283529160200191610cc3565b820191906000526020600020905b815481529060010190602001808311610ca657829003601f168201915b5050505050905090565b600033610cdb818585611be5565b5060019392505050565b6033546001600160a01b03163314610d0f5760405162461bcd60e51b8152600401610c12906150d5565b62127500821115610d1f57600080fd5b60d182905562093a80811115610d3457600080fd5b60d25550565b600060026097541415610d5f5760405162461bcd60e51b8152600401610c1290615155565b6002609755610d6e6001611d09565b5050506000805b83811015610f5f57600060d96000878785818110610da357634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610db891906149e0565b6001600160a01b031681526020808201929092526040908101600020815160a08101835281546001600160a81b03811680835260ff600160a81b8304169583019590955263ffffffff600160b01b8204811694830194909452600160d01b9004831660608201526001909101549091166080820152915015610f4c576000806000610e78898987818110610e5c57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610e7191906149e0565b6000612050565b9250925092508215610f485760cd5484516040808701516020880151915163b191ad2d60e01b81526004810187905285151560248201526001600160a81b03909316604484015263ffffffff16606483015260ff166084820152600197506001600160a01b039091169063b191ad2d9060a40160206040518083038186803b158015610f0357600080fd5b505afa158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b9190614f3e565b610f4590886151e1565b96505b5050505b5080610f578161534a565b915050610d75565b5080610fa65760405162461bcd60e51b81526020600482015260166024820152752737903634b8bab4b230b13632903837b9b4ba34b7b760511b6044820152606401610c12565b8160d554610fb491906152a9565b60d555610fc082612252565b50600160975592915050565b600033610fda858285612269565b610fe58585856122e3565b60019150505b9392505050565b600033610cdb8185856110058383611991565b61100f91906151e1565b611be5565b33600090815260de6020526040812054819060ff1661103257600080fd5b61103e846000856124bc565b909590945092505050565b33600090815260de6020526040812054819060ff1661106757600080fd5b6000831161107457600080fd5b61108160006001856124bc565b9094909350915050565b6033546001600160a01b031633146110b55760405162461bcd60e51b8152600401610c12906150d5565b60c9805469ffffffffffffffffffff19166001600160501b0392909216919091179055565b6000806000806110ef87876000886000612820565b935093509350935093509350935093565b60cc5460c954604051635a7b84b160e01b81526001600160501b03909116600482015260009182916001600160a01b0390911690635a7b84b190602401604080518083038186803b15801561115457600080fd5b505afa158015611168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118c9190614f93565b5060ce5460c95442600090815260d7602052604080822054600160501b840463ffffffff168084528284205460d55460d3549451635c9f97e560e01b81526004810193909352602483019390935260448201526001600160501b039094166064850152608484015260a48301529293506001600160a01b0390911690635c9f97e59060c4016101606040518083038186803b15801561122a57600080fd5b505afa15801561123e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112629190614d3d565b90508061014001511561131c5760ce54604082810151606084015160c085015192516307b68b8160e01b81526004810192909252602482015263ffffffff808616604483015290911660648201526001600160a01b03909116906307b68b819060840160206040518083038186803b1580156112dd57600080fd5b505afa1580156112f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113159190614eed565b9250505090565b60ce60009054906101000a90046001600160a01b03166001600160a01b031663f359b46f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112dd57600080fd5b6033546001600160a01b031633146113945760405162461bcd60e51b8152600401610c12906150d5565b60ce80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031633146113e05760405162461bcd60e51b8152600401610c12906150d5565b6113ea600061309c565b565b6033546001600160a01b031633146114165760405162461bcd60e51b8152600401610c12906150d5565b60cf546001600160a01b03161580159061143a575060cb546001600160a01b031615155b1561145d5760cf5460cb5461145d916001600160a01b03918216911660006130ee565b60cf80546001600160a01b0319166001600160a01b03871690811790915515801590611493575060cb546001600160a01b031615155b156114b15760cb546114b1906001600160a01b0316866000196130ee565b60cc80546001600160a01b039586166001600160a01b03199182161790915560d080549486169482169490941790935560cd80549285169284169290921790915560d6805491909316911617905550565b600061150e600161324a565b90508015611526576000805461ff0019166101001790555b60c9805467ffffffffffffffff60701b1916661010000000046560741b1790556203f48060d15561546060d25560d680546001600160a01b031916905561156b6132d7565b611573613306565b61157d8888613335565b60cb80546001600160a01b03199081166001600160a01b038c81169190911790925560ca88905560c9805463ffffffff60b01b1916600160b01b63ffffffff8a160217905560ce8054821687841617905560cc8054821686841617905560cd80549091169184169190911790558015611630576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b606060698054610c4a9061530f565b6116538161336a565b50565b600033816116648286611991565b9050838110156116c45760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c12565b6116d18286868403611be5565b506001949350505050565b6001600160a01b038116600090815260d9602052604081205481906001600160a81b03811690600160a81b900460ff1682808361171857600080fd5b6117238760016133d0565b929a91995095975093955092915050565b600033610cdb8185856122e3565b6033546001600160a01b0316331461176c5760405162461bcd60e51b8152600401610c12906150d5565b6001600160a01b0394909416600090815260da602090815260408083208054961560ff1997881617905560db8252808320805487169515159590951790945560dc8152838220805486169315159390931790925560de909152208054909116911515919091179055565b6033546001600160a01b031633146118005760405162461bcd60e51b8152600401610c12906150d5565b610e108163ffffffff16101561181557600080fd5b60c9805463ffffffff909216600160701b0263ffffffff60701b19909216919091179055565b600080600061184c85856000613567565b9250925092509250925092565b600080600061184c85856001613567565b6033546001600160a01b031633146118945760405162461bcd60e51b8152600401610c12906150d5565b60c9805461ffff60981b1916600160981b9315159390930260ff60a01b191692909217600160a01b91151591909102179055565b60008060cc60009054906101000a90046001600160a01b03166001600160a01b031663c1639a2b6040518163ffffffff1660e01b815260040160606040518083038186803b15801561191957600080fd5b505afa15801561192d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119519190614fc0565b505090508261196157600061197e565b60c95460d35461197e91600160501b900463ffffffff1690611acf565b61198782613aa5565b610feb91906151e1565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b60006119e260c9600a9054906101000a900463ffffffff1663ffffffff1660d354611acf565b905090565b33600090815260de602052604081205460ff16611a0357600080fd5b610feb8383613af4565b600080600080611a2588888861ffff16886001612820565b929b919a509850909650945050505050565b6033546001600160a01b03163314611a615760405162461bcd60e51b8152600401610c12906150d5565b6001600160a01b038116611ac65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c12565b6116538161309c565b60ce5460c95442600090815260d7602052604080822054600160501b840463ffffffff168084528284205460d55460d3549451635c9f97e560e01b81526004810193909352602483019390935260448201526001600160501b039094166064850152608484015260a48301529182916001600160a01b0390911690635c9f97e59060c4016101606040518083038186803b158015611b6c57600080fd5b505afa158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba49190614d3d565b600085815260d760205260409020548151919250610be091855b60006402540be40082611bd186866152a9565b611bdb9190615262565b610be0919061521f565b6001600160a01b038316611c475760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c12565b6001600160a01b038216611ca85760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c12565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60c95460ce5442600090815260d7602052604080822054600160501b850463ffffffff168084528284205460d55460d3549451635c9f97e560e01b815260048101849052602481019490945260448401919091526001600160501b0390961660648301819052608483019690965260a482019290925291938493849391929184916001600160a01b031690635c9f97e59060c4016101606040518083038186803b158015611db657600080fd5b505afa158015611dca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dee9190614d3d565b90508060e0015115611e4457805142600090815260d7602090815260409091209190915560d354908201516402540be40091611e2991615262565b611e33919061521f565b60d454611e4091906151e1565b60d4555b80610100015115611e775760a081015160c9805469ffffffffffffffffffff19166001600160501b039092169190911790555b80610140015115611f905760cc54604051635a7b84b160e01b81526001600160501b03851660048201526001600160a01b0390911690635a7b84b190602401604080518083038186803b158015611ecd57600080fd5b505afa158015611ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f059190614f93565b5060ce54604083810151606085015160c0860151925163d622662f60e01b81526004810192909252602482015263ffffffff808516604483015290911660648201529197506001600160a01b03169063d622662f90608401600060405180830381600087803b158015611f7757600080fd5b505af1158015611f8b573d6000803e3d6000fd5b505050505b8061012001511561200b5760c9805463ffffffff60501b1916600160501b4263ffffffff16021790819055600160901b900460ff168015611fda575060c954600160a01b900460ff165b15611fef57600082815260d760205260408120555b60c9805460ff60901b1916600160901b89151502179055612035565b60c954600160901b900460ff16156120355760c9805460ff60901b1916600160901b891515021790555b60c08101518151608090920151909891975095509350505050565b600080600080600080600061206589896133d0565b6001600160a01b038d8116600090815260d96020908152604091829020825160a08101845281546001600160a81b03811680835260ff600160a81b83041694830185905263ffffffff600160b01b83048116848801819052600160d01b90930481166060850152600190940154909316608083015260cd549451633e67022960e01b8152600481018b90528915156024820152604481019390935260648301526084820192909252969c50949a508b99508a98509296509094509192911690633e6702299060a40160206040518083038186803b15801561214557600080fd5b505afa158015612159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217d9190614bc8565b1561224657600080612193836000015186613d99565b60d382905560d481905560d55491935091506121b09085906152a9565b60d55582516040805189815288151560208201526001600160a81b03909216908201526001600160a01b038d16907f302eaf71224bcd9ed28854139aa87a32dc89622b38a4d8ce4160475aa57a7f139060600160405180910390a250506001600160a01b038a16600090815260d96020526040902080546001600160f01b03191681556001908101805463ffffffff1916905597505b50505050509250925092565b60cb54611653906001600160a01b03163383613ddd565b60006122758484611991565b905060001981146122dd57818110156122d05760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610c12565b6122dd8484848403611be5565b50505050565b6001600160a01b0383166123475760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610c12565b6001600160a01b0382166123a95760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610c12565b6123b4838383613e0d565b6001600160a01b0383166000908152606560205260409020548181101561242c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c12565b6001600160a01b038085166000908152606560205260408082208585039055918516815290812080548492906124639084906151e1565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516124af91815260200190565b60405180910390a36122dd565b600080600260975414156124e25760405162461bcd60e51b8152600401610c1290615155565b600260975560d15433600090815260d860205260409020544291612505916151e1565b11156125465760405162461bcd60e51b815260206004820152601060248201526f119d5b991cc8185c99481b1bd8dad95960821b6044820152606401610c12565b60006125526001611d09565b5050905084156125865760675484935061256b82613aa5565b6125759085615262565b61257f919061521f565b9550612622565b6000861161259357600080fd5b61259c81613aa5565b60016125a760675490565b6125b19089615262565b6125bb91906152a9565b6125c5919061521f565b6125d09060016151e1565b9250838311156126225760405162461bcd60e51b815260206004820152601a60248201527f546f6f206d756368204c5020746f6b656e7320746f206275726e0000000000006044820152606401610c12565b336000908152606560205260409020548311156126815760405162461bcd60e51b815260206004820181905260248201527f4e6f7420656e6f756768204c5020746f6b656e7320666f72206163636f756e746044820152606401610c12565b60c954600160981b900460ff16806126a857508560d35460d5546126a591906152a9565b10155b6126f45760405162461bcd60e51b815260206004820152601760248201527f436f6c6c61746572616c20726174696f2062726f6b656e0000000000000000006044820152606401610c12565b8560d55461270291906152a9565b60d55560ce546040805163495ef70560e01b81529051600092612710926001600160a01b039091169163495ef70591600480820192602092909190829003018186803b15801561275157600080fd5b505afa158015612765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127899190614eed565b6127979061ffff1689615262565b6127a1919061521f565b90506127ad81886152a9565b604080518981526020810187905290810183905290935033907f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca949060600160405180910390a26127fd3385613f45565b6128068161409f565b61280f83612252565b505060016097559094909350915050565b600080600080600260975414156128495760405162461bcd60e51b8152600401610c1290615155565b600260975533600090815260db602052604090205460ff1661286a57600080fd5b60008660ff161161287a57600080fd5b60c95460ff600160a81b9091048116908716111561289757600080fd5b6000896001600160a81b0316116128ad57600080fd5b60008863ffffffff161180156128d6575060c95463ffffffff600160b01b909104811690891611155b6128df57600080fd5b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915261293a6000611d09565b6080840152602083015263ffffffff90811660e08301819052908a1610156129935760405162461bcd60e51b815260206004820152600c60248201526b086ac9240e8dede40d0d2ced60a31b6044820152606401610c12565b60c954608082015142916129b591600160701b90910463ffffffff16906151e1565b10156129fd5760405162461bcd60e51b81526020600482015260176024820152764c61746573742063766920746f6f206c6f6e672061676f60481b6044820152606401610c12565b60ce54604080516307e3dd0f60e41b815281516001600160a01b0390931692637e3dd0f092600480840193919291829003018186803b158015612a3f57600080fd5b505afa158015612a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a779190614f09565b61ffff9081166101208401521661010082015285612a96576000612ac5565b6101008101516127109061ffff16612ab160ff8a168d615233565b612abb9190615233565b612ac591906151f9565b60d554825292508515612c835760e081015160c95463ffffffff91821691600160b01b9091041660ff8916612b066001600160a81b03808816908f166152a9565b612b109190615262565b612b1a9190615262565b612b24919061521f565b6040820152600060ff8816612b39858d615281565b612b439190615233565b8251612b58916001600160a81b0316906151e1565b60ce54835160d35460408601519394506001600160a01b0390921692631437d6d4928f928d929091908790612b8d90836151e1565b6040516001600160e01b031960e089901b1681526001600160a81b03909616600487015260ff909416602486015260448501929092526064840152608483015260a482015260c401604080518083038186803b158015612bec57600080fd5b505afa158015612c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c249190614df3565b61ffff1660c084018190529093506001600160a81b038a161015612c815760405162461bcd60e51b81526020600482015260146024820152730a0e4cadad2eada40cccaca40e8dede40d0d2ced60631b6044820152606401610c12565b505b60ff871682612c92858d615281565b612c9c9190615281565b612ca69190615233565b33600090815260d9602052604090208054919550906001600160a81b031615612d8057805460ff898116600160a81b9092041614612ce357600080fd5b6000612d038284602001518560e00151896001600160a81b03168d6140d5565b805160208201516001600160a81b0390811660a087015260608301516040840151929a509293508616612d3960ff8d1684615262565b8651612d4f906001600160a81b038c16906151e1565b612d5991906151e1565b612d6391906151e1565b612d6d91906152a9565b612d7791906152a9565b60d55550612eeb565b60e082015160c95463ffffffff91821691612dac91600160b01b9004166001600160a81b038816615262565b612db6919061521f565b6060830181905295506001600160a81b0386168614612dd457600080fd5b6001600160a81b0380871660a080850182905260408051918201815282825260ff808d16602080850191825260e089015163ffffffff908116868601908152428216606088018181526080890191825233600090815260d990955296909320875181549551925197518416600160d01b0263ffffffff60d01b19988516600160b01b029890981667ffffffffffffffff60b01b1993909716600160a81b026001600160b01b03199096169a169990991793909317929092169290921792909217855551600190940180549490911663ffffffff199094169390931790925560d354612ebf91906151e1565b60d35582516001600160a81b0380861691612edc918916906151e1565b612ee691906151e1565b60d555505b337fe485c81af56f49547b2ea1b6886083d8e3a7ef50fe670c9574bd5d4b2dd7d4628c8a612f1987896151b6565b60e0870151604080516001600160a81b03958616815260ff94909416602085015291841683830152928b16606083015263ffffffff909216608082015290519081900360a00190a2612f738b6001600160a81b03166142de565b6001600160a81b03841615612f9457612f94846001600160a81b031661409f565b60d55460d3541115612fdf5760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f756768206c697175696469747960601b6044820152606401610c12565b60d0546001600160a01b031615801590613005575060a08201516001600160a81b031615155b156130865760d05460a0830151604051630bf1944760e21b81523360048201526001600160a81b03909116602482015260ff8a1660448201526001600160a01b0390911690632fc6511c90606401600060405180830381600087803b15801561306d57600080fd5b505af1158015613081573d6000803e3d6000fd5b505050505b5050600160978190555095509550955095915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8015806131775750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561313d57600080fd5b505afa158015613151573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131759190614f3e565b155b6131e25760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610c12565b6040516001600160a01b03831660248201526044810182905261324590849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526142f6565b505050565b60008054610100900460ff1615613291578160ff16600114801561326d5750303b155b6132895760405162461bcd60e51b8152600401610c1290615087565b506000919050565b60005460ff8084169116106132b85760405162461bcd60e51b8152600401610c1290615087565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166132fe5760405162461bcd60e51b8152600401610c129061510a565b6113ea6143c8565b600054610100900460ff1661332d5760405162461bcd60e51b8152600401610c129061510a565b6113ea6143f6565b600054610100900460ff1661335c5760405162461bcd60e51b8152600401610c129061510a565b6133668282614426565b5050565b6002609754141561338d5760405162461bcd60e51b8152600401610c1290615155565b600260975533600090815260dc602052604090205460ff166133ae57600080fd5b8060d5546133bc91906151e1565b60d5556133c8816142de565b506001609755565b6001600160a01b03808316600090815260d960209081526040808320815160a08101835281546001600160a81b038116825260ff600160a81b8204169482019490945263ffffffff600160b01b8504811682850152600160d01b9094048416606080830191909152600190920154909316608084015260cc54825163c1639a2b60e01b815292519495869586958695909486949093169263c1639a2b92600480840193829003018186803b15801561348757600080fd5b505afa15801561349b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134bf9190614fc0565b5050606083015163ffffffff908116600090815260d760205260408082205460c954600160501b900490931682529020548451929350613507926001600160a81b0316611bbe565b9350861561353357613530826060015163ffffffff1683600001516001600160a81b0316611acf565b93505b61355582600001516001600160a81b0316836020015183856040015188614474565b919a9099509497509550929350505050565b60008060006002609754141561358f5760405162461bcd60e51b8152600401610c1290615155565b600260975533600090815260db602052604090205460ff166135b057600080fd5b6000866001600160a81b0316116135c657600080fd5b60008563ffffffff161180156135ef575060c95463ffffffff600160b01b909104811690861611155b6135f857600080fd5b33600090815260d96020526040902080546001600160a81b038089169116101561362157600080fd5b60d254815461363d90600160d01b900463ffffffff16426152a9565b101580613659575033600090815260da602052604090205460ff165b6136975760405162461bcd60e51b815260206004820152600f60248201526e141bdcda5d1a5bdb881b1bd8dad959608a1b6044820152606401610c12565b60008060008060006136a96001611d09565b50909250905063ffffffff808c1690831610156136f65760405162461bcd60e51b815260206004820152600b60248201526a43564920746f6f206c6f7760a81b6044820152606401610c12565b600061370d878e6001600160a81b03168486614551565b92985090965094509050801561373457600080600099509950995050505050505050613a94565b50506137408b84613d99565b60d45560d35560008980156137d3575060ce5460408051633b75d72160e11b815290516000926001600160a01b0316916376ebae42916004808301926020929190829003018186803b15801561379557600080fd5b505afa1580156137a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137cd9190614eed565b61ffff16115b156138655760ce60009054906101000a90046001600160a01b03166001600160a01b03166350e0942b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561382657600080fd5b505afa15801561383a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061385e9190614eed565b61ffff1690505b855461387b908d906001600160a81b0316615281565b86546001600160a81b0319166001600160a81b0391909116178655896138a2576000613961565b60ce54865433600090815260da6020526040908190205490516315435d0560e31b8152600160d01b90920463ffffffff16600483015260ff1615156024820152612710916001600160a01b03169063aa1ae8289060440160206040518083038186803b15801561391157600080fd5b505afa158015613925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139499190614eed565b6139579061ffff1687615262565b613961919061521f565b97506127106139708287615262565b61397a919061521f565b9650337f3989dab79971090c83b28eb2d423aa507b7d4c16f5cf10a4fdb05835cafba36a6139a886886151e1565b866139b38b8d6151e1565b6139bd91906151e1565b89546040805193845260208401929092526001600160a81b0381168383015260ff600160a81b90910416606083015263ffffffff86166080830152519081900360a00190a285546001600160a81b0316613a3d5733600090815260d96020526040902080546001600160f01b0319168155600101805463ffffffff191690555b86838660d554613a4d91906152a9565b613a5791906152a9565b613a6191906151e1565b60d55586613a6f89876152a9565b613a7991906152a9565b9850613a848861409f565b613a8d89612252565b5050505050505b600160978190555093509350939050565b60c95460d35460009163ffffffff600160b01b909104811691613aca91851690615262565b613ad4919061521f565b60d45460d554613ae491906151e1565b613aee91906152a9565b92915050565b600060026097541415613b195760405162461bcd60e51b8152600401610c1290615155565b600260975582613b2857600080fd5b33600090815260d86020526040812042905580613b456001611d09565b60c95492945092504291613b679150600160701b900463ffffffff16836151e1565b1015613baf5760405162461bcd60e51b81526020600482015260176024820152764c61746573742063766920746f6f206c6f6e672061676f60481b6044820152606401610c12565b60006127106001600160a81b031660ce60009054906101000a90046001600160a01b03166001600160a01b031663cc1252ae6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c0b57600080fd5b505afa158015613c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c439190614eed565b613c519061ffff1688615262565b613c5b919061521f565b90506000613c6982886152a9565b90506000613c7660675490565b90506000613c8386613aa5565b9050600082118015613c955750600081115b15613cb65780613ca58385615262565b613caf919061521f565b9650613cc6565b60ca54613cc39084615262565b96505b604080518a81526020810189905290810185905233907f36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e9060600160405180910390a287871015613d4d5760405162461bcd60e51b8152602060048201526011602482015270546f6f20666577204c5020746f6b656e7360781b6044820152606401610c12565b60008711613d5a57600080fd5b8260d554613d6891906151e1565b60d555613d7533886145ed565b613d7e896142de565b613d878461409f565b50506001609755509295945050505050565b600080836001600160a81b031660d354613db391906152a9565b915060d4548311613dd1578260d454613dcc91906152a9565b613dd4565b60005b90509250929050565b6040516001600160a01b03831660248201526044810182905261324590849063a9059cbb60e01b9060640161320e565b60d6546001600160a01b0384811691161415613e4157506001600160a01b0316600090815260d86020526040902042905550565b60d1546001600160a01b038416600090815260d860205260409020544291613e68916151e1565b118015613e9557506001600160a01b03808316600090815260d86020526040808220549286168252902054115b8015613eaf575060d6546001600160a01b03838116911614155b15613245576001600160a01b038216600090815260dd602052604090205460ff1615613f1d5760405162461bcd60e51b815260206004820152601f60248201527f526563697069656e742072656675736573206c6f636b656420746f6b656e73006044820152606401610c12565b6001600160a01b03808416600090815260d86020526040808220549285168252902055505050565b6001600160a01b038216613fa55760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610c12565b613fb182600083613e0d565b6001600160a01b038216600090815260656020526040902054818110156140255760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610c12565b6001600160a01b03831660009081526065602052604081208383039055606780548492906140549084906152a9565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6000811180156140b9575060cf546001600160a01b031615155b156116535760cb546116539082906001600160a01b03166146d8565b6040805160808082018352600080835260208084018290528385018290526060808501839052855160a081018752958601839052850182905291840181905288546001600160a81b0316918401829052600189015463ffffffff16845291929190819081908190614149908c908c8c614551565b9350935093509350801561418357600060208601819052855160018d01805463ffffffff191663ffffffff90921691909117905593508391505b60c95463ffffffff808b1691600160b01b900416896141a560ff8b1688615262565b6141af91906151e1565b6141b99190615262565b6141c3919061521f565b604086018181526001600160a81b039091168088529051146141e457600080fd5b8a5486516001600160a81b0316600168ffffffffffffffff0160a81b0319909116600160d01b4263ffffffff90811691909102600164ffffffff0160a81b0319169190911791909117600160b01b918b16919091021760ff60a81b1916600160a81b60ff891602178b55602085015161425d9084613d99565b608087018190526060870182905260d4558651614285916001600160a81b03909116906151e1565b60d3556040860182905260608601849052855160208601516001600160a81b03918216911610156142d057602085015186516142c19190615281565b6001600160a81b031660208701525b505050505095945050505050565b60cb54611653906001600160a01b0316333084614742565b600061434b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661477a9092919063ffffffff16565b80519091501561324557808060200190518101906143699190614bc8565b6132455760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c12565b600054610100900460ff166143ef5760405162461bcd60e51b8152600401610c129061510a565b6001609755565b600054610100900460ff1661441d5760405162461bcd60e51b8152600401610c129061510a565b6113ea3361309c565b600054610100900460ff1661444d5760405162461bcd60e51b8152600401610c129061510a565b815161446090606890602085019061488e565b50805161324590606990602084019061488e565b60c95460009081908190819063ffffffff600160b01b90910481169061449c9089168b615262565b6144a6919061521f565b905060018860ff16116144ba57600061450b565b60c95460ff891690600160b01b900463ffffffff166144da60018b6152c0565b60ff166144ed63ffffffff8a168d615262565b6144f79190615262565b614501919061521f565b61450b919061521f565b9150600061451986846151e1565b90508082106145375761452c81836152a9565b945060019350614544565b61454182826152a9565b94505b5050955095509592505050565b8354600160d01b900463ffffffff16600090815260d76020526040812054819081908190614580908789611bbe565b8854909350600090819081906145b2908b90600160a81b810460ff16908b90600160b01b900463ffffffff168a614474565b925092509250816145d8576145c8336000612050565b50505060019350600095506145df565b8296508094505b505050945094509450949050565b6001600160a01b0382166146435760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610c12565b61464f60008383613e0d565b806067600082825461466191906151e1565b90915550506001600160a01b0382166000908152606560205260408120805483929061468e9084906151e1565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60cf54604051638b0f154d60e01b8152600481018490526001600160a01b03838116602483015290911690638b0f154d90604401600060405180830381600087803b15801561472657600080fd5b505af115801561473a573d6000803e3d6000fd5b505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526122dd9085906323b872dd60e01b9060840161320e565b6060610be08484600085856001600160a01b0385163b6147dc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c12565b600080866001600160a01b031685876040516147f89190615038565b60006040518083038185875af1925050503d8060008114614835576040519150601f19603f3d011682016040523d82523d6000602084013e61483a565b606091505b509150915061484a828286614855565b979650505050505050565b60608315614864575081610feb565b8251156148745782518084602001fd5b8160405162461bcd60e51b8152600401610c129190615054565b82805461489a9061530f565b90600052602060002090601f0160209004810192826148bc5760008555614902565b82601f106148d557805160ff1916838001178555614902565b82800160010185558215614902579182015b828111156149025782518255916020019190600101906148e7565b5061490e929150614912565b5090565b5b8082111561490e5760008155600101614913565b80516132d2816153bc565b600082601f830112614942578081fd5b813567ffffffffffffffff8082111561495d5761495d615391565b604051601f8301601f19908116603f0116810190828211818310171561498557614985615391565b8160405283815286602085880101111561499d578485fd5b8360208701602083013792830160200193909352509392505050565b80516132d2816153ef565b803560ff811681146132d257600080fd5b80516132d281615401565b6000602082840312156149f1578081fd5b8135610feb816153a7565b60008060408385031215614a0e578081fd5b8235614a19816153a7565b91506020830135614a29816153a7565b809150509250929050565b600080600060608486031215614a48578081fd5b8335614a53816153a7565b92506020840135614a63816153a7565b929592945050506040919091013590565b600080600080600060a08688031215614a8b578081fd5b8535614a96816153a7565b94506020860135614aa6816153bc565b93506040860135614ab6816153bc565b92506060860135614ac6816153bc565b91506080860135614ad6816153bc565b809150509295509295909350565b60008060408385031215614af6578182fd5b8235614b01816153a7565b91506020830135614a29816153da565b60008060408385031215614b23578182fd5b8235614b2e816153a7565b946020939093013593505050565b60008060208385031215614b4e578182fd5b823567ffffffffffffffff80821115614b65578384fd5b818501915085601f830112614b78578384fd5b813581811115614b86578485fd5b8660208260051b8501011115614b9a578485fd5b60209290920196919550909350505050565b600060208284031215614bbd578081fd5b8135610feb816153bc565b600060208284031215614bd9578081fd5b8151610feb816153bc565b60008060408385031215614bf6578182fd5b8235614c01816153bc565b91506020830135614a29816153bc565b600080600080600080600080610100898b031215614c2d578586fd5b8835614c38816153a7565b9750602089013567ffffffffffffffff80821115614c54578788fd5b614c608c838d01614932565b985060408b0135915080821115614c75578788fd5b50614c828b828c01614932565b965050606089013594506080890135614c9a816153ef565b935060a0890135614caa816153a7565b925060c0890135614cba816153a7565b915060e0890135614cca816153a7565b809150509295985092959890939650565b600080600080600060a08688031215614cf2578283fd5b8535614cfd816153a7565b94506020860135614d0d816153a7565b93506040860135614d1d816153a7565b92506060860135614d2d816153a7565b91506080860135614ad6816153a7565b60006101608284031215614d4f578081fd5b614d5761518c565b8251815260208301516020820152604083015160408201526060830151606082015260808301516080820152614d8f60a084016149d5565b60a0820152614da060c084016149b9565b60c0820152614db160e08401614927565b60e0820152610100614dc4818501614927565b90820152610120614dd6848201614927565b90820152610140614de8848201614927565b908201529392505050565b60008060408385031215614e05578182fd5b8251614e10816153da565b6020840151909250614a29816153ca565b60008060408385031215614e33578182fd5b8235614e3e816153da565b91506020830135614a29816153ef565b60008060008060808587031215614e63578182fd5b8435614e6e816153da565b93506020850135614e7e816153ef565b92506040850135614e8e816153ca565b9150614e9c606086016149c4565b905092959194509250565b600080600060608486031215614ebb578081fd5b8335614ec6816153da565b92506020840135614ed6816153ef565b9150614ee4604085016149c4565b90509250925092565b600060208284031215614efe578081fd5b8151610feb816153ca565b60008060408385031215614f1b578182fd5b8251614e10816153ca565b600060208284031215614f37578081fd5b5035919050565b600060208284031215614f4f578081fd5b5051919050565b60008060408385031215614f68578182fd5b50508035926020909101359150565b600060208284031215614f88578081fd5b8135610feb816153ef565b60008060408385031215614fa5578182fd5b8251614fb0816153ef565b6020939093015192949293505050565b600080600060608486031215614fd4578081fd5b8351614fdf816153ef565b6020850151909350614ff081615401565b80925050604084015190509250925092565b600060208284031215615013578081fd5b610feb826149c4565b60006020828403121561502d578081fd5b8135610feb81615401565b6000825161504a8184602087016152e3565b9190910192915050565b60208152600082518060208401526150738160408501602087016152e3565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051610160810167ffffffffffffffff811182821017156151b0576151b0615391565b60405290565b60006001600160a81b038281168482168083038211156151d8576151d8615365565b01949350505050565b600082198211156151f4576151f4615365565b500190565b60006001600160a81b03838116806152135761521361537b565b92169190910492915050565b60008261522e5761522e61537b565b500490565b60006001600160a81b038281168482168115158284048211161561525957615259615365565b02949350505050565b600081600019048311821515161561527c5761527c615365565b500290565b60006001600160a81b03838116908316818110156152a1576152a1615365565b039392505050565b6000828210156152bb576152bb615365565b500390565b600060ff821660ff8416808210156152da576152da615365565b90039392505050565b60005b838110156152fe5781810151838201526020016152e6565b838111156122dd5750506000910152565b600181811c9082168061532357607f821691505b6020821081141561534457634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561535e5761535e615365565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461165357600080fd5b801515811461165357600080fd5b61ffff8116811461165357600080fd5b6001600160a81b038116811461165357600080fd5b63ffffffff8116811461165357600080fd5b6001600160501b038116811461165357600080fdfea2646970667358221220d1fe512f6a1999538a7f9201595dabe2e47f6111b694a54a8a3e3fb47f77a37e64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103f15760003560e01c806383d3b20e11610215578063b17e141111610125578063dd907e8b116100b8578063f2217fe411610087578063f2217fe414610a60578063f2dfbf6614610a73578063f2fde38b14610a86578063f9c47ead14610a99578063fc0c546a14610abc57600080fd5b8063dd907e8b14610a19578063e2bbb15814610a21578063e51379ba14610a34578063ebc1daf614610a5757600080fd5b8063d934c20b116100f4578063d934c20b146109b9578063d9c36290146109d0578063dbd94267146109e3578063dd62ed3e14610a0657600080fd5b8063b17e141114610952578063ba6af83214610965578063c657549114610993578063ca832799146109a657600080fd5b80639c266c32116101a8578063a6ca982c11610177578063a6ca982c146108a4578063a9059cbb146108f5578063aceda7f914610908578063b152b2951461091c578063b17b849f1461093f57600080fd5b80639c266c32146108545780639cf160f61461086b5780639ec5a8941461087e578063a457c2d71461089157600080fd5b80638eb50a38116101e45780638eb50a381461081d578063913536381461082657806395d89b411461083957806395f20fac1461084157600080fd5b806383d3b20e146107dc5780638c7e7475146107ef5780638d4d7e31146108035780638da5cb5b1461080c57600080fd5b8063452d003f116103105780636185aa3a116102a357806370a082311161027257806370a0823114610732578063715018a61461075b578063745dd850146107635780637b04bc06146107915780638202c681146107bc57600080fd5b80636185aa3a146106c0578063655d8dec146106ec5780636c7156411461070c5780636f7d78281461071f57600080fd5b8063558e44d3116102df578063558e44d3146105e257806355f575101461060357806360ebfee6146106995780636162129b146106a557600080fd5b8063452d003f1461056d578063486072501461058057806353997f6114610593578063547ef3e6146105d957600080fd5b806323b872dd116103885780633535f48b116103575780633535f48b146104f457806335a03bfa1461051f5780633950935114610532578063441a3e701461054557600080fd5b806323b872dd146104ba5780632f811c22146104cd578063313ce567146104d657806332527992146104eb57600080fd5b80630a545fe5116103c45780630a545fe5146104695780630af127b91461047c578063124805861461049f57806318160ddd146104b257600080fd5b806302b1ba6f146103f657806305621f1a1461041c57806306fdde0314610431578063095ea7b314610446575b600080fd5b610409610404366004614ae4565b610acf565b6040519081526020015b60405180910390f35b61042f61042a366004615002565b610be8565b005b610439610c3b565b6040516104139190615054565b610459610454366004614b11565b610ccd565b6040519015158152602001610413565b61042f610477366004614f56565b610ce5565b61045961048a3660046149e0565b60dc6020526000908152604090205460ff1681565b6104096104ad366004614b3c565b610d3a565b606754610409565b6104596104c8366004614a34565b610fcc565b61040960d35481565b60125b60405160ff9091168152602001610413565b61040960d15481565b60d654610507906001600160a01b031681565b6040516001600160a01b039091168152602001610413565b60ce54610507906001600160a01b031681565b610459610540366004614b11565b610ff2565b610558610553366004614f56565b611014565b60408051928352602083019190915201610413565b61055861057b366004614f26565b611049565b61042f61058e36600461501c565b61108b565b6105a66105a1366004614ea7565b6110da565b604080516001600160a81b0395861681529385166020850152918416918301919091529091166060820152608001610413565b61040960d45481565b6105eb61271081565b6040516001600160a81b039091168152602001610413565b61065a6106113660046149e0565b60d960205260009081526040902080546001909101546001600160a81b0382169160ff600160a81b8204169163ffffffff600160b01b8304811692600160d01b90048116911685565b604080516001600160a81b03909616865260ff909416602086015263ffffffff928316938501939093528116606084015216608082015260a001610413565b6104096402540be40081565b6106ad611100565b60405161ffff9091168152602001610413565b60c9546106d790600160501b900463ffffffff1681565b60405163ffffffff9091168152602001610413565b6104096106fa3660046149e0565b60d86020526000908152604090205481565b61042f61071a3660046149e0565b61136a565b60cc54610507906001600160a01b031681565b6104096107403660046149e0565b6001600160a01b031660009081526065602052604090205490565b61042f6113b6565b61042f610771366004614bac565b33600090815260dd60205260409020805460ff1916911515919091179055565b60c9546107a4906001600160501b031681565b6040516001600160501b039091168152602001610413565b6104096107ca366004614f26565b60d76020526000908152604090205481565b61042f6107ea366004614cdb565b6113ec565b60c9546104d990600160a81b900460ff1681565b61040960d55481565b6033546001600160a01b0316610507565b61040960ca5481565b61042f610834366004614c11565b611502565b61043961163b565b61042f61084f366004614f26565b61164a565b60c9546106d790600160701b900463ffffffff1681565b60cf54610507906001600160a01b031681565b60d054610507906001600160a01b031681565b61045961089f366004614b11565b611656565b6108b76108b23660046149e0565b6116dc565b6040805196875294151560208701526001600160a81b039093169385019390935260ff166060840152608083019190915260a082015260c001610413565b610459610903366004614b11565b611734565b60c95461045990600160981b900460ff1681565b61045961092a3660046149e0565b60dd6020526000908152604090205460ff1681565b61042f61094d366004614a74565b611742565b61042f610960366004614f77565b6117d6565b610978610973366004614e21565b61183b565b60408051938452602084019290925290820152606001610413565b6109786109a1366004614e21565b611859565b61042f6109b4366004614be4565b61186a565b60c9546106d790600160b01b900463ffffffff1681565b6104096109de366004614bac565b6118c8565b6104596109f13660046149e0565b60de6020526000908152604090205460ff1681565b610409610a143660046149fc565b611991565b6104096119bc565b610409610a2f366004614f56565b6119e7565b610459610a423660046149e0565b60da6020526000908152604090205460ff1681565b61040960d25481565b6105a6610a6e366004614e4e565b611a0d565b60cd54610507906001600160a01b031681565b61042f610a943660046149e0565b611a37565b610459610aa73660046149e0565b60db6020526000908152604090205460ff1681565b60cb54610507906001600160a01b031681565b6001600160a01b038216600090815260d960209081526040808320815160a08101835281546001600160a81b03811680835260ff600160a81b8304169583019590955263ffffffff600160b01b8204811694830194909452600160d01b900483166060820152600190910154909116608082015290610b4d57600080fd5b80600001516001600160a81b0316836001600160a81b03161115610b7057600080fd5b60c954610b9390600160501b900463ffffffff166001600160a81b038516611acf565b606082015163ffffffff908116600090815260d760205260408082205460c954600160501b90049093168252902054610bd691906001600160a81b038716611bbe565b610be091906151e1565b949350505050565b6033546001600160a01b03163314610c1b5760405162461bcd60e51b8152600401610c12906150d5565b60405180910390fd5b60c9805460ff909216600160a81b0260ff60a81b19909216919091179055565b606060688054610c4a9061530f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c769061530f565b8015610cc35780601f10610c9857610100808354040283529160200191610cc3565b820191906000526020600020905b815481529060010190602001808311610ca657829003601f168201915b5050505050905090565b600033610cdb818585611be5565b5060019392505050565b6033546001600160a01b03163314610d0f5760405162461bcd60e51b8152600401610c12906150d5565b62127500821115610d1f57600080fd5b60d182905562093a80811115610d3457600080fd5b60d25550565b600060026097541415610d5f5760405162461bcd60e51b8152600401610c1290615155565b6002609755610d6e6001611d09565b5050506000805b83811015610f5f57600060d96000878785818110610da357634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610db891906149e0565b6001600160a01b031681526020808201929092526040908101600020815160a08101835281546001600160a81b03811680835260ff600160a81b8304169583019590955263ffffffff600160b01b8204811694830194909452600160d01b9004831660608201526001909101549091166080820152915015610f4c576000806000610e78898987818110610e5c57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610e7191906149e0565b6000612050565b9250925092508215610f485760cd5484516040808701516020880151915163b191ad2d60e01b81526004810187905285151560248201526001600160a81b03909316604484015263ffffffff16606483015260ff166084820152600197506001600160a01b039091169063b191ad2d9060a40160206040518083038186803b158015610f0357600080fd5b505afa158015610f17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3b9190614f3e565b610f4590886151e1565b96505b5050505b5080610f578161534a565b915050610d75565b5080610fa65760405162461bcd60e51b81526020600482015260166024820152752737903634b8bab4b230b13632903837b9b4ba34b7b760511b6044820152606401610c12565b8160d554610fb491906152a9565b60d555610fc082612252565b50600160975592915050565b600033610fda858285612269565b610fe58585856122e3565b60019150505b9392505050565b600033610cdb8185856110058383611991565b61100f91906151e1565b611be5565b33600090815260de6020526040812054819060ff1661103257600080fd5b61103e846000856124bc565b909590945092505050565b33600090815260de6020526040812054819060ff1661106757600080fd5b6000831161107457600080fd5b61108160006001856124bc565b9094909350915050565b6033546001600160a01b031633146110b55760405162461bcd60e51b8152600401610c12906150d5565b60c9805469ffffffffffffffffffff19166001600160501b0392909216919091179055565b6000806000806110ef87876000886000612820565b935093509350935093509350935093565b60cc5460c954604051635a7b84b160e01b81526001600160501b03909116600482015260009182916001600160a01b0390911690635a7b84b190602401604080518083038186803b15801561115457600080fd5b505afa158015611168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118c9190614f93565b5060ce5460c95442600090815260d7602052604080822054600160501b840463ffffffff168084528284205460d55460d3549451635c9f97e560e01b81526004810193909352602483019390935260448201526001600160501b039094166064850152608484015260a48301529293506001600160a01b0390911690635c9f97e59060c4016101606040518083038186803b15801561122a57600080fd5b505afa15801561123e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112629190614d3d565b90508061014001511561131c5760ce54604082810151606084015160c085015192516307b68b8160e01b81526004810192909252602482015263ffffffff808616604483015290911660648201526001600160a01b03909116906307b68b819060840160206040518083038186803b1580156112dd57600080fd5b505afa1580156112f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113159190614eed565b9250505090565b60ce60009054906101000a90046001600160a01b03166001600160a01b031663f359b46f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112dd57600080fd5b6033546001600160a01b031633146113945760405162461bcd60e51b8152600401610c12906150d5565b60ce80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031633146113e05760405162461bcd60e51b8152600401610c12906150d5565b6113ea600061309c565b565b6033546001600160a01b031633146114165760405162461bcd60e51b8152600401610c12906150d5565b60cf546001600160a01b03161580159061143a575060cb546001600160a01b031615155b1561145d5760cf5460cb5461145d916001600160a01b03918216911660006130ee565b60cf80546001600160a01b0319166001600160a01b03871690811790915515801590611493575060cb546001600160a01b031615155b156114b15760cb546114b1906001600160a01b0316866000196130ee565b60cc80546001600160a01b039586166001600160a01b03199182161790915560d080549486169482169490941790935560cd80549285169284169290921790915560d6805491909316911617905550565b600061150e600161324a565b90508015611526576000805461ff0019166101001790555b60c9805467ffffffffffffffff60701b1916661010000000046560741b1790556203f48060d15561546060d25560d680546001600160a01b031916905561156b6132d7565b611573613306565b61157d8888613335565b60cb80546001600160a01b03199081166001600160a01b038c81169190911790925560ca88905560c9805463ffffffff60b01b1916600160b01b63ffffffff8a160217905560ce8054821687841617905560cc8054821686841617905560cd80549091169184169190911790558015611630576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b606060698054610c4a9061530f565b6116538161336a565b50565b600033816116648286611991565b9050838110156116c45760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c12565b6116d18286868403611be5565b506001949350505050565b6001600160a01b038116600090815260d9602052604081205481906001600160a81b03811690600160a81b900460ff1682808361171857600080fd5b6117238760016133d0565b929a91995095975093955092915050565b600033610cdb8185856122e3565b6033546001600160a01b0316331461176c5760405162461bcd60e51b8152600401610c12906150d5565b6001600160a01b0394909416600090815260da602090815260408083208054961560ff1997881617905560db8252808320805487169515159590951790945560dc8152838220805486169315159390931790925560de909152208054909116911515919091179055565b6033546001600160a01b031633146118005760405162461bcd60e51b8152600401610c12906150d5565b610e108163ffffffff16101561181557600080fd5b60c9805463ffffffff909216600160701b0263ffffffff60701b19909216919091179055565b600080600061184c85856000613567565b9250925092509250925092565b600080600061184c85856001613567565b6033546001600160a01b031633146118945760405162461bcd60e51b8152600401610c12906150d5565b60c9805461ffff60981b1916600160981b9315159390930260ff60a01b191692909217600160a01b91151591909102179055565b60008060cc60009054906101000a90046001600160a01b03166001600160a01b031663c1639a2b6040518163ffffffff1660e01b815260040160606040518083038186803b15801561191957600080fd5b505afa15801561192d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119519190614fc0565b505090508261196157600061197e565b60c95460d35461197e91600160501b900463ffffffff1690611acf565b61198782613aa5565b610feb91906151e1565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b60006119e260c9600a9054906101000a900463ffffffff1663ffffffff1660d354611acf565b905090565b33600090815260de602052604081205460ff16611a0357600080fd5b610feb8383613af4565b600080600080611a2588888861ffff16886001612820565b929b919a509850909650945050505050565b6033546001600160a01b03163314611a615760405162461bcd60e51b8152600401610c12906150d5565b6001600160a01b038116611ac65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c12565b6116538161309c565b60ce5460c95442600090815260d7602052604080822054600160501b840463ffffffff168084528284205460d55460d3549451635c9f97e560e01b81526004810193909352602483019390935260448201526001600160501b039094166064850152608484015260a48301529182916001600160a01b0390911690635c9f97e59060c4016101606040518083038186803b158015611b6c57600080fd5b505afa158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba49190614d3d565b600085815260d760205260409020548151919250610be091855b60006402540be40082611bd186866152a9565b611bdb9190615262565b610be0919061521f565b6001600160a01b038316611c475760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c12565b6001600160a01b038216611ca85760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c12565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60c95460ce5442600090815260d7602052604080822054600160501b850463ffffffff168084528284205460d55460d3549451635c9f97e560e01b815260048101849052602481019490945260448401919091526001600160501b0390961660648301819052608483019690965260a482019290925291938493849391929184916001600160a01b031690635c9f97e59060c4016101606040518083038186803b158015611db657600080fd5b505afa158015611dca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dee9190614d3d565b90508060e0015115611e4457805142600090815260d7602090815260409091209190915560d354908201516402540be40091611e2991615262565b611e33919061521f565b60d454611e4091906151e1565b60d4555b80610100015115611e775760a081015160c9805469ffffffffffffffffffff19166001600160501b039092169190911790555b80610140015115611f905760cc54604051635a7b84b160e01b81526001600160501b03851660048201526001600160a01b0390911690635a7b84b190602401604080518083038186803b158015611ecd57600080fd5b505afa158015611ee1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f059190614f93565b5060ce54604083810151606085015160c0860151925163d622662f60e01b81526004810192909252602482015263ffffffff808516604483015290911660648201529197506001600160a01b03169063d622662f90608401600060405180830381600087803b158015611f7757600080fd5b505af1158015611f8b573d6000803e3d6000fd5b505050505b8061012001511561200b5760c9805463ffffffff60501b1916600160501b4263ffffffff16021790819055600160901b900460ff168015611fda575060c954600160a01b900460ff165b15611fef57600082815260d760205260408120555b60c9805460ff60901b1916600160901b89151502179055612035565b60c954600160901b900460ff16156120355760c9805460ff60901b1916600160901b891515021790555b60c08101518151608090920151909891975095509350505050565b600080600080600080600061206589896133d0565b6001600160a01b038d8116600090815260d96020908152604091829020825160a08101845281546001600160a81b03811680835260ff600160a81b83041694830185905263ffffffff600160b01b83048116848801819052600160d01b90930481166060850152600190940154909316608083015260cd549451633e67022960e01b8152600481018b90528915156024820152604481019390935260648301526084820192909252969c50949a508b99508a98509296509094509192911690633e6702299060a40160206040518083038186803b15801561214557600080fd5b505afa158015612159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217d9190614bc8565b1561224657600080612193836000015186613d99565b60d382905560d481905560d55491935091506121b09085906152a9565b60d55582516040805189815288151560208201526001600160a81b03909216908201526001600160a01b038d16907f302eaf71224bcd9ed28854139aa87a32dc89622b38a4d8ce4160475aa57a7f139060600160405180910390a250506001600160a01b038a16600090815260d96020526040902080546001600160f01b03191681556001908101805463ffffffff1916905597505b50505050509250925092565b60cb54611653906001600160a01b03163383613ddd565b60006122758484611991565b905060001981146122dd57818110156122d05760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610c12565b6122dd8484848403611be5565b50505050565b6001600160a01b0383166123475760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610c12565b6001600160a01b0382166123a95760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610c12565b6123b4838383613e0d565b6001600160a01b0383166000908152606560205260409020548181101561242c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c12565b6001600160a01b038085166000908152606560205260408082208585039055918516815290812080548492906124639084906151e1565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516124af91815260200190565b60405180910390a36122dd565b600080600260975414156124e25760405162461bcd60e51b8152600401610c1290615155565b600260975560d15433600090815260d860205260409020544291612505916151e1565b11156125465760405162461bcd60e51b815260206004820152601060248201526f119d5b991cc8185c99481b1bd8dad95960821b6044820152606401610c12565b60006125526001611d09565b5050905084156125865760675484935061256b82613aa5565b6125759085615262565b61257f919061521f565b9550612622565b6000861161259357600080fd5b61259c81613aa5565b60016125a760675490565b6125b19089615262565b6125bb91906152a9565b6125c5919061521f565b6125d09060016151e1565b9250838311156126225760405162461bcd60e51b815260206004820152601a60248201527f546f6f206d756368204c5020746f6b656e7320746f206275726e0000000000006044820152606401610c12565b336000908152606560205260409020548311156126815760405162461bcd60e51b815260206004820181905260248201527f4e6f7420656e6f756768204c5020746f6b656e7320666f72206163636f756e746044820152606401610c12565b60c954600160981b900460ff16806126a857508560d35460d5546126a591906152a9565b10155b6126f45760405162461bcd60e51b815260206004820152601760248201527f436f6c6c61746572616c20726174696f2062726f6b656e0000000000000000006044820152606401610c12565b8560d55461270291906152a9565b60d55560ce546040805163495ef70560e01b81529051600092612710926001600160a01b039091169163495ef70591600480820192602092909190829003018186803b15801561275157600080fd5b505afa158015612765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127899190614eed565b6127979061ffff1689615262565b6127a1919061521f565b90506127ad81886152a9565b604080518981526020810187905290810183905290935033907f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca949060600160405180910390a26127fd3385613f45565b6128068161409f565b61280f83612252565b505060016097559094909350915050565b600080600080600260975414156128495760405162461bcd60e51b8152600401610c1290615155565b600260975533600090815260db602052604090205460ff1661286a57600080fd5b60008660ff161161287a57600080fd5b60c95460ff600160a81b9091048116908716111561289757600080fd5b6000896001600160a81b0316116128ad57600080fd5b60008863ffffffff161180156128d6575060c95463ffffffff600160b01b909104811690891611155b6128df57600080fd5b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915261293a6000611d09565b6080840152602083015263ffffffff90811660e08301819052908a1610156129935760405162461bcd60e51b815260206004820152600c60248201526b086ac9240e8dede40d0d2ced60a31b6044820152606401610c12565b60c954608082015142916129b591600160701b90910463ffffffff16906151e1565b10156129fd5760405162461bcd60e51b81526020600482015260176024820152764c61746573742063766920746f6f206c6f6e672061676f60481b6044820152606401610c12565b60ce54604080516307e3dd0f60e41b815281516001600160a01b0390931692637e3dd0f092600480840193919291829003018186803b158015612a3f57600080fd5b505afa158015612a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a779190614f09565b61ffff9081166101208401521661010082015285612a96576000612ac5565b6101008101516127109061ffff16612ab160ff8a168d615233565b612abb9190615233565b612ac591906151f9565b60d554825292508515612c835760e081015160c95463ffffffff91821691600160b01b9091041660ff8916612b066001600160a81b03808816908f166152a9565b612b109190615262565b612b1a9190615262565b612b24919061521f565b6040820152600060ff8816612b39858d615281565b612b439190615233565b8251612b58916001600160a81b0316906151e1565b60ce54835160d35460408601519394506001600160a01b0390921692631437d6d4928f928d929091908790612b8d90836151e1565b6040516001600160e01b031960e089901b1681526001600160a81b03909616600487015260ff909416602486015260448501929092526064840152608483015260a482015260c401604080518083038186803b158015612bec57600080fd5b505afa158015612c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c249190614df3565b61ffff1660c084018190529093506001600160a81b038a161015612c815760405162461bcd60e51b81526020600482015260146024820152730a0e4cadad2eada40cccaca40e8dede40d0d2ced60631b6044820152606401610c12565b505b60ff871682612c92858d615281565b612c9c9190615281565b612ca69190615233565b33600090815260d9602052604090208054919550906001600160a81b031615612d8057805460ff898116600160a81b9092041614612ce357600080fd5b6000612d038284602001518560e00151896001600160a81b03168d6140d5565b805160208201516001600160a81b0390811660a087015260608301516040840151929a509293508616612d3960ff8d1684615262565b8651612d4f906001600160a81b038c16906151e1565b612d5991906151e1565b612d6391906151e1565b612d6d91906152a9565b612d7791906152a9565b60d55550612eeb565b60e082015160c95463ffffffff91821691612dac91600160b01b9004166001600160a81b038816615262565b612db6919061521f565b6060830181905295506001600160a81b0386168614612dd457600080fd5b6001600160a81b0380871660a080850182905260408051918201815282825260ff808d16602080850191825260e089015163ffffffff908116868601908152428216606088018181526080890191825233600090815260d990955296909320875181549551925197518416600160d01b0263ffffffff60d01b19988516600160b01b029890981667ffffffffffffffff60b01b1993909716600160a81b026001600160b01b03199096169a169990991793909317929092169290921792909217855551600190940180549490911663ffffffff199094169390931790925560d354612ebf91906151e1565b60d35582516001600160a81b0380861691612edc918916906151e1565b612ee691906151e1565b60d555505b337fe485c81af56f49547b2ea1b6886083d8e3a7ef50fe670c9574bd5d4b2dd7d4628c8a612f1987896151b6565b60e0870151604080516001600160a81b03958616815260ff94909416602085015291841683830152928b16606083015263ffffffff909216608082015290519081900360a00190a2612f738b6001600160a81b03166142de565b6001600160a81b03841615612f9457612f94846001600160a81b031661409f565b60d55460d3541115612fdf5760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f756768206c697175696469747960601b6044820152606401610c12565b60d0546001600160a01b031615801590613005575060a08201516001600160a81b031615155b156130865760d05460a0830151604051630bf1944760e21b81523360048201526001600160a81b03909116602482015260ff8a1660448201526001600160a01b0390911690632fc6511c90606401600060405180830381600087803b15801561306d57600080fd5b505af1158015613081573d6000803e3d6000fd5b505050505b5050600160978190555095509550955095915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8015806131775750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561313d57600080fd5b505afa158015613151573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131759190614f3e565b155b6131e25760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610c12565b6040516001600160a01b03831660248201526044810182905261324590849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526142f6565b505050565b60008054610100900460ff1615613291578160ff16600114801561326d5750303b155b6132895760405162461bcd60e51b8152600401610c1290615087565b506000919050565b60005460ff8084169116106132b85760405162461bcd60e51b8152600401610c1290615087565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166132fe5760405162461bcd60e51b8152600401610c129061510a565b6113ea6143c8565b600054610100900460ff1661332d5760405162461bcd60e51b8152600401610c129061510a565b6113ea6143f6565b600054610100900460ff1661335c5760405162461bcd60e51b8152600401610c129061510a565b6133668282614426565b5050565b6002609754141561338d5760405162461bcd60e51b8152600401610c1290615155565b600260975533600090815260dc602052604090205460ff166133ae57600080fd5b8060d5546133bc91906151e1565b60d5556133c8816142de565b506001609755565b6001600160a01b03808316600090815260d960209081526040808320815160a08101835281546001600160a81b038116825260ff600160a81b8204169482019490945263ffffffff600160b01b8504811682850152600160d01b9094048416606080830191909152600190920154909316608084015260cc54825163c1639a2b60e01b815292519495869586958695909486949093169263c1639a2b92600480840193829003018186803b15801561348757600080fd5b505afa15801561349b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134bf9190614fc0565b5050606083015163ffffffff908116600090815260d760205260408082205460c954600160501b900490931682529020548451929350613507926001600160a81b0316611bbe565b9350861561353357613530826060015163ffffffff1683600001516001600160a81b0316611acf565b93505b61355582600001516001600160a81b0316836020015183856040015188614474565b919a9099509497509550929350505050565b60008060006002609754141561358f5760405162461bcd60e51b8152600401610c1290615155565b600260975533600090815260db602052604090205460ff166135b057600080fd5b6000866001600160a81b0316116135c657600080fd5b60008563ffffffff161180156135ef575060c95463ffffffff600160b01b909104811690861611155b6135f857600080fd5b33600090815260d96020526040902080546001600160a81b038089169116101561362157600080fd5b60d254815461363d90600160d01b900463ffffffff16426152a9565b101580613659575033600090815260da602052604090205460ff165b6136975760405162461bcd60e51b815260206004820152600f60248201526e141bdcda5d1a5bdb881b1bd8dad959608a1b6044820152606401610c12565b60008060008060006136a96001611d09565b50909250905063ffffffff808c1690831610156136f65760405162461bcd60e51b815260206004820152600b60248201526a43564920746f6f206c6f7760a81b6044820152606401610c12565b600061370d878e6001600160a81b03168486614551565b92985090965094509050801561373457600080600099509950995050505050505050613a94565b50506137408b84613d99565b60d45560d35560008980156137d3575060ce5460408051633b75d72160e11b815290516000926001600160a01b0316916376ebae42916004808301926020929190829003018186803b15801561379557600080fd5b505afa1580156137a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137cd9190614eed565b61ffff16115b156138655760ce60009054906101000a90046001600160a01b03166001600160a01b03166350e0942b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561382657600080fd5b505afa15801561383a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061385e9190614eed565b61ffff1690505b855461387b908d906001600160a81b0316615281565b86546001600160a81b0319166001600160a81b0391909116178655896138a2576000613961565b60ce54865433600090815260da6020526040908190205490516315435d0560e31b8152600160d01b90920463ffffffff16600483015260ff1615156024820152612710916001600160a01b03169063aa1ae8289060440160206040518083038186803b15801561391157600080fd5b505afa158015613925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139499190614eed565b6139579061ffff1687615262565b613961919061521f565b97506127106139708287615262565b61397a919061521f565b9650337f3989dab79971090c83b28eb2d423aa507b7d4c16f5cf10a4fdb05835cafba36a6139a886886151e1565b866139b38b8d6151e1565b6139bd91906151e1565b89546040805193845260208401929092526001600160a81b0381168383015260ff600160a81b90910416606083015263ffffffff86166080830152519081900360a00190a285546001600160a81b0316613a3d5733600090815260d96020526040902080546001600160f01b0319168155600101805463ffffffff191690555b86838660d554613a4d91906152a9565b613a5791906152a9565b613a6191906151e1565b60d55586613a6f89876152a9565b613a7991906152a9565b9850613a848861409f565b613a8d89612252565b5050505050505b600160978190555093509350939050565b60c95460d35460009163ffffffff600160b01b909104811691613aca91851690615262565b613ad4919061521f565b60d45460d554613ae491906151e1565b613aee91906152a9565b92915050565b600060026097541415613b195760405162461bcd60e51b8152600401610c1290615155565b600260975582613b2857600080fd5b33600090815260d86020526040812042905580613b456001611d09565b60c95492945092504291613b679150600160701b900463ffffffff16836151e1565b1015613baf5760405162461bcd60e51b81526020600482015260176024820152764c61746573742063766920746f6f206c6f6e672061676f60481b6044820152606401610c12565b60006127106001600160a81b031660ce60009054906101000a90046001600160a01b03166001600160a01b031663cc1252ae6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c0b57600080fd5b505afa158015613c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c439190614eed565b613c519061ffff1688615262565b613c5b919061521f565b90506000613c6982886152a9565b90506000613c7660675490565b90506000613c8386613aa5565b9050600082118015613c955750600081115b15613cb65780613ca58385615262565b613caf919061521f565b9650613cc6565b60ca54613cc39084615262565b96505b604080518a81526020810189905290810185905233907f36af321ec8d3c75236829c5317affd40ddb308863a1236d2d277a4025cccee1e9060600160405180910390a287871015613d4d5760405162461bcd60e51b8152602060048201526011602482015270546f6f20666577204c5020746f6b656e7360781b6044820152606401610c12565b60008711613d5a57600080fd5b8260d554613d6891906151e1565b60d555613d7533886145ed565b613d7e896142de565b613d878461409f565b50506001609755509295945050505050565b600080836001600160a81b031660d354613db391906152a9565b915060d4548311613dd1578260d454613dcc91906152a9565b613dd4565b60005b90509250929050565b6040516001600160a01b03831660248201526044810182905261324590849063a9059cbb60e01b9060640161320e565b60d6546001600160a01b0384811691161415613e4157506001600160a01b0316600090815260d86020526040902042905550565b60d1546001600160a01b038416600090815260d860205260409020544291613e68916151e1565b118015613e9557506001600160a01b03808316600090815260d86020526040808220549286168252902054115b8015613eaf575060d6546001600160a01b03838116911614155b15613245576001600160a01b038216600090815260dd602052604090205460ff1615613f1d5760405162461bcd60e51b815260206004820152601f60248201527f526563697069656e742072656675736573206c6f636b656420746f6b656e73006044820152606401610c12565b6001600160a01b03808416600090815260d86020526040808220549285168252902055505050565b6001600160a01b038216613fa55760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610c12565b613fb182600083613e0d565b6001600160a01b038216600090815260656020526040902054818110156140255760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610c12565b6001600160a01b03831660009081526065602052604081208383039055606780548492906140549084906152a9565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6000811180156140b9575060cf546001600160a01b031615155b156116535760cb546116539082906001600160a01b03166146d8565b6040805160808082018352600080835260208084018290528385018290526060808501839052855160a081018752958601839052850182905291840181905288546001600160a81b0316918401829052600189015463ffffffff16845291929190819081908190614149908c908c8c614551565b9350935093509350801561418357600060208601819052855160018d01805463ffffffff191663ffffffff90921691909117905593508391505b60c95463ffffffff808b1691600160b01b900416896141a560ff8b1688615262565b6141af91906151e1565b6141b99190615262565b6141c3919061521f565b604086018181526001600160a81b039091168088529051146141e457600080fd5b8a5486516001600160a81b0316600168ffffffffffffffff0160a81b0319909116600160d01b4263ffffffff90811691909102600164ffffffff0160a81b0319169190911791909117600160b01b918b16919091021760ff60a81b1916600160a81b60ff891602178b55602085015161425d9084613d99565b608087018190526060870182905260d4558651614285916001600160a81b03909116906151e1565b60d3556040860182905260608601849052855160208601516001600160a81b03918216911610156142d057602085015186516142c19190615281565b6001600160a81b031660208701525b505050505095945050505050565b60cb54611653906001600160a01b0316333084614742565b600061434b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661477a9092919063ffffffff16565b80519091501561324557808060200190518101906143699190614bc8565b6132455760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c12565b600054610100900460ff166143ef5760405162461bcd60e51b8152600401610c129061510a565b6001609755565b600054610100900460ff1661441d5760405162461bcd60e51b8152600401610c129061510a565b6113ea3361309c565b600054610100900460ff1661444d5760405162461bcd60e51b8152600401610c129061510a565b815161446090606890602085019061488e565b50805161324590606990602084019061488e565b60c95460009081908190819063ffffffff600160b01b90910481169061449c9089168b615262565b6144a6919061521f565b905060018860ff16116144ba57600061450b565b60c95460ff891690600160b01b900463ffffffff166144da60018b6152c0565b60ff166144ed63ffffffff8a168d615262565b6144f79190615262565b614501919061521f565b61450b919061521f565b9150600061451986846151e1565b90508082106145375761452c81836152a9565b945060019350614544565b61454182826152a9565b94505b5050955095509592505050565b8354600160d01b900463ffffffff16600090815260d76020526040812054819081908190614580908789611bbe565b8854909350600090819081906145b2908b90600160a81b810460ff16908b90600160b01b900463ffffffff168a614474565b925092509250816145d8576145c8336000612050565b50505060019350600095506145df565b8296508094505b505050945094509450949050565b6001600160a01b0382166146435760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610c12565b61464f60008383613e0d565b806067600082825461466191906151e1565b90915550506001600160a01b0382166000908152606560205260408120805483929061468e9084906151e1565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60cf54604051638b0f154d60e01b8152600481018490526001600160a01b03838116602483015290911690638b0f154d90604401600060405180830381600087803b15801561472657600080fd5b505af115801561473a573d6000803e3d6000fd5b505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526122dd9085906323b872dd60e01b9060840161320e565b6060610be08484600085856001600160a01b0385163b6147dc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c12565b600080866001600160a01b031685876040516147f89190615038565b60006040518083038185875af1925050503d8060008114614835576040519150601f19603f3d011682016040523d82523d6000602084013e61483a565b606091505b509150915061484a828286614855565b979650505050505050565b60608315614864575081610feb565b8251156148745782518084602001fd5b8160405162461bcd60e51b8152600401610c129190615054565b82805461489a9061530f565b90600052602060002090601f0160209004810192826148bc5760008555614902565b82601f106148d557805160ff1916838001178555614902565b82800160010185558215614902579182015b828111156149025782518255916020019190600101906148e7565b5061490e929150614912565b5090565b5b8082111561490e5760008155600101614913565b80516132d2816153bc565b600082601f830112614942578081fd5b813567ffffffffffffffff8082111561495d5761495d615391565b604051601f8301601f19908116603f0116810190828211818310171561498557614985615391565b8160405283815286602085880101111561499d578485fd5b8360208701602083013792830160200193909352509392505050565b80516132d2816153ef565b803560ff811681146132d257600080fd5b80516132d281615401565b6000602082840312156149f1578081fd5b8135610feb816153a7565b60008060408385031215614a0e578081fd5b8235614a19816153a7565b91506020830135614a29816153a7565b809150509250929050565b600080600060608486031215614a48578081fd5b8335614a53816153a7565b92506020840135614a63816153a7565b929592945050506040919091013590565b600080600080600060a08688031215614a8b578081fd5b8535614a96816153a7565b94506020860135614aa6816153bc565b93506040860135614ab6816153bc565b92506060860135614ac6816153bc565b91506080860135614ad6816153bc565b809150509295509295909350565b60008060408385031215614af6578182fd5b8235614b01816153a7565b91506020830135614a29816153da565b60008060408385031215614b23578182fd5b8235614b2e816153a7565b946020939093013593505050565b60008060208385031215614b4e578182fd5b823567ffffffffffffffff80821115614b65578384fd5b818501915085601f830112614b78578384fd5b813581811115614b86578485fd5b8660208260051b8501011115614b9a578485fd5b60209290920196919550909350505050565b600060208284031215614bbd578081fd5b8135610feb816153bc565b600060208284031215614bd9578081fd5b8151610feb816153bc565b60008060408385031215614bf6578182fd5b8235614c01816153bc565b91506020830135614a29816153bc565b600080600080600080600080610100898b031215614c2d578586fd5b8835614c38816153a7565b9750602089013567ffffffffffffffff80821115614c54578788fd5b614c608c838d01614932565b985060408b0135915080821115614c75578788fd5b50614c828b828c01614932565b965050606089013594506080890135614c9a816153ef565b935060a0890135614caa816153a7565b925060c0890135614cba816153a7565b915060e0890135614cca816153a7565b809150509295985092959890939650565b600080600080600060a08688031215614cf2578283fd5b8535614cfd816153a7565b94506020860135614d0d816153a7565b93506040860135614d1d816153a7565b92506060860135614d2d816153a7565b91506080860135614ad6816153a7565b60006101608284031215614d4f578081fd5b614d5761518c565b8251815260208301516020820152604083015160408201526060830151606082015260808301516080820152614d8f60a084016149d5565b60a0820152614da060c084016149b9565b60c0820152614db160e08401614927565b60e0820152610100614dc4818501614927565b90820152610120614dd6848201614927565b90820152610140614de8848201614927565b908201529392505050565b60008060408385031215614e05578182fd5b8251614e10816153da565b6020840151909250614a29816153ca565b60008060408385031215614e33578182fd5b8235614e3e816153da565b91506020830135614a29816153ef565b60008060008060808587031215614e63578182fd5b8435614e6e816153da565b93506020850135614e7e816153ef565b92506040850135614e8e816153ca565b9150614e9c606086016149c4565b905092959194509250565b600080600060608486031215614ebb578081fd5b8335614ec6816153da565b92506020840135614ed6816153ef565b9150614ee4604085016149c4565b90509250925092565b600060208284031215614efe578081fd5b8151610feb816153ca565b60008060408385031215614f1b578182fd5b8251614e10816153ca565b600060208284031215614f37578081fd5b5035919050565b600060208284031215614f4f578081fd5b5051919050565b60008060408385031215614f68578182fd5b50508035926020909101359150565b600060208284031215614f88578081fd5b8135610feb816153ef565b60008060408385031215614fa5578182fd5b8251614fb0816153ef565b6020939093015192949293505050565b600080600060608486031215614fd4578081fd5b8351614fdf816153ef565b6020850151909350614ff081615401565b80925050604084015190509250925092565b600060208284031215615013578081fd5b610feb826149c4565b60006020828403121561502d578081fd5b8135610feb81615401565b6000825161504a8184602087016152e3565b9190910192915050565b60208152600082518060208401526150738160408501602087016152e3565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051610160810167ffffffffffffffff811182821017156151b0576151b0615391565b60405290565b60006001600160a81b038281168482168083038211156151d8576151d8615365565b01949350505050565b600082198211156151f4576151f4615365565b500190565b60006001600160a81b03838116806152135761521361537b565b92169190910492915050565b60008261522e5761522e61537b565b500490565b60006001600160a81b038281168482168115158284048211161561525957615259615365565b02949350505050565b600081600019048311821515161561527c5761527c615365565b500290565b60006001600160a81b03838116908316818110156152a1576152a1615365565b039392505050565b6000828210156152bb576152bb615365565b500390565b600060ff821660ff8416808210156152da576152da615365565b90039392505050565b60005b838110156152fe5781810151838201526020016152e6565b838111156122dd5750506000910152565b600181811c9082168061532357607f821691505b6020821081141561534457634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561535e5761535e615365565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461165357600080fd5b801515811461165357600080fd5b61ffff8116811461165357600080fd5b6001600160a81b038116811461165357600080fd5b63ffffffff8116811461165357600080fd5b6001600160501b038116811461165357600080fdfea2646970667358221220d1fe512f6a1999538a7f9201595dabe2e47f6111b694a54a8a3e3fb47f77a37e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 33638,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 33641,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 36495,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 33518,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 33630,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 33851,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33857,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "_allowances",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 33859,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 33861,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "_name",
        "offset": 0,
        "slot": "104",
        "type": "t_string_storage"
      },
      {
        "astId": 33863,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "_symbol",
        "offset": 0,
        "slot": "105",
        "type": "t_string_storage"
      },
      {
        "astId": 34442,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "__gap",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 33787,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 33831,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3334,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "latestOracleRoundId",
        "offset": 0,
        "slot": "201",
        "type": "t_uint80"
      },
      {
        "astId": 3336,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "latestSnapshotTimestamp",
        "offset": 10,
        "slot": "201",
        "type": "t_uint32"
      },
      {
        "astId": 3338,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "maxTimeAllowedAfterLatestRound",
        "offset": 14,
        "slot": "201",
        "type": "t_uint32"
      },
      {
        "astId": 3340,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "canPurgeLatestSnapshot",
        "offset": 18,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 3342,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "emergencyWithdrawAllowed",
        "offset": 19,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 3344,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "purgeSnapshots",
        "offset": 20,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 3346,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "maxAllowedLeverage",
        "offset": 21,
        "slot": "201",
        "type": "t_uint8"
      },
      {
        "astId": 3349,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "maxCVIValue",
        "offset": 22,
        "slot": "201",
        "type": "t_uint32"
      },
      {
        "astId": 3358,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "initialTokenToLPTokenRate",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 3361,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "token",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IERC20Upgradeable)34521"
      },
      {
        "astId": 3365,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "cviOracle",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(ICVIOracle)16496"
      },
      {
        "astId": 3368,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "liquidation",
        "offset": 0,
        "slot": "205",
        "type": "t_contract(ILiquidation)17187"
      },
      {
        "astId": 3372,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "feesCalculator",
        "offset": 0,
        "slot": "206",
        "type": "t_contract(IFeesCalculator)16960"
      },
      {
        "astId": 3375,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "feesCollector",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(IFeesCollector)16972"
      },
      {
        "astId": 3378,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "rewards",
        "offset": 0,
        "slot": "208",
        "type": "t_contract(IRewardsCollector)18019"
      },
      {
        "astId": 3380,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "lpsLockupPeriod",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 3383,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "buyersLockupPeriod",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 3386,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "totalPositionUnitsAmount",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 3389,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "totalFundingFeesAmount",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 3392,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "totalLeveragedTokensAmount",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 3394,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "stakingContractAddress",
        "offset": 0,
        "slot": "214",
        "type": "t_address"
      },
      {
        "astId": 3398,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "cviSnapshots",
        "offset": 0,
        "slot": "215",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3402,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "lastDepositTimestamp",
        "offset": 0,
        "slot": "216",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3408,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "positions",
        "offset": 0,
        "slot": "217",
        "type": "t_mapping(t_address,t_struct(Position)17205_storage)"
      },
      {
        "astId": 3412,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "noLockPositionAddresses",
        "offset": 0,
        "slot": "218",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3416,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "positionHoldersAllowedAddresses",
        "offset": 0,
        "slot": "219",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3420,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "increaseSharedPoolAllowedAddresses",
        "offset": 0,
        "slot": "220",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3424,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "revertLockedTransfered",
        "offset": 0,
        "slot": "221",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3428,
        "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
        "label": "liquidityProviders",
        "offset": 0,
        "slot": "222",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICVIOracle)16496": {
        "encoding": "inplace",
        "label": "contract ICVIOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)34521": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IFeesCalculator)16960": {
        "encoding": "inplace",
        "label": "contract IFeesCalculator",
        "numberOfBytes": "20"
      },
      "t_contract(IFeesCollector)16972": {
        "encoding": "inplace",
        "label": "contract IFeesCollector",
        "numberOfBytes": "20"
      },
      "t_contract(ILiquidation)17187": {
        "encoding": "inplace",
        "label": "contract ILiquidation",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardsCollector)18019": {
        "encoding": "inplace",
        "label": "contract IRewardsCollector",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Position)17205_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPlatform.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)17205_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Position)17205_storage": {
        "encoding": "inplace",
        "label": "struct IPlatform.Position",
        "members": [
          {
            "astId": 17196,
            "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
            "label": "positionUnitsAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint168"
          },
          {
            "astId": 17198,
            "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
            "label": "leverage",
            "offset": 21,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 17200,
            "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
            "label": "openCVIValue",
            "offset": 22,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 17202,
            "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
            "label": "creationTimestamp",
            "offset": 26,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 17204,
            "contract": "contracts/platform/PlatformContracts.sol:CVIUSDCPlatform",
            "label": "originalCreationTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint168": {
        "encoding": "inplace",
        "label": "uint168",
        "numberOfBytes": "21"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}