{
  "address": "0x9Bf7ECA730b5aDeEc8E91A804e2209B4b27F4237",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVolatilityToken",
          "name": "_volToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isKeepers",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_volTokensAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeWindow",
          "type": "uint256"
        }
      ],
      "name": "calculatePreBurn",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "netBurnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expectedUSDCAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeWindowFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keepersFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPlatformHelper.PreBurnResult",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVolatilityToken",
          "name": "_volToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isKeepers",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_usdcAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeWindow",
          "type": "uint256"
        }
      ],
      "name": "calculatePreMint",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "netMintAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expectedVolTokensAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyingPremiumFeePercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPositionFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyingPremiumFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeWindowFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keepersFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPlatformHelper.PreMintResult",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateStakingAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "apr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVolatilityToken",
          "name": "_volToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isKeepers",
          "type": "bool"
        }
      ],
      "name": "checkBurnRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "netBurnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expectedUSDCAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timePenaltyFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keepersFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPlatformHelper.CheckBurnResult",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVolatilityToken",
          "name": "_volToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isKeepers",
          "type": "bool"
        }
      ],
      "name": "checkMintRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "netMintAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expectedVolTokensAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyingPremiumFeePercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPositionFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyingPremiumFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timePenaltyFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "keepersFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "insufficientLiquidity",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "insufficientSlippage",
              "type": "bool"
            }
          ],
          "internalType": "struct IPlatformHelper.CheckMintResult",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPlatform",
          "name": "_platform",
          "type": "address"
        }
      ],
      "name": "collateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_goviAmount",
          "type": "uint256"
        }
      ],
      "name": "convertGOVIToXGOVI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xGOVIAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_xGOVIAmount",
          "type": "uint256"
        }
      ],
      "name": "convertXGOVIToGOVI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "goviAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPlatform",
          "name": "_platform",
          "type": "address"
        }
      ],
      "name": "dailyFundingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fundingFeePercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPlatform",
          "name": "_platform",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_minCVI",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_maxCVI",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxCollateral",
          "type": "uint256"
        }
      ],
      "name": "fundingFeeValues",
      "outputs": [
        {
          "internalType": "uint256[][]",
          "name": "fundingFeeRatePercent",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_govi",
          "type": "address"
        },
        {
          "internalType": "contract IStaking",
          "name": "_staking",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVolatilityToken",
          "name": "_volToken",
          "type": "address"
        }
      ],
      "name": "maxMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IThetaVault",
          "name": "_thetaVault",
          "type": "address"
        }
      ],
      "name": "maxWithdrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxUSDCAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPlatform",
          "name": "_platform",
          "type": "address"
        }
      ],
      "name": "premiumFeeCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "stakedGOVI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IThetaVault",
          "name": "_thetaVault",
          "type": "address"
        }
      ],
      "name": "volTokenDexPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVolatilityToken",
          "name": "_volToken",
          "type": "address"
        }
      ],
      "name": "volTokenIntrinsicPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IThetaVault",
          "name": "_thetaVault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "willWithdrawSucceed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa33180c6a308f5661d90fdf6d2f784ff1ad72dd1d359d0c3569f292a9a14b64e",
  "receipt": {
    "to": null,
    "from": "0x0b3D7b3F149214f8f5281b5aE613B090fD39BD3F",
    "contractAddress": "0x9Bf7ECA730b5aDeEc8E91A804e2209B4b27F4237",
    "transactionIndex": 1,
    "gasUsed": "41381345",
    "logsBloom": "0x
    "blockHash": "0x1e01b30962104b17e9a34ddc2fe9be9522dc55ee74e798cfcdb4ad32470d17cf",
    "transactionHash": "0xa33180c6a308f5661d90fdf6d2f784ff1ad72dd1d359d0c3569f292a9a14b64e",
    "logs": [],
    "blockNumber": 63142694,
    "cumulativeGasUsed": "41381345",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "c2ba4d0c07e4b54c5ad062b2b2a03c0c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IVolatilityToken\",\"name\":\"_volToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isKeepers\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_volTokensAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeWindow\",\"type\":\"uint256\"}],\"name\":\"calculatePreBurn\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"netBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedUSDCAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeWindowFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keepersFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlatformHelper.PreBurnResult\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVolatilityToken\",\"name\":\"_volToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isKeepers\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_usdcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeWindow\",\"type\":\"uint256\"}],\"name\":\"calculatePreMint\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"netMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVolTokensAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyingPremiumFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPositionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyingPremiumFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeWindowFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keepersFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlatformHelper.PreMintResult\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateStakingAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVolatilityToken\",\"name\":\"_volToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isKeepers\",\"type\":\"bool\"}],\"name\":\"checkBurnRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"netBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedUSDCAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timePenaltyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keepersFee\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlatformHelper.CheckBurnResult\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVolatilityToken\",\"name\":\"_volToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isKeepers\",\"type\":\"bool\"}],\"name\":\"checkMintRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"netMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedVolTokensAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyingPremiumFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPositionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyingPremiumFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timePenaltyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keepersFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"insufficientLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"insufficientSlippage\",\"type\":\"bool\"}],\"internalType\":\"struct IPlatformHelper.CheckMintResult\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPlatform\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"collateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goviAmount\",\"type\":\"uint256\"}],\"name\":\"convertGOVIToXGOVI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xGOVIAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_xGOVIAmount\",\"type\":\"uint256\"}],\"name\":\"convertXGOVIToGOVI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"goviAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPlatform\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"dailyFundingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fundingFeePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPlatform\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_minCVI\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_maxCVI\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCollateral\",\"type\":\"uint256\"}],\"name\":\"fundingFeeValues\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"fundingFeeRatePercent\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_govi\",\"type\":\"address\"},{\"internalType\":\"contract IStaking\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVolatilityToken\",\"name\":\"_volToken\",\"type\":\"address\"}],\"name\":\"maxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IThetaVault\",\"name\":\"_thetaVault\",\"type\":\"address\"}],\"name\":\"maxWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUSDCAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPlatform\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"premiumFeeCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"stakedGOVI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IThetaVault\",\"name\":\"_thetaVault\",\"type\":\"address\"}],\"name\":\"volTokenDexPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVolatilityToken\",\"name\":\"_volToken\",\"type\":\"address\"}],\"name\":\"volTokenIntrinsicPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IThetaVault\",\"name\":\"_thetaVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"willWithdrawSucceed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@coti-cvi/contracts-cvi/contracts/PlatformHelper.sol\":\"PlatformHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@coti-cvi/contracts-cvi/contracts/PlatformHelper.sol\":{\"content\":\"\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"./interfaces/IPlatformHelper.sol\\\";\\n\\ncontract PlatformHelper is Initializable, IPlatformHelper {\\n    uint16 private constant MAX_PERCENTAGE = 10000;\\n\\n    IERC20 private govi;\\n    IStaking private staking;\\n\\n\\n    function initialize(IERC20 _govi, IStaking _staking) public initializer {\\n        govi = _govi;\\n        staking = _staking;\\n    }\\n\\n    function dailyFundingFee(IPlatform _platform) external view override returns (uint256 fundingFeePercent) {\\n        (uint32 cviValue,,) = _platform.cviOracle().getCVILatestRoundData();\\n        (, fundingFeePercent) = _platform.feesCalculator().calculateSingleUnitPeriodFundingFee(IFeesCalculator.CVIValue(1 days, cviValue), premiumFeeCollateralRatio(_platform));\\n    }\\n\\n    function fundingFeeValues(IPlatform _platform, uint32 _minCVI, uint32 _maxCVI, uint256 _minCollateral, uint256 _maxCollateral) external view override returns (uint256[][] memory fundingFeeRatePercent) {\\n        fundingFeeRatePercent = new uint256[][](_maxCollateral - _minCollateral + 1);\\n        uint256 currCollateralIndex = 0;\\n        for (uint256 currCollateral = _minCollateral; currCollateral <= _maxCollateral; currCollateral += 1) {\\n            uint256[] memory currValues = new uint256[](_maxCVI - _minCVI + 1);\\n            uint256 currCVIIndex = 0;\\n            for (uint32 currCVI = _minCVI * _platform.feesCalculator().oracleLeverage(); currCVI <= _maxCVI * _platform.feesCalculator().oracleLeverage(); currCVI += _platform.feesCalculator().oracleLeverage()) {\\n                (,uint256 feePercent) = _platform.feesCalculator().calculateSingleUnitPeriodFundingFee(IFeesCalculator.CVIValue(1 days, currCVI * 100), (currCollateral * _platform.PRECISION_DECIMALS()) / 100);\\n                currValues[currCVIIndex] = feePercent;\\n                currCVIIndex += 1;\\n            }\\n            fundingFeeRatePercent[currCollateralIndex] = currValues;\\n            currCollateralIndex += 1;\\n        }\\n    }\\n\\n    function premiumFeeCollateralRatio(IPlatform _platform) public view override returns (uint256) {\\n        if (_platform.totalLeveragedTokensAmount() == 0) {\\n            return MAX_PERCENTAGE;\\n        }\\n\\n        return _platform.feesCalculator().calculateCollateralRatio(_platform.totalLeveragedTokensAmount(), _platform.totalPositionUnitsAmount());\\n    }\\n\\n    function collateralRatio(IPlatform _platform) public view override returns (uint256) {\\n        if (_platform.totalLeveragedTokensAmount() == 0) {\\n            return MAX_PERCENTAGE;\\n        }\\n\\n        return _platform.totalPositionUnitsAmount() * _platform.PRECISION_DECIMALS() / _platform.totalLeveragedTokensAmount();\\n    }\\n\\n    function volTokenIntrinsicPrice(IVolatilityToken _volToken) public view override returns (uint256) {\\n        require(IERC20(address(_volToken)).totalSupply() > 0, \\\"No supply\\\");\\n\\n        uint256 volTokenBalance = calculateVolTokenPositionBalance(_volToken);\\n\\n        return volTokenBalance * 10 ** ERC20(address(_volToken)).decimals() / IERC20(address(_volToken)).totalSupply();\\n    }\\n\\n    function volTokenDexPrice(IThetaVault _thetaVault) external view override returns (uint256) {\\n        (uint256 volTokenAmount, uint256 usdcAmount) = _thetaVault.getReserves();\\n        require(volTokenAmount > 0 && usdcAmount > 0, \\\"No liquidity\\\");\\n        return usdcAmount * 10 ** ERC20(address(_thetaVault.volToken())).decimals() / volTokenAmount;\\n    }\\n\\n    function maxWithdrawAmount(IThetaVault _thetaVault) external view override returns (uint256 maxAmount, uint256 maxUSDCAmount) {\\n        (uint256 totalBalance,,,,,) =_thetaVault.totalBalance();\\n        uint256 totalSupply = IERC20(address(_thetaVault)).totalSupply();\\n        uint256 totalLeveragedTokensAmount = _thetaVault.volToken().platform().totalLeveragedTokensAmount();\\n        uint256 maxPlatformWithdraw = totalLeveragedTokensAmount - _thetaVault.volToken().platform().totalPositionUnitsAmount();\\n        maxAmount = maxPlatformWithdraw * totalSupply / totalLeveragedTokensAmount;\\n        maxUSDCAmount = maxAmount * totalBalance / totalSupply;\\n    }\\n\\n    function _simulateMint(uint256 _totalUnits, uint256 _totalTokens, uint256 _units, uint256 _amount) internal pure returns (uint256 newTotalUnits, uint256 newTotalTokens) {\\n        newTotalUnits = _totalUnits + _units;\\n        newTotalTokens = _totalTokens + _amount;\\n    }\\n\\n    function _simulateBurn(uint256 _totalUnits, uint256 _totalTokens, uint256 _units, uint256 _amount) internal pure returns (uint256 newTotalUnits, uint256 newTotalTokens) {\\n        newTotalUnits = _totalUnits - _units;\\n        newTotalTokens = _totalTokens - _amount;\\n    }\\n\\n    function _simulatePlatformDeposit(uint256 _totalUnits, uint256 _totalTokens, uint256 _amount) internal pure returns (uint256 newTotalUnits, uint256 newTotalTokens) {\\n        newTotalUnits = _totalUnits;\\n        newTotalTokens = _totalTokens + _amount;\\n    }\\n\\n    function _simulatePlatformWithdraw(uint256 _totalUnits, uint256 _totalTokens, uint256 _amount) internal pure returns (uint256 newTotalUnits, uint256 newTotalTokens) {\\n        newTotalUnits = _totalUnits;\\n        newTotalTokens = _totalTokens - _amount;\\n    }\\n\\n    function _simulateThetaDeposit(IThetaVault _thetaVault, uint256 _totalUnits, uint256 _totalTokens, uint256 _amount) internal view returns (uint256 newTotalUnits, uint256 newTotalTokens) {\\n        uint256 liquidityAmount = _getLiquidityAmount(_thetaVault, _amount);\\n        (uint256 units, uint256 tokens) = _getPositionAmount(_thetaVault, _amount);\\n\\n        (newTotalUnits, newTotalTokens) = _simulatePlatformDeposit(_totalUnits, _totalTokens, liquidityAmount);\\n        (newTotalUnits, newTotalTokens) = _simulateMint(newTotalUnits, newTotalTokens, units, tokens);\\n    }\\n\\n    function _simulateThetaWithdraw(IThetaVault _thetaVault, uint256 _totalUnits, uint256 _totalTokens, uint256 _amount) internal view returns (uint256 newTotalUnits, uint256 newTotalTokens) {\\n        uint256 liquidityAmount = _getLiquidityAmount(_thetaVault, _amount);\\n        (uint256 units, uint256 tokens) = _getPositionAmount(_thetaVault, _amount);\\n\\n        (newTotalUnits, newTotalTokens) = _simulateBurn(_totalUnits, _totalTokens, units, tokens);\\n        (newTotalUnits, newTotalTokens) = _simulatePlatformWithdraw(newTotalUnits, newTotalTokens, liquidityAmount);\\n    }\\n\\n    function _getLiquidityAmount(IThetaVault _thetaVault, uint256 _thetaAmount) internal view returns (uint256 liquidityAmount) {\\n        IPlatform platform = _thetaVault.volToken().platform();\\n        uint256 totalSupply = IERC20(address(_thetaVault)).totalSupply();\\n        uint256 thetaLPBalance = IERC20(address(platform)).balanceOf(address(_thetaVault));\\n        uint256 platformLPTokens = _thetaAmount * thetaLPBalance / totalSupply;\\n        uint256 totalPlatformBalance = platform.totalBalance(true);\\n        uint256 totalPlatformSupply = IERC20(address(platform)).totalSupply();\\n        return platformLPTokens * totalPlatformBalance / totalPlatformSupply;\\n    }\\n\\n    function _getPositionAmount(IThetaVault _thetaVault, uint256 _thetaAmount) internal view returns (uint256 units, uint256 tokens) { \\n        IVolatilityToken volToken = _thetaVault.volToken();\\n        IPlatform platform = volToken.platform();\\n        uint256 totalSupply = IERC20(address(_thetaVault)).totalSupply();\\n        uint256 totalVolTokenSupply = IERC20(address(volToken)).totalSupply();\\n        (uint256 volTokenAmount, ) = _thetaVault.getReserves();\\n        uint256 volTokensToBurn = _thetaAmount * volTokenAmount  / totalSupply;\\n        uint volTokenPositionBalance = calculateVolTokenPositionBalance(volToken);\\n        (uint256 totalVolTokenPosUnits,,,,) = platform.positions(address(volToken));\\n        units = volTokensToBurn * totalVolTokenPosUnits / totalVolTokenSupply;\\n        tokens = volTokenPositionBalance * volTokensToBurn / totalVolTokenSupply;\\n    }\\n\\n    function _simulateRebalance(IThetaVault _thetaVault, uint256 _totalUnits, uint256 _totalTokens) internal view returns (uint256 newTotalUnits, uint256 newTotalTokens) {\\n        uint256 adjustedPositionUnits = _totalUnits * (MAX_PERCENTAGE + _thetaVault.extraLiqidityPercentage()) / MAX_PERCENTAGE;\\n        if (_totalTokens > adjustedPositionUnits) {\\n            uint256 extraLiquidityAmount = _totalTokens - adjustedPositionUnits;\\n\\n            (newTotalUnits, newTotalTokens) = _simulatePlatformWithdraw(_totalUnits, _totalTokens, extraLiquidityAmount);\\n            (newTotalUnits, newTotalTokens) = _simulateThetaDeposit(_thetaVault, newTotalUnits, newTotalTokens, extraLiquidityAmount);\\n        } else {\\n            uint256 liquidityMissing = adjustedPositionUnits - _totalTokens;\\n            (uint256 balance,, uint256 intrinsicDEXVolTokenBalance,, uint256 dexUSDCAmount,) = _thetaVault.totalBalance();\\n\\n            if (intrinsicDEXVolTokenBalance + dexUSDCAmount > liquidityMissing && \\n                (intrinsicDEXVolTokenBalance + dexUSDCAmount - liquidityMissing) * MAX_PERCENTAGE / balance >= _thetaVault.minDexPercentageAllowed()) {\\n\\n                (uint256 units, uint256 tokens) = _getPositionAmount(_thetaVault, liquidityMissing);\\n                (newTotalUnits, newTotalTokens) = _simulateBurn(_totalUnits, _totalTokens, units, tokens);\\n                (newTotalUnits, newTotalTokens) =  _simulatePlatformDeposit(newTotalUnits, newTotalTokens, liquidityMissing);\\n            }\\n        }\\n    }\\n\\n    function willWithdrawSucceed(IThetaVault _thetaVault, uint256 _withdrawAmount) external view override returns (bool success) {\\n        IPlatform platform = _thetaVault.volToken().platform();\\n\\n        uint256 totalPositionUnitsAmount = platform.totalPositionUnitsAmount();\\n        uint256 totalLeveragedTokensAmount = platform.totalLeveragedTokensAmount();\\n\\n        (totalPositionUnitsAmount, totalLeveragedTokensAmount) = _simulateRebalance(_thetaVault, totalPositionUnitsAmount, totalLeveragedTokensAmount);\\n        (totalPositionUnitsAmount, totalLeveragedTokensAmount) = _simulateThetaWithdraw(_thetaVault, totalPositionUnitsAmount, totalLeveragedTokensAmount, _withdrawAmount);\\n        return totalLeveragedTokensAmount >= totalPositionUnitsAmount;\\n    }\\n\\n    function maxMintAmount(IVolatilityToken _volToken) external view override returns (uint256 maxAmount) {\\n        (uint32 cviValue,,) = _volToken.platform().cviOracle().getCVILatestRoundData();\\n        (uint256 totalPositionUnitsAmount, uint256 totalLeveragedTokensAmount,) = calculateLiquidity(_volToken, 0, 0, 0);\\n        maxAmount = (totalLeveragedTokensAmount - totalPositionUnitsAmount) * cviValue / _volToken.platform().maxCVIValue();\\n    }\\n\\n    function calculateLiquidity(IVolatilityToken _volToken, uint256 _tokenAmount, uint256 _openPositionFee, uint256 _buyingPremiumFee) private view returns (uint256 totalPositionUnitsAmount, uint256 totalLeveragedTokensAmount, bool insufficientLiquidity) {\\n        (uint32 cviValue,,) = _volToken.platform().cviOracle().getCVILatestRoundData();\\n        uint256 positionedTokenAmount = (_tokenAmount - _openPositionFee - _buyingPremiumFee) * _volToken.leverage();\\n        uint256 positionUnitsAmount = uint256(positionedTokenAmount) * _volToken.platform().maxCVIValue() / cviValue;\\n        totalPositionUnitsAmount = _volToken.platform().totalPositionUnitsAmount() + positionUnitsAmount;\\n        totalLeveragedTokensAmount = _volToken.platform().totalLeveragedTokensAmount() + positionedTokenAmount + _buyingPremiumFee;\\n        insufficientLiquidity = totalPositionUnitsAmount > totalLeveragedTokensAmount;\\n    }\\n\\n    function calculateCommonFees(IVolatilityToken _volToken, bool _isKeepers, uint256 _tokenAmount, uint256 _timeWindow) private view returns (uint256 timeWindowFee, uint256 keepersFee) {\\n        timeWindowFee = _tokenAmount * _volToken.requestFeesCalculator().calculateTimeDelayFee(_timeWindow) / MAX_PERCENTAGE;\\n        keepersFee = _isKeepers ? _volToken.requestFeesCalculator().calculateKeepersFee(_tokenAmount) : 0; \\n    }\\n\\n    function calculatePenaltyFee(IVolatilityToken _volToken, bool _isKeepers, IVolatilityToken.Request memory _request, uint256 _tokenAmount) private view returns (uint256 timePenaltyFee) {\\n        timePenaltyFee = 0;\\n        if (!_isKeepers && (block.timestamp > _request.requestTimestamp + _volToken.requestFeesCalculator().minWaitTime() && block.timestamp < _request.targetTimestamp)) {\\n            timePenaltyFee = _tokenAmount * _volToken.requestFeesCalculator().calculateTimePenaltyFee(_request) / MAX_PERCENTAGE;\\n        }\\n    }\\n\\n    function calculateMintFees(IVolatilityToken _volToken, uint256 _tokenAmount) private view returns (uint256 openPositionFee, uint256 buyingPremiumFee, uint buyingPremiumFeePercentage) {\\n        openPositionFee = _tokenAmount * _volToken.platform().feesCalculator().openPositionFeePercent() * _volToken.leverage() / MAX_PERCENTAGE;\\n\\n        (uint32 cviValue,,) = _volToken.platform().cviOracle().getCVILatestRoundData();\\n\\n        uint256 lastLeveragedTokensAmount = _volToken.platform().totalLeveragedTokensAmount();\\n        uint256 lastTotalPositionUnitsAmount =  _volToken.platform().totalPositionUnitsAmount();\\n\\n        uint256 maxPositionUnitsAmount = (_tokenAmount - openPositionFee) * _volToken.leverage() * _volToken.platform().maxCVIValue() / cviValue;\\n        uint256 totalPositionUnitsAmount = _volToken.platform().totalPositionUnitsAmount() + maxPositionUnitsAmount;\\n        uint256 leveragedTokensAmount = _volToken.platform().totalLeveragedTokensAmount() + (_tokenAmount - openPositionFee) * _volToken.leverage();\\n\\n        (buyingPremiumFee, buyingPremiumFeePercentage) = \\n            _volToken.platform().feesCalculator().calculateBuyingPremiumFee(uint168(_tokenAmount), _volToken.leverage(), \\n                lastLeveragedTokensAmount, lastTotalPositionUnitsAmount, leveragedTokensAmount, totalPositionUnitsAmount);\\n    }\\n\\n    function calculateBurnFees(IVolatilityToken _volToken, uint256 _volTokensAmount) private view returns (uint256 burnUSDCAmountBeforeFees, uint256 closeFee) {\\n        burnUSDCAmountBeforeFees = _volTokensAmount * calculateVolTokenPositionBalance(_volToken) / IERC20(address(_volToken)).totalSupply();\\n        closeFee = burnUSDCAmountBeforeFees * (_volToken.platform().feesCalculator().closePositionLPFeePercent() + \\n            _volToken.platform().feesCalculator().calculateClosePositionFeePercent(0, true)) / MAX_PERCENTAGE;\\n    }\\n\\n    function calculatePreMint(IVolatilityToken _volToken, bool _isKeepers, uint256 _usdcAmount, uint256 _timeWindow) external view override returns (PreMintResult memory result) {\\n        (result.timeWindowFee, result.keepersFee) = calculateCommonFees(_volToken, _isKeepers, _usdcAmount, _timeWindow);\\n        result.netMintAmount = _usdcAmount - result.timeWindowFee - result.keepersFee;\\n\\n        (result.openPositionFee, result.buyingPremiumFee, result.buyingPremiumFeePercentage) = calculateMintFees(_volToken, _usdcAmount);\\n        result.netMintAmount = result.netMintAmount - result.openPositionFee - uint168(result.buyingPremiumFee);\\n\\n        uint256 supply = IERC20(address(_volToken)).totalSupply();\\n        uint256 balance = calculateVolTokenPositionBalance(_volToken);\\n        if (supply > 0 && balance > 0) {\\n            result.expectedVolTokensAmount = uint256(result.netMintAmount) * supply / balance;\\n        } else {\\n            result.expectedVolTokensAmount = uint256(result.netMintAmount) * _volToken.initialTokenToLPTokenRate();\\n        }\\n    }\\n\\n    function checkMintRequest(IVolatilityToken _volToken, uint256 _requestId, bool _isKeepers) external view override returns (CheckMintResult memory result) {\\n        IVolatilityToken.Request memory request; \\n        (request.requestType, request.tokenAmount,,,, request.requestTimestamp, request.targetTimestamp, request.useKeepers, request.maxBuyingPremiumFeePercentage) = _volToken.requests(_requestId);\\n        require(request.requestType == 1, 'Invalid request id');\\n\\n        uint256 timeWindowFee;\\n        (timeWindowFee, result.keepersFee) = calculateCommonFees(_volToken, _isKeepers, request.tokenAmount, request.targetTimestamp - request.requestTimestamp);\\n        result.timePenaltyFee = calculatePenaltyFee(_volToken, _isKeepers, request, request.tokenAmount);\\n        result.netMintAmount = request.tokenAmount - timeWindowFee - result.keepersFee - result.timePenaltyFee;\\n\\n        (result.openPositionFee, result.buyingPremiumFee, result.buyingPremiumFeePercentage) = calculateMintFees(_volToken, request.tokenAmount);\\n        result.netMintAmount = result.netMintAmount - uint168(result.openPositionFee) - uint168(result.buyingPremiumFee);\\n\\n        (,, result.insufficientLiquidity) = calculateLiquidity(_volToken, request.tokenAmount, result.openPositionFee, result.buyingPremiumFee);\\n        result.insufficientSlippage = result.buyingPremiumFeePercentage > request.maxBuyingPremiumFeePercentage;\\n\\n        uint256 supply = IERC20(address(_volToken)).totalSupply();\\n        uint256 balance = calculateVolTokenPositionBalance(_volToken);\\n        if (supply > 0 && balance > 0) {\\n            result.expectedVolTokensAmount = uint256(result.netMintAmount) * supply / balance;\\n        } else {\\n            result.expectedVolTokensAmount = uint256(result.netMintAmount) * _volToken.initialTokenToLPTokenRate();\\n        }\\n    }\\n\\n    function calculatePreBurn(IVolatilityToken _volToken, bool _isKeepers, uint256 _volTokensAmount, uint256 _timeWindow) external view override returns (PreBurnResult memory result) {\\n        uint256 burnUSDCAmountBeforeFees;\\n        (burnUSDCAmountBeforeFees, result.closeFee) = calculateBurnFees(_volToken, _volTokensAmount);\\n        result.expectedUSDCAmount = burnUSDCAmountBeforeFees - result.closeFee;\\n\\n        (result.timeWindowFee, result.keepersFee) = calculateCommonFees(_volToken, _isKeepers, result.expectedUSDCAmount, _timeWindow);\\n\\n        result.expectedUSDCAmount = result.expectedUSDCAmount - result.timeWindowFee - result.keepersFee;\\n        result.netBurnAmount = _volTokensAmount * result.expectedUSDCAmount / burnUSDCAmountBeforeFees;\\n    }\\n\\n    function checkBurnRequest(IVolatilityToken _volToken, uint256 _requestId, bool _isKeepers) external view override returns (CheckBurnResult memory result) {\\n        IVolatilityToken.Request memory request; \\n        (request.requestType, request.tokenAmount,,,, request.requestTimestamp, request.targetTimestamp, request.useKeepers,) = _volToken.requests(_requestId);\\n        require(request.requestType == 2, 'Invalid request id');\\n\\n        uint256 tokenAmount = IElasticToken(address(_volToken)).underlyingToValue(request.tokenAmount);\\n\\n        uint256 burnUSDCAmountBeforeFees;\\n        (burnUSDCAmountBeforeFees, result.closeFee) = calculateBurnFees(_volToken, tokenAmount);\\n        result.expectedUSDCAmount = burnUSDCAmountBeforeFees - result.closeFee;\\n\\n        result.timePenaltyFee = calculatePenaltyFee(_volToken, _isKeepers, request, burnUSDCAmountBeforeFees);\\n        uint256 timeWindowFee;\\n        (timeWindowFee, result.keepersFee) = calculateCommonFees(_volToken, _isKeepers, result.expectedUSDCAmount, request.targetTimestamp - request.requestTimestamp);\\n\\n        result.expectedUSDCAmount = result.expectedUSDCAmount - timeWindowFee - result.timePenaltyFee - result.keepersFee;\\n        result.netBurnAmount = tokenAmount * result.expectedUSDCAmount / burnUSDCAmountBeforeFees;\\n    }\\n\\n    function convertGOVIToXGOVI(uint256 _goviAmount) external view override returns (uint256 xGOVIAmount) { \\n        uint256 totalStaked = govi.balanceOf(address(staking));\\n        uint256 addedReward = staking.rewardPerSecond() * (block.timestamp - staking.lastUpdateTime());\\n        uint256 totalSupply = IERC20(address(staking)).totalSupply();\\n        if (totalStaked + addedReward > 0) {\\n            xGOVIAmount = _goviAmount * totalSupply / (totalStaked + addedReward);\\n        }\\n    }\\n\\n    function convertXGOVIToGOVI(uint256 _xGOVIAmount) external view override returns (uint256 goviAmount) { \\n        uint256 totalStaked = govi.balanceOf(address(staking));\\n        uint256 addedReward = staking.rewardPerSecond() * (block.timestamp - staking.lastUpdateTime());\\n        uint256 totalSupply = IERC20(address(staking)).totalSupply();\\n        if (totalSupply > 0) {\\n            goviAmount = (totalStaked + addedReward) * _xGOVIAmount / totalSupply;\\n        }\\n    }\\n\\n    function stakedGOVI(address _account) external view override returns (uint256 stakedAmount, uint256 share) {\\n        stakedAmount = this.convertXGOVIToGOVI(IERC20(address(staking)).balanceOf(_account));\\n        if (stakedAmount > 0) {\\n            share = IERC20(address(staking)).balanceOf(_account) * MAX_PERCENTAGE / IERC20(address(staking)).totalSupply();\\n        }\\n    }\\n\\n    function calculateStakingAPR() external view override returns (uint256 apr) {\\n        uint256 totalStaked = govi.balanceOf(address(staking));\\n        uint256 periodReward = staking.rewardPerSecond() * 1 days * 365;\\n        apr = totalStaked == 0 ?  0 : periodReward * MAX_PERCENTAGE / totalStaked;\\n    }\\n\\n    function calculateVolTokenPositionBalance(IVolatilityToken _volToken) private view returns (uint256 volTokenBalance) {\\n        IPlatform platform = _volToken.platform();\\n\\n        bool isPositive = true;\\n        (uint256 currPositionUnits,,,,) = platform.positions(address(_volToken));\\n        if (currPositionUnits != 0) {\\n            (volTokenBalance, isPositive,,,,) = platform.calculatePositionBalance(address(_volToken));\\n        }\\n        require(isPositive, \\\"Negative balance\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x129d961217c1163bdfb96e8ee0a2b65134c4ddf74fb71c66accd5ee60bdf2caf\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/ICVIOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface ICVIOracle {\\n    function getCVIRoundData(uint80 roundId) external view returns (uint32 cviValue, uint256 cviTimestamp);\\n    function getCVILatestRoundData() external view returns (uint32 cviValue, uint80 cviRoundId, uint256 cviTimestamp);\\n\\n    function setDeviationCheck(bool newDeviationCheck) external;\\n    function setMaxDeviation(uint16 newMaxDeviation) external;\\n}\\n\",\"keccak256\":\"0xf1871b2e9219f7a11e63d8e3276b7a0a46d8d726d54e385a6326dbdb2bcb1bad\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IElasticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8;\\n\\ninterface IElasticToken {\\n\\n    event Rebase(uint256 epoch, uint256 prevScalingFactor, uint256 newScalingFactor);\\n\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    function transfer(address to, uint256 value) external returns(bool);\\n    function transferFrom(address from, address to, uint256 value) external returns(bool);\\n    function balanceOf(address who) external view returns(uint256);\\n    function allowance(address owner, address spender) external view returns(uint256);\\n    function approve(address spender, uint256 value) external returns (bool);\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    function balanceOfUnderlying(address who) external view returns(uint256);\\n    function maxScalingFactor() external view returns (uint256);\\n    function underlyingToValue(uint256 unerlyingValue) external view returns (uint256);\\n    function valueToUnderlying(uint256 value) external view returns (uint256);\\n\\n    function setRebaser(address rebaser) external;\\n}\\n\",\"keccak256\":\"0x2f1aa8bd13bef092a1e06d2208e9d5ddfb2edb7f5a71b1d4d14ff8a234540645\",\"license\":\"MIT\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IFeesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./ICVIOracle.sol\\\";\\nimport \\\"./IThetaVaultInfo.sol\\\";\\n\\ninterface IFeesCalculator {\\n\\n    struct CVIValue {\\n        uint256 period;\\n        uint32 cviValue;\\n    }\\n\\n    struct SnapshotUpdate {\\n        uint256 latestSnapshot;\\n        uint256 singleUnitFundingFee;\\n        uint256 totalTime;\\n        uint256 totalRounds;\\n        uint256 cviValueTimestamp;\\n        uint80 newLatestRoundId;\\n        uint32 cviValue;\\n        bool updatedSnapshot;\\n        bool updatedLatestRoundId;\\n        bool updatedLatestTimestamp;\\n        bool updatedTurbulenceData;\\n    }\\n\\n    function updateTurbulenceIndicatorPercent(uint256 totalTime, uint256 newRounds, uint32 lastCVIValue, uint32 currCVIValue) external;\\n\\n    function setOracle(ICVIOracle cviOracle) external;\\n    function setThetaVault(IThetaVaultInfo thetaVault) external;\\n\\n    function setStateUpdator(address newUpdator) external;\\n\\n    function setFundingFeeMinRate(uint32 newFundingFeeMinRate) external;\\n    function setFundingFeeMaxRate(uint32 newFundingFeeMaxRate) external;\\n    function setMinFundingFeeCviThreshold(uint32 newMinFundingFeeCviThreshold) external;\\n    function setMaxFundingFeeCviThreshold(uint32 newMaxFundingFeeCviThreshold) external;\\n    function setFundingFeeDivisionFactor(uint32 newFundingFeeDivisionFactor) external;\\n    function setFundingFeeCoefficients(uint32[] calldata newFundingFeeCoefficients) external;\\n\\n    function setDepositFee(uint16 newDepositFeePercentage) external;\\n    function setWithdrawFee(uint16 newWithdrawFeePercentage) external;\\n    function setOpenPositionFee(uint16 newOpenPositionFeePercentage) external;\\n    function setOpenPositionLPFee(uint16 newOpenPositionLPFeePercent) external;\\n    function setClosePositionLPFee(uint16 newClosePositionLPFeePercent) external;\\n    function setClosePositionFee(uint16 newClosePositionFeePercentage) external;\\n    function setClosePositionMaxFee(uint16 newClosePositionMaxFeePercentage) external;\\n    function setClosePositionFeeDecay(uint256 newClosePositionFeeDecayPeriod) external;\\n    \\n    function setOracleHeartbeatPeriod(uint256 newOracleHeartbeatPeriod) external;\\n    function setBuyingPremiumFeeMax(uint16 newBuyingPremiumFeeMaxPercentage) external;\\n    function setBuyingPremiumThreshold(uint16 newBuyingPremiumThreshold) external;\\n    function setClosingPremiumFeeMax(uint16 newClosingPremiumFeeMaxPercentage) external;\\n    function setCollateralToBuyingPremiumMapping(uint16[] calldata newCollateralToBuyingPremiumMapping) external;\\n    function setFundingFeeConstantRate(uint16 newfundingFeeConstantRate) external;\\n    function setCollateralToExtraFundingFeeMapping(uint32[] calldata newCollateralToExtraFundingFeeMapping) external;\\n    function setTurbulenceStep(uint16 newTurbulenceStepPercentage) external;\\n    function setMaxTurbulenceFeePercentToTrim(uint16 newMaxTurbulenceFeePercentToTrim) external;\\n    function setTurbulenceDeviationThresholdPercent(uint16 newTurbulenceDeviationThresholdPercent) external;\\n    function setTurbulenceDeviationPercent(uint16 newTurbulenceDeviationPercentage) external;\\n\\n    function calculateTurbulenceIndicatorPercent(uint256 totalTime, uint256 newRounds, uint32 _lastCVIValue, uint32 _currCVIValue) external view returns (uint16);\\n\\n    function calculateBuyingPremiumFee(uint168 tokenAmount, uint8 leverage, uint256 lastTotalLeveragedTokens, uint256 lastTotalPositionUnits, uint256 totalLeveragedTokens, uint256 totalPositionUnits) external view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage);\\n    function calculateBuyingPremiumFeeWithAddendum(uint168 tokenAmount, uint8 leverage, uint256 lastTotalLeveragedTokens, uint256 lastTotalPositionUnits, uint256 totalLeveragedTokens, uint256 totalPositionUnits, uint16 _turbulenceIndicatorPercent) external view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage);\\n\\n    function calculateClosingPremiumFee() external view returns (uint16 combinedPremiumFeePercentage);\\n\\n    function calculateSingleUnitFundingFee(CVIValue[] memory cviValues, uint256 totalLeveragedTokens, uint256 totalPositionUnits) external view returns (uint256 fundingFee);\\n    function calculateSingleUnitPeriodFundingFee(CVIValue memory cviValue, uint256 collateralRatio) external view returns (uint256 fundingFee, uint256 fundingFeeRatePercents);\\n    function updateSnapshots(uint256 latestTimestamp, uint256 blockTimestampSnapshot, uint256 latestTimestampSnapshot, uint80 latestOracleRoundId, uint256 totalLeveragedTokens, uint256 totalPositionUnits) external view returns (SnapshotUpdate memory snapshotUpdate);\\n\\n    function calculateClosePositionFeePercent(uint256 creationTimestamp, bool isNoLockPositionAddress) external view returns (uint16);\\n    function calculateWithdrawFeePercent(uint256 lastDepositTimestamp) external view returns (uint16);\\n\\n    function calculateCollateralRatio(uint256 totalLeveragedTokens, uint256 totalPositionUnits) external view returns (uint256 collateralRatio);\\n\\n    function depositFeePercent() external view returns (uint16);\\n    function withdrawFeePercent() external view returns (uint16);\\n    function openPositionFeePercent() external view returns (uint16);\\n    function closePositionFeePercent() external view returns (uint16);\\n    function openPositionLPFeePercent() external view returns (uint16);\\n    function closePositionLPFeePercent() external view returns (uint16);\\n\\n    function openPositionFees() external view returns (uint16 openPositionFeePercentResult, uint16 buyingPremiumFeeMaxPercentResult);\\n\\n    function turbulenceIndicatorPercent() external view returns (uint16);\\n    function oracleLeverage() external view returns (uint8);\\n\\n    function getCollateralToBuyingPremiumMapping() external view returns(uint16[] memory);\\n    function getCollateralToExtraFundingFeeMapping() external view returns(uint32[] memory);\\n    function getFundingFeeCoefficients() external view returns(uint32[] memory);\\n}\\n\",\"keccak256\":\"0x4a28b87395a2a35ac1152b83f96630ad4fa1b844b5abca4270486c9c08f388ea\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IFeesCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFeesCollector {\\n    function sendProfit(uint256 amount, IERC20 token) external;\\n}\\n\",\"keccak256\":\"0xb16b7c5d985657716ccacf0f1e61de587c06fe4f6591bee6fafc0a3658229b4c\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/ILiquidation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface ILiquidation {\\t\\n\\tfunction setMinLiquidationThresholdPercents(uint16[8] calldata newMinThresholdPercents) external;\\n\\tfunction setMinLiquidationRewardPercent(uint16 newMinRewardPercent) external;\\n\\tfunction setMaxLiquidationRewardPercents(uint16[8] calldata newMaxRewardPercents) external;\\n\\tfunction isLiquidationCandidate(uint256 positionBalance, bool isPositive, uint168 positionUnitsAmount, uint32 openCVIValue, uint8 leverage) external view returns (bool);\\n\\tfunction getLiquidationReward(uint256 positionBalance, bool isPositive, uint168 positionUnitsAmount, uint32 openCVIValue, uint8 leverage) external view returns (uint256 finderFeeAmount);\\n}\\n\",\"keccak256\":\"0x0799656b324ed8d65391313156e1dfe7d99b6dadb08e71cd6a515d19731539bd\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IPlatform.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./ICVIOracle.sol\\\";\\nimport \\\"./IFeesCalculator.sol\\\";\\nimport \\\"./IRewardsCollector.sol\\\";\\nimport \\\"./IFeesCollector.sol\\\";\\nimport \\\"./ILiquidation.sol\\\";\\n\\ninterface IPlatform {\\n\\n    struct Position {\\n        uint168 positionUnitsAmount;\\n        uint8 leverage;\\n        uint32 openCVIValue;\\n        uint32 creationTimestamp;\\n        uint32 originalCreationTimestamp;\\n    }\\n\\n    event Deposit(address indexed account, uint256 tokenAmount, uint256 lpTokensAmount, uint256 feeAmount);\\n    event Withdraw(address indexed account, uint256 tokenAmount, uint256 lpTokensAmount, uint256 feeAmount);\\n    event OpenPosition(address indexed account, uint256 tokenAmount, uint8 leverage, uint256 feeAmount, uint256 positionUnitsAmount, uint256 cviValue);\\n    event ClosePosition(address indexed account, uint256 tokenAmount, uint256 feeAmount, uint256 positionUnitsAmount, uint8 leverage, uint256 cviValue);\\n    event LiquidatePosition(address indexed positionAddress, uint256 currentPositionBalance, bool isBalancePositive, uint256 positionUnitsAmount);\\n\\n    function deposit(uint256 tokenAmount, uint256 minLPTokenAmount) external returns (uint256 lpTokenAmount);\\n    function withdraw(uint256 tokenAmount, uint256 maxLPTokenBurnAmount) external returns (uint256 burntAmount, uint256 withdrawnAmount);\\n    function withdrawLPTokens(uint256 lpTokenAmount) external returns (uint256 burntAmount, uint256 withdrawnAmount);\\n\\n    function increaseSharedPool(uint256 tokenAmount) external;\\n\\n    function openPositionWithoutFee(uint168 tokenAmount, uint32 maxCVI, uint8 leverage) external returns (uint168 positionUnitsAmount, uint168 positionedTokenAmount, uint168 openPositionFee, uint168 buyingPremiumFee);\\n    function openPosition(uint168 tokenAmount, uint32 maxCVI, uint16 maxBuyingPremiumFeePercentage, uint8 leverage) external returns (uint168 positionUnitsAmount, uint168 positionedTokenAmount, uint168 openPositionFee, uint168 buyingPremiumFee);\\n    function closePositionWithoutFee(uint168 positionUnitsAmount, uint32 minCVI) external returns (uint256 tokenAmount, uint256 closePositionFee, uint256 closingPremiumFee);\\n    function closePosition(uint168 positionUnitsAmount, uint32 minCVI) external returns (uint256 tokenAmount, uint256 closePositionFee, uint256 closingPremiumFee);\\n\\n    function liquidatePositions(address[] calldata positionOwners) external returns (uint256 finderFeeAmount);\\n\\n    function setAddressSpecificParameters(address holderAddress, bool shouldLockPosition, bool noPremiumFeeAllowed, bool increaseSharedPoolAllowed, bool isLiquidityProvider) external;\\n\\n    function setRevertLockedTransfers(bool revertLockedTransfers) external;\\n\\n    function setSubContracts(IFeesCollector newCollector, ICVIOracle newOracle, IRewardsCollector newRewards, ILiquidation newLiquidation, address _newStakingContractAddress) external;\\n    function setFeesCalculator(IFeesCalculator newCalculator) external;\\n\\n    function setLatestOracleRoundId(uint80 newOracleRoundId) external;\\n    function setMaxTimeAllowedAfterLatestRound(uint32 newMaxTimeAllowedAfterLatestRound) external;\\n\\n    function setLockupPeriods(uint256 newLPLockupPeriod, uint256 newBuyersLockupPeriod) external;\\n\\n    function setEmergencyParameters(bool newEmergencyWithdrawAllowed, bool newCanPurgeSnapshots) external;\\n\\n    function setMaxAllowedLeverage(uint8 newMaxAllowedLeverage) external;\\n\\n    function calculatePositionBalance(address positionAddress) external view returns (uint256 currentPositionBalance, bool isPositive, uint168 positionUnitsAmount, uint8 leverage, uint256 fundingFees, uint256 marginDebt);\\n    function calculatePositionPendingFees(address positionAddress, uint168 positionUnitsAmount) external view returns (uint256 pendingFees);\\n\\n    function totalBalance(bool _withAddendum) external view returns (uint256 balance);\\n\\n    function calculateLatestTurbulenceIndicatorPercent() external view returns (uint16);\\n\\n    function cviOracle() external view returns (ICVIOracle);\\n    function feesCalculator() external view returns (IFeesCalculator);\\n\\n    function PRECISION_DECIMALS() external view returns (uint256);\\n\\n    function totalPositionUnitsAmount() external view returns (uint256);\\n    function totalLeveragedTokensAmount() external view returns (uint256);\\n    function totalFundingFeesAmount() external view returns (uint256);\\n    function latestFundingFees() external view returns (uint256);\\n\\n    function positions(address positionAddress) external view returns (uint168 positionUnitsAmount, uint8 leverage, uint32 openCVIValue, uint32 creationTimestamp, uint32 originalCreationTimestamp);\\n    function buyersLockupPeriod() external view returns (uint256);\\n    function maxCVIValue() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x11f55f686514975c2dd5adf87856f8df5f85b015621f01e1528addb6b7194686\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IPlatformHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./IPlatform.sol\\\";\\nimport \\\"./IVolatilityToken.sol\\\";\\nimport \\\"./IElasticToken.sol\\\";\\nimport \\\"./IThetaVault.sol\\\";\\n\\ninterface IPlatformHelper {\\n\\n    struct PreMintResult {\\n        uint256 netMintAmount;\\n        uint256 expectedVolTokensAmount;\\n        uint256 buyingPremiumFeePercentage;\\n        uint256 openPositionFee;\\n        uint256 buyingPremiumFee;\\n        uint256 timeWindowFee;\\n        uint256 keepersFee;\\n    }\\n\\n    struct PreBurnResult {\\n        uint256 netBurnAmount;\\n        uint256 expectedUSDCAmount;\\n        uint256 closeFee;\\n        uint256 timeWindowFee;\\n        uint256 keepersFee;\\n    }\\n\\n    struct CheckMintResult {\\n        uint256 netMintAmount;\\n        uint256 expectedVolTokensAmount;\\n        uint256 buyingPremiumFeePercentage;\\n        uint256 openPositionFee;\\n        uint256 buyingPremiumFee;\\n        uint256 timePenaltyFee;\\n        uint256 keepersFee;\\n        bool insufficientLiquidity;\\n        bool insufficientSlippage;\\n    }\\n\\n    struct CheckBurnResult {\\n        uint256 netBurnAmount;\\n        uint256 expectedUSDCAmount;\\n        uint256 closeFee;\\n        uint256 timePenaltyFee;\\n        uint256 keepersFee;\\n    }\\n\\n    function dailyFundingFee(IPlatform platform) external view returns (uint256 fundingFeePercent);\\n    function fundingFeeValues(IPlatform platform, uint32 minCVI, uint32 maxCVI, uint256 minCollateral, uint256 maxCollateral) external view returns (uint256[][] memory fundingFeeRatePercent);   \\t\\n    function collateralRatio(IPlatform platform) external view returns (uint256);\\n    function premiumFeeCollateralRatio(IPlatform platform) external view returns (uint256);\\n\\n    function volTokenIntrinsicPrice(IVolatilityToken volToken) external view returns (uint256);\\n    function volTokenDexPrice(IThetaVault thetaVault) external view returns (uint256);\\n\\n    function maxMintAmount(IVolatilityToken volToken) external view returns (uint256 maxAmount);\\n    function maxWithdrawAmount(IThetaVault thetaVault) external view returns (uint256 maxAmount, uint256 maxUSDCAmount);\\n    function willWithdrawSucceed(IThetaVault thetaVault, uint256 withdrawAmount) external view returns (bool success);\\n\\n    function calculatePreMint(IVolatilityToken volToken, bool isKeepers, uint256 usdcAmount, uint256 timeWindow) external view returns (PreMintResult memory result);\\n    function calculatePreBurn(IVolatilityToken volToken, bool isKeepers, uint256 volTokensAmount, uint256 timeWindow) external view returns (PreBurnResult memory result);\\n\\n    function checkMintRequest(IVolatilityToken volToken, uint256 requestId, bool isKeepers) external view returns (CheckMintResult memory result);\\n    function checkBurnRequest(IVolatilityToken volToken, uint256 requestId, bool isKeepers) external view returns (CheckBurnResult memory result);\\n\\n    function convertGOVIToXGOVI(uint256 amount) external view returns (uint256 xGOVIAmount);\\n    function convertXGOVIToGOVI(uint256 xGOVIAmount) external view returns (uint256 goviAmount);\\n    function stakedGOVI(address account) external view returns (uint256 stakedAmount, uint256 share);\\n    function calculateStakingAPR() external view returns (uint256 apr);\\n}\\n\",\"keccak256\":\"0x508fca1dd20cd644efda254948dee2ee8f7ae21de32f342b23ff6604ed60df04\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IRequestFeesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./IVolatilityToken.sol\\\";\\n\\ninterface IRequestFeesCalculator {\\n    function calculateTimePenaltyFee(IVolatilityToken.Request calldata request) external view returns (uint16 feePercentage);\\n    function calculateTimeDelayFee(uint256 timeDelay) external view returns (uint16 feePercentage);\\n    function calculateFindersFee(uint256 tokensLeftAmount) external view returns (uint256 findersFeeAmount);\\n    function calculateKeepersFee(uint256 tokensAmount) external view returns (uint256 keepersFeeAmount);\\n\\n    function isLiquidable(IVolatilityToken.Request calldata request) external view returns (bool liquidable);\\n\\n    function minWaitTime() external view returns (uint32);\\n\\n    function setTimeWindow(uint32 minTimeWindow, uint32 maxTimeWindow) external;\\n    function setTimeDelayFeesParameters(uint16 minTimeDelayFeePercent, uint16 maxTimeDelayFeePercent) external;\\n    function setMinWaitTime(uint32 newMinWaitTime) external;\\n    function setTimePenaltyFeeParameters(uint16 beforeTargetTimeMaxPenaltyFeePercent, uint32 afterTargetMidTime, uint16 afterTargetMidTimePenaltyFeePercent, uint32 afterTargetMaxTime, uint16 afterTargetMaxTimePenaltyFeePercent) external;\\n    function setFindersFee(uint16 findersFeePercent) external;\\n    function setKeepersFeePercent(uint16 keepersFeePercent) external;\\n    function setKeepersFeeMax(uint256 keepersFeeMax) external;\\n\\n    function getMaxFees() external view returns (uint16 maxFeesPercent);\\n}\\n\",\"keccak256\":\"0xb516083aa9063482c61c12f38b960f017205f2611358dcab31c1197208841611\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IRewardsCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface IRewardsCollector {\\n\\tfunction reward(address account, uint256 positionUnits, uint8 leverage) external;\\n}\\n\",\"keccak256\":\"0xaae3f1399202cccfb2e7302f69868a1f9adfbc53c968668e79201692c5724ca5\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IStaking {\\n    event ProfitAdded(address indexed token, uint256 profit);\\n    event Staked(address indexed account, uint256 goviAmount, uint256 xGOVIMinted, uint256 xGOVIBalance);\\n    event Unstaked(address indexed account, uint256 xGOVIBurned, uint256 goviReward, uint256 xGOVIBalance);\\n    event RewardClaimed(address indexed account, address indexed token, uint256 reward);\\n\\n\\tfunction stake(uint256 goviAmount) external returns (uint256 xGOVIAmount);\\n\\tfunction unstake(uint256 xGOVIAmount) external returns (uint256 goviAmount);\\n\\n    function claimProfit(IERC20Upgradeable token) external returns (uint256);\\n    function claimAllProfits() external returns (uint256[] memory profits);\\n\\n    function addClaimableToken(IERC20Upgradeable newClaimableToken) external;\\n    function removeClaimableToken(IERC20Upgradeable removedClaimableToken) external;\\n\\n    function setStakingLockupTime(uint256 newLockupTime) external;\\n    function setRewardRate(uint256 newRewardPerSecond) external;\\n\\n    function profitOf(address account, IERC20Upgradeable token) external view returns (uint256);\\n    function getClaimableTokens() external view returns (IERC20Upgradeable[] memory);\\n\\n    function rewardPerSecond() external view returns (uint256);\\n    function lastUpdateTime() external view returns (uint256);\\n\\n    receive() external payable;\\n}\\n\",\"keccak256\":\"0x381dca1f64937aac9769c5b7c0a8362cc6f69f626034f1546de515c8ff78dfee\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IThetaVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport '@coti-cvi/contracts-staking/contracts/interfaces/IRewardRouter.sol';\\n\\nimport \\\"./IThetaVaultInfo.sol\\\";\\nimport \\\"./IVolatilityToken.sol\\\";\\n\\ninterface IThetaVault is IThetaVaultInfo {\\n\\n    event SubmitRequest(uint256 requestId, uint8 requestType, uint256 tokenAmount, uint32 targetTimestamp, address indexed account, uint256 totalUSDCBalance, uint256 totalSupply);\\n    event FulfillDeposit(uint256 requestId, address indexed account, uint256 totalUSDCAmount, uint256 platformLiquidityAmount, uint256 dexVolTokenUSDCAmount, uint256 dexVolTokenAmount, uint256 dexUSDCAmount, uint256 mintedThetaTokens);\\n    event FulfillWithdraw(uint256 requestId, address indexed account, uint256 totalUSDCAmount, uint256 platformLiquidityAmount, uint256 dexVolTokenAmount, uint256 dexUSDCVolTokenAmount, uint256 dexUSDCAmount, uint256 burnedThetaTokens);\\n    event LiquidateRequest(uint256 requestId, uint8 requestType, address indexed account, address indexed liquidator, uint256 tokenAmount);\\n\\n    function submitDepositRequest(uint168 tokenAmount/* , bool shouldStake */) external returns (uint256 requestId);\\n    function submitWithdrawRequest(uint168 thetaTokenAmount) external returns (uint256 requestId);\\n\\n    function fulfillDepositRequest(uint256 requestId) external returns (uint256 thetaTokensMinted);\\n    function fulfillWithdrawRequest(uint256 requestId) external returns (uint256 tokenWithdrawnAmount);\\n\\n    function liquidateRequest(uint256 requestId) external;\\n\\n    function rebalance() external;\\n\\n    function setRewardRouter(IRewardRouter rewardRouter) external;\\n    function setFulfiller(address newFulfiller) external;\\n    function setMinPoolSkew(uint16 newMinPoolSkewPercentage) external;\\n    function setLiquidityPercentages(uint16 newExtraLiquidityPercentage, uint16 minDexPercentageAllowed) external;\\n    function setRequestDelay(uint256 newRequestDelay) external;\\n    function setDepositCap(uint256 newDepositCap) external;\\n    function setPeriods(uint256 newLockupPeriod, uint256 newLiquidationPeriod) external;\\n    function setMinAmounts(uint256 newMinDepositAmount, uint256 newMinWithdrawAmount) external;\\n    function setDepositHoldings(uint16 newDepositHoldingsPercentage) external;\\n    \\n    function volToken() external view returns (IVolatilityToken);\\n\\n    function totalBalance() external view returns (uint256 balance, uint256 usdcPlatformLiquidity, uint256 intrinsicDEXVolTokenBalance, uint256 volTokenPositionBalance, uint256 dexUSDCAmount, uint256 dexVolTokensAmount);\\n    function getReserves() external view returns (uint256 volTokenAmount, uint256 usdcAmount);\\n    function requests(uint256 requestId) external view returns (uint8 requestType, uint168 tokenAmount, uint32 targetTimestamp, address owner, bool shouldStake);\\n}\\n\",\"keccak256\":\"0xbd27cde6652e9e4b9cd783ba25bafb31ab00210fad67f80733e8901f980f0fa1\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IThetaVaultInfo.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface IThetaVaultInfo {\\n    function totalVaultLeveragedAmount() external view returns (uint256);\\n    function vaultPositionUnits() external view returns (uint256);\\n    function extraLiqidityPercentage() external view returns (uint16);\\n    function minDexPercentageAllowed() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xce2b14eb4cfcf69d7fe194658560dd77ee0f37c913eefa8d60a2d09bdd7683f6\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IVolatilityToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./IPlatform.sol\\\";\\nimport \\\"./IRequestFeesCalculator.sol\\\";\\nimport \\\"./ICVIOracle.sol\\\";\\n\\ninterface IVolatilityToken {\\n\\n    struct Request {\\n        uint8 requestType; // 1 => mint, 2 => burn\\n        uint168 tokenAmount;\\n        uint16 timeDelayRequestFeesPercent;\\n        uint16 maxRequestFeesPercent;\\n        address owner;\\n        uint32 requestTimestamp;\\n        uint32 targetTimestamp;\\n        bool useKeepers;\\n        uint16 maxBuyingPremiumFeePercentage;\\n    }\\n\\n    event SubmitRequest(uint256 requestId, uint8 requestType, address indexed account, uint256 tokenAmount, uint256 submitFeesAmount, uint32 requestTimestamp, uint32 targetTimestamp, bool useKeepers, uint16 maxBuyingPremiumFeePercentage);\\n    event FulfillRequest(uint256 requestId, uint8 requestType, address indexed account, uint256 fulfillFeesAmount, bool isAborted, bool useKeepers, bool keepersCalled, address indexed fulfiller, uint32 fulfillTimestamp);\\n    event LiquidateRequest(uint256 requestId, uint8 requestType, address indexed account, address indexed liquidator, uint256 findersFeeAmount, bool useKeepers, uint32 liquidateTimestamp);\\n    event Mint(uint256 requestId, address indexed account, uint256 tokenAmount, uint256 positionedTokenAmount, uint256 mintedTokens, uint256 openPositionFee, uint256 buyingPremiumFee);\\n    event Burn(uint256 requestId, address indexed account, uint256 tokenAmountBeforeFees, uint256 tokenAmount, uint256 burnedTokens, uint256 closePositionFee, uint256 closingPremiumFee);\\n\\n    function rebaseCVI() external;\\n\\n    function submitMintRequest(uint168 tokenAmount, uint32 timeDelay) external returns (uint256 requestId);\\n    function submitKeepersMintRequest(uint168 tokenAmount, uint32 timeDelay, uint16 maxBuyingPremiumFeePercentage) external returns (uint256 requestId);\\n    function submitBurnRequest(uint168 tokenAmount, uint32 timeDelay) external returns (uint256 requestId);\\n    function submitKeepersBurnRequest(uint168 tokenAmount, uint32 timeDelay) external returns (uint256 requestId);\\n\\n    function fulfillMintRequest(uint256 requestId, uint16 maxBuyingPremiumFeePercentage, bool keepersCalled) external returns (uint256 tokensMinted, bool success);\\n    function fulfillBurnRequest(uint256 requestId, bool keepersCalled) external returns (uint256 tokensBurned);\\n\\n    function mintTokens(uint168 tokenAmount) external returns (uint256 mintedTokens);\\n    function burnTokens(uint168 burnAmount) external returns (uint256 tokenAmount);\\n\\n    function liquidateRequest(uint256 requestId) external returns (uint256 findersFeeAmount);\\n\\n    function setMinter(address minter) external;\\n    function setPlatform(IPlatform newPlatform) external;\\n    function setFeesCalculator(IFeesCalculator newFeesCalculator) external;\\n    function setFeesCollector(IFeesCollector newCollector) external;\\n    function setRequestFeesCalculator(IRequestFeesCalculator newRequestFeesCalculator) external;\\n    function setCVIOracle(ICVIOracle newCVIOracle) external;\\n    function setDeviationParameters(uint16 newDeviationPercentagePerSingleRebaseLag, uint16 newMinDeviationPercentage, uint16 newMaxDeviationPercentage) external;\\n    function setVerifyTotalRequestsAmount(bool verifyTotalRequestsAmount) external;\\n    function setMaxTotalRequestsAmount(uint256 maxTotalRequestsAmount) external;\\n    function setCappedRebase(bool newCappedRebase) external;\\n\\n    function setMinRequestId(uint256 newMinRequestId) external;\\n    function setMaxMinRequestIncrements(uint256 newMaxMinRequestIncrements) external;\\n\\n    function setFulfiller(address fulfiller) external;\\n\\n    function setKeepersFeeVaultAddress(address newKeepersFeeVaultAddress) external;\\n\\n    function setMinKeepersAmounts(uint256 newMinKeepersMintAmount, uint256 newMinKeepersBurnAmount) external;\\n\\n    function platform() external view returns (IPlatform);\\n    function requestFeesCalculator() external view returns (IRequestFeesCalculator);\\n    function leverage() external view returns (uint8);\\n    function initialTokenToLPTokenRate() external view returns (uint256);\\n\\n    function requests(uint256 requestId) external view returns (uint8 requestType, uint168 tokenAmount, uint16 timeDelayRequestFeesPercent, uint16 maxRequestFeesPercent,\\n        address owner, uint32 requestTimestamp, uint32 targetTimestamp, bool useKeepers, uint16 maxBuyingPremiumFeePercentage);\\n}\\n\",\"keccak256\":\"0x9b195f997265f6401224845c81cba2a3ac6f2e4f2bf65d8be5027ac1ee3fa5b4\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-staking/contracts/interfaces/IRewardRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8;\\n\\nimport './IRewardTracker.sol';\\nimport './IVester.sol';\\n\\nenum StakedTokenName {\\n  THETA_VAULT,\\n  ES_GOVI,\\n  GOVI,\\n  LENGTH\\n}\\n\\ninterface IRewardRouter {\\n  event StakeToken(address indexed account, address indexed tokenName, uint256 amount);\\n  event UnstakeToken(address indexed account, address indexed tokenName, uint256 amount);\\n\\n  function stake(StakedTokenName _token, uint256 _amount) external;\\n\\n  function stakeForAccount(\\n    StakedTokenName _token,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function batchStakeForAccount(\\n    StakedTokenName _tokenName,\\n    address[] memory _accounts,\\n    uint256[] memory _amounts\\n  ) external;\\n\\n  function unstake(StakedTokenName _token, uint256 _amount) external;\\n\\n  function claim(StakedTokenName _token) external;\\n\\n  function compound(StakedTokenName _tokenName) external;\\n\\n  function compoundForAccount(address _account, StakedTokenName _tokenName) external;\\n\\n  function batchCompoundForAccounts(address[] memory _accounts, StakedTokenName _tokenName) external;\\n\\n  function setRewardTrackers(StakedTokenName[] calldata _tokenNames, IRewardTracker[] calldata _rewardTrackers)\\n    external;\\n\\n  function setVesters(StakedTokenName[] calldata _tokenNames, IVester[] calldata _vesters) external;\\n\\n  function setTokens(StakedTokenName[] calldata _tokenNames, address[] calldata _tokens) external;\\n\\n  function rewardTrackers(StakedTokenName _token) external view returns (IRewardTracker);\\n\\n  function vesters(StakedTokenName _token) external view returns (IVester);\\n\\n  function tokens(StakedTokenName _token) external view returns (address);\\n}\\n\",\"keccak256\":\"0x3d947510a8edfa0e2d7119d5e31a63ef9ff4bef153ce5afc67343aa2cc2a7f79\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-staking/contracts/interfaces/IRewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8;\\n\\ninterface IRewardTracker {\\n  event Claim(address indexed receiver, uint256 amount);\\n\\n  function stake(address _depositToken, uint256 _amount) external;\\n\\n  function stakeForAccount(\\n    address _fundingAccount,\\n    address _account,\\n    address _depositToken,\\n    uint256 _amount\\n  ) external;\\n\\n  function unstake(address _depositToken, uint256 _amount) external;\\n\\n  function unstakeForAccount(\\n    address _account,\\n    address _depositToken,\\n    uint256 _amount,\\n    address _receiver\\n  ) external;\\n\\n  function claim(address _receiver) external returns (uint256);\\n\\n  function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n  function updateRewards() external;\\n\\n  function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n\\n  function stakedAmounts(address _account) external view returns (uint256);\\n\\n  function averageStakedAmounts(address _account) external view returns (uint256);\\n\\n  function cumulativeRewards(address _account) external view returns (uint256);\\n\\n  function claimable(address _account) external view returns (uint256);\\n\\n  function tokensPerInterval() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0af272806df1e2440cb18485e6911a67a2a25fe1edadfa602c08a4ef3e2f1f5c\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-staking/contracts/interfaces/IVester.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8;\\n\\nimport './IRewardTracker.sol';\\n\\ninterface IVester {\\n  event Claim(address indexed receiver, uint256 amount);\\n  event Deposit(address indexed account, uint256 amount);\\n  event Withdraw(address indexed account, uint256 claimedAmount, uint256 balance);\\n  event PairTransfer(address indexed from, address indexed to, uint256 value);\\n\\n  function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n  function transferStakeValues(address _sender, address _receiver) external;\\n\\n  function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external;\\n\\n  function setTransferredCumulativeRewards(address _account, uint256 _amount) external;\\n\\n  function setCumulativeRewardDeductions(address _account, uint256 _amount) external;\\n\\n  function setBonusRewards(address _account, uint256 _amount) external;\\n\\n  function rewardTracker() external view returns (IRewardTracker);\\n\\n  function claimable(address _account) external view returns (uint256);\\n\\n  function cumulativeClaimAmounts(address _account) external view returns (uint256);\\n\\n  function claimedAmounts(address _account) external view returns (uint256);\\n\\n  function pairAmounts(address _account) external view returns (uint256);\\n\\n  function getVestedAmount(address _account) external view returns (uint256);\\n\\n  function transferredAverageStakedAmounts(address _account) external view returns (uint256);\\n\\n  function transferredCumulativeRewards(address _account) external view returns (uint256);\\n\\n  function cumulativeRewardDeductions(address _account) external view returns (uint256);\\n\\n  function bonusRewards(address _account) external view returns (uint256);\\n\\n  function getMaxVestableAmount(address _account) external view returns (uint256);\\n\\n  function getCombinedAverageStakedAmount(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x60ef693b02dca48ab14d3f352632065fd8c5cd7a49063e2758eec857bc73ce11\",\"license\":\"GPL-3.0\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615aa780620000216000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80636c479457116100a2578063ca40742c11610071578063ca40742c146102d0578063e76740f8146102e3578063e7ab99d41461034c578063ea7f4e1f1461035f578063ea886bd11461037257600080fd5b80636c479457146102775780638e9345d21461028a578063ba3f6bd81461029d578063c988abec146102b057600080fd5b8063188e45b1116100e9578063188e45b1146102015780632c7d9c7a14610214578063485cc9551461022757806354c103941461023c5780636b522aa91461026457600080fd5b8063012b31a81461011b57806306823e5b146101445780630e5444e414610167578063115b8adf1461017d575b600080fd5b61012e6101293660046152fa565b610385565b60405161013b919061573a565b60405180910390f35b6101576101523660046152cf565b61043c565b604051901515815260200161013b565b61016f610636565b60405190815260200161013b565b61019061018b36600461533f565b610790565b60405161013b9190600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e0830151151560e0830152610100808401511515818401525092915050565b61016f61020f366004615431565b610b68565b61016f610222366004615431565b610ddc565b61023a61023536600461523d565b611031565b005b61024f61024a366004615205565b6110e1565b6040805192835260208301919091520161013b565b61016f610272366004615205565b611300565b61016f610285366004615205565b611555565b61016f610298366004615205565b61176e565b61024f6102ab366004615205565b6119d6565b6102c36102be366004615275565b611db3565b60405161013b9190615665565b61016f6102de366004615205565b6123d6565b6102f66102f13660046152fa565b6125bd565b60405161013b9190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b61016f61035a366004615205565b6127bc565b61016f61036d366004615205565b61297e565b61012e61038036600461533f565b612b43565b6103b76040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60006103c38685612db1565b604084018190529091506103d790826159e7565b602083018190526103ec908790879086613129565b60808401819052606084018290526020840151909161040a916159e7565b61041491906159e7565b602083018190528190610427908661599c565b610431919061588e565b825250949350505050565b600080836001600160a01b03166361176a0e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561047857600080fd5b505afa15801561048c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b09190615221565b6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b1580156104e857600080fd5b505afa1580156104fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105209190615221565b90506000816001600160a01b0316632f811c226040518163ffffffff1660e01b815260040160206040518083038186803b15801561055d57600080fd5b505afa158015610571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105959190615449565b90506000826001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d257600080fd5b505afa1580156105e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060a9190615449565b9050610617868383613340565b9092509050610628868383886135b0565b101593505050505b92915050565b600080546001546040516370a0823160e01b81526001600160a01b0391821660048201528392620100009004909116906370a082319060240160206040518083038186803b15801561068757600080fd5b505afa15801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf9190615449565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316638f10369a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561071157600080fd5b505afa158015610725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107499190615449565b610756906201518061599c565b6107629061016d61599c565b9050811561078657816107776127108361599c565b610781919061588e565b610789565b60005b9250505090565b6107e3604051806101200160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b6107eb61517f565b60405163103a258b60e31b8152600481018590526001600160a01b038616906381d12c58906024016101206040518083038186803b15801561082c57600080fd5b505afa158015610840573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086491906155b3565b61ffff166101008a0152151560e089015263ffffffff90811660c08901521660a08701525050506001600160a81b0316602083015260ff168082526001146108e85760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081c995c5d595cdd081a5960721b60448201526064015b60405180910390fd5b600061091c868584602001516001600160a81b03168560a001518660c0015161091191906159fe565b63ffffffff16613129565b60c08501526020830151909150610941908790869085906001600160a81b03166135fe565b60a0840181905260c084015160208401516109669084906001600160a81b03166159e7565b61097091906159e7565b61097a91906159e7565b835260208201516109959087906001600160a81b031661382f565b6040860152608085018190526060850182905284516001600160a81b03918216926109c19216906159e7565b6109cb91906159e7565b83526020820151606084015160808501516109f39289926001600160a81b0390911691614356565b151560e086015250506101008083015160408086015161ffff9092169091119185019190915280516318160ddd60e01b815290516000916001600160a01b038916916318160ddd91600480820192602092909190829003018186803b158015610a5b57600080fd5b505afa158015610a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a939190615449565b90506000610aa088614847565b9050600082118015610ab25750600081115b15610ada5784518190610ac690849061599c565b610ad0919061588e565b6020860152610b5d565b876001600160a01b0316638eb50a386040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1357600080fd5b505afa158015610b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4b9190615449565b8551610b57919061599c565b60208601525b505050509392505050565b600080546001546040516370a0823160e01b81526001600160a01b0391821660048201528392620100009004909116906370a082319060240160206040518083038186803b158015610bb957600080fd5b505afa158015610bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf19190615449565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663c8f33c916040518163ffffffff1660e01b815260040160206040518083038186803b158015610c4357600080fd5b505afa158015610c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b9190615449565b610c8590426159e7565b600160009054906101000a90046001600160a01b03166001600160a01b0316638f10369a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cd357600080fd5b505afa158015610ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0b9190615449565b610d15919061599c565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6757600080fd5b505afa158015610d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9f9190615449565b90506000610dad8385615857565b1115610dd457610dbd8284615857565b610dc7828761599c565b610dd1919061588e565b93505b505050919050565b600080546001546040516370a0823160e01b81526001600160a01b0391821660048201528392620100009004909116906370a082319060240160206040518083038186803b158015610e2d57600080fd5b505afa158015610e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e659190615449565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663c8f33c916040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb757600080fd5b505afa158015610ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eef9190615449565b610ef990426159e7565b600160009054906101000a90046001600160a01b03166001600160a01b0316638f10369a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4757600080fd5b505afa158015610f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7f9190615449565b610f89919061599c565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fdb57600080fd5b505afa158015610fef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110139190615449565b90508015610dd45780856110278486615857565b610dc7919061599c565b600061103d6001614a19565b90508015611055576000805461ff0019166101001790555b6000805462010000600160b01b031916620100006001600160a01b038681169190910291909117909155600180546001600160a01b03191691841691909117905580156110dc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001546040516370a0823160e01b81526001600160a01b03838116600483015260009283923092632c7d9c7a9216906370a082319060240160206040518083038186803b15801561113157600080fd5b505afa158015611145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111699190615449565b6040518263ffffffff1660e01b815260040161118791815260200190565b60206040518083038186803b15801561119f57600080fd5b505afa1580156111b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d79190615449565b915081156112fb57600160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561122d57600080fd5b505afa158015611241573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112659190615449565b6001546040516370a0823160e01b81526001600160a01b0386811660048301526127109216906370a082319060240160206040518083038186803b1580156112ac57600080fd5b505afa1580156112c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e49190615449565b6112ee919061599c565b6112f8919061588e565b90505b915091565b6000816001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b15801561133b57600080fd5b505afa15801561134f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113739190615449565b6113805750612710919050565b816001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113b957600080fd5b505afa1580156113cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f19190615221565b6001600160a01b03166346b55fbb836001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b15801561143857600080fd5b505afa15801561144c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114709190615449565b846001600160a01b0316632f811c226040518163ffffffff1660e01b815260040160206040518083038186803b1580156114a957600080fd5b505afa1580156114bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e19190615449565b6040516001600160e01b031960e085901b1681526004810192909252602482015260440160206040518083038186803b15801561151d57600080fd5b505afa158015611531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106309190615449565b600080826001600160a01b0316636f7d78286040518163ffffffff1660e01b815260040160206040518083038186803b15801561159157600080fd5b505afa1580156115a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c99190615221565b6001600160a01b031663c1639a2b6040518163ffffffff1660e01b815260040160606040518083038186803b15801561160157600080fd5b505afa158015611615573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116399190615549565b50509050826001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561167657600080fd5b505afa15801561168a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ae9190615221565b6001600160a01b0316631bffac9f60405180604001604052806201518081526020018463ffffffff168152506116e386611300565b6040516001600160e01b031960e085901b1681528251600482015260209092015163ffffffff1660248301526044820152606401604080518083038186803b15801561172e57600080fd5b505afa158015611742573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176691906154c1565b949350505050565b600080826001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b1580156117aa57600080fd5b505afa1580156117be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e29190615221565b6001600160a01b0316636f7d78286040518163ffffffff1660e01b815260040160206040518083038186803b15801561181a57600080fd5b505afa15801561182e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118529190615221565b6001600160a01b031663c1639a2b6040518163ffffffff1660e01b815260040160606040518083038186803b15801561188a57600080fd5b505afa15801561189e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c29190615549565b505090506000806118d7856000806000614356565b5091509150846001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561191557600080fd5b505afa158015611929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194d9190615221565b6001600160a01b031663d934c20b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561198557600080fd5b505afa158015611999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bd919061552d565b63ffffffff168363ffffffff16838361102791906159e7565b6000806000836001600160a01b031663ad7a672f6040518163ffffffff1660e01b815260040160c06040518083038186803b158015611a1457600080fd5b505afa158015611a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4c91906154e4565b505050505090506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8e57600080fd5b505afa158015611aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac69190615449565b90506000856001600160a01b03166361176a0e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b0357600080fd5b505afa158015611b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3b9190615221565b6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015611b7357600080fd5b505afa158015611b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bab9190615221565b6001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b158015611be357600080fd5b505afa158015611bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1b9190615449565b90506000866001600160a01b03166361176a0e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c5857600080fd5b505afa158015611c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c909190615221565b6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015611cc857600080fd5b505afa158015611cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d009190615221565b6001600160a01b0316632f811c226040518163ffffffff1660e01b815260040160206040518083038186803b158015611d3857600080fd5b505afa158015611d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d709190615449565b611d7a90836159e7565b905081611d87848361599c565b611d91919061588e565b955082611d9e858861599c565b611da8919061588e565b945050505050915091565b6060611dbf83836159e7565b611dca906001615857565b67ffffffffffffffff811115611df057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611e2357816020015b6060815260200190600190039081611e0e5790505b5090506000835b8381116123cb576000611e3d88886159fe565b611e4890600161586f565b63ffffffff1667ffffffffffffffff811115611e7457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611e9d578160200160208202803683370190505b5090506000808a6001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b158015611edc57600080fd5b505afa158015611ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f149190615221565b6001600160a01b031663bb60672b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f4c57600080fd5b505afa158015611f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f849190615599565b611f919060ff168b6159bb565b90505b8a6001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b158015611fcd57600080fd5b505afa158015611fe1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120059190615221565b6001600160a01b031663bb60672b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561203d57600080fd5b505afa158015612051573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120759190615599565b6120829060ff168a6159bb565b63ffffffff168163ffffffff161161237b5760008b6001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120cf57600080fd5b505afa1580156120e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121079190615221565b6001600160a01b0316631bffac9f604051806040016040528062015180815260200185606461213691906159bb565b63ffffffff1681525060648f6001600160a01b03166360ebfee66040518163ffffffff1660e01b815260040160206040518083038186803b15801561217a57600080fd5b505afa15801561218e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b29190615449565b6121bc908a61599c565b6121c6919061588e565b6040516001600160e01b031960e085901b1681528251600482015260209092015163ffffffff1660248301526044820152606401604080518083038186803b15801561221157600080fd5b505afa158015612225573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224991906154c1565b9150508084848151811061226d57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152612283600184615857565b9250508a6001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122bf57600080fd5b505afa1580156122d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f79190615221565b6001600160a01b031663bb60672b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561232f57600080fd5b505afa158015612343573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123679190615599565b6123749060ff168261586f565b9050611f94565b508185858151811061239d57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526123b3600185615857565b935050506001816123c49190615857565b9050611e2a565b505095945050505050565b6000816001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b15801561241157600080fd5b505afa158015612425573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124499190615449565b6124565750612710919050565b816001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b15801561248f57600080fd5b505afa1580156124a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c79190615449565b826001600160a01b03166360ebfee66040518163ffffffff1660e01b815260040160206040518083038186803b15801561250057600080fd5b505afa158015612514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125389190615449565b836001600160a01b0316632f811c226040518163ffffffff1660e01b815260040160206040518083038186803b15801561257157600080fd5b505afa158015612585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a99190615449565b6125b3919061599c565b610630919061588e565b6125fd6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61260985858585613129565b60c0830181905260a083018290529061262290856159e7565b61262c91906159e7565b8152612638858461382f565b6040840152608083018190526060830182905282516001600160a81b0390911691612662916159e7565b61266c91906159e7565b8160000181815250506000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126b057600080fd5b505afa1580156126c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e89190615449565b905060006126f587614847565b90506000821180156127075750600081115b1561272f578251819061271b90849061599c565b612725919061588e565b60208401526127b2565b866001600160a01b0316638eb50a386040518163ffffffff1660e01b815260040160206040518083038186803b15801561276857600080fd5b505afa15801561277c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a09190615449565b83516127ac919061599c565b60208401525b5050949350505050565b600080826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127f857600080fd5b505afa15801561280c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128309190615449565b116128695760405162461bcd60e51b81526020600482015260096024820152684e6f20737570706c7960b81b60448201526064016108df565b600061287483614847565b9050826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156128af57600080fd5b505afa1580156128c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e79190615449565b836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561292057600080fd5b505afa158015612934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129589190615599565b61296390600a6158f1565b61296d908361599c565b612977919061588e565b9392505050565b6000806000836001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401604080518083038186803b1580156129bb57600080fd5b505afa1580156129cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f391906154c1565b91509150600082118015612a075750600081115b612a425760405162461bcd60e51b815260206004820152600c60248201526b4e6f206c697175696469747960a01b60448201526064016108df565b81846001600160a01b03166361176a0e6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a7c57600080fd5b505afa158015612a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab49190615221565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612aec57600080fd5b505afa158015612b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b249190615599565b612b2f90600a6158f1565b612b39908361599c565b611766919061588e565b612b756040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b612b7d61517f565b60405163103a258b60e31b8152600481018590526001600160a01b038616906381d12c58906024016101206040518083038186803b158015612bbe57600080fd5b505afa158015612bd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf691906155b3565b50151560e089015263ffffffff90811660c08901521660a08701525050506001600160a81b0316602083015260ff16808252600214612c6c5760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081c995c5d595cdd081a5960721b60448201526064016108df565b6020810151604051631c70ca2960e01b81526001600160a81b0390911660048201526000906001600160a01b03871690631c70ca299060240160206040518083038186803b158015612cbd57600080fd5b505afa158015612cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf59190615449565b90506000612d038783612db1565b60408601819052909150612d1790826159e7565b6020850152612d28878685846135fe565b8460600181815250506000612d51888787602001518760a001518860c0015161091191906159fe565b60808701819052606087015160208801519293509091612d729084906159e7565b612d7c91906159e7565b612d8691906159e7565b602086018190528290612d99908561599c565b612da3919061588e565b855250929695505050505050565b600080836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ded57600080fd5b505afa158015612e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e259190615449565b612e2e85614847565b612e38908561599c565b612e42919061588e565b915061271061ffff16846001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015612e8457600080fd5b505afa158015612e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ebc9190615221565b6001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ef457600080fd5b505afa158015612f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2c9190615221565b6040516315435d0560e31b815260006004820152600160248201526001600160a01b03919091169063aa1ae8289060440160206040518083038186803b158015612f7557600080fd5b505afa158015612f89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fad9190615417565b856001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015612fe657600080fd5b505afa158015612ffa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301e9190615221565b6001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561305657600080fd5b505afa15801561306a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308e9190615221565b6001600160a01b03166350e0942b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156130c657600080fd5b505afa1580156130da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fe9190615417565b6131089190615831565b6131169061ffff168461599c565b613120919061588e565b90509250929050565b60008061271061ffff16866001600160a01b0316636a9d11196040518163ffffffff1660e01b815260040160206040518083038186803b15801561316c57600080fd5b505afa158015613180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a49190615221565b6001600160a01b031663051a497b856040518263ffffffff1660e01b81526004016131d191815260200190565b60206040518083038186803b1580156131e957600080fd5b505afa1580156131fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132219190615417565b61322f9061ffff168661599c565b613239919061588e565b915084613247576000613335565b856001600160a01b0316636a9d11196040518163ffffffff1660e01b815260040160206040518083038186803b15801561328057600080fd5b505afa158015613294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b89190615221565b6001600160a01b031663591b36f7856040518263ffffffff1660e01b81526004016132e591815260200190565b60206040518083038186803b1580156132fd57600080fd5b505afa158015613311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133359190615449565b905094509492505050565b600080600061271061ffff16866001600160a01b031663293d09156040518163ffffffff1660e01b815260040160206040518083038186803b15801561338557600080fd5b505afa158015613399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133bd9190615417565b6133c990612710615831565b6133d79061ffff168761599c565b6133e1919061588e565b9050808411156134215760006133f782866159e7565b9050613404868683614aa6565b909450925061341587858584614abd565b90945092506135a79050565b600061342d85836159e7565b90506000806000896001600160a01b031663ad7a672f6040518163ffffffff1660e01b815260040160c06040518083038186803b15801561346d57600080fd5b505afa158015613481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134a591906154e4565b5094505093505092508381836134bb9190615857565b1180156135685750896001600160a01b0316637b5d6fe36040518163ffffffff1660e01b815260040160206040518083038186803b1580156134fc57600080fd5b505afa158015613510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135349190615417565b61ffff1683612710866135478587615857565b61355191906159e7565b61355b919061599c565b613565919061588e565b10155b156135a25760008061357a8c87614afb565b9150915061358a8b8b8484614e38565b909950975061359a898988614e51565b909950975050505b505050505b50935093915050565b60008060006135bf8785614e5e565b90506000806135ce8987614afb565b915091506135de88888484614e38565b90955093506135ee858585614aa6565b909a909950975050505050505050565b6000831580156137165750846001600160a01b0316636a9d11196040518163ffffffff1660e01b815260040160206040518083038186803b15801561364257600080fd5b505afa158015613656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061367a9190615221565b6001600160a01b031663ce521f266040518163ffffffff1660e01b815260040160206040518083038186803b1580156136b257600080fd5b505afa1580156136c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ea919061552d565b8360a001516136f9919061586f565b63ffffffff164211801561371657508260c0015163ffffffff1642105b156117665761271061ffff16856001600160a01b0316636a9d11196040518163ffffffff1660e01b815260040160206040518083038186803b15801561375b57600080fd5b505afa15801561376f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137939190615221565b6001600160a01b031663956872ca856040518263ffffffff1660e01b81526004016137be9190615773565b60206040518083038186803b1580156137d657600080fd5b505afa1580156137ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380e9190615417565b61381c9061ffff168461599c565b613826919061588e565b95945050505050565b600080600061271061ffff16856001600160a01b0316632c86d98e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561387457600080fd5b505afa158015613888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ac9190615599565b60ff16866001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b1580156138e857600080fd5b505afa1580156138fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139209190615221565b6001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561395857600080fd5b505afa15801561396c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139909190615221565b6001600160a01b031663a2028d976040518163ffffffff1660e01b815260040160206040518083038186803b1580156139c857600080fd5b505afa1580156139dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a009190615417565b613a0e9061ffff168761599c565b613a18919061599c565b613a22919061588e565b92506000856001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015613a5f57600080fd5b505afa158015613a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a979190615221565b6001600160a01b0316636f7d78286040518163ffffffff1660e01b815260040160206040518083038186803b158015613acf57600080fd5b505afa158015613ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b079190615221565b6001600160a01b031663c1639a2b6040518163ffffffff1660e01b815260040160606040518083038186803b158015613b3f57600080fd5b505afa158015613b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b779190615549565b505090506000866001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015613bb657600080fd5b505afa158015613bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bee9190615221565b6001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b158015613c2657600080fd5b505afa158015613c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c5e9190615449565b90506000876001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015613c9b57600080fd5b505afa158015613caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cd39190615221565b6001600160a01b0316632f811c226040518163ffffffff1660e01b815260040160206040518083038186803b158015613d0b57600080fd5b505afa158015613d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d439190615449565b905060008363ffffffff16896001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015613d8757600080fd5b505afa158015613d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dbf9190615221565b6001600160a01b031663d934c20b6040518163ffffffff1660e01b815260040160206040518083038186803b158015613df757600080fd5b505afa158015613e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e2f919061552d565b63ffffffff168a6001600160a01b0316632c86d98e6040518163ffffffff1660e01b815260040160206040518083038186803b158015613e6e57600080fd5b505afa158015613e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea69190615599565b60ff16613eb38a8c6159e7565b613ebd919061599c565b613ec7919061599c565b613ed1919061588e565b90506000818a6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015613f0f57600080fd5b505afa158015613f23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f479190615221565b6001600160a01b0316632f811c226040518163ffffffff1660e01b815260040160206040518083038186803b158015613f7f57600080fd5b505afa158015613f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fb79190615449565b613fc19190615857565b905060008a6001600160a01b0316632c86d98e6040518163ffffffff1660e01b815260040160206040518083038186803b158015613ffe57600080fd5b505afa158015614012573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140369190615599565b60ff166140438a8c6159e7565b61404d919061599c565b8b6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561408657600080fd5b505afa15801561409a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140be9190615221565b6001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b1580156140f657600080fd5b505afa15801561410a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061412e9190615449565b6141389190615857565b90508a6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561417357600080fd5b505afa158015614187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141ab9190615221565b6001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156141e357600080fd5b505afa1580156141f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061421b9190615221565b6001600160a01b0316631437d6d48b8d6001600160a01b0316632c86d98e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561426357600080fd5b505afa158015614277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061429b9190615599565b6040516001600160e01b031960e085901b1681526001600160a81b03909216600483015260ff16602482015260448101889052606481018790526084810184905260a4810185905260c401604080518083038186803b1580156142fd57600080fd5b505afa158015614311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143359190615380565b999c6001600160a81b039091169b5061ffff90991699505050505050505050565b600080600080876001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561439557600080fd5b505afa1580156143a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143cd9190615221565b6001600160a01b0316636f7d78286040518163ffffffff1660e01b815260040160206040518083038186803b15801561440557600080fd5b505afa158015614419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061443d9190615221565b6001600160a01b031663c1639a2b6040518163ffffffff1660e01b815260040160606040518083038186803b15801561447557600080fd5b505afa158015614489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144ad9190615549565b505090506000886001600160a01b0316632c86d98e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156144ec57600080fd5b505afa158015614500573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145249190615599565b60ff1686614532898b6159e7565b61453c91906159e7565b614546919061599c565b905060008263ffffffff168a6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561458a57600080fd5b505afa15801561459e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145c29190615221565b6001600160a01b031663d934c20b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156145fa57600080fd5b505afa15801561460e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614632919061552d565b6146429063ffffffff168461599c565b61464c919061588e565b9050808a6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561468857600080fd5b505afa15801561469c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146c09190615221565b6001600160a01b0316632f811c226040518163ffffffff1660e01b815260040160206040518083038186803b1580156146f857600080fd5b505afa15801561470c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147309190615449565b61473a9190615857565b955086828b6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561477757600080fd5b505afa15801561478b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147af9190615221565b6001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b1580156147e757600080fd5b505afa1580156147fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061481f9190615449565b6148299190615857565b6148339190615857565b945084861193505050509450945094915050565b600080826001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561488357600080fd5b505afa158015614897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148bb9190615221565b60405163055f575160e41b81526001600160a01b038581166004830152919250600191600091908416906355f575109060240160a06040518083038186803b15801561490657600080fd5b505afa15801561491a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061493e91906153a9565b505050506001600160a81b03169050806000146149d9576040516329b2a60b60e21b81526001600160a01b03868116600483015284169063a6ca982c9060240160c06040518083038186803b15801561499657600080fd5b505afa1580156149aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149ce9190615461565b509397509194505050505b81610dd45760405162461bcd60e51b815260206004820152601060248201526f4e656761746976652062616c616e636560801b60448201526064016108df565b60008054610100900460ff1615614a60578160ff166001148015614a3c5750303b155b614a585760405162461bcd60e51b81526004016108df906156ec565b506000919050565b60005460ff808416911610614a875760405162461bcd60e51b81526004016108df906156ec565b506000805460ff191660ff92909216919091179055600190565b919050565b826000614ab383856159e7565b9050935093915050565b6000806000614acc8785614e5e565b9050600080614adb8987614afb565b91509150614aea888885614e51565b90955093506135ee85858484615166565b6000806000846001600160a01b03166361176a0e6040518163ffffffff1660e01b815260040160206040518083038186803b158015614b3957600080fd5b505afa158015614b4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b719190615221565b90506000816001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015614bae57600080fd5b505afa158015614bc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614be69190615221565b90506000866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015614c2357600080fd5b505afa158015614c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c5b9190615449565b90506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015614c9857600080fd5b505afa158015614cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614cd09190615449565b90506000886001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401604080518083038186803b158015614d0c57600080fd5b505afa158015614d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d4491906154c1565b509050600083614d54838b61599c565b614d5e919061588e565b90506000614d6b87614847565b60405163055f575160e41b81526001600160a01b0389811660048301529192506000918816906355f575109060240160a06040518083038186803b158015614db257600080fd5b505afa158015614dc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614dea91906153a9565b505050506001600160a81b03169050848184614e06919061599c565b614e10919061588e565b995084614e1d848461599c565b614e27919061588e565b985050505050505050509250929050565b600080614e4584876159e7565b915061333583866159e7565b826000614ab38385615857565b600080836001600160a01b03166361176a0e6040518163ffffffff1660e01b815260040160206040518083038186803b158015614e9a57600080fd5b505afa158015614eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ed29190615221565b6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015614f0a57600080fd5b505afa158015614f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f429190615221565b90506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015614f7f57600080fd5b505afa158015614f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614fb79190615449565b6040516370a0823160e01b81526001600160a01b0387811660048301529192506000918416906370a082319060240160206040518083038186803b158015614ffe57600080fd5b505afa158015615012573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906150369190615449565b9050600082615045838861599c565b61504f919061588e565b604051630d9c362960e41b8152600160048201529091506000906001600160a01b0386169063d9c362909060240160206040518083038186803b15801561509557600080fd5b505afa1580156150a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906150cd9190615449565b90506000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561510a57600080fd5b505afa15801561511e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151429190615449565b90508061514f838561599c565b615159919061588e565b9998505050505050505050565b6000806151738487615857565b91506133358386615857565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b80516001600160a81b0381168114614aa157600080fd5b805161ffff81168114614aa157600080fd5b805160ff81168114614aa157600080fd5b600060208284031215615216578081fd5b813561297781615a39565b600060208284031215615232578081fd5b815161297781615a39565b6000806040838503121561524f578081fd5b823561525a81615a39565b9150602083013561526a81615a39565b809150509250929050565b600080600080600060a0868803121561528c578081fd5b853561529781615a39565b945060208601356152a781615a5f565b935060408601356152b781615a5f565b94979396509394606081013594506080013592915050565b600080604083850312156152e1578182fd5b82356152ec81615a39565b946020939093013593505050565b6000806000806080858703121561530f578182fd5b843561531a81615a39565b9350602085013561532a81615a51565b93969395505050506040820135916060013590565b600080600060608486031215615353578081fd5b833561535e81615a39565b925060208401359150604084013561537581615a51565b809150509250925092565b60008060408385031215615392578182fd5b61539b836151cb565b9150613120602084016151e2565b600080600080600060a086880312156153c0578283fd5b6153c9866151cb565b94506153d7602087016151f4565b935060408601516153e781615a5f565b60608701519093506153f881615a5f565b608087015190925061540981615a5f565b809150509295509295909350565b600060208284031215615428578081fd5b612977826151e2565b600060208284031215615442578081fd5b5035919050565b60006020828403121561545a578081fd5b5051919050565b60008060008060008060c08789031215615479578384fd5b86519550602087015161548b81615a51565b9450615499604088016151cb565b93506154a7606088016151f4565b92506080870151915060a087015190509295509295509295565b600080604083850312156154d3578182fd5b505080516020909101519092909150565b60008060008060008060c087890312156154fc578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b60006020828403121561553e578081fd5b815161297781615a5f565b60008060006060848603121561555d578081fd5b835161556881615a5f565b602085015190935069ffffffffffffffffffff81168114615587578182fd5b80925050604084015190509250925092565b6000602082840312156155aa578081fd5b612977826151f4565b60008060008060008060008060006101208a8c0312156155d1578687fd5b6155da8a6151f4565b98506155e860208b016151cb565b97506155f660408b016151e2565b965061560460608b016151e2565b955060808a015161561481615a39565b60a08b015190955061562581615a5f565b60c08b015190945061563681615a5f565b60e08b015190935061564781615a51565b91506156566101008b016151e2565b90509295985092959850929598565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b828110156156df57878503603f19018452815180518087529087019087870190895b818110156156c9578351835292890192918901916001016156ad565b509096505050928501929085019060010161568b565b5092979650505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60a08101610630828480518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b815160ff1681526020808301516001600160a81b0316908201526040808301516101208301916157a89084018261ffff169052565b5060608301516157be606084018261ffff169052565b5060808301516157d960808401826001600160a01b03169052565b5060a08301516157f160a084018263ffffffff169052565b5060c083015161580960c084018263ffffffff169052565b5060e083015161581d60e084018215159052565b506101009283015161ffff16919092015290565b600061ffff80831681851680830382111561584e5761584e615a23565b01949350505050565b6000821982111561586a5761586a615a23565b500190565b600063ffffffff80831681851680830382111561584e5761584e615a23565b6000826158a957634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156158e95781600019048211156158cf576158cf615a23565b808516156158dc57918102915b93841c93908002906158b3565b509250929050565b600061297760ff84168360008261590a57506001610630565b8161591757506000610630565b816001811461592d576002811461593757615953565b6001915050610630565b60ff84111561594857615948615a23565b50506001821b610630565b5060208310610133831016604e8410600b8410161715615976575081810a610630565b61598083836158ae565b806000190482111561599457615994615a23565b029392505050565b60008160001904831182151516156159b6576159b6615a23565b500290565b600063ffffffff808316818516818304811182151516156159de576159de615a23565b02949350505050565b6000828210156159f9576159f9615a23565b500390565b600063ffffffff83811690831681811015615a1b57615a1b615a23565b039392505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114615a4e57600080fd5b50565b8015158114615a4e57600080fd5b63ffffffff81168114615a4e57600080fdfea2646970667358221220bf0900e1e2b1f497dd80fd16de8acc5cacd27731a651e207b4b204455331a48464736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80636c479457116100a2578063ca40742c11610071578063ca40742c146102d0578063e76740f8146102e3578063e7ab99d41461034c578063ea7f4e1f1461035f578063ea886bd11461037257600080fd5b80636c479457146102775780638e9345d21461028a578063ba3f6bd81461029d578063c988abec146102b057600080fd5b8063188e45b1116100e9578063188e45b1146102015780632c7d9c7a14610214578063485cc9551461022757806354c103941461023c5780636b522aa91461026457600080fd5b8063012b31a81461011b57806306823e5b146101445780630e5444e414610167578063115b8adf1461017d575b600080fd5b61012e6101293660046152fa565b610385565b60405161013b919061573a565b60405180910390f35b6101576101523660046152cf565b61043c565b604051901515815260200161013b565b61016f610636565b60405190815260200161013b565b61019061018b36600461533f565b610790565b60405161013b9190600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e0830151151560e0830152610100808401511515818401525092915050565b61016f61020f366004615431565b610b68565b61016f610222366004615431565b610ddc565b61023a61023536600461523d565b611031565b005b61024f61024a366004615205565b6110e1565b6040805192835260208301919091520161013b565b61016f610272366004615205565b611300565b61016f610285366004615205565b611555565b61016f610298366004615205565b61176e565b61024f6102ab366004615205565b6119d6565b6102c36102be366004615275565b611db3565b60405161013b9190615665565b61016f6102de366004615205565b6123d6565b6102f66102f13660046152fa565b6125bd565b60405161013b9190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b61016f61035a366004615205565b6127bc565b61016f61036d366004615205565b61297e565b61012e61038036600461533f565b612b43565b6103b76040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60006103c38685612db1565b604084018190529091506103d790826159e7565b602083018190526103ec908790879086613129565b60808401819052606084018290526020840151909161040a916159e7565b61041491906159e7565b602083018190528190610427908661599c565b610431919061588e565b825250949350505050565b600080836001600160a01b03166361176a0e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561047857600080fd5b505afa15801561048c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b09190615221565b6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b1580156104e857600080fd5b505afa1580156104fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105209190615221565b90506000816001600160a01b0316632f811c226040518163ffffffff1660e01b815260040160206040518083038186803b15801561055d57600080fd5b505afa158015610571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105959190615449565b90506000826001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d257600080fd5b505afa1580156105e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060a9190615449565b9050610617868383613340565b9092509050610628868383886135b0565b101593505050505b92915050565b600080546001546040516370a0823160e01b81526001600160a01b0391821660048201528392620100009004909116906370a082319060240160206040518083038186803b15801561068757600080fd5b505afa15801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf9190615449565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316638f10369a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561071157600080fd5b505afa158015610725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107499190615449565b610756906201518061599c565b6107629061016d61599c565b9050811561078657816107776127108361599c565b610781919061588e565b610789565b60005b9250505090565b6107e3604051806101200160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b6107eb61517f565b60405163103a258b60e31b8152600481018590526001600160a01b038616906381d12c58906024016101206040518083038186803b15801561082c57600080fd5b505afa158015610840573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086491906155b3565b61ffff166101008a0152151560e089015263ffffffff90811660c08901521660a08701525050506001600160a81b0316602083015260ff168082526001146108e85760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081c995c5d595cdd081a5960721b60448201526064015b60405180910390fd5b600061091c868584602001516001600160a81b03168560a001518660c0015161091191906159fe565b63ffffffff16613129565b60c08501526020830151909150610941908790869085906001600160a81b03166135fe565b60a0840181905260c084015160208401516109669084906001600160a81b03166159e7565b61097091906159e7565b61097a91906159e7565b835260208201516109959087906001600160a81b031661382f565b6040860152608085018190526060850182905284516001600160a81b03918216926109c19216906159e7565b6109cb91906159e7565b83526020820151606084015160808501516109f39289926001600160a81b0390911691614356565b151560e086015250506101008083015160408086015161ffff9092169091119185019190915280516318160ddd60e01b815290516000916001600160a01b038916916318160ddd91600480820192602092909190829003018186803b158015610a5b57600080fd5b505afa158015610a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a939190615449565b90506000610aa088614847565b9050600082118015610ab25750600081115b15610ada5784518190610ac690849061599c565b610ad0919061588e565b6020860152610b5d565b876001600160a01b0316638eb50a386040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1357600080fd5b505afa158015610b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4b9190615449565b8551610b57919061599c565b60208601525b505050509392505050565b600080546001546040516370a0823160e01b81526001600160a01b0391821660048201528392620100009004909116906370a082319060240160206040518083038186803b158015610bb957600080fd5b505afa158015610bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf19190615449565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663c8f33c916040518163ffffffff1660e01b815260040160206040518083038186803b158015610c4357600080fd5b505afa158015610c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b9190615449565b610c8590426159e7565b600160009054906101000a90046001600160a01b03166001600160a01b0316638f10369a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cd357600080fd5b505afa158015610ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0b9190615449565b610d15919061599c565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d6757600080fd5b505afa158015610d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9f9190615449565b90506000610dad8385615857565b1115610dd457610dbd8284615857565b610dc7828761599c565b610dd1919061588e565b93505b505050919050565b600080546001546040516370a0823160e01b81526001600160a01b0391821660048201528392620100009004909116906370a082319060240160206040518083038186803b158015610e2d57600080fd5b505afa158015610e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e659190615449565b90506000600160009054906101000a90046001600160a01b03166001600160a01b031663c8f33c916040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb757600080fd5b505afa158015610ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eef9190615449565b610ef990426159e7565b600160009054906101000a90046001600160a01b03166001600160a01b0316638f10369a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4757600080fd5b505afa158015610f5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7f9190615449565b610f89919061599c565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fdb57600080fd5b505afa158015610fef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110139190615449565b90508015610dd45780856110278486615857565b610dc7919061599c565b600061103d6001614a19565b90508015611055576000805461ff0019166101001790555b6000805462010000600160b01b031916620100006001600160a01b038681169190910291909117909155600180546001600160a01b03191691841691909117905580156110dc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001546040516370a0823160e01b81526001600160a01b03838116600483015260009283923092632c7d9c7a9216906370a082319060240160206040518083038186803b15801561113157600080fd5b505afa158015611145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111699190615449565b6040518263ffffffff1660e01b815260040161118791815260200190565b60206040518083038186803b15801561119f57600080fd5b505afa1580156111b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d79190615449565b915081156112fb57600160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561122d57600080fd5b505afa158015611241573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112659190615449565b6001546040516370a0823160e01b81526001600160a01b0386811660048301526127109216906370a082319060240160206040518083038186803b1580156112ac57600080fd5b505afa1580156112c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e49190615449565b6112ee919061599c565b6112f8919061588e565b90505b915091565b6000816001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b15801561133b57600080fd5b505afa15801561134f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113739190615449565b6113805750612710919050565b816001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113b957600080fd5b505afa1580156113cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f19190615221565b6001600160a01b03166346b55fbb836001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b15801561143857600080fd5b505afa15801561144c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114709190615449565b846001600160a01b0316632f811c226040518163ffffffff1660e01b815260040160206040518083038186803b1580156114a957600080fd5b505afa1580156114bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e19190615449565b6040516001600160e01b031960e085901b1681526004810192909252602482015260440160206040518083038186803b15801561151d57600080fd5b505afa158015611531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106309190615449565b600080826001600160a01b0316636f7d78286040518163ffffffff1660e01b815260040160206040518083038186803b15801561159157600080fd5b505afa1580156115a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c99190615221565b6001600160a01b031663c1639a2b6040518163ffffffff1660e01b815260040160606040518083038186803b15801561160157600080fd5b505afa158015611615573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116399190615549565b50509050826001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561167657600080fd5b505afa15801561168a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ae9190615221565b6001600160a01b0316631bffac9f60405180604001604052806201518081526020018463ffffffff168152506116e386611300565b6040516001600160e01b031960e085901b1681528251600482015260209092015163ffffffff1660248301526044820152606401604080518083038186803b15801561172e57600080fd5b505afa158015611742573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176691906154c1565b949350505050565b600080826001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b1580156117aa57600080fd5b505afa1580156117be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e29190615221565b6001600160a01b0316636f7d78286040518163ffffffff1660e01b815260040160206040518083038186803b15801561181a57600080fd5b505afa15801561182e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118529190615221565b6001600160a01b031663c1639a2b6040518163ffffffff1660e01b815260040160606040518083038186803b15801561188a57600080fd5b505afa15801561189e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c29190615549565b505090506000806118d7856000806000614356565b5091509150846001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561191557600080fd5b505afa158015611929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194d9190615221565b6001600160a01b031663d934c20b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561198557600080fd5b505afa158015611999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bd919061552d565b63ffffffff168363ffffffff16838361102791906159e7565b6000806000836001600160a01b031663ad7a672f6040518163ffffffff1660e01b815260040160c06040518083038186803b158015611a1457600080fd5b505afa158015611a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4c91906154e4565b505050505090506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8e57600080fd5b505afa158015611aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac69190615449565b90506000856001600160a01b03166361176a0e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b0357600080fd5b505afa158015611b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3b9190615221565b6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015611b7357600080fd5b505afa158015611b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bab9190615221565b6001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b158015611be357600080fd5b505afa158015611bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1b9190615449565b90506000866001600160a01b03166361176a0e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c5857600080fd5b505afa158015611c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c909190615221565b6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015611cc857600080fd5b505afa158015611cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d009190615221565b6001600160a01b0316632f811c226040518163ffffffff1660e01b815260040160206040518083038186803b158015611d3857600080fd5b505afa158015611d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d709190615449565b611d7a90836159e7565b905081611d87848361599c565b611d91919061588e565b955082611d9e858861599c565b611da8919061588e565b945050505050915091565b6060611dbf83836159e7565b611dca906001615857565b67ffffffffffffffff811115611df057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611e2357816020015b6060815260200190600190039081611e0e5790505b5090506000835b8381116123cb576000611e3d88886159fe565b611e4890600161586f565b63ffffffff1667ffffffffffffffff811115611e7457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611e9d578160200160208202803683370190505b5090506000808a6001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b158015611edc57600080fd5b505afa158015611ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f149190615221565b6001600160a01b031663bb60672b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f4c57600080fd5b505afa158015611f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f849190615599565b611f919060ff168b6159bb565b90505b8a6001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b158015611fcd57600080fd5b505afa158015611fe1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120059190615221565b6001600160a01b031663bb60672b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561203d57600080fd5b505afa158015612051573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120759190615599565b6120829060ff168a6159bb565b63ffffffff168163ffffffff161161237b5760008b6001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120cf57600080fd5b505afa1580156120e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121079190615221565b6001600160a01b0316631bffac9f604051806040016040528062015180815260200185606461213691906159bb565b63ffffffff1681525060648f6001600160a01b03166360ebfee66040518163ffffffff1660e01b815260040160206040518083038186803b15801561217a57600080fd5b505afa15801561218e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b29190615449565b6121bc908a61599c565b6121c6919061588e565b6040516001600160e01b031960e085901b1681528251600482015260209092015163ffffffff1660248301526044820152606401604080518083038186803b15801561221157600080fd5b505afa158015612225573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224991906154c1565b9150508084848151811061226d57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152612283600184615857565b9250508a6001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122bf57600080fd5b505afa1580156122d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f79190615221565b6001600160a01b031663bb60672b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561232f57600080fd5b505afa158015612343573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123679190615599565b6123749060ff168261586f565b9050611f94565b508185858151811061239d57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526123b3600185615857565b935050506001816123c49190615857565b9050611e2a565b505095945050505050565b6000816001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b15801561241157600080fd5b505afa158015612425573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124499190615449565b6124565750612710919050565b816001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b15801561248f57600080fd5b505afa1580156124a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c79190615449565b826001600160a01b03166360ebfee66040518163ffffffff1660e01b815260040160206040518083038186803b15801561250057600080fd5b505afa158015612514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125389190615449565b836001600160a01b0316632f811c226040518163ffffffff1660e01b815260040160206040518083038186803b15801561257157600080fd5b505afa158015612585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a99190615449565b6125b3919061599c565b610630919061588e565b6125fd6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61260985858585613129565b60c0830181905260a083018290529061262290856159e7565b61262c91906159e7565b8152612638858461382f565b6040840152608083018190526060830182905282516001600160a81b0390911691612662916159e7565b61266c91906159e7565b8160000181815250506000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126b057600080fd5b505afa1580156126c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e89190615449565b905060006126f587614847565b90506000821180156127075750600081115b1561272f578251819061271b90849061599c565b612725919061588e565b60208401526127b2565b866001600160a01b0316638eb50a386040518163ffffffff1660e01b815260040160206040518083038186803b15801561276857600080fd5b505afa15801561277c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a09190615449565b83516127ac919061599c565b60208401525b5050949350505050565b600080826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127f857600080fd5b505afa15801561280c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128309190615449565b116128695760405162461bcd60e51b81526020600482015260096024820152684e6f20737570706c7960b81b60448201526064016108df565b600061287483614847565b9050826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156128af57600080fd5b505afa1580156128c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e79190615449565b836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561292057600080fd5b505afa158015612934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129589190615599565b61296390600a6158f1565b61296d908361599c565b612977919061588e565b9392505050565b6000806000836001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401604080518083038186803b1580156129bb57600080fd5b505afa1580156129cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f391906154c1565b91509150600082118015612a075750600081115b612a425760405162461bcd60e51b815260206004820152600c60248201526b4e6f206c697175696469747960a01b60448201526064016108df565b81846001600160a01b03166361176a0e6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a7c57600080fd5b505afa158015612a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab49190615221565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612aec57600080fd5b505afa158015612b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b249190615599565b612b2f90600a6158f1565b612b39908361599c565b611766919061588e565b612b756040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b612b7d61517f565b60405163103a258b60e31b8152600481018590526001600160a01b038616906381d12c58906024016101206040518083038186803b158015612bbe57600080fd5b505afa158015612bd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bf691906155b3565b50151560e089015263ffffffff90811660c08901521660a08701525050506001600160a81b0316602083015260ff16808252600214612c6c5760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081c995c5d595cdd081a5960721b60448201526064016108df565b6020810151604051631c70ca2960e01b81526001600160a81b0390911660048201526000906001600160a01b03871690631c70ca299060240160206040518083038186803b158015612cbd57600080fd5b505afa158015612cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf59190615449565b90506000612d038783612db1565b60408601819052909150612d1790826159e7565b6020850152612d28878685846135fe565b8460600181815250506000612d51888787602001518760a001518860c0015161091191906159fe565b60808701819052606087015160208801519293509091612d729084906159e7565b612d7c91906159e7565b612d8691906159e7565b602086018190528290612d99908561599c565b612da3919061588e565b855250929695505050505050565b600080836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ded57600080fd5b505afa158015612e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e259190615449565b612e2e85614847565b612e38908561599c565b612e42919061588e565b915061271061ffff16846001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015612e8457600080fd5b505afa158015612e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ebc9190615221565b6001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ef457600080fd5b505afa158015612f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2c9190615221565b6040516315435d0560e31b815260006004820152600160248201526001600160a01b03919091169063aa1ae8289060440160206040518083038186803b158015612f7557600080fd5b505afa158015612f89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fad9190615417565b856001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015612fe657600080fd5b505afa158015612ffa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301e9190615221565b6001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561305657600080fd5b505afa15801561306a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308e9190615221565b6001600160a01b03166350e0942b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156130c657600080fd5b505afa1580156130da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130fe9190615417565b6131089190615831565b6131169061ffff168461599c565b613120919061588e565b90509250929050565b60008061271061ffff16866001600160a01b0316636a9d11196040518163ffffffff1660e01b815260040160206040518083038186803b15801561316c57600080fd5b505afa158015613180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a49190615221565b6001600160a01b031663051a497b856040518263ffffffff1660e01b81526004016131d191815260200190565b60206040518083038186803b1580156131e957600080fd5b505afa1580156131fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132219190615417565b61322f9061ffff168661599c565b613239919061588e565b915084613247576000613335565b856001600160a01b0316636a9d11196040518163ffffffff1660e01b815260040160206040518083038186803b15801561328057600080fd5b505afa158015613294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b89190615221565b6001600160a01b031663591b36f7856040518263ffffffff1660e01b81526004016132e591815260200190565b60206040518083038186803b1580156132fd57600080fd5b505afa158015613311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133359190615449565b905094509492505050565b600080600061271061ffff16866001600160a01b031663293d09156040518163ffffffff1660e01b815260040160206040518083038186803b15801561338557600080fd5b505afa158015613399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133bd9190615417565b6133c990612710615831565b6133d79061ffff168761599c565b6133e1919061588e565b9050808411156134215760006133f782866159e7565b9050613404868683614aa6565b909450925061341587858584614abd565b90945092506135a79050565b600061342d85836159e7565b90506000806000896001600160a01b031663ad7a672f6040518163ffffffff1660e01b815260040160c06040518083038186803b15801561346d57600080fd5b505afa158015613481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134a591906154e4565b5094505093505092508381836134bb9190615857565b1180156135685750896001600160a01b0316637b5d6fe36040518163ffffffff1660e01b815260040160206040518083038186803b1580156134fc57600080fd5b505afa158015613510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135349190615417565b61ffff1683612710866135478587615857565b61355191906159e7565b61355b919061599c565b613565919061588e565b10155b156135a25760008061357a8c87614afb565b9150915061358a8b8b8484614e38565b909950975061359a898988614e51565b909950975050505b505050505b50935093915050565b60008060006135bf8785614e5e565b90506000806135ce8987614afb565b915091506135de88888484614e38565b90955093506135ee858585614aa6565b909a909950975050505050505050565b6000831580156137165750846001600160a01b0316636a9d11196040518163ffffffff1660e01b815260040160206040518083038186803b15801561364257600080fd5b505afa158015613656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061367a9190615221565b6001600160a01b031663ce521f266040518163ffffffff1660e01b815260040160206040518083038186803b1580156136b257600080fd5b505afa1580156136c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ea919061552d565b8360a001516136f9919061586f565b63ffffffff164211801561371657508260c0015163ffffffff1642105b156117665761271061ffff16856001600160a01b0316636a9d11196040518163ffffffff1660e01b815260040160206040518083038186803b15801561375b57600080fd5b505afa15801561376f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137939190615221565b6001600160a01b031663956872ca856040518263ffffffff1660e01b81526004016137be9190615773565b60206040518083038186803b1580156137d657600080fd5b505afa1580156137ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380e9190615417565b61381c9061ffff168461599c565b613826919061588e565b95945050505050565b600080600061271061ffff16856001600160a01b0316632c86d98e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561387457600080fd5b505afa158015613888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ac9190615599565b60ff16866001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b1580156138e857600080fd5b505afa1580156138fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139209190615221565b6001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561395857600080fd5b505afa15801561396c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139909190615221565b6001600160a01b031663a2028d976040518163ffffffff1660e01b815260040160206040518083038186803b1580156139c857600080fd5b505afa1580156139dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a009190615417565b613a0e9061ffff168761599c565b613a18919061599c565b613a22919061588e565b92506000856001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015613a5f57600080fd5b505afa158015613a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a979190615221565b6001600160a01b0316636f7d78286040518163ffffffff1660e01b815260040160206040518083038186803b158015613acf57600080fd5b505afa158015613ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b079190615221565b6001600160a01b031663c1639a2b6040518163ffffffff1660e01b815260040160606040518083038186803b158015613b3f57600080fd5b505afa158015613b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b779190615549565b505090506000866001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015613bb657600080fd5b505afa158015613bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bee9190615221565b6001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b158015613c2657600080fd5b505afa158015613c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c5e9190615449565b90506000876001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015613c9b57600080fd5b505afa158015613caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cd39190615221565b6001600160a01b0316632f811c226040518163ffffffff1660e01b815260040160206040518083038186803b158015613d0b57600080fd5b505afa158015613d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d439190615449565b905060008363ffffffff16896001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015613d8757600080fd5b505afa158015613d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dbf9190615221565b6001600160a01b031663d934c20b6040518163ffffffff1660e01b815260040160206040518083038186803b158015613df757600080fd5b505afa158015613e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e2f919061552d565b63ffffffff168a6001600160a01b0316632c86d98e6040518163ffffffff1660e01b815260040160206040518083038186803b158015613e6e57600080fd5b505afa158015613e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea69190615599565b60ff16613eb38a8c6159e7565b613ebd919061599c565b613ec7919061599c565b613ed1919061588e565b90506000818a6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015613f0f57600080fd5b505afa158015613f23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f479190615221565b6001600160a01b0316632f811c226040518163ffffffff1660e01b815260040160206040518083038186803b158015613f7f57600080fd5b505afa158015613f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fb79190615449565b613fc19190615857565b905060008a6001600160a01b0316632c86d98e6040518163ffffffff1660e01b815260040160206040518083038186803b158015613ffe57600080fd5b505afa158015614012573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140369190615599565b60ff166140438a8c6159e7565b61404d919061599c565b8b6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561408657600080fd5b505afa15801561409a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140be9190615221565b6001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b1580156140f657600080fd5b505afa15801561410a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061412e9190615449565b6141389190615857565b90508a6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561417357600080fd5b505afa158015614187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141ab9190615221565b6001600160a01b03166335a03bfa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156141e357600080fd5b505afa1580156141f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061421b9190615221565b6001600160a01b0316631437d6d48b8d6001600160a01b0316632c86d98e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561426357600080fd5b505afa158015614277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061429b9190615599565b6040516001600160e01b031960e085901b1681526001600160a81b03909216600483015260ff16602482015260448101889052606481018790526084810184905260a4810185905260c401604080518083038186803b1580156142fd57600080fd5b505afa158015614311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143359190615380565b999c6001600160a81b039091169b5061ffff90991699505050505050505050565b600080600080876001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561439557600080fd5b505afa1580156143a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143cd9190615221565b6001600160a01b0316636f7d78286040518163ffffffff1660e01b815260040160206040518083038186803b15801561440557600080fd5b505afa158015614419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061443d9190615221565b6001600160a01b031663c1639a2b6040518163ffffffff1660e01b815260040160606040518083038186803b15801561447557600080fd5b505afa158015614489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144ad9190615549565b505090506000886001600160a01b0316632c86d98e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156144ec57600080fd5b505afa158015614500573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145249190615599565b60ff1686614532898b6159e7565b61453c91906159e7565b614546919061599c565b905060008263ffffffff168a6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561458a57600080fd5b505afa15801561459e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145c29190615221565b6001600160a01b031663d934c20b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156145fa57600080fd5b505afa15801561460e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614632919061552d565b6146429063ffffffff168461599c565b61464c919061588e565b9050808a6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561468857600080fd5b505afa15801561469c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146c09190615221565b6001600160a01b0316632f811c226040518163ffffffff1660e01b815260040160206040518083038186803b1580156146f857600080fd5b505afa15801561470c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147309190615449565b61473a9190615857565b955086828b6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561477757600080fd5b505afa15801561478b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147af9190615221565b6001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b1580156147e757600080fd5b505afa1580156147fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061481f9190615449565b6148299190615857565b6148339190615857565b945084861193505050509450945094915050565b600080826001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561488357600080fd5b505afa158015614897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148bb9190615221565b60405163055f575160e41b81526001600160a01b038581166004830152919250600191600091908416906355f575109060240160a06040518083038186803b15801561490657600080fd5b505afa15801561491a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061493e91906153a9565b505050506001600160a81b03169050806000146149d9576040516329b2a60b60e21b81526001600160a01b03868116600483015284169063a6ca982c9060240160c06040518083038186803b15801561499657600080fd5b505afa1580156149aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149ce9190615461565b509397509194505050505b81610dd45760405162461bcd60e51b815260206004820152601060248201526f4e656761746976652062616c616e636560801b60448201526064016108df565b60008054610100900460ff1615614a60578160ff166001148015614a3c5750303b155b614a585760405162461bcd60e51b81526004016108df906156ec565b506000919050565b60005460ff808416911610614a875760405162461bcd60e51b81526004016108df906156ec565b506000805460ff191660ff92909216919091179055600190565b919050565b826000614ab383856159e7565b9050935093915050565b6000806000614acc8785614e5e565b9050600080614adb8987614afb565b91509150614aea888885614e51565b90955093506135ee85858484615166565b6000806000846001600160a01b03166361176a0e6040518163ffffffff1660e01b815260040160206040518083038186803b158015614b3957600080fd5b505afa158015614b4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b719190615221565b90506000816001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015614bae57600080fd5b505afa158015614bc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614be69190615221565b90506000866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015614c2357600080fd5b505afa158015614c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c5b9190615449565b90506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015614c9857600080fd5b505afa158015614cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614cd09190615449565b90506000886001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401604080518083038186803b158015614d0c57600080fd5b505afa158015614d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d4491906154c1565b509050600083614d54838b61599c565b614d5e919061588e565b90506000614d6b87614847565b60405163055f575160e41b81526001600160a01b0389811660048301529192506000918816906355f575109060240160a06040518083038186803b158015614db257600080fd5b505afa158015614dc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614dea91906153a9565b505050506001600160a81b03169050848184614e06919061599c565b614e10919061588e565b995084614e1d848461599c565b614e27919061588e565b985050505050505050509250929050565b600080614e4584876159e7565b915061333583866159e7565b826000614ab38385615857565b600080836001600160a01b03166361176a0e6040518163ffffffff1660e01b815260040160206040518083038186803b158015614e9a57600080fd5b505afa158015614eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ed29190615221565b6001600160a01b0316634bde38c86040518163ffffffff1660e01b815260040160206040518083038186803b158015614f0a57600080fd5b505afa158015614f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f429190615221565b90506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015614f7f57600080fd5b505afa158015614f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614fb79190615449565b6040516370a0823160e01b81526001600160a01b0387811660048301529192506000918416906370a082319060240160206040518083038186803b158015614ffe57600080fd5b505afa158015615012573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906150369190615449565b9050600082615045838861599c565b61504f919061588e565b604051630d9c362960e41b8152600160048201529091506000906001600160a01b0386169063d9c362909060240160206040518083038186803b15801561509557600080fd5b505afa1580156150a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906150cd9190615449565b90506000856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561510a57600080fd5b505afa15801561511e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151429190615449565b90508061514f838561599c565b615159919061588e565b9998505050505050505050565b6000806151738487615857565b91506133358386615857565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b80516001600160a81b0381168114614aa157600080fd5b805161ffff81168114614aa157600080fd5b805160ff81168114614aa157600080fd5b600060208284031215615216578081fd5b813561297781615a39565b600060208284031215615232578081fd5b815161297781615a39565b6000806040838503121561524f578081fd5b823561525a81615a39565b9150602083013561526a81615a39565b809150509250929050565b600080600080600060a0868803121561528c578081fd5b853561529781615a39565b945060208601356152a781615a5f565b935060408601356152b781615a5f565b94979396509394606081013594506080013592915050565b600080604083850312156152e1578182fd5b82356152ec81615a39565b946020939093013593505050565b6000806000806080858703121561530f578182fd5b843561531a81615a39565b9350602085013561532a81615a51565b93969395505050506040820135916060013590565b600080600060608486031215615353578081fd5b833561535e81615a39565b925060208401359150604084013561537581615a51565b809150509250925092565b60008060408385031215615392578182fd5b61539b836151cb565b9150613120602084016151e2565b600080600080600060a086880312156153c0578283fd5b6153c9866151cb565b94506153d7602087016151f4565b935060408601516153e781615a5f565b60608701519093506153f881615a5f565b608087015190925061540981615a5f565b809150509295509295909350565b600060208284031215615428578081fd5b612977826151e2565b600060208284031215615442578081fd5b5035919050565b60006020828403121561545a578081fd5b5051919050565b60008060008060008060c08789031215615479578384fd5b86519550602087015161548b81615a51565b9450615499604088016151cb565b93506154a7606088016151f4565b92506080870151915060a087015190509295509295509295565b600080604083850312156154d3578182fd5b505080516020909101519092909150565b60008060008060008060c087890312156154fc578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b60006020828403121561553e578081fd5b815161297781615a5f565b60008060006060848603121561555d578081fd5b835161556881615a5f565b602085015190935069ffffffffffffffffffff81168114615587578182fd5b80925050604084015190509250925092565b6000602082840312156155aa578081fd5b612977826151f4565b60008060008060008060008060006101208a8c0312156155d1578687fd5b6155da8a6151f4565b98506155e860208b016151cb565b97506155f660408b016151e2565b965061560460608b016151e2565b955060808a015161561481615a39565b60a08b015190955061562581615a5f565b60c08b015190945061563681615a5f565b60e08b015190935061564781615a51565b91506156566101008b016151e2565b90509295985092959850929598565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b828110156156df57878503603f19018452815180518087529087019087870190895b818110156156c9578351835292890192918901916001016156ad565b509096505050928501929085019060010161568b565b5092979650505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60a08101610630828480518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b815160ff1681526020808301516001600160a81b0316908201526040808301516101208301916157a89084018261ffff169052565b5060608301516157be606084018261ffff169052565b5060808301516157d960808401826001600160a01b03169052565b5060a08301516157f160a084018263ffffffff169052565b5060c083015161580960c084018263ffffffff169052565b5060e083015161581d60e084018215159052565b506101009283015161ffff16919092015290565b600061ffff80831681851680830382111561584e5761584e615a23565b01949350505050565b6000821982111561586a5761586a615a23565b500190565b600063ffffffff80831681851680830382111561584e5761584e615a23565b6000826158a957634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156158e95781600019048211156158cf576158cf615a23565b808516156158dc57918102915b93841c93908002906158b3565b509250929050565b600061297760ff84168360008261590a57506001610630565b8161591757506000610630565b816001811461592d576002811461593757615953565b6001915050610630565b60ff84111561594857615948615a23565b50506001821b610630565b5060208310610133831016604e8410600b8410161715615976575081810a610630565b61598083836158ae565b806000190482111561599457615994615a23565b029392505050565b60008160001904831182151516156159b6576159b6615a23565b500290565b600063ffffffff808316818516818304811182151516156159de576159de615a23565b02949350505050565b6000828210156159f9576159f9615a23565b500390565b600063ffffffff83811690831681811015615a1b57615a1b615a23565b039392505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114615a4e57600080fd5b50565b8015158114615a4e57600080fd5b63ffffffff81168114615a4e57600080fdfea2646970667358221220bf0900e1e2b1f497dd80fd16de8acc5cacd27731a651e207b4b204455331a48464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 34444,
        "contract": "@coti-cvi/contracts-cvi/contracts/PlatformHelper.sol:PlatformHelper",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 34447,
        "contract": "@coti-cvi/contracts-cvi/contracts/PlatformHelper.sol:PlatformHelper",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6286,
        "contract": "@coti-cvi/contracts-cvi/contracts/PlatformHelper.sol:PlatformHelper",
        "label": "govi",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IERC20)38763"
      },
      {
        "astId": 6289,
        "contract": "@coti-cvi/contracts-cvi/contracts/PlatformHelper.sol:PlatformHelper",
        "label": "staking",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IStaking)18732"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)38763": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IStaking)18732": {
        "encoding": "inplace",
        "label": "contract IStaking",
        "numberOfBytes": "20"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}