{
  "address": "0x6257Fb12e5aEa66eFa666dD7922744E7870dadCe",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmountBeforeFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnedTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "closePositionFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "closingPremiumFee",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fulfillFeesAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAborted",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "useKeepers",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "keepersCalled",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fulfiller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "fulfillTimestamp",
          "type": "uint32"
        }
      ],
      "name": "FulfillRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "findersFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "useKeepers",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "liquidateTimestamp",
          "type": "uint32"
        }
      ],
      "name": "LiquidateRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionedTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openPositionFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyingPremiumFee",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevScalingFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newScalingFactor",
          "type": "uint256"
        }
      ],
      "name": "Rebase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "submitFeesAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "requestTimestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "targetTimestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "useKeepers",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "maxBuyingPremiumFeePercentage",
          "type": "uint16"
        }
      ],
      "name": "SubmitRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BURN_REQUEST_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CVI_DECIMALS_FIX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DELTA_PRECISION_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_REQUEST_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SCALING_FACTOR_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        }
      ],
      "name": "__ElasticToken_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint168",
          "name": "burnAmount",
          "type": "uint168"
        }
      ],
      "name": "burnTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cappedRebase",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cviOracle",
      "outputs": [
        {
          "internalType": "contract ICVIOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deviationPerSingleRebaseLag",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesCalculator",
      "outputs": [
        {
          "internalType": "contract IFeesCalculator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesCollector",
      "outputs": [
        {
          "internalType": "contract IFeesCollector",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_keepersCalled",
          "type": "bool"
        }
      ],
      "name": "fulfillBurnRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensReceived",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_maxBuyingPremiumFeePercentage",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_keepersCalled",
          "type": "bool"
        }
      ],
      "name": "fulfillMintRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensMinted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fulfiller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialTokenToLPTokenRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_lpTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_lpTokenSymbolName",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_leverage",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_initialTokenToVolTokenRate",
          "type": "uint256"
        },
        {
          "internalType": "contract IPlatform",
          "name": "_platform",
          "type": "address"
        },
        {
          "internalType": "contract IFeesCollector",
          "name": "_feesCollector",
          "type": "address"
        },
        {
          "internalType": "contract IFeesCalculator",
          "name": "_feesCalculator",
          "type": "address"
        },
        {
          "internalType": "contract IRequestFeesCalculator",
          "name": "_requestFeesCalculator",
          "type": "address"
        },
        {
          "internalType": "contract ICVIOracle",
          "name": "_cviOracle",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepersFeeVaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leverage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "liquidateRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "findersFeeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDeviationPercentage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMinRequestIncrements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxScalingFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTotalRequestsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDeviationPercentage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minKeepersBurnAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minKeepersMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint168",
          "name": "tokenAmount",
          "type": "uint168"
        }
      ],
      "name": "mintTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mintedTokens",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platform",
      "outputs": [
        {
          "internalType": "contract IPlatform",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebaseCVI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebaser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestFeesCalculator",
      "outputs": [
        {
          "internalType": "contract IRequestFeesCalculator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "internalType": "uint168",
          "name": "tokenAmount",
          "type": "uint168"
        },
        {
          "internalType": "uint16",
          "name": "timeDelayRequestFeesPercent",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "maxRequestFeesPercent",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "requestTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "targetTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "useKeepers",
          "type": "bool"
        },
        {
          "internalType": "uint16",
          "name": "maxBuyingPremiumFeePercentage",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scalingFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICVIOracle",
          "name": "_newCVIOracle",
          "type": "address"
        }
      ],
      "name": "setCVIOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_newCappedRebase",
          "type": "bool"
        }
      ],
      "name": "setCappedRebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newDeviationPercentagePerSingleRebaseLag",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_newMinDeviationPercentage",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_newMaxDeviationPercentage",
          "type": "uint16"
        }
      ],
      "name": "setDeviationParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFeesCalculator",
          "name": "_newFeesCalculator",
          "type": "address"
        }
      ],
      "name": "setFeesCalculator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFeesCollector",
          "name": "_newCollector",
          "type": "address"
        }
      ],
      "name": "setFeesCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fulfiller",
          "type": "address"
        }
      ],
      "name": "setFulfiller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newKeepersFeeVaultAddress",
          "type": "address"
        }
      ],
      "name": "setKeepersFeeVaultAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMaxMinRequestIncrements",
          "type": "uint256"
        }
      ],
      "name": "setMaxMinRequestIncrements",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxTotalRequestsAmount",
          "type": "uint256"
        }
      ],
      "name": "setMaxTotalRequestsAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMinKeepersMintAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newMinKeepersBurnAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinKeepersAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMinRequestId",
          "type": "uint256"
        }
      ],
      "name": "setMinRequestId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newMinter",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_newSymbol",
          "type": "string"
        }
      ],
      "name": "setNameAndSymbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPlatform",
          "name": "_newPlatform",
          "type": "address"
        }
      ],
      "name": "setPlatform",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rebaser",
          "type": "address"
        }
      ],
      "name": "setRebaser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRequestFeesCalculator",
          "name": "_newRequestFeesCalculator",
          "type": "address"
        }
      ],
      "name": "setRequestFeesCalculator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_verifyTotalRequestsAmount",
          "type": "bool"
        }
      ],
      "name": "setVerifyTotalRequestsAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint168",
          "name": "_tokenAmount",
          "type": "uint168"
        },
        {
          "internalType": "uint32",
          "name": "_timeDelay",
          "type": "uint32"
        }
      ],
      "name": "submitBurnRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint168",
          "name": "_tokenAmount",
          "type": "uint168"
        },
        {
          "internalType": "uint32",
          "name": "_timeDelay",
          "type": "uint32"
        }
      ],
      "name": "submitKeepersBurnRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint168",
          "name": "_tokenAmount",
          "type": "uint168"
        },
        {
          "internalType": "uint32",
          "name": "_timeDelay",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_maxBuyingPremiumFeePercentage",
          "type": "uint16"
        }
      ],
      "name": "submitKeepersMintRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint168",
          "name": "_tokenAmount",
          "type": "uint168"
        },
        {
          "internalType": "uint32",
          "name": "_timeDelay",
          "type": "uint32"
        }
      ],
      "name": "submitMintRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRequestsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unerlyingValue",
          "type": "uint256"
        }
      ],
      "name": "underlyingToValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "valueToUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifyTotalRequestsAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1b627f8dae059abc9562bc1a6c424927e496bffd97d36186ef8d7aa6f8524691",
  "receipt": {
    "to": null,
    "from": "0x0b3D7b3F149214f8f5281b5aE613B090fD39BD3F",
    "contractAddress": "0x6257Fb12e5aEa66eFa666dD7922744E7870dadCe",
    "transactionIndex": 1,
    "gasUsed": "25350647",
    "logsBloom": "0x
    "blockHash": "0x24b47df3a7759cca05fab6c4744c7116bea04c9a04e4fe60bce457ca8b691d94",
    "transactionHash": "0x1b627f8dae059abc9562bc1a6c424927e496bffd97d36186ef8d7aa6f8524691",
    "logs": [],
    "blockNumber": 62383618,
    "cumulativeGasUsed": "25350647",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "8eb1c0ef5b727899c736a7d3253acc1a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountBeforeFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closePositionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closingPremiumFee\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fulfillFeesAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAborted\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useKeepers\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"keepersCalled\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fulfiller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fulfillTimestamp\",\"type\":\"uint32\"}],\"name\":\"FulfillRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"findersFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useKeepers\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"liquidateTimestamp\",\"type\":\"uint32\"}],\"name\":\"LiquidateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionedTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openPositionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyingPremiumFee\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevScalingFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newScalingFactor\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"submitFeesAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"requestTimestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"targetTimestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useKeepers\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxBuyingPremiumFeePercentage\",\"type\":\"uint16\"}],\"name\":\"SubmitRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_REQUEST_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVI_DECIMALS_FIX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELTA_PRECISION_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_REQUEST_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALING_FACTOR_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"__ElasticToken_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint168\",\"name\":\"burnAmount\",\"type\":\"uint168\"}],\"name\":\"burnTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cappedRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cviOracle\",\"outputs\":[{\"internalType\":\"contract ICVIOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deviationPerSingleRebaseLag\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCalculator\",\"outputs\":[{\"internalType\":\"contract IFeesCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCollector\",\"outputs\":[{\"internalType\":\"contract IFeesCollector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_keepersCalled\",\"type\":\"bool\"}],\"name\":\"fulfillBurnRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_maxBuyingPremiumFeePercentage\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_keepersCalled\",\"type\":\"bool\"}],\"name\":\"fulfillMintRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fulfiller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTokenToLPTokenRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_lpTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_lpTokenSymbolName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_leverage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_initialTokenToVolTokenRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IPlatform\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"contract IFeesCollector\",\"name\":\"_feesCollector\",\"type\":\"address\"},{\"internalType\":\"contract IFeesCalculator\",\"name\":\"_feesCalculator\",\"type\":\"address\"},{\"internalType\":\"contract IRequestFeesCalculator\",\"name\":\"_requestFeesCalculator\",\"type\":\"address\"},{\"internalType\":\"contract ICVIOracle\",\"name\":\"_cviOracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepersFeeVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"liquidateRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"findersFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDeviationPercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMinRequestIncrements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxScalingFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalRequestsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeviationPercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minKeepersBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minKeepersMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint168\",\"name\":\"tokenAmount\",\"type\":\"uint168\"}],\"name\":\"mintTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintedTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"contract IPlatform\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseCVI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestFeesCalculator\",\"outputs\":[{\"internalType\":\"contract IRequestFeesCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"internalType\":\"uint168\",\"name\":\"tokenAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint16\",\"name\":\"timeDelayRequestFeesPercent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxRequestFeesPercent\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"requestTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"targetTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"useKeepers\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"maxBuyingPremiumFeePercentage\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scalingFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICVIOracle\",\"name\":\"_newCVIOracle\",\"type\":\"address\"}],\"name\":\"setCVIOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newCappedRebase\",\"type\":\"bool\"}],\"name\":\"setCappedRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newDeviationPercentagePerSingleRebaseLag\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_newMinDeviationPercentage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_newMaxDeviationPercentage\",\"type\":\"uint16\"}],\"name\":\"setDeviationParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeesCalculator\",\"name\":\"_newFeesCalculator\",\"type\":\"address\"}],\"name\":\"setFeesCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeesCollector\",\"name\":\"_newCollector\",\"type\":\"address\"}],\"name\":\"setFeesCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fulfiller\",\"type\":\"address\"}],\"name\":\"setFulfiller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newKeepersFeeVaultAddress\",\"type\":\"address\"}],\"name\":\"setKeepersFeeVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxMinRequestIncrements\",\"type\":\"uint256\"}],\"name\":\"setMaxMinRequestIncrements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTotalRequestsAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTotalRequestsAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinKeepersMintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMinKeepersBurnAmount\",\"type\":\"uint256\"}],\"name\":\"setMinKeepersAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinRequestId\",\"type\":\"uint256\"}],\"name\":\"setMinRequestId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newSymbol\",\"type\":\"string\"}],\"name\":\"setNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPlatform\",\"name\":\"_newPlatform\",\"type\":\"address\"}],\"name\":\"setPlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rebaser\",\"type\":\"address\"}],\"name\":\"setRebaser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRequestFeesCalculator\",\"name\":\"_newRequestFeesCalculator\",\"type\":\"address\"}],\"name\":\"setRequestFeesCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_verifyTotalRequestsAmount\",\"type\":\"bool\"}],\"name\":\"setVerifyTotalRequestsAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint168\",\"name\":\"_tokenAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint32\",\"name\":\"_timeDelay\",\"type\":\"uint32\"}],\"name\":\"submitBurnRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint168\",\"name\":\"_tokenAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint32\",\"name\":\"_timeDelay\",\"type\":\"uint32\"}],\"name\":\"submitKeepersBurnRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint168\",\"name\":\"_tokenAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint32\",\"name\":\"_timeDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_maxBuyingPremiumFeePercentage\",\"type\":\"uint16\"}],\"name\":\"submitKeepersMintRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint168\",\"name\":\"_tokenAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint32\",\"name\":\"_timeDelay\",\"type\":\"uint32\"}],\"name\":\"submitMintRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRequestsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unerlyingValue\",\"type\":\"uint256\"}],\"name\":\"underlyingToValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"valueToUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifyTotalRequestsAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/volatility-token/VolatilityTokenContracts.sol\":\"CVIUSDCVolatilityToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@coti-cvi/contracts-cvi/contracts/ElasticToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./interfaces/IElasticToken.sol\\\";\\n\\ncontract ElasticToken is IElasticToken, OwnableUpgradeable {\\n\\n    uint256 public constant SCALING_FACTOR_DECIMALS = 10**24;\\n    uint256 public constant DELTA_PRECISION_DECIMALS = 10**18;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n    uint256 public totalSupply;\\n\\n    uint256 public scalingFactor;\\n    uint256 public initSupply;\\n    address public rebaser;\\n\\n    mapping(address => uint256) internal _underlyingBalances;\\n    mapping(address => mapping(address => uint256)) internal _allowedFragments;\\n\\n    modifier onlyRebaser() {\\n        require(msg.sender == rebaser, \\\"Not allowed\\\");\\n        _;\\n    }\\n\\n    modifier validRecipient(address to) {\\n        require(to != address(0x0), \\\"Zero address\\\");\\n        _;\\n    }\\n\\n    function __ElasticToken_init(string memory name_, string memory symbol_, uint8 decimals_) public onlyInitializing {\\n        OwnableUpgradeable.__Ownable_init();\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        scalingFactor = SCALING_FACTOR_DECIMALS;\\n    }\\n\\n    function maxScalingFactor() public view override returns (uint256) {\\n        // Scaling factor can only go up to 2**256-1 = initSupply * scalingFactor\\n        return type(uint256).max / initSupply;\\n    }\\n\\n    function _mint(address to, uint256 amount) internal validRecipient(to) {\\n        _beforeTokenTransfer(address(0), to, amount);\\n\\n        totalSupply = totalSupply + amount;\\n        uint256 underlyingValue = valueToUnderlying(amount);\\n        initSupply = initSupply + underlyingValue;\\n\\n        // Make sure init suuply increase keeps scaling factor below max\\n        require(scalingFactor <= maxScalingFactor(), \\\"Max scaling factor too low\\\");\\n\\n        _underlyingBalances[to] = _underlyingBalances[to] + underlyingValue;\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address to, uint256 amount) internal validRecipient(to) {\\n        _beforeTokenTransfer(to, address(0), amount);\\n\\n        totalSupply = totalSupply - amount;\\n        uint256 underlyingValue = valueToUnderlying(amount);\\n\\n        // Note: as initSupply decreases, max sacling factor increases, so no need to test scaling factor against it\\n        initSupply = initSupply - underlyingValue;\\n\\n        _underlyingBalances[to] = _underlyingBalances[to] - underlyingValue;\\n\\n        emit Transfer(to, address(0), amount);\\n    }\\n\\n    function transfer(address to, uint256 value) external override validRecipient(to) returns (bool) {\\n        // Note: As scaling factor grows, dust will be untransferrable\\n        // Minimum transfer value == scalingFactor / 1e24;\\n\\n        _beforeTokenTransfer(msg.sender, to, value);\\n\\n        uint256 underlyingValue = valueToUnderlying(value);\\n        _underlyingBalances[msg.sender] = _underlyingBalances[msg.sender] - underlyingValue;\\n        _underlyingBalances[to] = _underlyingBalances[to] + underlyingValue;\\n        emit Transfer(msg.sender, to, value);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 value) external override validRecipient(from) validRecipient(to) returns (bool) {\\n        _beforeTokenTransfer(from, to, value);\\n\\n        _allowedFragments[from][msg.sender] = _allowedFragments[from][msg.sender] - value;\\n\\n        uint256 underlyingValue = valueToUnderlying(value);\\n        _underlyingBalances[from] = _underlyingBalances[from] - underlyingValue;\\n        _underlyingBalances[to] = _underlyingBalances[to] + underlyingValue;\\n        emit Transfer(from, to, value);\\n\\n        return true;\\n    }\\n\\n    function balanceOf(address who) public view override returns (uint256) {\\n      return underlyingToValue(_underlyingBalances[who]);\\n    }\\n\\n    function balanceOfUnderlying(address who) external view override returns (uint256) {\\n      return _underlyingBalances[who];\\n    }\\n\\n    function allowance(address owner_, address spender) external view override returns (uint256) {\\n        return _allowedFragments[owner_][spender];\\n    }\\n\\n    function approve(address spender, uint256 value) external override returns (bool) {\\n        _allowedFragments[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external override returns (bool) {\\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][spender] + addedValue;\\n        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external override returns (bool) {\\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\\n        if (subtractedValue >= oldValue) {\\n            _allowedFragments[msg.sender][spender] = 0;\\n        } else {\\n            _allowedFragments[msg.sender][spender] = oldValue - subtractedValue;\\n        }\\n        emit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    function setRebaser(address _rebaser) external override onlyOwner {\\n        rebaser = _rebaser;\\n    }\\n\\n    /**\\n    * @dev The supply adjustment equals (totalSupply * DeviationFromTargetRate) / rebaseLag\\n    *      Where DeviationFromTargetRate is (MarketOracleRate - targetRate) / targetRate\\n    *      and targetRate is CpiOracleRate / baseCpi\\n    */\\n    function rebase(uint256 indexDelta, bool positive) internal onlyRebaser returns (uint256) {        \\n        if (indexDelta == 0) {\\n          emit Rebase(block.timestamp, scalingFactor, scalingFactor);\\n          return totalSupply;\\n        }\\n\\n        uint256 prevScalingFactor = scalingFactor;\\n\\n        if (!positive) {\\n            // Negative rebase, decrease scaling factor\\n            scalingFactor = scalingFactor * (DELTA_PRECISION_DECIMALS - indexDelta) / DELTA_PRECISION_DECIMALS;\\n        } else {\\n            // Positive reabse, increase scaling factor\\n            uint256 newScalingFactor = scalingFactor * (DELTA_PRECISION_DECIMALS + indexDelta) / DELTA_PRECISION_DECIMALS;\\n            if (newScalingFactor < maxScalingFactor()) {\\n                scalingFactor = newScalingFactor;\\n            } else {\\n                scalingFactor = maxScalingFactor();\\n            }\\n        }\\n\\n        totalSupply = underlyingToValue(initSupply);\\n\\n        emit Rebase(block.timestamp, prevScalingFactor, scalingFactor);\\n        return totalSupply;\\n    }\\n\\n    function underlyingToValue(uint256 unerlyingValue) public override view returns (uint256) {\\n        return unerlyingValue * scalingFactor / SCALING_FACTOR_DECIMALS;\\n    }\\n\\n    function valueToUnderlying(uint256 value) public override view returns (uint256) {\\n        return value * SCALING_FACTOR_DECIMALS / scalingFactor;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0x662a134bb3baf9b4fa2bad695b1d0b9d6557617ccf67d79845fd0eea6b22e765\",\"license\":\"GPL-3.0-or-later\"},\"@coti-cvi/contracts-cvi/contracts/VolatilityToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./interfaces/IVolatilityToken.sol\\\";\\nimport \\\"./interfaces/IRequestManager.sol\\\";\\nimport \\\"./ElasticToken.sol\\\";\\n\\ncontract VolatilityToken is Initializable, IVolatilityToken, IRequestManager, ReentrancyGuardUpgradeable, ElasticToken {\\n\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    uint8 public constant MINT_REQUEST_TYPE = 1;\\n    uint8 public constant BURN_REQUEST_TYPE = 2;\\n\\n    uint16 public constant MAX_PERCENTAGE = 10000;\\n\\n    uint8 public override leverage; // Obsolete\\n    uint8 private rebaseLag; // Obsolete\\n\\n    uint16 public minDeviationPercentage;\\n\\n    uint256 public override initialTokenToLPTokenRate;\\n\\n    IERC20Upgradeable public token;\\n    IPlatform public override platform;\\n    IFeesCollector public feesCollector;\\n    IFeesCalculator public feesCalculator;\\n    IRequestFeesCalculator public override requestFeesCalculator;\\n    ICVIOracle public cviOracle;\\n\\n    uint256 public override nextRequestId;\\n\\n    mapping(uint256 => Request) public override requests;\\n\\n    uint256 public totalRequestsAmount;\\n    uint256 public maxTotalRequestsAmount;\\n    bool public verifyTotalRequestsAmount;\\n\\n    uint16 public deviationPerSingleRebaseLag;\\n    uint16 public maxDeviationPercentage;\\n\\n    bool public cappedRebase;\\n\\n    uint256 public constant PRECISION_DECIMALS = 1e10;\\n    uint256 public constant CVI_DECIMALS_FIX = 100;\\n\\n    uint256 public override minRequestId;\\n    uint256 public override maxMinRequestIncrements;\\n\\n    address public fulfiller;\\n\\n    address public keepersFeeVaultAddress;\\n\\n    uint256 public minKeepersMintAmount;\\n    uint256 public minKeepersBurnAmount;\\n    \\n    address public minter;\\n\\n    function initialize(IERC20Upgradeable _token, string memory _lpTokenName, string memory _lpTokenSymbolName, uint8 _leverage, uint256 _initialTokenToVolTokenRate, \\n            IPlatform _platform, IFeesCollector _feesCollector, IFeesCalculator _feesCalculator, IRequestFeesCalculator _requestFeesCalculator, ICVIOracle _cviOracle) public initializer {\\n        minDeviationPercentage = 100;\\n        deviationPerSingleRebaseLag = 1000;\\n        maxDeviationPercentage = 5000;\\n        cappedRebase = true;\\n\\n        nextRequestId = 1;\\n        minRequestId = 1;\\n\\n        maxMinRequestIncrements = 30;\\n\\n        ElasticToken.__ElasticToken_init(_lpTokenName, _lpTokenSymbolName, 18);\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n\\n        token = _token;\\n        platform = _platform;\\n        feesCollector = _feesCollector;\\n        feesCalculator = _feesCalculator;\\n        requestFeesCalculator = _requestFeesCalculator;\\n        cviOracle = _cviOracle;\\n        initialTokenToLPTokenRate = _initialTokenToVolTokenRate;\\n        leverage = _leverage;\\n\\n        totalRequestsAmount = 0;\\n        maxTotalRequestsAmount = 1e11;\\n        verifyTotalRequestsAmount = true;\\n\\n        if (address(token) != address(0)) {\\n            token.safeApprove(address(_platform), type(uint256).max);\\n            token.safeApprove(address(_feesCollector), type(uint256).max);\\n        }\\n    }\\n\\n    // If not rebaser, the rebase underlying method will revert\\n    function rebaseCVI() external override {\\n        (uint256 balance, bool isBalancePositive,,,,) = platform.calculatePositionBalance(address(this));\\n        require(isBalancePositive, \\\"Negative balance\\\");\\n\\n        // Note: the price is measured by token units, so we want its decimals on the position value as well, as precision decimals\\n        // We use the rate multiplication to have balance / totalSupply be done with matching decimals\\n        uint256 positionValue = balance * initialTokenToLPTokenRate * PRECISION_DECIMALS / totalSupply;\\n\\n        (uint256 cviValueOracle,,) = cviOracle.getCVILatestRoundData();\\n        uint256 cviValue = cviValueOracle * PRECISION_DECIMALS / CVI_DECIMALS_FIX;\\n\\n        require(cviValue > positionValue, \\\"Positive rebase disallowed\\\");\\n        uint256 deviation = cviValue - positionValue;\\n\\n        require(!cappedRebase || deviation >= cviValue * minDeviationPercentage / MAX_PERCENTAGE, \\\"Not enough deviation\\\");\\n        require(!cappedRebase || deviation <= cviValue * maxDeviationPercentage / MAX_PERCENTAGE, \\\"Deviation too big\\\");\\n\\n        // Note: rounding up (ceiling) the rebase lag so it is >= 1 and bumps by 1 for every deviationPerSingleRebaseLag percentage\\n        uint256 rebaseLagNew = cappedRebase ? (deviation * MAX_PERCENTAGE - 1) / (cviValue * deviationPerSingleRebaseLag) + 1 : 1;\\n\\n        if (rebaseLagNew > 1) {\\n            deviation = deviation / rebaseLagNew;\\n            cviValue = positionValue + deviation;\\n        }\\n\\n        uint256 delta = DELTA_PRECISION_DECIMALS * deviation / cviValue;\\n\\n        rebase(delta, false);\\n    }\\n\\n    function setNameAndSymbol(string memory _newName, string memory _newSymbol) external onlyOwner {\\n        name = _newName;\\n        symbol = _newSymbol;\\n    }\\n\\n    function submitMintRequest(uint168 _tokenAmount, uint32 _timeDelay) external virtual override returns (uint256 requestId) {\\n        requireTotalRequestsAmount(_tokenAmount);\\n        return submitRequest(MINT_REQUEST_TYPE, _tokenAmount, _timeDelay, false, 0);\\n    }\\n\\n    function submitKeepersMintRequest(uint168 _tokenAmount, uint32 _timeDelay, uint16 _maxBuyingPremiumFeePercentage) external override returns (uint256 requestId) {\\n        requireTotalRequestsAmount(_tokenAmount);\\n        require(_tokenAmount >= minKeepersMintAmount, \\\"Not enough tokens\\\");\\n        return submitRequest(MINT_REQUEST_TYPE, _tokenAmount, _timeDelay, true, _maxBuyingPremiumFeePercentage);\\n    }\\n\\n    function submitBurnRequest(uint168 _tokenAmount, uint32 _timeDelay) external override returns (uint256 requestId) {\\n        return submitRequest(BURN_REQUEST_TYPE, _tokenAmount, _timeDelay, false, 0);\\n    }\\n\\n    function submitKeepersBurnRequest(uint168 _tokenAmount, uint32 _timeDelay) external override returns (uint256 requestId) {\\n        require(_tokenAmount >= minKeepersBurnAmount, \\\"Not enough tokens\\\");\\n        return submitRequest(BURN_REQUEST_TYPE, _tokenAmount, _timeDelay, true, 0);\\n    }\\n\\n    function fulfillMintRequest(uint256 _requestId, uint16 _maxBuyingPremiumFeePercentage, bool _keepersCalled) public virtual override returns (uint256 tokensMinted, bool success) {\\n        require(!_keepersCalled || msg.sender == fulfiller); // Not allowed\\n        Request memory request = requests[_requestId];\\n        return _fulfillMintRequest(_requestId, request, _maxBuyingPremiumFeePercentage, _keepersCalled);\\n    }\\n\\n    function fulfillBurnRequest(uint256 _requestId,  bool _keepersCalled) external override returns (uint256 tokensReceived) {\\n        require(!_keepersCalled || msg.sender == fulfiller); // Not allowed\\n        Request memory request = requests[_requestId];\\n        return _fulfillBurnRequest(_requestId, request, _keepersCalled);\\n    }\\n\\n    function mintTokens(uint168 tokenAmount) external override returns (uint256 mintedTokens) {\\n        require(msg.sender == minter);\\n        token.safeTransferFrom(msg.sender, address(this), tokenAmount);\\n        (mintedTokens,) = mintTokens(0, msg.sender, tokenAmount, MAX_PERCENTAGE, false, false);\\n    }\\n\\n    function burnTokens(uint168 burnAmount) external override returns (uint256 tokenAmount) {\\n        require(msg.sender == minter);\\n        IERC20Upgradeable(address(this)).safeTransferFrom(msg.sender, address(this), underlyingToValue(valueToUnderlying(uint256(burnAmount))));\\n        (tokenAmount,) = burnTokens(0, msg.sender, burnAmount, 0, 0, false, false);\\n    }\\n\\n    function liquidateRequest(uint256 _requestId) external override nonReentrant returns (uint256 findersFeeAmount) {\\n        Request memory request = requests[_requestId];\\n        require(request.requestType != 0, \\\"Request id not found\\\");\\n        require(requestFeesCalculator.isLiquidable(request), \\\"Not liquidable\\\");\\n        findersFeeAmount = _liquidateRequest(_requestId, request);\\n    }\\n\\n    function setMinter(address _newMinter) external override onlyOwner {\\n        minter = _newMinter;\\n    }\\n\\n    function setPlatform(IPlatform _newPlatform) external override onlyOwner {\\n        if (address(platform) != address(0) && address(token) != address(0)) {\\n            token.safeApprove(address(platform), type(uint256).max);\\n        }\\n\\n        platform = _newPlatform;\\n\\n        if (address(_newPlatform) != address(0) && address(token) != address(0)) {\\n            token.safeApprove(address(_newPlatform), type(uint256).max);\\n        }\\n    }\\n\\n    function setFeesCalculator(IFeesCalculator _newFeesCalculator) external override onlyOwner {\\n        feesCalculator = _newFeesCalculator;\\n    }\\n\\n    function setFeesCollector(IFeesCollector _newCollector) external override onlyOwner {\\n        if (address(feesCollector) != address(0) && address(token) != address(0)) {\\n            token.safeApprove(address(feesCollector), 0);\\n        }\\n\\n        feesCollector = _newCollector;\\n\\n        if (address(_newCollector) != address(0) && address(token) != address(0)) {\\n            token.safeApprove(address(_newCollector), type(uint256).max);\\n        }\\n    }\\n\\n    function setRequestFeesCalculator(IRequestFeesCalculator _newRequestFeesCalculator) external override onlyOwner {\\n        requestFeesCalculator = _newRequestFeesCalculator;\\n    }\\n\\n    function setCVIOracle(ICVIOracle _newCVIOracle) external override onlyOwner {\\n        cviOracle = _newCVIOracle;\\n    }\\n\\n    function setDeviationParameters(uint16 _newDeviationPercentagePerSingleRebaseLag, uint16 _newMinDeviationPercentage, uint16 _newMaxDeviationPercentage) external override onlyOwner {\\n        deviationPerSingleRebaseLag = _newDeviationPercentagePerSingleRebaseLag;\\n        minDeviationPercentage = _newMinDeviationPercentage;\\n        maxDeviationPercentage = _newMaxDeviationPercentage;\\n    }\\n\\n    function setVerifyTotalRequestsAmount(bool _verifyTotalRequestsAmount) external override onlyOwner {\\n        verifyTotalRequestsAmount = _verifyTotalRequestsAmount;\\n    }\\n\\n    function setMaxTotalRequestsAmount(uint256 _maxTotalRequestsAmount) external override onlyOwner {\\n        maxTotalRequestsAmount = _maxTotalRequestsAmount;\\n    }\\n\\n    function setCappedRebase(bool _newCappedRebase) external override onlyOwner {\\n        cappedRebase = _newCappedRebase;\\n    }\\n\\n    function setMinRequestId(uint256 _newMinRequestId) external override onlyOwner {\\n        minRequestId = _newMinRequestId;\\n    }\\n\\n    function setMaxMinRequestIncrements(uint256 _newMaxMinRequestIncrements) external override onlyOwner {\\n        maxMinRequestIncrements = _newMaxMinRequestIncrements;\\n    }\\n\\n    function setFulfiller(address _fulfiller) external override onlyOwner {\\n        fulfiller = _fulfiller;\\n    }\\n\\n    function setKeepersFeeVaultAddress(address _newKeepersFeeVaultAddress) external override onlyOwner {\\n        keepersFeeVaultAddress = _newKeepersFeeVaultAddress;\\n    }\\n\\n    function setMinKeepersAmounts(uint256 _newMinKeepersMintAmount, uint256 _newMinKeepersBurnAmount) external override onlyOwner {\\n        minKeepersMintAmount = _newMinKeepersMintAmount;\\n        minKeepersBurnAmount = _newMinKeepersBurnAmount;\\n    }\\n\\n    struct SubmitRequestLocals {\\n        uint168 updatedTokenAmount;\\n        uint16 timeDelayFeePercent;\\n        uint16 maxFeesPercent;\\n        uint256 timeDelayFeeAmount;\\n        uint256 maxFeesAmount;\\n    }\\n\\n    function submitRequest(uint8 _type, uint168 _tokenAmount, uint32 _timeDelay, bool _useKeepers, uint16 _maxBuyingPremiumFeePercentage) private nonReentrant returns (uint requestId) {\\n        require(_tokenAmount > 0);\\n\\n        SubmitRequestLocals memory locals;\\n\\n        // Converting to underlying value in case of burn request, to support rebasing until fulfill\\n        locals.updatedTokenAmount = _tokenAmount;\\n        if (_type == BURN_REQUEST_TYPE) {\\n            uint256 __updatedTokenAmount = valueToUnderlying(_tokenAmount);\\n            require(uint168(__updatedTokenAmount) == __updatedTokenAmount);\\n            locals.updatedTokenAmount = uint168(__updatedTokenAmount);\\n        }\\n\\n        locals.timeDelayFeePercent = requestFeesCalculator.calculateTimeDelayFee(_timeDelay);\\n        locals.maxFeesPercent = requestFeesCalculator.getMaxFees();\\n\\n        locals.timeDelayFeeAmount = locals.updatedTokenAmount * locals.timeDelayFeePercent / MAX_PERCENTAGE;\\n        locals.maxFeesAmount = locals.updatedTokenAmount * locals.maxFeesPercent / MAX_PERCENTAGE;\\n\\n        requestId = nextRequestId;\\n        nextRequestId = nextRequestId + 1; // Overflow allowed to keep id cycling\\n\\n        uint32 targetTimestamp = uint32(block.timestamp + _timeDelay);\\n\\n        requests[requestId] = Request(_type, locals.updatedTokenAmount, locals.timeDelayFeePercent, locals.maxFeesPercent, msg.sender, uint32(block.timestamp), targetTimestamp, _useKeepers, _maxBuyingPremiumFeePercentage);\\n\\n        if (_type != BURN_REQUEST_TYPE) {\\n            totalRequestsAmount = totalRequestsAmount + _tokenAmount;\\n        }\\n\\n        collectRelevantTokens(_type, _useKeepers ? _tokenAmount : (_type == BURN_REQUEST_TYPE ? underlyingToValue(locals.timeDelayFeeAmount + locals.maxFeesAmount) : locals.timeDelayFeeAmount + locals.maxFeesAmount));\\n\\n        emit SubmitRequest(requestId, _type, msg.sender, _tokenAmount, _type == BURN_REQUEST_TYPE ? underlyingToValue(locals.timeDelayFeeAmount) : locals.timeDelayFeeAmount, uint32(block.timestamp), targetTimestamp, _useKeepers, _maxBuyingPremiumFeePercentage);\\n    }\\n\\n    struct PreFulfillResults {\\n        uint168 amountToFulfill;\\n        uint168 fulfillFees;\\n        uint168 timeDelayFees;\\n        uint16 fulfillFeesPercentage;\\n        bool wasLiquidated;\\n        uint168 depositAmount;\\n        uint168 mintAmount;\\n        bool shouldAbort;\\n        uint168 keepersFee;\\n    }\\n\\n    function preFulfillRequest(uint256 _requestId, Request memory _request, uint8 _expectedType, bool _keepersCalled) private returns (PreFulfillResults memory results) {\\n        require((_keepersCalled && _request.useKeepers) || _request.owner == msg.sender); // Not allowed\\n        require(_request.requestType == _expectedType, \\\"Wrong request type\\\");\\n\\n        if (requestFeesCalculator.isLiquidable(_request)) {\\n            _liquidateRequest(_requestId, _request);\\n            results.wasLiquidated = true;\\n        } else {\\n            require(!_keepersCalled || block.timestamp >= _request.targetTimestamp, \\\"Target time not reached\\\");\\n            results.fulfillFeesPercentage = _request.useKeepers && block.timestamp >= _request.targetTimestamp ? 0 : requestFeesCalculator.calculateTimePenaltyFee(_request);\\n\\n            results.timeDelayFees = _request.tokenAmount * _request.timeDelayRequestFeesPercent / MAX_PERCENTAGE;\\n\\n            if (_request.requestType == MINT_REQUEST_TYPE) {\\n                if (_request.useKeepers && _keepersCalled) {\\n                    // Note: Cast is safe as keepers fee is always less than amount\\n                    results.keepersFee = uint168(requestFeesCalculator.calculateKeepersFee(_request.tokenAmount));\\n                }\\n\\n                results.fulfillFees = _request.tokenAmount * results.fulfillFeesPercentage / MAX_PERCENTAGE;\\n                results.amountToFulfill = _request.tokenAmount - results.timeDelayFees - results.fulfillFees - results.keepersFee;\\n            }\\n\\n            if (!_request.useKeepers) {\\n                uint256 tokensLeftToTransfer = getUpdatedTokenAmount(_request.requestType, _request.tokenAmount - results.timeDelayFees - (_request.tokenAmount * _request.maxRequestFeesPercent / MAX_PERCENTAGE));\\n                collectRelevantTokens(_request.requestType, tokensLeftToTransfer);\\n            }\\n\\n            if (_request.requestType == BURN_REQUEST_TYPE) {\\n                results.amountToFulfill = getUpdatedTokenAmount(_request.requestType, _request.tokenAmount);\\n            }\\n        }\\n    }\\n\\n    function requireTotalRequestsAmount(uint168 _newTokenAmount) private view {\\n        require(!verifyTotalRequestsAmount || _newTokenAmount + totalRequestsAmount <= maxTotalRequestsAmount, \\\"Total requests amount exceeded\\\");\\n    }\\n\\n    function _fulfillMintRequest(uint256 _requestId, Request memory _request, uint16 _maxBuyingPremiumFeePercentage, bool _keepersCalled) private returns (uint256 tokensMinted, bool success) {\\n        PreFulfillResults memory results = preFulfillRequest(_requestId, _request, MINT_REQUEST_TYPE, _keepersCalled);\\n\\n        if (results.wasLiquidated) {\\n            success = true;\\n        } else {\\n            (tokensMinted, success) = mintTokens(_requestId, _request.owner, results.amountToFulfill, _maxBuyingPremiumFeePercentage, _request.useKeepers && _keepersCalled, true);\\n\\n            if (success) {\\n                subtractTotalRequestAmount(_request.tokenAmount);\\n                deleteRequest(_requestId);\\n\\n                feesCollector.sendProfit(results.timeDelayFees + results.fulfillFees, IERC20(address(token)));\\n\\n                if (results.keepersFee > 0) {\\n                    token.safeTransfer(keepersFeeVaultAddress, results.keepersFee);\\n                }\\n\\n                emit FulfillRequest(_requestId, _request.requestType, _request.owner, results.fulfillFees + results.keepersFee, false, _request.useKeepers, _keepersCalled, msg.sender, uint32(block.timestamp));\\n            }\\n        }\\n    }\\n\\n    function _fulfillBurnRequest(uint256 _requestId, Request memory _request, bool _keepersCalled) private nonReentrant returns (uint256 tokensReceived) {\\n        PreFulfillResults memory results = preFulfillRequest(_requestId, _request, BURN_REQUEST_TYPE, _keepersCalled);\\n\\n        if (!results.wasLiquidated) {\\n            deleteRequest(_requestId);\\n\\n            uint256 fulfillFees;\\n            (tokensReceived, fulfillFees) = burnTokens(_requestId, _request.owner, results.amountToFulfill, _request.timeDelayRequestFeesPercent, results.fulfillFeesPercentage, _keepersCalled && _request.useKeepers, true);\\n\\n            emit FulfillRequest(_requestId, _request.requestType, _request.owner, fulfillFees, false, _request.useKeepers, _keepersCalled, msg.sender, uint32(block.timestamp));\\n        }\\n    }\\n\\n    function mintTokens(uint256 _requestId, address _owner, uint168 _tokenAmount, uint16 _maxBuyingPremiumFeePercentage, bool _catchRevert, bool _chargeOpenFee) private returns (uint256 tokensMinted, bool success) {\\n        uint256 balance = 0;\\n\\n        {\\n            bool isPositive = true;\\n\\n            (uint256 currPositionUnits,,,,) = platform.positions(address(this));\\n            if (currPositionUnits != 0) {\\n                (balance, isPositive,,,,) = platform.calculatePositionBalance(address(this));\\n            }\\n            require(isPositive, \\\"Negative balance\\\");\\n        }\\n\\n        uint256 supply = totalSupply;\\n\\n        (, uint256 positionedTokenAmount, uint256 openPositionFee, uint256 buyingPremiumFee, bool transactionSuccess) = openPosition(_tokenAmount, _maxBuyingPremiumFeePercentage, _catchRevert, _chargeOpenFee);\\n\\n        if (transactionSuccess) {   \\n            if (supply > 0 && balance > 0) {\\n                tokensMinted = positionedTokenAmount * supply / balance;\\n            } else {\\n                tokensMinted = positionedTokenAmount * initialTokenToLPTokenRate;\\n            }\\n\\n            emit Mint(_requestId, _owner, _tokenAmount, positionedTokenAmount, tokensMinted, openPositionFee, buyingPremiumFee);\\n\\n            require(tokensMinted > 0, \\\"Too few tokens\\\");\\n\\n            _mint(_owner, tokensMinted);\\n            success = true;\\n        }\\n    }\\n\\n    function burnTokens(uint256 _requestId, address _owner, uint168 _tokenAmount, uint16 _timeDelayFeesPercentage, uint16 _fulfillFeesPercentage, bool _hasKeepersFee, bool _chargeCloseFee) private returns (uint256 tokensReceived, uint256 fulfillFees) {\\n        (uint256 tokensBeforeFees, uint256 closePositionFee, uint256 closingPremiumFee) = _burnTokens(_tokenAmount, _chargeCloseFee);\\n\\n        {\\n            uint256 timeDelayFee = tokensBeforeFees * _timeDelayFeesPercentage / MAX_PERCENTAGE;\\n            fulfillFees = tokensBeforeFees * _fulfillFeesPercentage / MAX_PERCENTAGE;\\n\\n            uint256 keepersFee = 0;\\n            if (_hasKeepersFee) {\\n                keepersFee = requestFeesCalculator.calculateKeepersFee(tokensBeforeFees);\\n            }\\n\\n            tokensReceived = tokensBeforeFees - fulfillFees - timeDelayFee - keepersFee;\\n\\n            if (fulfillFees + timeDelayFee > 0) {\\n                feesCollector.sendProfit(fulfillFees + timeDelayFee, IERC20(address(token)));\\n            }\\n            \\n            if (keepersFee > 0) {\\n                token.safeTransfer(keepersFeeVaultAddress, keepersFee);\\n                fulfillFees += keepersFee;\\n            }\\n        }\\n\\n        token.safeTransfer(_owner, tokensReceived);\\n\\n        emit Burn(_requestId, _owner, tokensBeforeFees, tokensReceived, _tokenAmount, closePositionFee, closingPremiumFee);\\n    }\\n\\n    function _burnTokens(uint256 _tokenAmount, bool _chargeCloseFee) private returns (uint256 tokensReceived, uint256 closePositionFee, uint256 closingPremiumFee) {\\n        (, bool isPositive, uint168 totalPositionUnits,,,) = platform.calculatePositionBalance(address(this));\\n        require(isPositive, \\\"Negative balance\\\");\\n\\n        uint256 positionUnits = totalPositionUnits * _tokenAmount / totalSupply;\\n        require(positionUnits == uint168(positionUnits), \\\"Too much position units\\\");\\n\\n        if (positionUnits > 0) {\\n            (tokensReceived, closePositionFee, closingPremiumFee) = _chargeCloseFee ? \\n                platform.closePosition(uint168(positionUnits), 1) :\\n                platform.closePositionWithoutFee(uint168(positionUnits), 1);\\n        }\\n\\n        // Note: Moving to underlying and back in case rebase occured, and trying to burn too much because of rounding\\n        _burn(address(this), underlyingToValue(valueToUnderlying(_tokenAmount)));\\n    }\\n\\n    function _liquidateRequest(uint256 _requestId, Request memory _request) private returns (uint256 findersFeeAmount) {\\n        uint168 updatedTokenAmount = getUpdatedTokenAmount(_request.requestType, _request.tokenAmount);\\n        uint256 leftAmount = updatedTokenAmount;\\n\\n        if (!_request.useKeepers) {\\n            uint168 timeDelayFeeAmount = updatedTokenAmount * _request.timeDelayRequestFeesPercent / MAX_PERCENTAGE;\\n            uint168 maxFeesAmount = updatedTokenAmount * _request.maxRequestFeesPercent / MAX_PERCENTAGE;\\n            leftAmount = timeDelayFeeAmount + maxFeesAmount;   \\n        }\\n\\n        if (_request.requestType == BURN_REQUEST_TYPE) {\\n            (leftAmount,,) = _burnTokens(leftAmount, true);\\n        } else {\\n            subtractTotalRequestAmount(updatedTokenAmount);\\n        }\\n\\n        findersFeeAmount = _request.useKeepers ? requestFeesCalculator.calculateKeepersFee(leftAmount) : requestFeesCalculator.calculateFindersFee(leftAmount);\\n\\n        deleteRequest(_requestId);\\n\\n        if (_request.useKeepers) {\\n            token.safeTransfer(_request.owner, leftAmount - findersFeeAmount);\\n        } else {\\n            feesCollector.sendProfit(leftAmount - findersFeeAmount, IERC20(address(token)));\\n        }\\n\\n        token.safeTransfer(msg.sender, findersFeeAmount);\\n\\n        emit LiquidateRequest(_requestId, _request.requestType, _request.owner, msg.sender, findersFeeAmount, _request.useKeepers, uint32(block.timestamp));\\n    }\\n\\n    function deleteRequest(uint256 _requestId) private {\\n        delete requests[_requestId];\\n\\n        uint256 currMinRequestId = minRequestId;\\n        uint256 increments = 0;\\n        bool didIncrement = false;\\n\\n        // Skip over non-keepers request ids as well as fulfilled ones, \\n        // as minRequestId is used only to allow keepers to test which requests are waiting to be fulfilled\\n        while (currMinRequestId < nextRequestId && increments < maxMinRequestIncrements && (requests[currMinRequestId].owner == address(0) || requests[currMinRequestId].useKeepers == false)) {\\n            increments++;\\n            currMinRequestId++;\\n            didIncrement = true;\\n        }\\n\\n        if (didIncrement) {\\n            minRequestId = currMinRequestId;\\n        }\\n    }\\n\\n    function subtractTotalRequestAmount(uint256 _amount) private {\\n        if (_amount > totalRequestsAmount) {\\n            totalRequestsAmount = 0;\\n        } else {\\n            totalRequestsAmount = totalRequestsAmount - _amount;\\n        }\\n    }\\n\\n    function collectRelevantTokens(uint8 _requestType, uint256 _tokenAmount) private {\\n        if (_requestType == BURN_REQUEST_TYPE) {\\n            require(balanceOf(msg.sender) >= _tokenAmount, \\\"Not enough tokens\\\");\\n            IERC20Upgradeable(address(this)).safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n        } else {\\n            token.safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n        }\\n    }\\n\\n    function openPosition(uint168 _amount, uint16 _maxBuyingPremiumFeePercentage, bool _catchRevert, bool _chargeOpenFee) private returns (uint168 positionUnitsAmount, uint168 positionedTokenAmount, uint168 openPositionFee, uint168 buyingPremiumFee, bool transactionSuccess) {\\n        transactionSuccess = true;\\n\\n        if (_catchRevert) {\\n            (bool success, bytes memory returnData) = \\n                address(platform).call(abi.encodePacked(platform.openPosition.selector, abi.encode(_amount, platform.maxCVIValue(), _maxBuyingPremiumFeePercentage, 1)));\\n\\n            if (success) {\\n                (positionUnitsAmount, positionedTokenAmount, openPositionFee, buyingPremiumFee) = abi.decode(returnData, (uint168, uint168, uint168, uint168));\\n            } else {\\n                transactionSuccess = false;\\n            }\\n        } else {\\n            (positionUnitsAmount, positionedTokenAmount, openPositionFee, buyingPremiumFee) = !_chargeOpenFee ? \\n                platform.openPositionWithoutFee(_amount, platform.maxCVIValue(), 1) : \\n                platform.openPosition(_amount, platform.maxCVIValue(), _maxBuyingPremiumFeePercentage, 1);\\n        }\\n    }\\n\\n    function getUpdatedTokenAmount(uint8 _requestType, uint168 _requestAmount) private view returns (uint168 updatedTokenAmount) {\\n        if (_requestType != BURN_REQUEST_TYPE) {\\n            return _requestAmount;\\n        }\\n\\n        uint256 __updatedTokenAmount = underlyingToValue(_requestAmount);\\n        require(uint168(__updatedTokenAmount) == __updatedTokenAmount);\\n        updatedTokenAmount = uint168(__updatedTokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xba63e445ba60013d7ba7ac1e827aabeb127a2f22f104f563a6b0f5fcfffaf1ee\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/ICVIOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface ICVIOracle {\\n    function getCVIRoundData(uint80 roundId) external view returns (uint32 cviValue, uint256 cviTimestamp);\\n    function getCVILatestRoundData() external view returns (uint32 cviValue, uint80 cviRoundId, uint256 cviTimestamp);\\n\\n    function setDeviationCheck(bool newDeviationCheck) external;\\n    function setMaxDeviation(uint16 newMaxDeviation) external;\\n}\\n\",\"keccak256\":\"0xf1871b2e9219f7a11e63d8e3276b7a0a46d8d726d54e385a6326dbdb2bcb1bad\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IElasticToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8;\\n\\ninterface IElasticToken {\\n\\n    event Rebase(uint256 epoch, uint256 prevScalingFactor, uint256 newScalingFactor);\\n\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    function transfer(address to, uint256 value) external returns(bool);\\n    function transferFrom(address from, address to, uint256 value) external returns(bool);\\n    function balanceOf(address who) external view returns(uint256);\\n    function allowance(address owner, address spender) external view returns(uint256);\\n    function approve(address spender, uint256 value) external returns (bool);\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    function balanceOfUnderlying(address who) external view returns(uint256);\\n    function maxScalingFactor() external view returns (uint256);\\n    function underlyingToValue(uint256 unerlyingValue) external view returns (uint256);\\n    function valueToUnderlying(uint256 value) external view returns (uint256);\\n\\n    function setRebaser(address rebaser) external;\\n}\\n\",\"keccak256\":\"0x2f1aa8bd13bef092a1e06d2208e9d5ddfb2edb7f5a71b1d4d14ff8a234540645\",\"license\":\"MIT\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IFeesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./ICVIOracle.sol\\\";\\nimport \\\"./IThetaVaultInfo.sol\\\";\\n\\ninterface IFeesCalculator {\\n\\n    struct CVIValue {\\n        uint256 period;\\n        uint32 cviValue;\\n    }\\n\\n    struct SnapshotUpdate {\\n        uint256 latestSnapshot;\\n        uint256 singleUnitFundingFee;\\n        uint256 totalTime;\\n        uint256 totalRounds;\\n        uint256 cviValueTimestamp;\\n        uint80 newLatestRoundId;\\n        uint32 cviValue;\\n        bool updatedSnapshot;\\n        bool updatedLatestRoundId;\\n        bool updatedLatestTimestamp;\\n        bool updatedTurbulenceData;\\n    }\\n\\n    function updateTurbulenceIndicatorPercent(uint256 totalTime, uint256 newRounds, uint32 lastCVIValue, uint32 currCVIValue) external;\\n\\n    function setOracle(ICVIOracle cviOracle) external;\\n    function setThetaVault(IThetaVaultInfo thetaVault) external;\\n\\n    function setStateUpdator(address newUpdator) external;\\n\\n    function setFundingFeeMinRate(uint32 newFundingFeeMinRate) external;\\n    function setFundingFeeMaxRate(uint32 newFundingFeeMaxRate) external;\\n    function setMinFundingFeeCviThreshold(uint32 newMinFundingFeeCviThreshold) external;\\n    function setMaxFundingFeeCviThreshold(uint32 newMaxFundingFeeCviThreshold) external;\\n    function setFundingFeeDivisionFactor(uint32 newFundingFeeDivisionFactor) external;\\n    function setFundingFeeCoefficients(uint32[] calldata newFundingFeeCoefficients) external;\\n\\n    function setDepositFee(uint16 newDepositFeePercentage) external;\\n    function setWithdrawFee(uint16 newWithdrawFeePercentage) external;\\n    function setOpenPositionFee(uint16 newOpenPositionFeePercentage) external;\\n    function setOpenPositionLPFee(uint16 newOpenPositionLPFeePercent) external;\\n    function setClosePositionLPFee(uint16 newClosePositionLPFeePercent) external;\\n    function setClosePositionFee(uint16 newClosePositionFeePercentage) external;\\n    function setClosePositionMaxFee(uint16 newClosePositionMaxFeePercentage) external;\\n    function setClosePositionFeeDecay(uint256 newClosePositionFeeDecayPeriod) external;\\n    \\n    function setOracleHeartbeatPeriod(uint256 newOracleHeartbeatPeriod) external;\\n    function setBuyingPremiumFeeMax(uint16 newBuyingPremiumFeeMaxPercentage) external;\\n    function setBuyingPremiumThreshold(uint16 newBuyingPremiumThreshold) external;\\n    function setClosingPremiumFeeMax(uint16 newClosingPremiumFeeMaxPercentage) external;\\n    function setCollateralToBuyingPremiumMapping(uint16[] calldata newCollateralToBuyingPremiumMapping) external;\\n    function setFundingFeeConstantRate(uint16 newfundingFeeConstantRate) external;\\n    function setCollateralToExtraFundingFeeMapping(uint32[] calldata newCollateralToExtraFundingFeeMapping) external;\\n    function setTurbulenceStep(uint16 newTurbulenceStepPercentage) external;\\n    function setMaxTurbulenceFeePercentToTrim(uint16 newMaxTurbulenceFeePercentToTrim) external;\\n    function setTurbulenceDeviationThresholdPercent(uint16 newTurbulenceDeviationThresholdPercent) external;\\n    function setTurbulenceDeviationPercent(uint16 newTurbulenceDeviationPercentage) external;\\n\\n    function calculateTurbulenceIndicatorPercent(uint256 totalTime, uint256 newRounds, uint32 _lastCVIValue, uint32 _currCVIValue) external view returns (uint16);\\n\\n    function calculateBuyingPremiumFee(uint168 tokenAmount, uint8 leverage, uint256 lastTotalLeveragedTokens, uint256 lastTotalPositionUnits, uint256 totalLeveragedTokens, uint256 totalPositionUnits) external view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage);\\n    function calculateBuyingPremiumFeeWithAddendum(uint168 tokenAmount, uint8 leverage, uint256 lastTotalLeveragedTokens, uint256 lastTotalPositionUnits, uint256 totalLeveragedTokens, uint256 totalPositionUnits, uint16 _turbulenceIndicatorPercent) external view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage);\\n\\n    function calculateClosingPremiumFee() external view returns (uint16 combinedPremiumFeePercentage);\\n\\n    function calculateSingleUnitFundingFee(CVIValue[] memory cviValues, uint256 totalLeveragedTokens, uint256 totalPositionUnits) external view returns (uint256 fundingFee);\\n    function calculateSingleUnitPeriodFundingFee(CVIValue memory cviValue, uint256 collateralRatio) external view returns (uint256 fundingFee, uint256 fundingFeeRatePercents);\\n    function updateSnapshots(uint256 latestTimestamp, uint256 blockTimestampSnapshot, uint256 latestTimestampSnapshot, uint80 latestOracleRoundId, uint256 totalLeveragedTokens, uint256 totalPositionUnits) external view returns (SnapshotUpdate memory snapshotUpdate);\\n\\n    function calculateClosePositionFeePercent(uint256 creationTimestamp, bool isNoLockPositionAddress) external view returns (uint16);\\n    function calculateWithdrawFeePercent(uint256 lastDepositTimestamp) external view returns (uint16);\\n\\n    function calculateCollateralRatio(uint256 totalLeveragedTokens, uint256 totalPositionUnits) external view returns (uint256 collateralRatio);\\n\\n    function depositFeePercent() external view returns (uint16);\\n    function withdrawFeePercent() external view returns (uint16);\\n    function openPositionFeePercent() external view returns (uint16);\\n    function closePositionFeePercent() external view returns (uint16);\\n    function openPositionLPFeePercent() external view returns (uint16);\\n    function closePositionLPFeePercent() external view returns (uint16);\\n\\n    function openPositionFees() external view returns (uint16 openPositionFeePercentResult, uint16 buyingPremiumFeeMaxPercentResult);\\n\\n    function turbulenceIndicatorPercent() external view returns (uint16);\\n    function oracleLeverage() external view returns (uint8);\\n\\n    function getCollateralToBuyingPremiumMapping() external view returns(uint16[] memory);\\n    function getCollateralToExtraFundingFeeMapping() external view returns(uint32[] memory);\\n    function getFundingFeeCoefficients() external view returns(uint32[] memory);\\n}\\n\",\"keccak256\":\"0x4a28b87395a2a35ac1152b83f96630ad4fa1b844b5abca4270486c9c08f388ea\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IFeesCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFeesCollector {\\n    function sendProfit(uint256 amount, IERC20 token) external;\\n}\\n\",\"keccak256\":\"0xb16b7c5d985657716ccacf0f1e61de587c06fe4f6591bee6fafc0a3658229b4c\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/ILiquidation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface ILiquidation {\\t\\n\\tfunction setMinLiquidationThresholdPercents(uint16[8] calldata newMinThresholdPercents) external;\\n\\tfunction setMinLiquidationRewardPercent(uint16 newMinRewardPercent) external;\\n\\tfunction setMaxLiquidationRewardPercents(uint16[8] calldata newMaxRewardPercents) external;\\n\\tfunction isLiquidationCandidate(uint256 positionBalance, bool isPositive, uint168 positionUnitsAmount, uint32 openCVIValue, uint8 leverage) external view returns (bool);\\n\\tfunction getLiquidationReward(uint256 positionBalance, bool isPositive, uint168 positionUnitsAmount, uint32 openCVIValue, uint8 leverage) external view returns (uint256 finderFeeAmount);\\n}\\n\",\"keccak256\":\"0x0799656b324ed8d65391313156e1dfe7d99b6dadb08e71cd6a515d19731539bd\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IPlatform.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./ICVIOracle.sol\\\";\\nimport \\\"./IFeesCalculator.sol\\\";\\nimport \\\"./IRewardsCollector.sol\\\";\\nimport \\\"./IFeesCollector.sol\\\";\\nimport \\\"./ILiquidation.sol\\\";\\n\\ninterface IPlatform {\\n\\n    struct Position {\\n        uint168 positionUnitsAmount;\\n        uint8 leverage;\\n        uint32 openCVIValue;\\n        uint32 creationTimestamp;\\n        uint32 originalCreationTimestamp;\\n    }\\n\\n    event Deposit(address indexed account, uint256 tokenAmount, uint256 lpTokensAmount, uint256 feeAmount);\\n    event Withdraw(address indexed account, uint256 tokenAmount, uint256 lpTokensAmount, uint256 feeAmount);\\n    event OpenPosition(address indexed account, uint256 tokenAmount, uint8 leverage, uint256 feeAmount, uint256 positionUnitsAmount, uint256 cviValue);\\n    event ClosePosition(address indexed account, uint256 tokenAmount, uint256 feeAmount, uint256 positionUnitsAmount, uint8 leverage, uint256 cviValue);\\n    event LiquidatePosition(address indexed positionAddress, uint256 currentPositionBalance, bool isBalancePositive, uint256 positionUnitsAmount);\\n\\n    function deposit(uint256 tokenAmount, uint256 minLPTokenAmount) external returns (uint256 lpTokenAmount);\\n    function withdraw(uint256 tokenAmount, uint256 maxLPTokenBurnAmount) external returns (uint256 burntAmount, uint256 withdrawnAmount);\\n    function withdrawLPTokens(uint256 lpTokenAmount) external returns (uint256 burntAmount, uint256 withdrawnAmount);\\n\\n    function increaseSharedPool(uint256 tokenAmount) external;\\n\\n    function openPositionWithoutFee(uint168 tokenAmount, uint32 maxCVI, uint8 leverage) external returns (uint168 positionUnitsAmount, uint168 positionedTokenAmount, uint168 openPositionFee, uint168 buyingPremiumFee);\\n    function openPosition(uint168 tokenAmount, uint32 maxCVI, uint16 maxBuyingPremiumFeePercentage, uint8 leverage) external returns (uint168 positionUnitsAmount, uint168 positionedTokenAmount, uint168 openPositionFee, uint168 buyingPremiumFee);\\n    function closePositionWithoutFee(uint168 positionUnitsAmount, uint32 minCVI) external returns (uint256 tokenAmount, uint256 closePositionFee, uint256 closingPremiumFee);\\n    function closePosition(uint168 positionUnitsAmount, uint32 minCVI) external returns (uint256 tokenAmount, uint256 closePositionFee, uint256 closingPremiumFee);\\n\\n    function liquidatePositions(address[] calldata positionOwners) external returns (uint256 finderFeeAmount);\\n\\n    function setAddressSpecificParameters(address holderAddress, bool shouldLockPosition, bool noPremiumFeeAllowed, bool increaseSharedPoolAllowed, bool isLiquidityProvider) external;\\n\\n    function setRevertLockedTransfers(bool revertLockedTransfers) external;\\n\\n    function setSubContracts(IFeesCollector newCollector, ICVIOracle newOracle, IRewardsCollector newRewards, ILiquidation newLiquidation, address _newStakingContractAddress) external;\\n    function setFeesCalculator(IFeesCalculator newCalculator) external;\\n\\n    function setLatestOracleRoundId(uint80 newOracleRoundId) external;\\n    function setMaxTimeAllowedAfterLatestRound(uint32 newMaxTimeAllowedAfterLatestRound) external;\\n\\n    function setLockupPeriods(uint256 newLPLockupPeriod, uint256 newBuyersLockupPeriod) external;\\n\\n    function setEmergencyParameters(bool newEmergencyWithdrawAllowed, bool newCanPurgeSnapshots) external;\\n\\n    function setMaxAllowedLeverage(uint8 newMaxAllowedLeverage) external;\\n\\n    function calculatePositionBalance(address positionAddress) external view returns (uint256 currentPositionBalance, bool isPositive, uint168 positionUnitsAmount, uint8 leverage, uint256 fundingFees, uint256 marginDebt);\\n    function calculatePositionPendingFees(address positionAddress, uint168 positionUnitsAmount) external view returns (uint256 pendingFees);\\n\\n    function totalBalance(bool _withAddendum) external view returns (uint256 balance);\\n\\n    function calculateLatestTurbulenceIndicatorPercent() external view returns (uint16);\\n\\n    function cviOracle() external view returns (ICVIOracle);\\n    function feesCalculator() external view returns (IFeesCalculator);\\n\\n    function PRECISION_DECIMALS() external view returns (uint256);\\n\\n    function totalPositionUnitsAmount() external view returns (uint256);\\n    function totalLeveragedTokensAmount() external view returns (uint256);\\n    function totalFundingFeesAmount() external view returns (uint256);\\n    function latestFundingFees() external view returns (uint256);\\n\\n    function positions(address positionAddress) external view returns (uint168 positionUnitsAmount, uint8 leverage, uint32 openCVIValue, uint32 creationTimestamp, uint32 originalCreationTimestamp);\\n    function buyersLockupPeriod() external view returns (uint256);\\n    function maxCVIValue() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x11f55f686514975c2dd5adf87856f8df5f85b015621f01e1528addb6b7194686\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IRequestFeesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./IVolatilityToken.sol\\\";\\n\\ninterface IRequestFeesCalculator {\\n    function calculateTimePenaltyFee(IVolatilityToken.Request calldata request) external view returns (uint16 feePercentage);\\n    function calculateTimeDelayFee(uint256 timeDelay) external view returns (uint16 feePercentage);\\n    function calculateFindersFee(uint256 tokensLeftAmount) external view returns (uint256 findersFeeAmount);\\n    function calculateKeepersFee(uint256 tokensAmount) external view returns (uint256 keepersFeeAmount);\\n\\n    function isLiquidable(IVolatilityToken.Request calldata request) external view returns (bool liquidable);\\n\\n    function minWaitTime() external view returns (uint32);\\n\\n    function setTimeWindow(uint32 minTimeWindow, uint32 maxTimeWindow) external;\\n    function setTimeDelayFeesParameters(uint16 minTimeDelayFeePercent, uint16 maxTimeDelayFeePercent) external;\\n    function setMinWaitTime(uint32 newMinWaitTime) external;\\n    function setTimePenaltyFeeParameters(uint16 beforeTargetTimeMaxPenaltyFeePercent, uint32 afterTargetMidTime, uint16 afterTargetMidTimePenaltyFeePercent, uint32 afterTargetMaxTime, uint16 afterTargetMaxTimePenaltyFeePercent) external;\\n    function setFindersFee(uint16 findersFeePercent) external;\\n    function setKeepersFeePercent(uint16 keepersFeePercent) external;\\n    function setKeepersFeeMax(uint256 keepersFeeMax) external;\\n\\n    function getMaxFees() external view returns (uint16 maxFeesPercent);\\n}\\n\",\"keccak256\":\"0xb516083aa9063482c61c12f38b960f017205f2611358dcab31c1197208841611\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IRequestManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface IRequestManager {\\n\\n\\tfunction nextRequestId() external view returns (uint256);\\n    function minRequestId() external view returns (uint256);\\n    function maxMinRequestIncrements() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4271e6200e0675ca19c931cd82dc9243a01d88bc20a4352effb1d66be761b94b\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IRewardsCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface IRewardsCollector {\\n\\tfunction reward(address account, uint256 positionUnits, uint8 leverage) external;\\n}\\n\",\"keccak256\":\"0xaae3f1399202cccfb2e7302f69868a1f9adfbc53c968668e79201692c5724ca5\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IThetaVaultInfo.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface IThetaVaultInfo {\\n    function totalVaultLeveragedAmount() external view returns (uint256);\\n    function vaultPositionUnits() external view returns (uint256);\\n    function extraLiqidityPercentage() external view returns (uint16);\\n    function minDexPercentageAllowed() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xce2b14eb4cfcf69d7fe194658560dd77ee0f37c913eefa8d60a2d09bdd7683f6\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IVolatilityToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./IPlatform.sol\\\";\\nimport \\\"./IRequestFeesCalculator.sol\\\";\\nimport \\\"./ICVIOracle.sol\\\";\\n\\ninterface IVolatilityToken {\\n\\n    struct Request {\\n        uint8 requestType; // 1 => mint, 2 => burn\\n        uint168 tokenAmount;\\n        uint16 timeDelayRequestFeesPercent;\\n        uint16 maxRequestFeesPercent;\\n        address owner;\\n        uint32 requestTimestamp;\\n        uint32 targetTimestamp;\\n        bool useKeepers;\\n        uint16 maxBuyingPremiumFeePercentage;\\n    }\\n\\n    event SubmitRequest(uint256 requestId, uint8 requestType, address indexed account, uint256 tokenAmount, uint256 submitFeesAmount, uint32 requestTimestamp, uint32 targetTimestamp, bool useKeepers, uint16 maxBuyingPremiumFeePercentage);\\n    event FulfillRequest(uint256 requestId, uint8 requestType, address indexed account, uint256 fulfillFeesAmount, bool isAborted, bool useKeepers, bool keepersCalled, address indexed fulfiller, uint32 fulfillTimestamp);\\n    event LiquidateRequest(uint256 requestId, uint8 requestType, address indexed account, address indexed liquidator, uint256 findersFeeAmount, bool useKeepers, uint32 liquidateTimestamp);\\n    event Mint(uint256 requestId, address indexed account, uint256 tokenAmount, uint256 positionedTokenAmount, uint256 mintedTokens, uint256 openPositionFee, uint256 buyingPremiumFee);\\n    event Burn(uint256 requestId, address indexed account, uint256 tokenAmountBeforeFees, uint256 tokenAmount, uint256 burnedTokens, uint256 closePositionFee, uint256 closingPremiumFee);\\n\\n    function rebaseCVI() external;\\n\\n    function submitMintRequest(uint168 tokenAmount, uint32 timeDelay) external returns (uint256 requestId);\\n    function submitKeepersMintRequest(uint168 tokenAmount, uint32 timeDelay, uint16 maxBuyingPremiumFeePercentage) external returns (uint256 requestId);\\n    function submitBurnRequest(uint168 tokenAmount, uint32 timeDelay) external returns (uint256 requestId);\\n    function submitKeepersBurnRequest(uint168 tokenAmount, uint32 timeDelay) external returns (uint256 requestId);\\n\\n    function fulfillMintRequest(uint256 requestId, uint16 maxBuyingPremiumFeePercentage, bool keepersCalled) external returns (uint256 tokensMinted, bool success);\\n    function fulfillBurnRequest(uint256 requestId, bool keepersCalled) external returns (uint256 tokensBurned);\\n\\n    function mintTokens(uint168 tokenAmount) external returns (uint256 mintedTokens);\\n    function burnTokens(uint168 burnAmount) external returns (uint256 tokenAmount);\\n\\n    function liquidateRequest(uint256 requestId) external returns (uint256 findersFeeAmount);\\n\\n    function setMinter(address minter) external;\\n    function setPlatform(IPlatform newPlatform) external;\\n    function setFeesCalculator(IFeesCalculator newFeesCalculator) external;\\n    function setFeesCollector(IFeesCollector newCollector) external;\\n    function setRequestFeesCalculator(IRequestFeesCalculator newRequestFeesCalculator) external;\\n    function setCVIOracle(ICVIOracle newCVIOracle) external;\\n    function setDeviationParameters(uint16 newDeviationPercentagePerSingleRebaseLag, uint16 newMinDeviationPercentage, uint16 newMaxDeviationPercentage) external;\\n    function setVerifyTotalRequestsAmount(bool verifyTotalRequestsAmount) external;\\n    function setMaxTotalRequestsAmount(uint256 maxTotalRequestsAmount) external;\\n    function setCappedRebase(bool newCappedRebase) external;\\n\\n    function setMinRequestId(uint256 newMinRequestId) external;\\n    function setMaxMinRequestIncrements(uint256 newMaxMinRequestIncrements) external;\\n\\n    function setFulfiller(address fulfiller) external;\\n\\n    function setKeepersFeeVaultAddress(address newKeepersFeeVaultAddress) external;\\n\\n    function setMinKeepersAmounts(uint256 newMinKeepersMintAmount, uint256 newMinKeepersBurnAmount) external;\\n\\n    function platform() external view returns (IPlatform);\\n    function requestFeesCalculator() external view returns (IRequestFeesCalculator);\\n    function leverage() external view returns (uint8);\\n    function initialTokenToLPTokenRate() external view returns (uint256);\\n\\n    function requests(uint256 requestId) external view returns (uint8 requestType, uint168 tokenAmount, uint16 timeDelayRequestFeesPercent, uint16 maxRequestFeesPercent,\\n        address owner, uint32 requestTimestamp, uint32 targetTimestamp, bool useKeepers, uint16 maxBuyingPremiumFeePercentage);\\n}\\n\",\"keccak256\":\"0x9b195f997265f6401224845c81cba2a3ac6f2e4f2bf65d8be5027ac1ee3fa5b4\",\"license\":\"GPL-3.0\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/volatility-token/VolatilityTokenContracts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport '@coti-cvi/contracts-cvi/contracts/VolatilityToken.sol';\\n\\ncontract CVIUSDCVolatilityToken is VolatilityToken {\\n  constructor() VolatilityToken() {}\\n}\\n\\ncontract CVIUSDCVolatilityToken2X is VolatilityToken {\\n  constructor() VolatilityToken() {}\\n}\\n\",\"keccak256\":\"0x921d9d98a4056429bada69f23158227b4798bb7ebd6dafd17f983acf086ffa5d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061545f806100206000396000f3fe608060405234801561001057600080fd5b506004361061048b5760003560e01c806376b27f3311610262578063b87f187e11610151578063e57a67ac116100ce578063f4b8602311610092578063f4b8602314610acf578063f780d9bc14610ae2578063f7b3af7414610af7578063fc0c546a14610b0a578063fca3b5aa14610b1d578063fe4fbe1914610b3057600080fd5b8063e57a67ac14610a7a578063ea35761014610a8d578063ec27050714610aa0578063ed3437f814610ab3578063f2fde38b14610abc57600080fd5b8063d0a9278111610115578063d0a92781146109eb578063d4a56af114610a13578063dd62ed3e14610a26578063e46adf6214610a5f578063e530413b14610a7257600080fd5b8063b87f187e14610997578063bef7b1d0146109aa578063c43a51b6146109bd578063c98ece90146109d0578063cf6caff3146109e357600080fd5b806397f79e92116101df578063a5cfa15c116101a3578063a5cfa15c1461094d578063a9059cbb14610956578063a9ae12b214610969578063b334ef631461097c578063b6f738d51461098f57600080fd5b806397f79e92146108f25780639c5bb73a146109055780639cf160f6146109185780639d7a32bb1461092b578063a457c2d71461093a57600080fd5b80638da5cb5b116102265780638da5cb5b146108b45780638eb50a38146108c55780638f16d787146108ce57806395d89b41146108e157806397d63f93146108e957600080fd5b806376b27f331461078c5780638094d8831461079557806380b4ec9f1461079e57806381d12c58146107b1578063832d19d8146108a157600080fd5b80633af9e6691161037e57806361944abf116102fb5780636c715641116102bf5780636c715641146107385780636d7277551461074b5780636f7d78281461075e57806370a0823114610771578063715018a61461078457600080fd5b806361944abf146106e25780636945c5ea146106f55780636a84a985146107085780636a9d1119146107115780636c39f4eb1461072457600080fd5b80634c255c97116103425780634c255c971461068a578063526ec4c4146106a65780635a446215146106ba57806360acfdcb146106cd57806360ebfee6146106d657600080fd5b80633af9e66914610630578063419dc5611461065957806341be99741461066257806347d8ca801461066f5780634bde38c81461067757600080fd5b80632900eed21161040c57806335a03bfa116103d057806335a03bfa146105d357806335b86d96146105e6578063373071f2146105f75780633839bdd01461060a578063395093511461061d57600080fd5b80632900eed2146105785780632a093cfc1461058b5780632c86d98e1461059e578063313ce567146105bd578063340e4fd5146105ca57600080fd5b806311fd8a831161045357806311fd8a831461052157806318160ddd146105345780631a8dd8f71461053d5780631c70ca291461055257806323b872dd1461056557600080fd5b806303b70a161461049057806306fdde03146104b657806307546172146104cb578063095ea7b3146104f657806311d3e6c414610519575b600080fd5b6104a361049e366004614c6a565b610b43565b6040519081526020015b60405180910390f35b6104be610b9b565b6040516104ad9190614f61565b60b3546104de906001600160a01b031681565b6040516001600160a01b0390911681526020016104ad565b6105096105043660046149a9565b610c29565b60405190151581526020016104ad565b6104a3610c96565b609d546104de906001600160a01b031681565b6104a3609a5481565b61055061054b366004614915565b610cad565b005b6104a3610560366004614d68565b610cf9565b610509610573366004614969565b610d1e565b610550610586366004614b4e565b610e7b565b610550610599366004614d68565b610ef8565b60a0546105ab9060ff1681565b60405160ff90911681526020016104ad565b6099546105ab9060ff1681565b6104a360aa5481565b60a5546104de906001600160a01b031681565b6104a369d3c21bcecceda100000081565b610550610605366004614915565b610f27565b60b0546104de906001600160a01b031681565b61050961062b3660046149a9565b610fef565b6104a361063e366004614915565b6001600160a01b03166000908152609e602052604090205490565b6104a360b25481565b60ac546105099060ff1681565b6105ab600181565b60a3546104de906001600160a01b031681565b61069361271081565b60405161ffff90911681526020016104ad565b60a0546106939062010000900461ffff1681565b6105506106c8366004614aed565b611075565b6104a360b15481565b6104a36402540be40081565b6105506106f03660046149d4565b6110cb565b610550610703366004614915565b611108565b6104a360a85481565b60a6546104de906001600160a01b031681565b60ac5461050990600160281b900460ff1681565b610550610746366004614915565b6111cb565b6104a3610759366004614d98565b611217565b60a7546104de906001600160a01b031681565b6104a361077f366004614915565b6112fe565b610550611320565b6104a360ad5481565b6104a360ab5481565b6104a36107ac366004614d68565b611356565b6108376107bf366004614d68565b60a9602052600090815260409020805460019091015460ff808316926001600160a81b036101008204169261ffff600160b01b8304811693600160c01b938490048216936001600160a01b0384169363ffffffff600160a01b82048116949282041692600160e01b82041691600160e81b9091041689565b6040805160ff909a168a526001600160a81b0390981660208a015261ffff9687169789019790975293851660608801526001600160a01b03909216608087015263ffffffff90811660a08701521660c0850152151560e084015216610100820152610120016104ad565b6105506108af366004614d68565b611549565b6065546001600160a01b03166104de565b6104a360a15481565b6105506108dc366004614d68565b611578565b6104be6115a7565b6104a3609c5481565b6104a3610900366004614c3d565b6115b4565b6104a3610913366004614c3d565b6115c5565b60a4546104de906001600160a01b031681565b6104a3670de0b6b3a764000081565b6105096109483660046149a9565b6115df565b6104a360ae5481565b6105096109643660046149a9565b6116c6565b610550610977366004614d39565b611797565b61055061098a366004614915565b61180b565b6104a3606481565b6105506109a53660046149d4565b611857565b6104a36109b8366004614c3d565b6118a1565b6104a36109cb366004614d68565b6118de565b6105506109de366004614915565b6118f8565b610550611944565b6109fe6109f9366004614e24565b611cde565b604080519283529015156020830152016104ad565b6104a3610a21366004614bc3565b611dcc565b6104a3610a34366004614931565b6001600160a01b039182166000908152609f6020908152604080832093909416825291909152205490565b610550610a6d366004614915565b611e20565b6105ab600281565b610550610a88366004614915565b611e6c565b610550610a9b366004614a0c565b611eb8565b6104a3610aae366004614bc3565b612044565b6104a3609b5481565b610550610aca366004614915565b612093565b60af546104de906001600160a01b031681565b60ac54610693906301000000900461ffff1681565b610550610b05366004614e5a565b61212b565b60a2546104de906001600160a01b031681565b610550610b2b366004614915565b612160565b60ac5461069390610100900461ffff1681565b6000610b4e846121ac565b60b154846001600160a81b03161015610b825760405162461bcd60e51b8152600401610b79906150b2565b60405180910390fd5b610b9160018585600186612221565b90505b9392505050565b60978054610ba890615308565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd490615308565b8015610c215780601f10610bf657610100808354040283529160200191610c21565b820191906000526020600020905b815481529060010190602001808311610c0457829003601f168201915b505050505081565b336000818152609f602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610c849086815260200190565b60405180910390a35060015b92915050565b6000609c54600019610ca8919061523b565b905090565b6065546001600160a01b03163314610cd75760405162461bcd60e51b8152600401610b7990615032565b60a780546001600160a01b0319166001600160a01b0392909216919091179055565b600069d3c21bcecceda1000000609b5483610d14919061527e565b610c90919061523b565b6000836001600160a01b038116610d475760405162461bcd60e51b8152600401610b7990614fbe565b836001600160a01b038116610d6e5760405162461bcd60e51b8152600401610b7990614fbe565b6001600160a01b0386166000908152609f60209081526040808320338452909152902054610d9d9085906152c5565b6001600160a01b0387166000908152609f60209081526040808320338452909152812091909155610dcd856118de565b6001600160a01b0388166000908152609e6020526040902054909150610df49082906152c5565b6001600160a01b038089166000908152609e60205260408082209390935590881681522054610e249082906151fd565b6001600160a01b038088166000818152609e6020526040908190209390935591519089169060008051602061540a83398151915290610e669089815260200190565b60405180910390a35060019695505050505050565b600054610100900460ff16610ea25760405162461bcd60e51b8152600401610b7990615067565b610eaa61277c565b8251610ebd9060979060208601906147df565b508151610ed19060989060208501906147df565b506099805460ff191660ff92909216919091179055505069d3c21bcecceda1000000609b55565b6065546001600160a01b03163314610f225760405162461bcd60e51b8152600401610b7990615032565b60ab55565b6065546001600160a01b03163314610f515760405162461bcd60e51b8152600401610b7990615032565b60a4546001600160a01b031615801590610f75575060a2546001600160a01b031615155b15610f985760a45460a254610f98916001600160a01b03918216911660006127ab565b60a480546001600160a01b0319166001600160a01b03831690811790915515801590610fce575060a2546001600160a01b031615155b15610fec5760a254610fec906001600160a01b0316826000196127ab565b50565b336000908152609f602090815260408083206001600160a01b038616845290915281205461101e9083906151fd565b336000818152609f602090815260408083206001600160a01b038916808552908352928190208590555193845290927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101610c84565b6065546001600160a01b0316331461109f5760405162461bcd60e51b8152600401610b7990615032565b81516110b29060979060208501906147df565b5080516110c69060989060208401906147df565b505050565b6065546001600160a01b031633146110f55760405162461bcd60e51b8152600401610b7990615032565b60ac805460ff1916911515919091179055565b6065546001600160a01b031633146111325760405162461bcd60e51b8152600401610b7990615032565b60a3546001600160a01b031615801590611156575060a2546001600160a01b031615155b1561117a5760a35460a25461117a916001600160a01b0391821691166000196127ab565b60a380546001600160a01b0319166001600160a01b03831690811790915515801590610fce575060a2546001600160a01b031615610fec5760a254610fec906001600160a01b0316826000196127ab565b6065546001600160a01b031633146111f55760405162461bcd60e51b8152600401610b7990615032565b60a580546001600160a01b0319166001600160a01b0392909216919091179055565b6000811580611230575060af546001600160a01b031633145b61123957600080fd5b600083815260a96020908152604091829020825161012081018452815460ff80821683526101008083046001600160a81b031695840195909552600160b01b820461ffff90811696840196909652600160c01b91829004861660608401526001909301546001600160a01b0381166080840152600160a01b810463ffffffff90811660a085015291810490911660c0830152600160e01b8104909216151560e0820152600160e81b909104909216908201526112f6848285612902565b949350505050565b6001600160a01b0381166000908152609e6020526040812054610c9090610cf9565b6065546001600160a01b0316331461134a5760405162461bcd60e51b8152600401610b7990615032565b6113546000612a16565b565b60006002600154141561137b5760405162461bcd60e51b8152600401610b79906150dd565b60026001908155600083815260a96020908152604091829020825161012081018452815460ff8082168084526101008084046001600160a81b031696850196909652600160b01b830461ffff90811697850197909752600160c01b928390048716606085015293909601546001600160a01b0381166080840152600160a01b810463ffffffff90811660a085015291810490911660c0830152600160e01b8104909516151560e0820152600160e81b909404909216908301526114775760405162461bcd60e51b815260206004820152601460248201527314995c5d595cdd081a59081b9bdd08199bdd5b9960621b6044820152606401610b79565b60a6546040516315b3b87360e01b81526001600160a01b03909116906315b3b873906114a7908490600401615114565b60206040518083038186803b1580156114bf57600080fd5b505afa1580156114d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f791906149f0565b6115345760405162461bcd60e51b815260206004820152600e60248201526d4e6f74206c697175696461626c6560901b6044820152606401610b79565b61153e8382612a68565b600180559392505050565b6065546001600160a01b031633146115735760405162461bcd60e51b8152600401610b7990615032565b60ad55565b6065546001600160a01b031633146115a25760405162461bcd60e51b8152600401610b7990615032565b60ae55565b60988054610ba890615308565b6000610b9460028484600080612221565b60006115d0836121ac565b610b9460018484600080612221565b336000908152609f602090815260408083206001600160a01b038616845290915281205480831061163357336000908152609f602090815260408083206001600160a01b0388168452909152812055611662565b61163d83826152c5565b336000908152609f602090815260408083206001600160a01b03891684529091529020555b336000818152609f602090815260408083206001600160a01b038916808552908352928190205490519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060019392505050565b6000826001600160a01b0381166116ef5760405162461bcd60e51b8152600401610b7990614fbe565b60006116fa846118de565b336000908152609e60205260409020549091506117189082906152c5565b336000908152609e6020526040808220929092556001600160a01b038716815220546117459082906151fd565b6001600160a01b0386166000818152609e602052604090819020929092559051339060008051602061540a833981519152906117849088815260200190565b60405180910390a3506001949350505050565b6065546001600160a01b031633146117c15760405162461bcd60e51b8152600401610b7990615032565b60ac805460a0805463ffff000019166201000061ffff9687160217905564ffffffff0019166101009484169490940264ffff00000019169390931763010000009190921602179055565b6065546001600160a01b031633146118355760405162461bcd60e51b8152600401610b7990615032565b60a680546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146118815760405162461bcd60e51b8152600401610b7990615032565b60ac8054911515600160281b0265ff000000000019909216919091179055565b600060b254836001600160a81b031610156118ce5760405162461bcd60e51b8152600401610b79906150b2565b610b946002848460016000612221565b609b54600090610d1469d3c21bcecceda10000008461527e565b6065546001600160a01b031633146119225760405162461bcd60e51b8152600401610b7990615032565b60af80546001600160a01b0319166001600160a01b0392909216919091179055565b60a3546040516329b2a60b60e21b815230600482015260009182916001600160a01b039091169063a6ca982c9060240160c06040518083038186803b15801561198c57600080fd5b505afa1580156119a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c49190614dbc565b5050505091509150806119e95760405162461bcd60e51b8152600401610b7990614f94565b6000609a546402540be40060a15485611a02919061527e565b611a0c919061527e565b611a16919061523b565b9050600060a760009054906101000a90046001600160a01b03166001600160a01b031663c1639a2b6040518163ffffffff1660e01b815260040160606040518083038186803b158015611a6857600080fd5b505afa158015611a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa09190614ec4565b505063ffffffff16905060006064611abd6402540be4008461527e565b611ac7919061523b565b9050828111611b185760405162461bcd60e51b815260206004820152601a60248201527f506f7369746976652072656261736520646973616c6c6f7765640000000000006044820152606401610b79565b6000611b2484836152c5565b60ac54909150600160281b900460ff161580611b64575060a05461271090611b569062010000900461ffff168461527e565b611b60919061523b565b8110155b611ba75760405162461bcd60e51b81526020600482015260146024820152732737ba1032b737bab3b4103232bb34b0ba34b7b760611b6044820152606401610b79565b60ac54600160281b900460ff161580611be5575060ac5461271090611bd7906301000000900461ffff168461527e565b611be1919061523b565b8111155b611c255760405162461bcd60e51b8152602060048201526011602482015270446576696174696f6e20746f6f2062696760781b6044820152606401610b79565b60ac54600090600160281b900460ff16611c40576001611c83565b60ac54611c5690610100900461ffff168461527e565b6001611c646127108561527e565b611c6e91906152c5565b611c78919061523b565b611c839060016151fd565b90506001811115611ca757611c98818361523b565b9150611ca482866151fd565b92505b600083611cbc84670de0b6b3a764000061527e565b611cc6919061523b565b9050611cd3816000612d86565b505050505050505050565b600080821580611cf8575060af546001600160a01b031633145b611d0157600080fd5b600085815260a96020908152604091829020825161012081018452815460ff80821683526101008083046001600160a81b031695840195909552600160b01b820461ffff90811696840196909652600160c01b91829004861660608401526001909301546001600160a01b0381166080840152600160a01b810463ffffffff90811660a085015291810490911660c0830152600160e01b8104909216151560e0820152600160e81b90910490921690820152611dbf86828787612f0d565b9250925050935093915050565b60b3546000906001600160a01b03163314611de657600080fd5b60a254611e07906001600160a01b031633306001600160a81b038616613108565b611e1960003384612710600080613146565b5092915050565b6065546001600160a01b03163314611e4a5760405162461bcd60e51b8152600401610b7990615032565b609d80546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b03163314611e965760405162461bcd60e51b8152600401610b7990615032565b60b080546001600160a01b0319166001600160a01b0392909216919091179055565b6000611ec460016133d0565b90508015611edc576000805461ff0019166101001790555b60a0805463ffff000019166264000017905560ac805465ffffffffff0019166501138803e800179055600160a881905560ad55601e60ae55611f208a8a6012610e7b565b611f2861345d565b60a280546001600160a01b03199081166001600160a01b038e811691821790935560a3805483168a851617905560a48054831689851617905560a58054831688851617905560a68054831687851617905560a7805490921692851692909217905560a188905560a0805460ff1990811660ff8c1617909155600060aa5564174876e80060ab5560ac8054909116600117905515611ff15760a254611fd8906001600160a01b0316876000196127ab565b60a254611ff1906001600160a01b0316866000196127ab565b8015612037576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b60b3546000906001600160a01b0316331461205e57600080fd5b6120813330612078610560866001600160a81b03166118de565b30929190613108565b611e196000338460008060008061348c565b6065546001600160a01b031633146120bd5760405162461bcd60e51b8152600401610b7990615032565b6001600160a01b0381166121225760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b79565b610fec81612a16565b6065546001600160a01b031633146121555760405162461bcd60e51b8152600401610b7990615032565b60b19190915560b255565b6065546001600160a01b0316331461218a5760405162461bcd60e51b8152600401610b7990615032565b60b380546001600160a01b0319166001600160a01b0392909216919091179055565b60ac5460ff1615806121d5575060ab5460aa546121d2906001600160a81b0384166151fd565b11155b610fec5760405162461bcd60e51b815260206004820152601e60248201527f546f74616c20726571756573747320616d6f756e7420657863656564656400006044820152606401610b79565b6000600260015414156122465760405162461bcd60e51b8152600401610b79906150dd565b60026001556001600160a81b03851661225e57600080fd5b6040805160a0810182526000602082018190529181018290526060810182905260808101919091526001600160a81b0386168152600260ff881614156122d55760006122b2876001600160a81b03166118de565b905080816001600160a81b0316146122c957600080fd5b6001600160a81b031681525b60a65460405163051a497b60e01b815263ffffffff871660048201526001600160a01b039091169063051a497b9060240160206040518083038186803b15801561231e57600080fd5b505afa158015612332573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123569190614d1d565b61ffff1660208083019190915260a6546040805162ef88df60e71b815290516001600160a01b03909216926377c46f8092600480840193829003018186803b1580156123a157600080fd5b505afa1580156123b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d99190614d1d565b61ffff908116604083015260208201518251612710926123fa92169061524f565b6124049190615215565b6001600160a81b03166060820152604081015181516127109161242d9161ffff9091169061524f565b6124379190615215565b6001600160a81b0316608082015260a85491506124558260016151fd565b60a855600061246a63ffffffff8716426151fd565b90506040518061012001604052808960ff16815260200183600001516001600160a81b03168152602001836020015161ffff168152602001836040015161ffff168152602001336001600160a01b031681526020014263ffffffff1681526020018263ffffffff16815260200186151581526020018561ffff1681525060a9600085815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a8154816001600160a81b0302191690836001600160a81b0316021790555060408201518160000160166101000a81548161ffff021916908361ffff16021790555060608201518160000160186101000a81548161ffff021916908361ffff16021790555060808201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160010160146101000a81548163ffffffff021916908363ffffffff16021790555060c08201518160010160186101000a81548163ffffffff021916908363ffffffff16021790555060e082015181600101601c6101000a81548160ff02191690831515021790555061010082015181600101601d6101000a81548161ffff021916908361ffff160217905550905050600260ff168860ff161461267957866001600160a81b031660aa5461267591906151fd565b60aa555b6126cc88866126bd5760ff8a166002146126a657836080015184606001516126a191906151fd565b6136e4565b6126a18460800151856060015161056091906151fd565b886001600160a81b03166136e4565b337fa670c85a56568fc022a5849f397274f0e963655cd9c383657b23f8617c4a3b88848a8a60ff8216600214612706578660600151612713565b6127138760600151610cf9565b6040805194855260ff90931660208501526001600160a81b0390911691830191909152606082015263ffffffff4281166080830152841660a082015287151560c082015261ffff871660e08201526101000160405180910390a250506001805595945050505050565b600054610100900460ff166127a35760405162461bcd60e51b8152600401610b7990615067565b611354613740565b8015806128345750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156127fa57600080fd5b505afa15801561280e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128329190614d80565b155b61289f5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610b79565b6040516001600160a01b0383166024820152604481018290526110c690849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613770565b6000600260015414156129275760405162461bcd60e51b8152600401610b79906150dd565b6002600181905550600061293e8585600286613842565b90508060800151612a0a5761295285613cc4565b600061298186866080015184600001518860400151866060015189801561297a57508a60e001515b600161348c565b608087810151885160e0808b0151604080518e815260ff909416602085015283018690526000606084015215159382019390935288151560a08201524263ffffffff1660c082015293965091935033926001600160a01b03909216917feaa5448472d06a833e3f8fea197d31076cb3c165c25c1a217def0eabbbd76f88910160405180910390a3505b50600180559392505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080612a7d83600001518460200151613d87565b60e08401519091506001600160a81b03821690612afb57604084015160009061271090612aae9061ffff168561524f565b612ab89190615215565b9050600061271061ffff16866060015161ffff1685612ad7919061524f565b612ae19190615215565b9050612aed81836151d2565b6001600160a81b0316925050505b835160ff1660021415612b1e57612b13816001613dc6565b50909150612b309050565b612b30826001600160a81b031661403d565b8360e00151612bba5760a654604051637693aa6160e01b8152600481018390526001600160a01b0390911690637693aa619060240160206040518083038186803b158015612b7d57600080fd5b505afa158015612b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb59190614d80565b612c36565b60a65460405163591b36f760e01b8152600481018390526001600160a01b039091169063591b36f79060240160206040518083038186803b158015612bfe57600080fd5b505afa158015612c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c369190614d80565b9250612c4185613cc4565b8360e0015115612c76576080840151612c7190612c5e85846152c5565b60a2546001600160a01b03169190614063565b612cf4565b60a4546001600160a01b0316638b0f154d612c9185846152c5565b60a25460405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b158015612cdb57600080fd5b505af1158015612cef573d6000803e3d6000fd5b505050505b60a254612d0b906001600160a01b03163385614063565b608084810151855160e0870151604080518a815260ff909316602084015282018790521515606082015263ffffffff42169281019290925233916001600160a01b03909116907fb0ed9dd07e136565ec73e51759602bc1c92e75cf86ceabcf197b2a8784c094db9060a00160405180910390a3505092915050565b609d546000906001600160a01b03163314612dd15760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b6044820152606401610b79565b82612e2257609b54604080514281526020810183905280820192909252517fc6642d24d84e7f3d36ca39f5cce10e75639d9b158d5193aa350e2f900653e4c09181900360600190a150609a54610c90565b609b5482612e5c57670de0b6b3a7640000612e3d85826152c5565b609b54612e4a919061527e565b612e54919061523b565b609b55612eb1565b6000670de0b6b3a7640000612e7186826151fd565b609b54612e7e919061527e565b612e88919061523b565b9050612e92610c96565b811015612ea357609b819055612eaf565b612eab610c96565b609b555b505b612ebc609c54610cf9565b609a55609b54604080514281526020810184905280820192909252517fc6642d24d84e7f3d36ca39f5cce10e75639d9b158d5193aa350e2f900653e4c09181900360600190a15050609a5492915050565b6000806000612f1f8787600187613842565b9050806080015115612f3457600191506130fe565b612f588787608001518360000151888a60e001518015612f515750885b6001613146565b909350915081156130fe57612f7986602001516001600160a81b031661403d565b612f8287613cc4565b60a454602082015160408301516001600160a01b0390921691638b0f154d91612faa916151d2565b60a25460405160e084901b6001600160e01b03191681526001600160a81b0390921660048301526001600160a01b03166024820152604401600060405180830381600087803b158015612ffc57600080fd5b505af1158015613010573d6000803e3d6000fd5b505050506101008101516001600160a81b0316156130555760b05461010082015160a254613055926001600160a01b03918216929116906001600160a81b0316614063565b336001600160a01b031686608001516001600160a01b03167feaa5448472d06a833e3f8fea197d31076cb3c165c25c1a217def0eabbbd76f8889896000015185610100015186602001516130a991906151d2565b60e08c8101516040805195865260ff90941660208601526001600160a81b0390921692840192909252600060608401521515608083015288151560a083015263ffffffff421660c08301520160405180910390a35b5094509492505050565b6040516001600160a01b03808516602483015283166044820152606481018290526131409085906323b872dd60e01b906084016128cb565b50505050565b60a35460405163055f575160e41b81523060048201526000918291829160019183916001600160a01b0316906355f575109060240160a06040518083038186803b15801561319357600080fd5b505afa1580156131a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131cb9190614ca9565b505050506001600160a81b03169050806000146132685760a3546040516329b2a60b60e21b81523060048201526001600160a01b039091169063a6ca982c9060240160c06040518083038186803b15801561322557600080fd5b505afa158015613239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325d9190614dbc565b509396509194505050505b816132855760405162461bcd60e51b8152600401610b7990614f94565b5050609a54600080808061329b8c8c8c8c614093565b94506001600160a81b031694506001600160a81b031694506001600160a81b031694505080156133bf576000851180156132d55750600086115b156132f657856132e5868661527e565b6132ef919061523b565b9750613306565b60a154613303908561527e565b97505b604080518f81526001600160a81b038e166020820152908101859052606081018990526080810184905260a081018390526001600160a01b038e16907f1ea03bd5ed908c036eb222c88975259903b8a291fb411a82ae9c8205d6c7d7ac9060c00160405180910390a2600088116133b05760405162461bcd60e51b815260206004820152600e60248201526d546f6f2066657720746f6b656e7360901b6044820152606401610b79565b6133ba8d89614463565b600196505b505050505050965096945050505050565b60008054610100900460ff1615613417578160ff1660011480156133f35750303b155b61340f5760405162461bcd60e51b8152600401610b7990614fe4565b506000919050565b60005460ff80841691161061343e5760405162461bcd60e51b8152600401610b7990614fe4565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166134845760405162461bcd60e51b8152600401610b7990615067565b611354614583565b60008060008060006134a78a6001600160a81b031687613dc6565b9194509250905060006127106134c161ffff8c168661527e565b6134cb919061523b565b90506127106134de61ffff8b168661527e565b6134e8919061523b565b9450600088156135715760a65460405163591b36f760e01b8152600481018790526001600160a01b039091169063591b36f79060240160206040518083038186803b15801561353657600080fd5b505afa15801561354a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061356e9190614d80565b90505b808261357d88886152c5565b61358791906152c5565b61359191906152c5565b9650600061359f83886151fd565b11156136235760a4546001600160a01b0316638b0f154d6135c084896151fd565b60a25460405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b15801561360a57600080fd5b505af115801561361e573d6000803e3d6000fd5b505050505b80156136535760b05460a254613646916001600160a01b03918216911683614063565b61365081876151fd565b95505b505060a25461366c906001600160a01b03168c87614063565b604080518d8152602081018590529081018690526001600160a81b038b1660608201526080810183905260a081018290526001600160a01b038c16907f6c4de564b51b3953a8d2eab8336cee66368f4ca65fbc7d31d535368983c1e1819060c00160405180910390a250505097509795505050505050565b60ff82166002141561372857806136fa336112fe565b10156137185760405162461bcd60e51b8152600401610b79906150b2565b61372430338184613108565b5050565b60a254613724906001600160a01b0316333084613108565b600054610100900460ff166137675760405162461bcd60e51b8152600401610b7990615067565b61135433612a16565b60006137c5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166145b09092919063ffffffff16565b8051909150156110c657808060200190518101906137e391906149f0565b6110c65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b79565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915281801561389957508360e001515b806138b0575060808401516001600160a01b031633145b6138b957600080fd5b8260ff16846000015160ff16146139075760405162461bcd60e51b815260206004820152601260248201527157726f6e672072657175657374207479706560701b6044820152606401610b79565b60a6546040516315b3b87360e01b81526001600160a01b03909116906315b3b87390613937908790600401615114565b60206040518083038186803b15801561394f57600080fd5b505afa158015613963573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061398791906149f0565b156139a3576139968585612a68565b50600160808201526112f6565b8115806139ba57508360c0015163ffffffff164210155b613a065760405162461bcd60e51b815260206004820152601760248201527f5461726765742074696d65206e6f7420726561636865640000000000000000006044820152606401610b79565b8360e001518015613a2157508360c0015163ffffffff164210155b613aaa5760a654604051634ab4396560e11b81526001600160a01b039091169063956872ca90613a55908790600401615114565b60206040518083038186803b158015613a6d57600080fd5b505afa158015613a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa59190614d1d565b613aad565b60005b61ffff90811660608301526040850151602086015161271092613ad192169061524f565b613adb9190615215565b6001600160a81b03166040820152835160ff1660011415613c18578360e001518015613b045750815b15613ba35760a654602085015160405163591b36f760e01b81526001600160a81b0390911660048201526001600160a01b039091169063591b36f79060240160206040518083038186803b158015613b5b57600080fd5b505afa158015613b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b939190614d80565b6001600160a81b03166101008201525b61271061ffff16816060015161ffff168560200151613bc2919061524f565b613bcc9190615215565b6001600160a81b03166020808301829052610100830151604084015191870151909291613bf89161529d565b613c02919061529d565b613c0c919061529d565b6001600160a81b031681525b8360e00151613c92576000613c77856000015161271061ffff16876060015161ffff168860200151613c4a919061524f565b613c549190615215565b84604001518860200151613c68919061529d565b613c72919061529d565b613d87565b6001600160a81b03169050613c908560000151826136e4565b505b835160ff16600214156112f657613cb184600001518560200151613d87565b6001600160a81b03168152949350505050565b600081815260a96020526040812080546001600160d01b031916815560010180546001600160f81b031916905560ad5490805b60a85483108015613d09575060ae5482105b8015613d505750600083815260a960205260409020600101546001600160a01b03161580613d505750600083815260a96020526040902060010154600160e01b900460ff16155b15613d795781613d5f81615343565b9250508280613d6d90615343565b93505060019050613cf7565b801561314057505060ad5550565b600060ff8316600214613d9b575080610c90565b6000613daf836001600160a81b0316610cf9565b905080816001600160a81b031614610b9457600080fd5b60a3546040516329b2a60b60e21b815230600482015260009182918291829182916001600160a01b03169063a6ca982c9060240160c06040518083038186803b158015613e1257600080fd5b505afa158015613e26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e4a9190614dbc565b505050925092505081613e6f5760405162461bcd60e51b8152600401610b7990614f94565b609a54600090613e88896001600160a81b03851661527e565b613e92919061523b565b9050806001600160a81b03168114613eec5760405162461bcd60e51b815260206004820152601760248201527f546f6f206d75636820706f736974696f6e20756e6974730000000000000000006044820152606401610b79565b801561401e5786613f895760a354604051635d357c1960e11b81526001600160a81b0383166004820152600160248201526001600160a01b039091169063ba6af83290604401606060405180830381600087803b158015613f4c57600080fd5b505af1158015613f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f849190614e7b565b614016565b60a35460405163c657549160e01b81526001600160a81b0383166004820152600160248201526001600160a01b039091169063c657549190604401606060405180830381600087803b158015613fde57600080fd5b505af1158015613ff2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140169190614e7b565b919750955093505b6140333061402e6105608b6118de565b6145bf565b5050509250925092565b60aa5481111561404f57600060aa5550565b8060aa5461405d91906152c5565b60aa5550565b6040516001600160a01b0383166024820152604481018290526110c690849063a9059cbb60e01b906064016128cb565b6000808080600186156142165760a3546040805163d934c20b60e01b8152905160009283926001600160a01b0390911691633c885ff960e21b918e91849163d934c20b916004808301926020929190829003018186803b1580156140f657600080fd5b505afa15801561410a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061412e9190614ea8565b604080516001600160a81b03909316602084015263ffffffff9091169082015261ffff8d1660608201526001608082015260a00160408051601f19818403018152908290526141809291602001614f14565b60408051601f198184030181529082905261419a91614f45565b6000604051808303816000865af19150503d80600081146141d7576040519150601f19603f3d011682016040523d82523d6000602084013e6141dc565b606091505b5091509150811561420a57808060200190518101906141fb9190614bdf565b9299509097509550935061420f565b600092505b5050614458565b851561433c5760a3546040805163d934c20b60e01b815290516001600160a01b039092169163f2217fe4918c91849163d934c20b916004808301926020929190829003018186803b15801561426a57600080fd5b505afa15801561427e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142a29190614ea8565b6040516001600160e01b031960e085901b1681526001600160a81b03909216600483015263ffffffff16602482015261ffff8b16604482015260016064820152608401608060405180830381600087803b1580156142ff57600080fd5b505af1158015614313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143379190614bdf565b61444d565b60a3546040805163d934c20b60e01b815290516001600160a01b03909216916353997f61918c91849163d934c20b916004808301926020929190829003018186803b15801561438a57600080fd5b505afa15801561439e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143c29190614ea8565b6040516001600160e01b031960e085901b1681526001600160a81b03909216600483015263ffffffff16602482015260016044820152606401608060405180830381600087803b15801561441557600080fd5b505af1158015614429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061444d9190614bdf565b929750909550935091505b945094509450945094565b816001600160a01b03811661448a5760405162461bcd60e51b8152600401610b7990614fbe565b81609a5461449891906151fd565b609a5560006144a6836118de565b905080609c546144b691906151fd565b609c556144c1610c96565b609b5411156145125760405162461bcd60e51b815260206004820152601a60248201527f4d6178207363616c696e6720666163746f7220746f6f206c6f770000000000006044820152606401610b79565b6001600160a01b0384166000908152609e60205260409020546145369082906151fd565b6001600160a01b0385166000818152609e602052604080822093909355915190919060008051602061540a833981519152906145759087815260200190565b60405180910390a350505050565b600054610100900460ff166145aa5760405162461bcd60e51b8152600401610b7990615067565b60018055565b6060610b918484600085614675565b816001600160a01b0381166145e65760405162461bcd60e51b8152600401610b7990614fbe565b81609a546145f491906152c5565b609a556000614602836118de565b905080609c5461461291906152c5565b609c556001600160a01b0384166000908152609e60205260409020546146399082906152c5565b6001600160a01b0385166000818152609e602052604080822093909355915160008051602061540a833981519152906145759087815260200190565b6060824710156146d65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b79565b6001600160a01b0385163b61472d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b79565b600080866001600160a01b031685876040516147499190614f45565b60006040518083038185875af1925050503d8060008114614786576040519150601f19603f3d011682016040523d82523d6000602084013e61478b565b606091505b509150915061479b8282866147a6565b979650505050505050565b606083156147b5575081610b94565b8251156147c55782518084602001fd5b8160405162461bcd60e51b8152600401610b799190614f61565b8280546147eb90615308565b90600052602060002090601f01602090048101928261480d5760008555614853565b82601f1061482657805160ff1916838001178555614853565b82800160010185558215614853579182015b82811115614853578251825591602001919060010190614838565b5061485f929150614863565b5090565b5b8082111561485f5760008155600101614864565b8035613458816153a0565b600082601f830112614893578081fd5b813567ffffffffffffffff808211156148ae576148ae61538a565b604051601f8301601f19908116603f011681019082821181831017156148d6576148d661538a565b816040528381528660208588010111156148ee578485fd5b8360208701602083013792830160200193909352509392505050565b8035613458816153fa565b600060208284031215614926578081fd5b8135610b94816153a0565b60008060408385031215614943578081fd5b823561494e816153a0565b9150602083013561495e816153a0565b809150509250929050565b60008060006060848603121561497d578081fd5b8335614988816153a0565b92506020840135614998816153a0565b929592945050506040919091013590565b600080604083850312156149bb578182fd5b82356149c6816153a0565b946020939093013593505050565b6000602082840312156149e5578081fd5b8135610b94816153b5565b600060208284031215614a01578081fd5b8151610b94816153b5565b6000806000806000806000806000806101408b8d031215614a2b578586fd5b614a348b614878565b995060208b013567ffffffffffffffff80821115614a50578788fd5b614a5c8e838f01614883565b9a5060408d0135915080821115614a71578788fd5b50614a7e8d828e01614883565b985050614a8d60608c0161490a565b965060808b01359550614aa260a08c01614878565b9450614ab060c08c01614878565b9350614abe60e08c01614878565b9250614acd6101008c01614878565b9150614adc6101208c01614878565b90509295989b9194979a5092959850565b60008060408385031215614aff578182fd5b823567ffffffffffffffff80821115614b16578384fd5b614b2286838701614883565b93506020850135915080821115614b37578283fd5b50614b4485828601614883565b9150509250929050565b600080600060608486031215614b62578081fd5b833567ffffffffffffffff80821115614b79578283fd5b614b8587838801614883565b94506020860135915080821115614b9a578283fd5b50614ba786828701614883565b9250506040840135614bb8816153fa565b809150509250925092565b600060208284031215614bd4578081fd5b8135610b94816153d3565b60008060008060808587031215614bf4578182fd5b8451614bff816153d3565b6020860151909450614c10816153d3565b6040860151909350614c21816153d3565b6060860151909250614c32816153d3565b939692955090935050565b60008060408385031215614c4f578182fd5b8235614c5a816153d3565b9150602083013561495e816153e8565b600080600060608486031215614c7e578081fd5b8335614c89816153d3565b92506020840135614c99816153e8565b91506040840135614bb8816153c3565b600080600080600060a08688031215614cc0578283fd5b8551614ccb816153d3565b6020870151909550614cdc816153fa565b6040870151909450614ced816153e8565b6060870151909350614cfe816153e8565b6080870151909250614d0f816153e8565b809150509295509295909350565b600060208284031215614d2e578081fd5b8151610b94816153c3565b600080600060608486031215614d4d578081fd5b8335614d58816153c3565b92506020840135614c99816153c3565b600060208284031215614d79578081fd5b5035919050565b600060208284031215614d91578081fd5b5051919050565b60008060408385031215614daa578182fd5b82359150602083013561495e816153b5565b60008060008060008060c08789031215614dd4578384fd5b865195506020870151614de6816153b5565b6040880151909550614df7816153d3565b6060880151909450614e08816153fa565b809350506080870151915060a087015190509295509295509295565b600080600060608486031215614e38578081fd5b833592506020840135614e4a816153c3565b91506040840135614bb8816153b5565b60008060408385031215614e6c578182fd5b50508035926020909101359150565b600080600060608486031215614e8f578081fd5b8351925060208401519150604084015190509250925092565b600060208284031215614eb9578081fd5b8151610b94816153e8565b600080600060608486031215614ed8578081fd5b8351614ee3816153e8565b602085015190935069ffffffffffffffffffff81168114614f02578182fd5b80925050604084015190509250925092565b6001600160e01b0319831681528151600090614f378160048501602087016152dc565b919091016004019392505050565b60008251614f578184602087016152dc565b9190910192915050565b6020815260008251806020840152614f808160408501602087016152dc565b601f01601f19169190910160400192915050565b60208082526010908201526f4e656761746976652062616c616e636560801b604082015260600190565b6020808252600c908201526b5a65726f206164647265737360a01b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601190820152704e6f7420656e6f75676820746f6b656e7360781b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b815160ff1681526020808301516001600160a81b0316908201526040808301516101208301916151499084018261ffff169052565b50606083015161515f606084018261ffff169052565b50608083015161517a60808401826001600160a01b03169052565b5060a083015161519260a084018263ffffffff169052565b5060c08301516151aa60c084018263ffffffff169052565b5060e08301516151be60e084018215159052565b506101009283015161ffff16919092015290565b60006001600160a81b038281168482168083038211156151f4576151f461535e565b01949350505050565b600082198211156152105761521061535e565b500190565b60006001600160a81b038381168061522f5761522f615374565b92169190910492915050565b60008261524a5761524a615374565b500490565b60006001600160a81b03828116848216811515828404821116156152755761527561535e565b02949350505050565b60008160001904831182151516156152985761529861535e565b500290565b60006001600160a81b03838116908316818110156152bd576152bd61535e565b039392505050565b6000828210156152d7576152d761535e565b500390565b60005b838110156152f75781810151838201526020016152df565b838111156131405750506000910152565b600181811c9082168061531c57607f821691505b6020821081141561533d57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156153575761535761535e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610fec57600080fd5b8015158114610fec57600080fd5b61ffff81168114610fec57600080fd5b6001600160a81b0381168114610fec57600080fd5b63ffffffff81168114610fec57600080fd5b60ff81168114610fec57600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212203446c54788d20e63d45ef866b56422e733f236e8ab2fd5f6c0d7e15a12fb16c464736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061048b5760003560e01c806376b27f3311610262578063b87f187e11610151578063e57a67ac116100ce578063f4b8602311610092578063f4b8602314610acf578063f780d9bc14610ae2578063f7b3af7414610af7578063fc0c546a14610b0a578063fca3b5aa14610b1d578063fe4fbe1914610b3057600080fd5b8063e57a67ac14610a7a578063ea35761014610a8d578063ec27050714610aa0578063ed3437f814610ab3578063f2fde38b14610abc57600080fd5b8063d0a9278111610115578063d0a92781146109eb578063d4a56af114610a13578063dd62ed3e14610a26578063e46adf6214610a5f578063e530413b14610a7257600080fd5b8063b87f187e14610997578063bef7b1d0146109aa578063c43a51b6146109bd578063c98ece90146109d0578063cf6caff3146109e357600080fd5b806397f79e92116101df578063a5cfa15c116101a3578063a5cfa15c1461094d578063a9059cbb14610956578063a9ae12b214610969578063b334ef631461097c578063b6f738d51461098f57600080fd5b806397f79e92146108f25780639c5bb73a146109055780639cf160f6146109185780639d7a32bb1461092b578063a457c2d71461093a57600080fd5b80638da5cb5b116102265780638da5cb5b146108b45780638eb50a38146108c55780638f16d787146108ce57806395d89b41146108e157806397d63f93146108e957600080fd5b806376b27f331461078c5780638094d8831461079557806380b4ec9f1461079e57806381d12c58146107b1578063832d19d8146108a157600080fd5b80633af9e6691161037e57806361944abf116102fb5780636c715641116102bf5780636c715641146107385780636d7277551461074b5780636f7d78281461075e57806370a0823114610771578063715018a61461078457600080fd5b806361944abf146106e25780636945c5ea146106f55780636a84a985146107085780636a9d1119146107115780636c39f4eb1461072457600080fd5b80634c255c97116103425780634c255c971461068a578063526ec4c4146106a65780635a446215146106ba57806360acfdcb146106cd57806360ebfee6146106d657600080fd5b80633af9e66914610630578063419dc5611461065957806341be99741461066257806347d8ca801461066f5780634bde38c81461067757600080fd5b80632900eed21161040c57806335a03bfa116103d057806335a03bfa146105d357806335b86d96146105e6578063373071f2146105f75780633839bdd01461060a578063395093511461061d57600080fd5b80632900eed2146105785780632a093cfc1461058b5780632c86d98e1461059e578063313ce567146105bd578063340e4fd5146105ca57600080fd5b806311fd8a831161045357806311fd8a831461052157806318160ddd146105345780631a8dd8f71461053d5780631c70ca291461055257806323b872dd1461056557600080fd5b806303b70a161461049057806306fdde03146104b657806307546172146104cb578063095ea7b3146104f657806311d3e6c414610519575b600080fd5b6104a361049e366004614c6a565b610b43565b6040519081526020015b60405180910390f35b6104be610b9b565b6040516104ad9190614f61565b60b3546104de906001600160a01b031681565b6040516001600160a01b0390911681526020016104ad565b6105096105043660046149a9565b610c29565b60405190151581526020016104ad565b6104a3610c96565b609d546104de906001600160a01b031681565b6104a3609a5481565b61055061054b366004614915565b610cad565b005b6104a3610560366004614d68565b610cf9565b610509610573366004614969565b610d1e565b610550610586366004614b4e565b610e7b565b610550610599366004614d68565b610ef8565b60a0546105ab9060ff1681565b60405160ff90911681526020016104ad565b6099546105ab9060ff1681565b6104a360aa5481565b60a5546104de906001600160a01b031681565b6104a369d3c21bcecceda100000081565b610550610605366004614915565b610f27565b60b0546104de906001600160a01b031681565b61050961062b3660046149a9565b610fef565b6104a361063e366004614915565b6001600160a01b03166000908152609e602052604090205490565b6104a360b25481565b60ac546105099060ff1681565b6105ab600181565b60a3546104de906001600160a01b031681565b61069361271081565b60405161ffff90911681526020016104ad565b60a0546106939062010000900461ffff1681565b6105506106c8366004614aed565b611075565b6104a360b15481565b6104a36402540be40081565b6105506106f03660046149d4565b6110cb565b610550610703366004614915565b611108565b6104a360a85481565b60a6546104de906001600160a01b031681565b60ac5461050990600160281b900460ff1681565b610550610746366004614915565b6111cb565b6104a3610759366004614d98565b611217565b60a7546104de906001600160a01b031681565b6104a361077f366004614915565b6112fe565b610550611320565b6104a360ad5481565b6104a360ab5481565b6104a36107ac366004614d68565b611356565b6108376107bf366004614d68565b60a9602052600090815260409020805460019091015460ff808316926001600160a81b036101008204169261ffff600160b01b8304811693600160c01b938490048216936001600160a01b0384169363ffffffff600160a01b82048116949282041692600160e01b82041691600160e81b9091041689565b6040805160ff909a168a526001600160a81b0390981660208a015261ffff9687169789019790975293851660608801526001600160a01b03909216608087015263ffffffff90811660a08701521660c0850152151560e084015216610100820152610120016104ad565b6105506108af366004614d68565b611549565b6065546001600160a01b03166104de565b6104a360a15481565b6105506108dc366004614d68565b611578565b6104be6115a7565b6104a3609c5481565b6104a3610900366004614c3d565b6115b4565b6104a3610913366004614c3d565b6115c5565b60a4546104de906001600160a01b031681565b6104a3670de0b6b3a764000081565b6105096109483660046149a9565b6115df565b6104a360ae5481565b6105096109643660046149a9565b6116c6565b610550610977366004614d39565b611797565b61055061098a366004614915565b61180b565b6104a3606481565b6105506109a53660046149d4565b611857565b6104a36109b8366004614c3d565b6118a1565b6104a36109cb366004614d68565b6118de565b6105506109de366004614915565b6118f8565b610550611944565b6109fe6109f9366004614e24565b611cde565b604080519283529015156020830152016104ad565b6104a3610a21366004614bc3565b611dcc565b6104a3610a34366004614931565b6001600160a01b039182166000908152609f6020908152604080832093909416825291909152205490565b610550610a6d366004614915565b611e20565b6105ab600281565b610550610a88366004614915565b611e6c565b610550610a9b366004614a0c565b611eb8565b6104a3610aae366004614bc3565b612044565b6104a3609b5481565b610550610aca366004614915565b612093565b60af546104de906001600160a01b031681565b60ac54610693906301000000900461ffff1681565b610550610b05366004614e5a565b61212b565b60a2546104de906001600160a01b031681565b610550610b2b366004614915565b612160565b60ac5461069390610100900461ffff1681565b6000610b4e846121ac565b60b154846001600160a81b03161015610b825760405162461bcd60e51b8152600401610b79906150b2565b60405180910390fd5b610b9160018585600186612221565b90505b9392505050565b60978054610ba890615308565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd490615308565b8015610c215780601f10610bf657610100808354040283529160200191610c21565b820191906000526020600020905b815481529060010190602001808311610c0457829003601f168201915b505050505081565b336000818152609f602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610c849086815260200190565b60405180910390a35060015b92915050565b6000609c54600019610ca8919061523b565b905090565b6065546001600160a01b03163314610cd75760405162461bcd60e51b8152600401610b7990615032565b60a780546001600160a01b0319166001600160a01b0392909216919091179055565b600069d3c21bcecceda1000000609b5483610d14919061527e565b610c90919061523b565b6000836001600160a01b038116610d475760405162461bcd60e51b8152600401610b7990614fbe565b836001600160a01b038116610d6e5760405162461bcd60e51b8152600401610b7990614fbe565b6001600160a01b0386166000908152609f60209081526040808320338452909152902054610d9d9085906152c5565b6001600160a01b0387166000908152609f60209081526040808320338452909152812091909155610dcd856118de565b6001600160a01b0388166000908152609e6020526040902054909150610df49082906152c5565b6001600160a01b038089166000908152609e60205260408082209390935590881681522054610e249082906151fd565b6001600160a01b038088166000818152609e6020526040908190209390935591519089169060008051602061540a83398151915290610e669089815260200190565b60405180910390a35060019695505050505050565b600054610100900460ff16610ea25760405162461bcd60e51b8152600401610b7990615067565b610eaa61277c565b8251610ebd9060979060208601906147df565b508151610ed19060989060208501906147df565b506099805460ff191660ff92909216919091179055505069d3c21bcecceda1000000609b55565b6065546001600160a01b03163314610f225760405162461bcd60e51b8152600401610b7990615032565b60ab55565b6065546001600160a01b03163314610f515760405162461bcd60e51b8152600401610b7990615032565b60a4546001600160a01b031615801590610f75575060a2546001600160a01b031615155b15610f985760a45460a254610f98916001600160a01b03918216911660006127ab565b60a480546001600160a01b0319166001600160a01b03831690811790915515801590610fce575060a2546001600160a01b031615155b15610fec5760a254610fec906001600160a01b0316826000196127ab565b50565b336000908152609f602090815260408083206001600160a01b038616845290915281205461101e9083906151fd565b336000818152609f602090815260408083206001600160a01b038916808552908352928190208590555193845290927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101610c84565b6065546001600160a01b0316331461109f5760405162461bcd60e51b8152600401610b7990615032565b81516110b29060979060208501906147df565b5080516110c69060989060208401906147df565b505050565b6065546001600160a01b031633146110f55760405162461bcd60e51b8152600401610b7990615032565b60ac805460ff1916911515919091179055565b6065546001600160a01b031633146111325760405162461bcd60e51b8152600401610b7990615032565b60a3546001600160a01b031615801590611156575060a2546001600160a01b031615155b1561117a5760a35460a25461117a916001600160a01b0391821691166000196127ab565b60a380546001600160a01b0319166001600160a01b03831690811790915515801590610fce575060a2546001600160a01b031615610fec5760a254610fec906001600160a01b0316826000196127ab565b6065546001600160a01b031633146111f55760405162461bcd60e51b8152600401610b7990615032565b60a580546001600160a01b0319166001600160a01b0392909216919091179055565b6000811580611230575060af546001600160a01b031633145b61123957600080fd5b600083815260a96020908152604091829020825161012081018452815460ff80821683526101008083046001600160a81b031695840195909552600160b01b820461ffff90811696840196909652600160c01b91829004861660608401526001909301546001600160a01b0381166080840152600160a01b810463ffffffff90811660a085015291810490911660c0830152600160e01b8104909216151560e0820152600160e81b909104909216908201526112f6848285612902565b949350505050565b6001600160a01b0381166000908152609e6020526040812054610c9090610cf9565b6065546001600160a01b0316331461134a5760405162461bcd60e51b8152600401610b7990615032565b6113546000612a16565b565b60006002600154141561137b5760405162461bcd60e51b8152600401610b79906150dd565b60026001908155600083815260a96020908152604091829020825161012081018452815460ff8082168084526101008084046001600160a81b031696850196909652600160b01b830461ffff90811697850197909752600160c01b928390048716606085015293909601546001600160a01b0381166080840152600160a01b810463ffffffff90811660a085015291810490911660c0830152600160e01b8104909516151560e0820152600160e81b909404909216908301526114775760405162461bcd60e51b815260206004820152601460248201527314995c5d595cdd081a59081b9bdd08199bdd5b9960621b6044820152606401610b79565b60a6546040516315b3b87360e01b81526001600160a01b03909116906315b3b873906114a7908490600401615114565b60206040518083038186803b1580156114bf57600080fd5b505afa1580156114d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f791906149f0565b6115345760405162461bcd60e51b815260206004820152600e60248201526d4e6f74206c697175696461626c6560901b6044820152606401610b79565b61153e8382612a68565b600180559392505050565b6065546001600160a01b031633146115735760405162461bcd60e51b8152600401610b7990615032565b60ad55565b6065546001600160a01b031633146115a25760405162461bcd60e51b8152600401610b7990615032565b60ae55565b60988054610ba890615308565b6000610b9460028484600080612221565b60006115d0836121ac565b610b9460018484600080612221565b336000908152609f602090815260408083206001600160a01b038616845290915281205480831061163357336000908152609f602090815260408083206001600160a01b0388168452909152812055611662565b61163d83826152c5565b336000908152609f602090815260408083206001600160a01b03891684529091529020555b336000818152609f602090815260408083206001600160a01b038916808552908352928190205490519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060019392505050565b6000826001600160a01b0381166116ef5760405162461bcd60e51b8152600401610b7990614fbe565b60006116fa846118de565b336000908152609e60205260409020549091506117189082906152c5565b336000908152609e6020526040808220929092556001600160a01b038716815220546117459082906151fd565b6001600160a01b0386166000818152609e602052604090819020929092559051339060008051602061540a833981519152906117849088815260200190565b60405180910390a3506001949350505050565b6065546001600160a01b031633146117c15760405162461bcd60e51b8152600401610b7990615032565b60ac805460a0805463ffff000019166201000061ffff9687160217905564ffffffff0019166101009484169490940264ffff00000019169390931763010000009190921602179055565b6065546001600160a01b031633146118355760405162461bcd60e51b8152600401610b7990615032565b60a680546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146118815760405162461bcd60e51b8152600401610b7990615032565b60ac8054911515600160281b0265ff000000000019909216919091179055565b600060b254836001600160a81b031610156118ce5760405162461bcd60e51b8152600401610b79906150b2565b610b946002848460016000612221565b609b54600090610d1469d3c21bcecceda10000008461527e565b6065546001600160a01b031633146119225760405162461bcd60e51b8152600401610b7990615032565b60af80546001600160a01b0319166001600160a01b0392909216919091179055565b60a3546040516329b2a60b60e21b815230600482015260009182916001600160a01b039091169063a6ca982c9060240160c06040518083038186803b15801561198c57600080fd5b505afa1580156119a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c49190614dbc565b5050505091509150806119e95760405162461bcd60e51b8152600401610b7990614f94565b6000609a546402540be40060a15485611a02919061527e565b611a0c919061527e565b611a16919061523b565b9050600060a760009054906101000a90046001600160a01b03166001600160a01b031663c1639a2b6040518163ffffffff1660e01b815260040160606040518083038186803b158015611a6857600080fd5b505afa158015611a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa09190614ec4565b505063ffffffff16905060006064611abd6402540be4008461527e565b611ac7919061523b565b9050828111611b185760405162461bcd60e51b815260206004820152601a60248201527f506f7369746976652072656261736520646973616c6c6f7765640000000000006044820152606401610b79565b6000611b2484836152c5565b60ac54909150600160281b900460ff161580611b64575060a05461271090611b569062010000900461ffff168461527e565b611b60919061523b565b8110155b611ba75760405162461bcd60e51b81526020600482015260146024820152732737ba1032b737bab3b4103232bb34b0ba34b7b760611b6044820152606401610b79565b60ac54600160281b900460ff161580611be5575060ac5461271090611bd7906301000000900461ffff168461527e565b611be1919061523b565b8111155b611c255760405162461bcd60e51b8152602060048201526011602482015270446576696174696f6e20746f6f2062696760781b6044820152606401610b79565b60ac54600090600160281b900460ff16611c40576001611c83565b60ac54611c5690610100900461ffff168461527e565b6001611c646127108561527e565b611c6e91906152c5565b611c78919061523b565b611c839060016151fd565b90506001811115611ca757611c98818361523b565b9150611ca482866151fd565b92505b600083611cbc84670de0b6b3a764000061527e565b611cc6919061523b565b9050611cd3816000612d86565b505050505050505050565b600080821580611cf8575060af546001600160a01b031633145b611d0157600080fd5b600085815260a96020908152604091829020825161012081018452815460ff80821683526101008083046001600160a81b031695840195909552600160b01b820461ffff90811696840196909652600160c01b91829004861660608401526001909301546001600160a01b0381166080840152600160a01b810463ffffffff90811660a085015291810490911660c0830152600160e01b8104909216151560e0820152600160e81b90910490921690820152611dbf86828787612f0d565b9250925050935093915050565b60b3546000906001600160a01b03163314611de657600080fd5b60a254611e07906001600160a01b031633306001600160a81b038616613108565b611e1960003384612710600080613146565b5092915050565b6065546001600160a01b03163314611e4a5760405162461bcd60e51b8152600401610b7990615032565b609d80546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b03163314611e965760405162461bcd60e51b8152600401610b7990615032565b60b080546001600160a01b0319166001600160a01b0392909216919091179055565b6000611ec460016133d0565b90508015611edc576000805461ff0019166101001790555b60a0805463ffff000019166264000017905560ac805465ffffffffff0019166501138803e800179055600160a881905560ad55601e60ae55611f208a8a6012610e7b565b611f2861345d565b60a280546001600160a01b03199081166001600160a01b038e811691821790935560a3805483168a851617905560a48054831689851617905560a58054831688851617905560a68054831687851617905560a7805490921692851692909217905560a188905560a0805460ff1990811660ff8c1617909155600060aa5564174876e80060ab5560ac8054909116600117905515611ff15760a254611fd8906001600160a01b0316876000196127ab565b60a254611ff1906001600160a01b0316866000196127ab565b8015612037576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b60b3546000906001600160a01b0316331461205e57600080fd5b6120813330612078610560866001600160a81b03166118de565b30929190613108565b611e196000338460008060008061348c565b6065546001600160a01b031633146120bd5760405162461bcd60e51b8152600401610b7990615032565b6001600160a01b0381166121225760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b79565b610fec81612a16565b6065546001600160a01b031633146121555760405162461bcd60e51b8152600401610b7990615032565b60b19190915560b255565b6065546001600160a01b0316331461218a5760405162461bcd60e51b8152600401610b7990615032565b60b380546001600160a01b0319166001600160a01b0392909216919091179055565b60ac5460ff1615806121d5575060ab5460aa546121d2906001600160a81b0384166151fd565b11155b610fec5760405162461bcd60e51b815260206004820152601e60248201527f546f74616c20726571756573747320616d6f756e7420657863656564656400006044820152606401610b79565b6000600260015414156122465760405162461bcd60e51b8152600401610b79906150dd565b60026001556001600160a81b03851661225e57600080fd5b6040805160a0810182526000602082018190529181018290526060810182905260808101919091526001600160a81b0386168152600260ff881614156122d55760006122b2876001600160a81b03166118de565b905080816001600160a81b0316146122c957600080fd5b6001600160a81b031681525b60a65460405163051a497b60e01b815263ffffffff871660048201526001600160a01b039091169063051a497b9060240160206040518083038186803b15801561231e57600080fd5b505afa158015612332573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123569190614d1d565b61ffff1660208083019190915260a6546040805162ef88df60e71b815290516001600160a01b03909216926377c46f8092600480840193829003018186803b1580156123a157600080fd5b505afa1580156123b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d99190614d1d565b61ffff908116604083015260208201518251612710926123fa92169061524f565b6124049190615215565b6001600160a81b03166060820152604081015181516127109161242d9161ffff9091169061524f565b6124379190615215565b6001600160a81b0316608082015260a85491506124558260016151fd565b60a855600061246a63ffffffff8716426151fd565b90506040518061012001604052808960ff16815260200183600001516001600160a81b03168152602001836020015161ffff168152602001836040015161ffff168152602001336001600160a01b031681526020014263ffffffff1681526020018263ffffffff16815260200186151581526020018561ffff1681525060a9600085815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a8154816001600160a81b0302191690836001600160a81b0316021790555060408201518160000160166101000a81548161ffff021916908361ffff16021790555060608201518160000160186101000a81548161ffff021916908361ffff16021790555060808201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160010160146101000a81548163ffffffff021916908363ffffffff16021790555060c08201518160010160186101000a81548163ffffffff021916908363ffffffff16021790555060e082015181600101601c6101000a81548160ff02191690831515021790555061010082015181600101601d6101000a81548161ffff021916908361ffff160217905550905050600260ff168860ff161461267957866001600160a81b031660aa5461267591906151fd565b60aa555b6126cc88866126bd5760ff8a166002146126a657836080015184606001516126a191906151fd565b6136e4565b6126a18460800151856060015161056091906151fd565b886001600160a81b03166136e4565b337fa670c85a56568fc022a5849f397274f0e963655cd9c383657b23f8617c4a3b88848a8a60ff8216600214612706578660600151612713565b6127138760600151610cf9565b6040805194855260ff90931660208501526001600160a81b0390911691830191909152606082015263ffffffff4281166080830152841660a082015287151560c082015261ffff871660e08201526101000160405180910390a250506001805595945050505050565b600054610100900460ff166127a35760405162461bcd60e51b8152600401610b7990615067565b611354613740565b8015806128345750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156127fa57600080fd5b505afa15801561280e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128329190614d80565b155b61289f5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610b79565b6040516001600160a01b0383166024820152604481018290526110c690849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613770565b6000600260015414156129275760405162461bcd60e51b8152600401610b79906150dd565b6002600181905550600061293e8585600286613842565b90508060800151612a0a5761295285613cc4565b600061298186866080015184600001518860400151866060015189801561297a57508a60e001515b600161348c565b608087810151885160e0808b0151604080518e815260ff909416602085015283018690526000606084015215159382019390935288151560a08201524263ffffffff1660c082015293965091935033926001600160a01b03909216917feaa5448472d06a833e3f8fea197d31076cb3c165c25c1a217def0eabbbd76f88910160405180910390a3505b50600180559392505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080612a7d83600001518460200151613d87565b60e08401519091506001600160a81b03821690612afb57604084015160009061271090612aae9061ffff168561524f565b612ab89190615215565b9050600061271061ffff16866060015161ffff1685612ad7919061524f565b612ae19190615215565b9050612aed81836151d2565b6001600160a81b0316925050505b835160ff1660021415612b1e57612b13816001613dc6565b50909150612b309050565b612b30826001600160a81b031661403d565b8360e00151612bba5760a654604051637693aa6160e01b8152600481018390526001600160a01b0390911690637693aa619060240160206040518083038186803b158015612b7d57600080fd5b505afa158015612b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bb59190614d80565b612c36565b60a65460405163591b36f760e01b8152600481018390526001600160a01b039091169063591b36f79060240160206040518083038186803b158015612bfe57600080fd5b505afa158015612c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c369190614d80565b9250612c4185613cc4565b8360e0015115612c76576080840151612c7190612c5e85846152c5565b60a2546001600160a01b03169190614063565b612cf4565b60a4546001600160a01b0316638b0f154d612c9185846152c5565b60a25460405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b158015612cdb57600080fd5b505af1158015612cef573d6000803e3d6000fd5b505050505b60a254612d0b906001600160a01b03163385614063565b608084810151855160e0870151604080518a815260ff909316602084015282018790521515606082015263ffffffff42169281019290925233916001600160a01b03909116907fb0ed9dd07e136565ec73e51759602bc1c92e75cf86ceabcf197b2a8784c094db9060a00160405180910390a3505092915050565b609d546000906001600160a01b03163314612dd15760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b6044820152606401610b79565b82612e2257609b54604080514281526020810183905280820192909252517fc6642d24d84e7f3d36ca39f5cce10e75639d9b158d5193aa350e2f900653e4c09181900360600190a150609a54610c90565b609b5482612e5c57670de0b6b3a7640000612e3d85826152c5565b609b54612e4a919061527e565b612e54919061523b565b609b55612eb1565b6000670de0b6b3a7640000612e7186826151fd565b609b54612e7e919061527e565b612e88919061523b565b9050612e92610c96565b811015612ea357609b819055612eaf565b612eab610c96565b609b555b505b612ebc609c54610cf9565b609a55609b54604080514281526020810184905280820192909252517fc6642d24d84e7f3d36ca39f5cce10e75639d9b158d5193aa350e2f900653e4c09181900360600190a15050609a5492915050565b6000806000612f1f8787600187613842565b9050806080015115612f3457600191506130fe565b612f588787608001518360000151888a60e001518015612f515750885b6001613146565b909350915081156130fe57612f7986602001516001600160a81b031661403d565b612f8287613cc4565b60a454602082015160408301516001600160a01b0390921691638b0f154d91612faa916151d2565b60a25460405160e084901b6001600160e01b03191681526001600160a81b0390921660048301526001600160a01b03166024820152604401600060405180830381600087803b158015612ffc57600080fd5b505af1158015613010573d6000803e3d6000fd5b505050506101008101516001600160a81b0316156130555760b05461010082015160a254613055926001600160a01b03918216929116906001600160a81b0316614063565b336001600160a01b031686608001516001600160a01b03167feaa5448472d06a833e3f8fea197d31076cb3c165c25c1a217def0eabbbd76f8889896000015185610100015186602001516130a991906151d2565b60e08c8101516040805195865260ff90941660208601526001600160a81b0390921692840192909252600060608401521515608083015288151560a083015263ffffffff421660c08301520160405180910390a35b5094509492505050565b6040516001600160a01b03808516602483015283166044820152606481018290526131409085906323b872dd60e01b906084016128cb565b50505050565b60a35460405163055f575160e41b81523060048201526000918291829160019183916001600160a01b0316906355f575109060240160a06040518083038186803b15801561319357600080fd5b505afa1580156131a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131cb9190614ca9565b505050506001600160a81b03169050806000146132685760a3546040516329b2a60b60e21b81523060048201526001600160a01b039091169063a6ca982c9060240160c06040518083038186803b15801561322557600080fd5b505afa158015613239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325d9190614dbc565b509396509194505050505b816132855760405162461bcd60e51b8152600401610b7990614f94565b5050609a54600080808061329b8c8c8c8c614093565b94506001600160a81b031694506001600160a81b031694506001600160a81b031694505080156133bf576000851180156132d55750600086115b156132f657856132e5868661527e565b6132ef919061523b565b9750613306565b60a154613303908561527e565b97505b604080518f81526001600160a81b038e166020820152908101859052606081018990526080810184905260a081018390526001600160a01b038e16907f1ea03bd5ed908c036eb222c88975259903b8a291fb411a82ae9c8205d6c7d7ac9060c00160405180910390a2600088116133b05760405162461bcd60e51b815260206004820152600e60248201526d546f6f2066657720746f6b656e7360901b6044820152606401610b79565b6133ba8d89614463565b600196505b505050505050965096945050505050565b60008054610100900460ff1615613417578160ff1660011480156133f35750303b155b61340f5760405162461bcd60e51b8152600401610b7990614fe4565b506000919050565b60005460ff80841691161061343e5760405162461bcd60e51b8152600401610b7990614fe4565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166134845760405162461bcd60e51b8152600401610b7990615067565b611354614583565b60008060008060006134a78a6001600160a81b031687613dc6565b9194509250905060006127106134c161ffff8c168661527e565b6134cb919061523b565b90506127106134de61ffff8b168661527e565b6134e8919061523b565b9450600088156135715760a65460405163591b36f760e01b8152600481018790526001600160a01b039091169063591b36f79060240160206040518083038186803b15801561353657600080fd5b505afa15801561354a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061356e9190614d80565b90505b808261357d88886152c5565b61358791906152c5565b61359191906152c5565b9650600061359f83886151fd565b11156136235760a4546001600160a01b0316638b0f154d6135c084896151fd565b60a25460405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b15801561360a57600080fd5b505af115801561361e573d6000803e3d6000fd5b505050505b80156136535760b05460a254613646916001600160a01b03918216911683614063565b61365081876151fd565b95505b505060a25461366c906001600160a01b03168c87614063565b604080518d8152602081018590529081018690526001600160a81b038b1660608201526080810183905260a081018290526001600160a01b038c16907f6c4de564b51b3953a8d2eab8336cee66368f4ca65fbc7d31d535368983c1e1819060c00160405180910390a250505097509795505050505050565b60ff82166002141561372857806136fa336112fe565b10156137185760405162461bcd60e51b8152600401610b79906150b2565b61372430338184613108565b5050565b60a254613724906001600160a01b0316333084613108565b600054610100900460ff166137675760405162461bcd60e51b8152600401610b7990615067565b61135433612a16565b60006137c5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166145b09092919063ffffffff16565b8051909150156110c657808060200190518101906137e391906149f0565b6110c65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b79565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915281801561389957508360e001515b806138b0575060808401516001600160a01b031633145b6138b957600080fd5b8260ff16846000015160ff16146139075760405162461bcd60e51b815260206004820152601260248201527157726f6e672072657175657374207479706560701b6044820152606401610b79565b60a6546040516315b3b87360e01b81526001600160a01b03909116906315b3b87390613937908790600401615114565b60206040518083038186803b15801561394f57600080fd5b505afa158015613963573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061398791906149f0565b156139a3576139968585612a68565b50600160808201526112f6565b8115806139ba57508360c0015163ffffffff164210155b613a065760405162461bcd60e51b815260206004820152601760248201527f5461726765742074696d65206e6f7420726561636865640000000000000000006044820152606401610b79565b8360e001518015613a2157508360c0015163ffffffff164210155b613aaa5760a654604051634ab4396560e11b81526001600160a01b039091169063956872ca90613a55908790600401615114565b60206040518083038186803b158015613a6d57600080fd5b505afa158015613a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa59190614d1d565b613aad565b60005b61ffff90811660608301526040850151602086015161271092613ad192169061524f565b613adb9190615215565b6001600160a81b03166040820152835160ff1660011415613c18578360e001518015613b045750815b15613ba35760a654602085015160405163591b36f760e01b81526001600160a81b0390911660048201526001600160a01b039091169063591b36f79060240160206040518083038186803b158015613b5b57600080fd5b505afa158015613b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b939190614d80565b6001600160a81b03166101008201525b61271061ffff16816060015161ffff168560200151613bc2919061524f565b613bcc9190615215565b6001600160a81b03166020808301829052610100830151604084015191870151909291613bf89161529d565b613c02919061529d565b613c0c919061529d565b6001600160a81b031681525b8360e00151613c92576000613c77856000015161271061ffff16876060015161ffff168860200151613c4a919061524f565b613c549190615215565b84604001518860200151613c68919061529d565b613c72919061529d565b613d87565b6001600160a81b03169050613c908560000151826136e4565b505b835160ff16600214156112f657613cb184600001518560200151613d87565b6001600160a81b03168152949350505050565b600081815260a96020526040812080546001600160d01b031916815560010180546001600160f81b031916905560ad5490805b60a85483108015613d09575060ae5482105b8015613d505750600083815260a960205260409020600101546001600160a01b03161580613d505750600083815260a96020526040902060010154600160e01b900460ff16155b15613d795781613d5f81615343565b9250508280613d6d90615343565b93505060019050613cf7565b801561314057505060ad5550565b600060ff8316600214613d9b575080610c90565b6000613daf836001600160a81b0316610cf9565b905080816001600160a81b031614610b9457600080fd5b60a3546040516329b2a60b60e21b815230600482015260009182918291829182916001600160a01b03169063a6ca982c9060240160c06040518083038186803b158015613e1257600080fd5b505afa158015613e26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e4a9190614dbc565b505050925092505081613e6f5760405162461bcd60e51b8152600401610b7990614f94565b609a54600090613e88896001600160a81b03851661527e565b613e92919061523b565b9050806001600160a81b03168114613eec5760405162461bcd60e51b815260206004820152601760248201527f546f6f206d75636820706f736974696f6e20756e6974730000000000000000006044820152606401610b79565b801561401e5786613f895760a354604051635d357c1960e11b81526001600160a81b0383166004820152600160248201526001600160a01b039091169063ba6af83290604401606060405180830381600087803b158015613f4c57600080fd5b505af1158015613f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f849190614e7b565b614016565b60a35460405163c657549160e01b81526001600160a81b0383166004820152600160248201526001600160a01b039091169063c657549190604401606060405180830381600087803b158015613fde57600080fd5b505af1158015613ff2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140169190614e7b565b919750955093505b6140333061402e6105608b6118de565b6145bf565b5050509250925092565b60aa5481111561404f57600060aa5550565b8060aa5461405d91906152c5565b60aa5550565b6040516001600160a01b0383166024820152604481018290526110c690849063a9059cbb60e01b906064016128cb565b6000808080600186156142165760a3546040805163d934c20b60e01b8152905160009283926001600160a01b0390911691633c885ff960e21b918e91849163d934c20b916004808301926020929190829003018186803b1580156140f657600080fd5b505afa15801561410a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061412e9190614ea8565b604080516001600160a81b03909316602084015263ffffffff9091169082015261ffff8d1660608201526001608082015260a00160408051601f19818403018152908290526141809291602001614f14565b60408051601f198184030181529082905261419a91614f45565b6000604051808303816000865af19150503d80600081146141d7576040519150601f19603f3d011682016040523d82523d6000602084013e6141dc565b606091505b5091509150811561420a57808060200190518101906141fb9190614bdf565b9299509097509550935061420f565b600092505b5050614458565b851561433c5760a3546040805163d934c20b60e01b815290516001600160a01b039092169163f2217fe4918c91849163d934c20b916004808301926020929190829003018186803b15801561426a57600080fd5b505afa15801561427e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142a29190614ea8565b6040516001600160e01b031960e085901b1681526001600160a81b03909216600483015263ffffffff16602482015261ffff8b16604482015260016064820152608401608060405180830381600087803b1580156142ff57600080fd5b505af1158015614313573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143379190614bdf565b61444d565b60a3546040805163d934c20b60e01b815290516001600160a01b03909216916353997f61918c91849163d934c20b916004808301926020929190829003018186803b15801561438a57600080fd5b505afa15801561439e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143c29190614ea8565b6040516001600160e01b031960e085901b1681526001600160a81b03909216600483015263ffffffff16602482015260016044820152606401608060405180830381600087803b15801561441557600080fd5b505af1158015614429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061444d9190614bdf565b929750909550935091505b945094509450945094565b816001600160a01b03811661448a5760405162461bcd60e51b8152600401610b7990614fbe565b81609a5461449891906151fd565b609a5560006144a6836118de565b905080609c546144b691906151fd565b609c556144c1610c96565b609b5411156145125760405162461bcd60e51b815260206004820152601a60248201527f4d6178207363616c696e6720666163746f7220746f6f206c6f770000000000006044820152606401610b79565b6001600160a01b0384166000908152609e60205260409020546145369082906151fd565b6001600160a01b0385166000818152609e602052604080822093909355915190919060008051602061540a833981519152906145759087815260200190565b60405180910390a350505050565b600054610100900460ff166145aa5760405162461bcd60e51b8152600401610b7990615067565b60018055565b6060610b918484600085614675565b816001600160a01b0381166145e65760405162461bcd60e51b8152600401610b7990614fbe565b81609a546145f491906152c5565b609a556000614602836118de565b905080609c5461461291906152c5565b609c556001600160a01b0384166000908152609e60205260409020546146399082906152c5565b6001600160a01b0385166000818152609e602052604080822093909355915160008051602061540a833981519152906145759087815260200190565b6060824710156146d65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b79565b6001600160a01b0385163b61472d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b79565b600080866001600160a01b031685876040516147499190614f45565b60006040518083038185875af1925050503d8060008114614786576040519150601f19603f3d011682016040523d82523d6000602084013e61478b565b606091505b509150915061479b8282866147a6565b979650505050505050565b606083156147b5575081610b94565b8251156147c55782518084602001fd5b8160405162461bcd60e51b8152600401610b799190614f61565b8280546147eb90615308565b90600052602060002090601f01602090048101928261480d5760008555614853565b82601f1061482657805160ff1916838001178555614853565b82800160010185558215614853579182015b82811115614853578251825591602001919060010190614838565b5061485f929150614863565b5090565b5b8082111561485f5760008155600101614864565b8035613458816153a0565b600082601f830112614893578081fd5b813567ffffffffffffffff808211156148ae576148ae61538a565b604051601f8301601f19908116603f011681019082821181831017156148d6576148d661538a565b816040528381528660208588010111156148ee578485fd5b8360208701602083013792830160200193909352509392505050565b8035613458816153fa565b600060208284031215614926578081fd5b8135610b94816153a0565b60008060408385031215614943578081fd5b823561494e816153a0565b9150602083013561495e816153a0565b809150509250929050565b60008060006060848603121561497d578081fd5b8335614988816153a0565b92506020840135614998816153a0565b929592945050506040919091013590565b600080604083850312156149bb578182fd5b82356149c6816153a0565b946020939093013593505050565b6000602082840312156149e5578081fd5b8135610b94816153b5565b600060208284031215614a01578081fd5b8151610b94816153b5565b6000806000806000806000806000806101408b8d031215614a2b578586fd5b614a348b614878565b995060208b013567ffffffffffffffff80821115614a50578788fd5b614a5c8e838f01614883565b9a5060408d0135915080821115614a71578788fd5b50614a7e8d828e01614883565b985050614a8d60608c0161490a565b965060808b01359550614aa260a08c01614878565b9450614ab060c08c01614878565b9350614abe60e08c01614878565b9250614acd6101008c01614878565b9150614adc6101208c01614878565b90509295989b9194979a5092959850565b60008060408385031215614aff578182fd5b823567ffffffffffffffff80821115614b16578384fd5b614b2286838701614883565b93506020850135915080821115614b37578283fd5b50614b4485828601614883565b9150509250929050565b600080600060608486031215614b62578081fd5b833567ffffffffffffffff80821115614b79578283fd5b614b8587838801614883565b94506020860135915080821115614b9a578283fd5b50614ba786828701614883565b9250506040840135614bb8816153fa565b809150509250925092565b600060208284031215614bd4578081fd5b8135610b94816153d3565b60008060008060808587031215614bf4578182fd5b8451614bff816153d3565b6020860151909450614c10816153d3565b6040860151909350614c21816153d3565b6060860151909250614c32816153d3565b939692955090935050565b60008060408385031215614c4f578182fd5b8235614c5a816153d3565b9150602083013561495e816153e8565b600080600060608486031215614c7e578081fd5b8335614c89816153d3565b92506020840135614c99816153e8565b91506040840135614bb8816153c3565b600080600080600060a08688031215614cc0578283fd5b8551614ccb816153d3565b6020870151909550614cdc816153fa565b6040870151909450614ced816153e8565b6060870151909350614cfe816153e8565b6080870151909250614d0f816153e8565b809150509295509295909350565b600060208284031215614d2e578081fd5b8151610b94816153c3565b600080600060608486031215614d4d578081fd5b8335614d58816153c3565b92506020840135614c99816153c3565b600060208284031215614d79578081fd5b5035919050565b600060208284031215614d91578081fd5b5051919050565b60008060408385031215614daa578182fd5b82359150602083013561495e816153b5565b60008060008060008060c08789031215614dd4578384fd5b865195506020870151614de6816153b5565b6040880151909550614df7816153d3565b6060880151909450614e08816153fa565b809350506080870151915060a087015190509295509295509295565b600080600060608486031215614e38578081fd5b833592506020840135614e4a816153c3565b91506040840135614bb8816153b5565b60008060408385031215614e6c578182fd5b50508035926020909101359150565b600080600060608486031215614e8f578081fd5b8351925060208401519150604084015190509250925092565b600060208284031215614eb9578081fd5b8151610b94816153e8565b600080600060608486031215614ed8578081fd5b8351614ee3816153e8565b602085015190935069ffffffffffffffffffff81168114614f02578182fd5b80925050604084015190509250925092565b6001600160e01b0319831681528151600090614f378160048501602087016152dc565b919091016004019392505050565b60008251614f578184602087016152dc565b9190910192915050565b6020815260008251806020840152614f808160408501602087016152dc565b601f01601f19169190910160400192915050565b60208082526010908201526f4e656761746976652062616c616e636560801b604082015260600190565b6020808252600c908201526b5a65726f206164647265737360a01b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601190820152704e6f7420656e6f75676820746f6b656e7360781b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b815160ff1681526020808301516001600160a81b0316908201526040808301516101208301916151499084018261ffff169052565b50606083015161515f606084018261ffff169052565b50608083015161517a60808401826001600160a01b03169052565b5060a083015161519260a084018263ffffffff169052565b5060c08301516151aa60c084018263ffffffff169052565b5060e08301516151be60e084018215159052565b506101009283015161ffff16919092015290565b60006001600160a81b038281168482168083038211156151f4576151f461535e565b01949350505050565b600082198211156152105761521061535e565b500190565b60006001600160a81b038381168061522f5761522f615374565b92169190910492915050565b60008261524a5761524a615374565b500490565b60006001600160a81b03828116848216811515828404821116156152755761527561535e565b02949350505050565b60008160001904831182151516156152985761529861535e565b500290565b60006001600160a81b03838116908316818110156152bd576152bd61535e565b039392505050565b6000828210156152d7576152d761535e565b500390565b60005b838110156152f75781810151838201526020016152df565b838111156131405750506000910152565b600181811c9082168061531c57607f821691505b6020821081141561533d57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156153575761535761535e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610fec57600080fd5b8015158114610fec57600080fd5b61ffff81168114610fec57600080fd5b6001600160a81b0381168114610fec57600080fd5b63ffffffff81168114610fec57600080fd5b60ff81168114610fec57600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212203446c54788d20e63d45ef866b56422e733f236e8ab2fd5f6c0d7e15a12fb16c464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 34426,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 34429,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 34575,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 34619,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 37283,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 34306,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 34418,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 327,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 329,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "symbol",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 331,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "decimals",
        "offset": 0,
        "slot": "153",
        "type": "t_uint8"
      },
      {
        "astId": 333,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "totalSupply",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 335,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "scalingFactor",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 337,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "initSupply",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 339,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "rebaser",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      },
      {
        "astId": 343,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "_underlyingBalances",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 349,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "_allowedFragments",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 13460,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "leverage",
        "offset": 0,
        "slot": "160",
        "type": "t_uint8"
      },
      {
        "astId": 13462,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "rebaseLag",
        "offset": 1,
        "slot": "160",
        "type": "t_uint8"
      },
      {
        "astId": 13464,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "minDeviationPercentage",
        "offset": 2,
        "slot": "160",
        "type": "t_uint16"
      },
      {
        "astId": 13467,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "initialTokenToLPTokenRate",
        "offset": 0,
        "slot": "161",
        "type": "t_uint256"
      },
      {
        "astId": 13470,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "token",
        "offset": 0,
        "slot": "162",
        "type": "t_contract(IERC20Upgradeable)35309"
      },
      {
        "astId": 13474,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "platform",
        "offset": 0,
        "slot": "163",
        "type": "t_contract(IPlatform)18105"
      },
      {
        "astId": 13477,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "feesCollector",
        "offset": 0,
        "slot": "164",
        "type": "t_contract(IFeesCollector)17539"
      },
      {
        "astId": 13480,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "feesCalculator",
        "offset": 0,
        "slot": "165",
        "type": "t_contract(IFeesCalculator)17527"
      },
      {
        "astId": 13484,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "requestFeesCalculator",
        "offset": 0,
        "slot": "166",
        "type": "t_contract(IRequestFeesCalculator)18544"
      },
      {
        "astId": 13487,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "cviOracle",
        "offset": 0,
        "slot": "167",
        "type": "t_contract(ICVIOracle)17026"
      },
      {
        "astId": 13490,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "nextRequestId",
        "offset": 0,
        "slot": "168",
        "type": "t_uint256"
      },
      {
        "astId": 13496,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "requests",
        "offset": 0,
        "slot": "169",
        "type": "t_mapping(t_uint256,t_struct(Request)18986_storage)"
      },
      {
        "astId": 13498,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "totalRequestsAmount",
        "offset": 0,
        "slot": "170",
        "type": "t_uint256"
      },
      {
        "astId": 13500,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "maxTotalRequestsAmount",
        "offset": 0,
        "slot": "171",
        "type": "t_uint256"
      },
      {
        "astId": 13502,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "verifyTotalRequestsAmount",
        "offset": 0,
        "slot": "172",
        "type": "t_bool"
      },
      {
        "astId": 13504,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "deviationPerSingleRebaseLag",
        "offset": 1,
        "slot": "172",
        "type": "t_uint16"
      },
      {
        "astId": 13506,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "maxDeviationPercentage",
        "offset": 3,
        "slot": "172",
        "type": "t_uint16"
      },
      {
        "astId": 13508,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "cappedRebase",
        "offset": 5,
        "slot": "172",
        "type": "t_bool"
      },
      {
        "astId": 13517,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "minRequestId",
        "offset": 0,
        "slot": "173",
        "type": "t_uint256"
      },
      {
        "astId": 13520,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "maxMinRequestIncrements",
        "offset": 0,
        "slot": "174",
        "type": "t_uint256"
      },
      {
        "astId": 13522,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "fulfiller",
        "offset": 0,
        "slot": "175",
        "type": "t_address"
      },
      {
        "astId": 13524,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "keepersFeeVaultAddress",
        "offset": 0,
        "slot": "176",
        "type": "t_address"
      },
      {
        "astId": 13526,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "minKeepersMintAmount",
        "offset": 0,
        "slot": "177",
        "type": "t_uint256"
      },
      {
        "astId": 13528,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "minKeepersBurnAmount",
        "offset": 0,
        "slot": "178",
        "type": "t_uint256"
      },
      {
        "astId": 13530,
        "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
        "label": "minter",
        "offset": 0,
        "slot": "179",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICVIOracle)17026": {
        "encoding": "inplace",
        "label": "contract ICVIOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)35309": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IFeesCalculator)17527": {
        "encoding": "inplace",
        "label": "contract IFeesCalculator",
        "numberOfBytes": "20"
      },
      "t_contract(IFeesCollector)17539": {
        "encoding": "inplace",
        "label": "contract IFeesCollector",
        "numberOfBytes": "20"
      },
      "t_contract(IPlatform)18105": {
        "encoding": "inplace",
        "label": "contract IPlatform",
        "numberOfBytes": "20"
      },
      "t_contract(IRequestFeesCalculator)18544": {
        "encoding": "inplace",
        "label": "contract IRequestFeesCalculator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Request)18986_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IVolatilityToken.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)18986_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Request)18986_storage": {
        "encoding": "inplace",
        "label": "struct IVolatilityToken.Request",
        "members": [
          {
            "astId": 18969,
            "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
            "label": "requestType",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 18971,
            "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
            "label": "tokenAmount",
            "offset": 1,
            "slot": "0",
            "type": "t_uint168"
          },
          {
            "astId": 18973,
            "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
            "label": "timeDelayRequestFeesPercent",
            "offset": 22,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 18975,
            "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
            "label": "maxRequestFeesPercent",
            "offset": 24,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 18977,
            "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 18979,
            "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
            "label": "requestTimestamp",
            "offset": 20,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 18981,
            "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
            "label": "targetTimestamp",
            "offset": 24,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 18983,
            "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
            "label": "useKeepers",
            "offset": 28,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 18985,
            "contract": "contracts/volatility-token/VolatilityTokenContracts.sol:CVIUSDCVolatilityToken",
            "label": "maxBuyingPremiumFeePercentage",
            "offset": 29,
            "slot": "1",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint168": {
        "encoding": "inplace",
        "label": "uint168",
        "numberOfBytes": "21"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}