{
  "address": "0x569724E2Ef84aa42a06f86F51aAC75d813B90B2F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalUSDCAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "platformLiquidityAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dexVolTokenUSDCAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dexVolTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dexUSDCAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintedThetaTokens",
          "type": "uint256"
        }
      ],
      "name": "FulfillDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalUSDCAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "platformLiquidityAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dexVolTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dexUSDCVolTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dexUSDCAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnedThetaTokens",
          "type": "uint256"
        }
      ],
      "name": "FulfillWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "LiquidateRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "targetTimestamp",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalUSDCBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "SubmitRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_REQUEST_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_REMOVE_MAX_FEE_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_REQUEST_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositHoldingsPercentage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraLiqidityPercentage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "fulfillDepositRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "thetaTokensMinted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "fulfillWithdrawRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenWithdrawnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fulfiller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "volTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialTokenToThetaTokenRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_initialTokenToThetaTokenRate",
          "type": "uint256"
        },
        {
          "internalType": "contract IPlatform",
          "name": "_platform",
          "type": "address"
        },
        {
          "internalType": "contract IVolatilityToken",
          "name": "_volToken",
          "type": "address"
        },
        {
          "internalType": "contract IRewardRouter",
          "name": "_rewardRouter",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_lpTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_lpTokenSymbolName",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastDepositTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "liquidateRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockupPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMinRequestIncrements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDexPercentageAllowed",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPoolSkewPercentage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minWithdrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platform",
      "outputs": [
        {
          "internalType": "contract IPlatform",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "internalType": "uint168",
          "name": "tokenAmount",
          "type": "uint168"
        },
        {
          "internalType": "uint32",
          "name": "targetTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "shouldStake",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRouter",
      "outputs": [
        {
          "internalType": "contract IRewardRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newDepositCap",
          "type": "uint256"
        }
      ],
      "name": "setDepositCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newDepositHoldingsPercentage",
          "type": "uint16"
        }
      ],
      "name": "setDepositHoldings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newFulfiller",
          "type": "address"
        }
      ],
      "name": "setFulfiller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newExtraLiquidityPercentage",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_minDexPercentageAllowed",
          "type": "uint16"
        }
      ],
      "name": "setLiquidityPercentages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMinDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newMinWithdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_newMinPoolSkewPercentage",
          "type": "uint16"
        }
      ],
      "name": "setMinPoolSkew",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newLockupPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newLiquidationPeriod",
          "type": "uint256"
        }
      ],
      "name": "setPeriods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newRequestDelay",
          "type": "uint256"
        }
      ],
      "name": "setRequestDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRewardRouter",
          "name": "_rewardRouter",
          "type": "address"
        }
      ],
      "name": "setRewardRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint168",
          "name": "_tokenAmount",
          "type": "uint168"
        }
      ],
      "name": "submitDepositRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint168",
          "name": "_thetaTokenAmount",
          "type": "uint168"
        }
      ],
      "name": "submitWithdrawRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdcPlatformLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "intrinsicDEXVolTokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "volTokenPositionBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dexUSDCAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dexVolTokensAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDepositRequestsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalHoldingsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVaultLeveragedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultPositionUnits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "volToken",
      "outputs": [
        {
          "internalType": "contract IVolatilityToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f2e72b10e1f877984c0b0c6e0dc9faeb46e9958dbdedd51bb50235073dd7cf8",
  "receipt": {
    "to": null,
    "from": "0x0b3D7b3F149214f8f5281b5aE613B090fD39BD3F",
    "contractAddress": "0x569724E2Ef84aa42a06f86F51aAC75d813B90B2F",
    "transactionIndex": 3,
    "gasUsed": "29950122",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xcfb15fd67a933b21ae2f24a51c9aa3683efcb004c75d54f269c534d4413fbf8a",
    "transactionHash": "0x5f2e72b10e1f877984c0b0c6e0dc9faeb46e9958dbdedd51bb50235073dd7cf8",
    "logs": [],
    "blockNumber": 62435844,
    "cumulativeGasUsed": "31918483",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "bb48d386e0055c830c90e368ac7a790f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalUSDCAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformLiquidityAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dexVolTokenUSDCAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dexVolTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dexUSDCAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedThetaTokens\",\"type\":\"uint256\"}],\"name\":\"FulfillDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalUSDCAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformLiquidityAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dexVolTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dexUSDCVolTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dexUSDCAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedThetaTokens\",\"type\":\"uint256\"}],\"name\":\"FulfillWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidateRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"targetTimestamp\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalUSDCBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"SubmitRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSIT_REQUEST_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_REMOVE_MAX_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_REQUEST_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositHoldingsPercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraLiqidityPercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"fulfillDepositRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"thetaTokensMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"fulfillWithdrawRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenWithdrawnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fulfiller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"volTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTokenToThetaTokenRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialTokenToThetaTokenRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IPlatform\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"contract IVolatilityToken\",\"name\":\"_volToken\",\"type\":\"address\"},{\"internalType\":\"contract IRewardRouter\",\"name\":\"_rewardRouter\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_lpTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_lpTokenSymbolName\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDepositTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"liquidateRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMinRequestIncrements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDexPercentageAllowed\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPoolSkewPercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"contract IPlatform\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"internalType\":\"uint168\",\"name\":\"tokenAmount\",\"type\":\"uint168\"},{\"internalType\":\"uint32\",\"name\":\"targetTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shouldStake\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRouter\",\"outputs\":[{\"internalType\":\"contract IRewardRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDepositCap\",\"type\":\"uint256\"}],\"name\":\"setDepositCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newDepositHoldingsPercentage\",\"type\":\"uint16\"}],\"name\":\"setDepositHoldings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFulfiller\",\"type\":\"address\"}],\"name\":\"setFulfiller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newExtraLiquidityPercentage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_minDexPercentageAllowed\",\"type\":\"uint16\"}],\"name\":\"setLiquidityPercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMinWithdrawAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newMinPoolSkewPercentage\",\"type\":\"uint16\"}],\"name\":\"setMinPoolSkew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLockupPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newLiquidationPeriod\",\"type\":\"uint256\"}],\"name\":\"setPeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRequestDelay\",\"type\":\"uint256\"}],\"name\":\"setRequestDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardRouter\",\"name\":\"_rewardRouter\",\"type\":\"address\"}],\"name\":\"setRewardRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint168\",\"name\":\"_tokenAmount\",\"type\":\"uint168\"}],\"name\":\"submitDepositRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint168\",\"name\":\"_thetaTokenAmount\",\"type\":\"uint168\"}],\"name\":\"submitWithdrawRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdcPlatformLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intrinsicDEXVolTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volTokenPositionBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dexUSDCAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dexVolTokensAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositRequestsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHoldingsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVaultLeveragedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultPositionUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volToken\",\"outputs\":[{\"internalType\":\"contract IVolatilityToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/theta-vault/ThetaVaultContracts.sol\":\"CVIUSDCThetaVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@coti-cvi/contracts-cvi/contracts/ThetaVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\nimport './interfaces/IThetaVault.sol';\\nimport './interfaces/IRequestManager.sol';\\nimport './external/IUniswapV2Pair.sol';\\nimport './external/IUniswapV2Router02.sol';\\nimport './external/IUniswapV2Factory.sol';\\n\\ncontract ThetaVault is Initializable, IThetaVault, IRequestManager, OwnableUpgradeable, ERC20Upgradeable, ReentrancyGuardUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    struct Request {\\n        uint8 requestType; // 1 => deposit, 2 => withdraw\\n        uint168 tokenAmount;\\n        uint32 targetTimestamp;\\n        address owner;\\n        bool shouldStake;\\n    }\\n\\n    uint8 public constant DEPOSIT_REQUEST_TYPE = 1;\\n    uint8 public constant WITHDRAW_REQUEST_TYPE = 2;\\n\\n    uint256 public constant PRECISION_DECIMALS = 1e10;\\n    uint16 public constant MAX_PERCENTAGE = 10000;\\n\\n    uint16 public constant UNISWAP_REMOVE_MAX_FEE_PERCENTAGE = 5;\\n\\n    address public fulfiller;\\n\\n    IERC20Upgradeable public token;\\n    IPlatform public platform;\\n    IVolatilityToken public override volToken;\\n    IUniswapV2Router02 public router;\\n\\n    uint256 public override nextRequestId;\\n    mapping(uint256 => Request) public override requests;\\n    mapping(address => uint256) public lastDepositTimestamp;\\n\\n    uint256 public initialTokenToThetaTokenRate;\\n\\n    uint256 public totalDepositRequestsAmount;\\n    uint256 public override totalVaultLeveragedAmount; // Obsolete\\n\\n    uint16 public minPoolSkewPercentage;\\n    uint16 public override extraLiqidityPercentage;\\n    uint256 public depositCap;\\n    uint256 public requestDelay;\\n    uint256 public lockupPeriod;\\n    uint256 public liquidationPeriod;\\n\\n    uint256 public override minRequestId;\\n    uint256 public override maxMinRequestIncrements;\\n    uint256 public minDepositAmount;\\n    uint256 public minWithdrawAmount;\\n\\n    uint256 public totalHoldingsAmount;\\n    uint16 public depositHoldingsPercentage;\\n\\n    uint16 public override minDexPercentageAllowed;\\n\\n    IRewardRouter public rewardRouter;\\n\\n    function initialize(uint256 _initialTokenToThetaTokenRate, IPlatform _platform, IVolatilityToken _volToken, IRewardRouter _rewardRouter, IERC20Upgradeable _token, IUniswapV2Router02 _router, string memory _lpTokenName, string memory _lpTokenSymbolName) public initializer {\\n        require(address(_platform) != address(0));\\n        require(address(_volToken) != address(0));\\n        require(address(_token) != address(0));\\n        require(address(_router) != address(0));\\n        require(_initialTokenToThetaTokenRate > 0);\\n\\n        nextRequestId = 1;\\n        minRequestId = 1;\\n        initialTokenToThetaTokenRate = _initialTokenToThetaTokenRate;\\n        minPoolSkewPercentage = 300;\\n        extraLiqidityPercentage = 1500;\\n        depositCap = type(uint256).max;\\n        requestDelay = 0.5 hours;\\n        lockupPeriod = 24 hours;\\n        liquidationPeriod = 3 days;\\n        maxMinRequestIncrements = 30;\\n        minDepositAmount = 100000;\\n        minWithdrawAmount = 10 ** 16;\\n        depositHoldingsPercentage = 1500;\\n        minDexPercentageAllowed = 3000;\\n\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        OwnableUpgradeable.__Ownable_init();\\n        ERC20Upgradeable.__ERC20_init(_lpTokenName, _lpTokenSymbolName);\\n\\n        platform = _platform;\\n        token = _token;\\n        volToken = _volToken;\\n        router = _router;\\n        rewardRouter = _rewardRouter;\\n\\n        token.safeApprove(address(platform), type(uint256).max);\\n        token.safeApprove(address(router), type(uint256).max);\\n        token.safeApprove(address(volToken), type(uint256).max);\\n        IERC20Upgradeable(address(volToken)).safeApprove(address(router), type(uint256).max);\\n        IERC20Upgradeable(address(getPair())).safeApprove(address(router), type(uint256).max);\\n        IERC20Upgradeable(address(volToken)).safeApprove(address(volToken), type(uint256).max);\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return 'Theta CVI LP';\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return 'T-CVI-LP';\\n    }\\n\\n    function submitDepositRequest(uint168 _tokenAmount/* , bool _shouldStake */) external override returns (uint256 requestId) {\\n        require(_tokenAmount >= minDepositAmount, 'Too small');\\n        // require(!_shouldStake || address(rewardRouter) != address(0), 'Router not set');\\n        return submitRequest(DEPOSIT_REQUEST_TYPE, _tokenAmount, false);\\n    }\\n\\n    function submitWithdrawRequest(uint168 _thetaTokenAmount) external override returns (uint256 requestId) {\\n        require(_thetaTokenAmount >= minWithdrawAmount, 'Too small');\\n        require(lastDepositTimestamp[msg.sender] + lockupPeriod <= block.timestamp, 'Deposit locked');\\n        return submitRequest(WITHDRAW_REQUEST_TYPE, _thetaTokenAmount, false);\\n    }\\n\\n    struct FulfillDepositLocals {\\n        uint256 mintVolTokenUSDCAmount;\\n        uint256 addedLiquidityUSDCAmount;\\n        uint256 mintedVolTokenAmount;\\n        uint256 platformLiquidityAmount;\\n        uint256 holdingsAmount;\\n    }\\n\\n    function fulfillDepositRequest(uint256 _requestId) external override returns (uint256 thetaTokensMinted) {\\n        uint168 amountToFulfill;\\n        address owner;\\n        uint256 volTokenPositionBalance;\\n\\n        bool shouldStake = requests[_requestId].shouldStake;\\n        {\\n            bool wasLiquidated;\\n            (amountToFulfill, owner, wasLiquidated) = preFulfillRequest(_requestId, requests[_requestId], DEPOSIT_REQUEST_TYPE);\\n\\n            if (wasLiquidated) {\\n                return 0;\\n            }\\n\\n            deleteRequest(_requestId);\\n\\n            // Note: reverts if pool is skewed after arbitrage, as intended\\n            uint256 balance;\\n            (balance, volTokenPositionBalance) = _rebalance(amountToFulfill);\\n\\n            // Mint theta lp tokens\\n            if (totalSupply() > 0 && balance > 0) {\\n                thetaTokensMinted = (amountToFulfill * totalSupply()) / balance;\\n            } else {\\n                thetaTokensMinted = amountToFulfill * initialTokenToThetaTokenRate;\\n            }\\n        }\\n\\n        require(thetaTokensMinted > 0); // 'Too few tokens'\\n        _mint(owner, thetaTokensMinted);\\n\\n        lastDepositTimestamp[owner] = block.timestamp;\\n\\n        // Avoid crashing in case an old request existed when totalDepositRequestsAmount was initialized\\n        if (totalDepositRequestsAmount < amountToFulfill) {\\n            totalDepositRequestsAmount = 0;\\n        } else {\\n            totalDepositRequestsAmount -= amountToFulfill;\\n        }\\n\\n        FulfillDepositLocals memory locals = deposit(amountToFulfill, volTokenPositionBalance);\\n\\n        if (shouldStake) {\\n            rewardRouter.stakeForAccount(StakedTokenName.THETA_VAULT, owner, thetaTokensMinted);\\n        }\\n\\n        emit FulfillDeposit(_requestId, owner, amountToFulfill, locals.platformLiquidityAmount, locals.mintVolTokenUSDCAmount, locals.mintedVolTokenAmount, \\n            locals.addedLiquidityUSDCAmount, thetaTokensMinted);\\n    }\\n\\n    struct FulfillWithdrawLocals {\\n        uint256 withdrawnLiquidity;\\n        uint256 platformLPTokensToRemove;\\n        uint256 removedVolTokensAmount;\\n        uint256 dexRemovedUSDC;\\n        uint256 burnedVolTokensUSDCAmount;\\n    }\\n\\n    function fulfillWithdrawRequest(uint256 _requestId) external override returns (uint256 tokenWithdrawnAmount) {\\n        (uint168 amountToFulfill, address owner, bool wasLiquidated) = preFulfillRequest(_requestId, requests[_requestId], WITHDRAW_REQUEST_TYPE);\\n\\n        if (!wasLiquidated) {\\n            _rebalance(0);\\n\\n            FulfillWithdrawLocals memory locals;\\n\\n            locals.platformLPTokensToRemove = (amountToFulfill * IERC20Upgradeable(address(platform)).balanceOf(address(this))) / totalSupply();\\n            uint256 poolLPTokensAmount = (amountToFulfill * IERC20Upgradeable(address(getPair())).balanceOf(address(this))) /\\n                totalSupply();\\n            if (poolLPTokensAmount > 0) {\\n                (locals.removedVolTokensAmount, locals.dexRemovedUSDC) = router.removeLiquidity(address(volToken), address(token), poolLPTokensAmount, 0, 0, address(this), block.timestamp);\\n                locals.burnedVolTokensUSDCAmount = burnVolTokens(locals.removedVolTokensAmount);\\n            }\\n\\n            (, locals.withdrawnLiquidity) = platform.withdrawLPTokens(locals.platformLPTokensToRemove);\\n\\n            uint256 withdrawHoldings = totalHoldingsAmount * amountToFulfill / totalSupply();\\n            tokenWithdrawnAmount = withdrawHoldings + locals.withdrawnLiquidity + locals.dexRemovedUSDC + locals.burnedVolTokensUSDCAmount;\\n            totalHoldingsAmount -= withdrawHoldings;\\n\\n            _burn(address(this), amountToFulfill);\\n            deleteRequest(_requestId);\\n\\n            token.safeTransfer(owner, tokenWithdrawnAmount);\\n\\n            emit FulfillWithdraw(_requestId, owner, tokenWithdrawnAmount, locals.withdrawnLiquidity, locals.removedVolTokensAmount, locals.burnedVolTokensUSDCAmount, locals.dexRemovedUSDC, amountToFulfill);\\n        }\\n    }\\n\\n    function liquidateRequest(uint256 _requestId) external override nonReentrant {\\n        Request memory request = requests[_requestId];\\n        require(request.requestType != 0); // 'Request id not found'\\n        require(isLiquidable(_requestId), 'Not liquidable');\\n\\n        _liquidateRequest(_requestId);\\n    }\\n\\n    function rebalance() external override onlyOwner {\\n        _rebalance(0);\\n    }\\n\\n    function _rebalance(uint256 _arbitrageAmount) private returns (uint256 balance, uint256 volTokenPositionBalance) {\\n        // Note: reverts if pool is skewed, as intended\\n        uint256 intrinsicDEXVolTokenBalance;\\n        uint256 usdcPlatformLiquidity;\\n        uint256 dexUSDCAmount;\\n        (balance, usdcPlatformLiquidity, intrinsicDEXVolTokenBalance, volTokenPositionBalance, dexUSDCAmount) = totalBalanceWithArbitrage(_arbitrageAmount);\\n\\n        uint256 adjustedPositionUnits = platform.totalPositionUnitsAmount() * (MAX_PERCENTAGE + extraLiqidityPercentage) / MAX_PERCENTAGE;\\n        uint256 totalLeveragedTokensAmount = platform.totalLeveragedTokensAmount();\\n\\n        // No need to rebalance if no position units for vault (i.e. dex not initialized yet)\\n        if (dexUSDCAmount > 0) {\\n            if (totalLeveragedTokensAmount > adjustedPositionUnits + minDepositAmount) {\\n                uint256 extraLiquidityAmount = totalLeveragedTokensAmount - adjustedPositionUnits;\\n\\n                (, uint256 withdrawnAmount) = platform.withdraw(extraLiquidityAmount, type(uint256).max);\\n\\n                deposit(withdrawnAmount, volTokenPositionBalance);\\n            } else if (totalLeveragedTokensAmount + minDepositAmount < adjustedPositionUnits) {\\n                uint256 liquidityMissing = adjustedPositionUnits - totalLeveragedTokensAmount;\\n\\n                if (intrinsicDEXVolTokenBalance + dexUSDCAmount > liquidityMissing && \\n                    (intrinsicDEXVolTokenBalance + dexUSDCAmount - liquidityMissing) * MAX_PERCENTAGE / balance >= minDexPercentageAllowed) {\\n                    uint256 poolLPTokensToRemove = liquidityMissing * IERC20Upgradeable(address(getPair())).totalSupply() / (intrinsicDEXVolTokenBalance + dexUSDCAmount);\\n\\n                    (uint256 removedVolTokensAmount, uint256 dexRemovedUSDC) = router.removeLiquidity(address(volToken), address(token), poolLPTokensToRemove, 0, 0, address(this), block.timestamp);\\n                    uint256 totalUSDC = burnVolTokens(removedVolTokensAmount) + dexRemovedUSDC;\\n\\n                    platform.deposit(totalUSDC, 0);\\n                }\\n            }\\n\\n            (balance,, intrinsicDEXVolTokenBalance, volTokenPositionBalance, dexUSDCAmount,) = totalBalance();\\n        }\\n    }\\n\\n    function vaultPositionUnits() external view override returns (uint256) {\\n        (uint256 dexVolTokensAmount, ) = getReserves();\\n        IERC20Upgradeable poolPair = IERC20Upgradeable(address(getPair()));\\n        if (IERC20Upgradeable(address(volToken)).totalSupply() == 0 || poolPair.totalSupply() == 0) {\\n            return 0;\\n        }\\n\\n        uint256 dexVaultVolTokensAmount = (dexVolTokensAmount * poolPair.balanceOf(address(this))) / poolPair.totalSupply();\\n\\n        (uint256 totalPositionUnits, , , , ) = platform.positions(address(volToken));\\n        return totalPositionUnits * dexVaultVolTokensAmount / IERC20Upgradeable(address(volToken)).totalSupply();\\n    }\\n\\n    function setRewardRouter(IRewardRouter _rewardRouter) external override onlyOwner {\\n        rewardRouter = _rewardRouter;\\n    }\\n\\n    function setFulfiller(address _newFulfiller) external override onlyOwner {\\n        fulfiller = _newFulfiller;\\n    }\\n\\n    function setMinAmounts(uint256 _newMinDepositAmount, uint256 _newMinWithdrawAmount) external override onlyOwner {\\n        minDepositAmount = _newMinDepositAmount;\\n        minWithdrawAmount = _newMinWithdrawAmount;\\n    }\\n\\n    function setDepositHoldings(uint16 _newDepositHoldingsPercentage) external override onlyOwner {\\n        depositHoldingsPercentage = _newDepositHoldingsPercentage;\\n    }\\n\\n    function setMinPoolSkew(uint16 _newMinPoolSkewPercentage) external override onlyOwner {\\n        minPoolSkewPercentage = _newMinPoolSkewPercentage;\\n    }\\n\\n    function setLiquidityPercentages(uint16 _newExtraLiquidityPercentage, uint16 _minDexPercentageAllowed) external override onlyOwner {\\n        extraLiqidityPercentage = _newExtraLiquidityPercentage;\\n        minDexPercentageAllowed = _minDexPercentageAllowed;\\n    }\\n\\n    function setRequestDelay(uint256 _newRequestDelay) external override onlyOwner {\\n        requestDelay = _newRequestDelay;\\n    }\\n\\n    function setDepositCap(uint256 _newDepositCap) external override onlyOwner {\\n        depositCap = _newDepositCap;\\n    }\\n\\n    function setPeriods(uint256 _newLockupPeriod, uint256 _newLiquidationPeriod) external override onlyOwner {\\n        lockupPeriod = _newLockupPeriod;\\n        liquidationPeriod = _newLiquidationPeriod;\\n    }\\n\\n    function totalBalance() public view override returns (uint256 balance, uint256 usdcPlatformLiquidity, uint256 intrinsicDEXVolTokenBalance, uint256 volTokenPositionBalance, uint256 dexUSDCAmount, uint256 dexVolTokensAmount) {\\n        (intrinsicDEXVolTokenBalance, volTokenPositionBalance, dexUSDCAmount, dexVolTokensAmount,) = calculatePoolValue();\\n        (balance, usdcPlatformLiquidity) = _totalBalance(intrinsicDEXVolTokenBalance, dexUSDCAmount);\\n    }\\n\\n    function totalBalanceWithArbitrage(uint256 _usdcArbitrageAmount) private returns (uint256 balance, uint256 usdcPlatformLiquidity, uint256 intrinsicDEXVolTokenBalance, uint256 volTokenPositionBalance, uint256 dexUSDCAmount) {\\n        (intrinsicDEXVolTokenBalance, volTokenPositionBalance, dexUSDCAmount) = \\n            calculatePoolValueWithArbitrage(_usdcArbitrageAmount);\\n        (balance, usdcPlatformLiquidity) = _totalBalance(intrinsicDEXVolTokenBalance, dexUSDCAmount);\\n    }\\n\\n    function _totalBalance(uint256 _intrinsicDEXVolTokenBalance, uint256 _dexUSDCAmount) private view returns (uint256 balance, uint256 usdcPlatformLiquidity)\\n    {\\n        IERC20Upgradeable poolPair = IERC20Upgradeable(address(getPair()));\\n        uint256 poolLPTokens = poolPair.balanceOf(address(this));\\n        uint256 vaultIntrinsicDEXVolTokenBalance = 0;\\n        uint256 vaultDEXUSDCAmount = 0;\\n\\n        if (poolLPTokens > 0 && poolPair.totalSupply() > 0) {\\n            vaultIntrinsicDEXVolTokenBalance = (_intrinsicDEXVolTokenBalance * poolLPTokens) / poolPair.totalSupply();\\n            vaultDEXUSDCAmount = (_dexUSDCAmount * poolLPTokens) / poolPair.totalSupply();\\n        }\\n\\n        usdcPlatformLiquidity = getUSDCPlatformLiquidity();\\n        balance = totalHoldingsAmount + usdcPlatformLiquidity + vaultIntrinsicDEXVolTokenBalance + vaultDEXUSDCAmount;\\n    }\\n\\n    function deposit(uint256 _tokenAmount, uint256 _volTokenPositionBalance) private returns (FulfillDepositLocals memory locals)\\n    {\\n        (uint256 dexVolTokensAmount, uint256 dexUSDCAmount) = getReserves();\\n\\n        uint256 dexVolTokenPrice;\\n        uint256 intrinsicVolTokenPrice;\\n        bool dexHasLiquidity = true;\\n\\n        if (dexVolTokensAmount == 0 || dexUSDCAmount == 0) {\\n            dexHasLiquidity = false;\\n        } else {\\n            intrinsicVolTokenPrice =\\n                (_volTokenPositionBalance * 10**ERC20Upgradeable(address(volToken)).decimals()) /\\n                IERC20Upgradeable(address(volToken)).totalSupply();\\n            dexVolTokenPrice = (dexUSDCAmount * 10**ERC20Upgradeable(address(volToken)).decimals()) / dexVolTokensAmount;\\n        }\\n\\n        if (dexHasLiquidity) {\\n            (locals.mintVolTokenUSDCAmount, locals.platformLiquidityAmount, locals.holdingsAmount) = calculateDepositAmounts(\\n                _tokenAmount,\\n                dexVolTokenPrice,\\n                intrinsicVolTokenPrice\\n            );\\n\\n            totalHoldingsAmount += locals.holdingsAmount;\\n\\n            platform.deposit(locals.platformLiquidityAmount, 0);\\n            (locals.addedLiquidityUSDCAmount, locals.mintedVolTokenAmount) = addDEXLiquidity(locals.mintVolTokenUSDCAmount);\\n        } else {\\n            locals.platformLiquidityAmount = _tokenAmount;\\n            platform.deposit(locals.platformLiquidityAmount, 0);\\n        }\\n    }\\n\\n    function calculatePoolValue() private view returns (uint256 intrinsicDEXVolTokenBalance, uint256 volTokenBalance, uint256 dexUSDCAmount, uint256 dexVolTokensAmount, bool isPoolSkewed) {\\n        (dexVolTokensAmount, dexUSDCAmount) = getReserves();\\n\\n        bool isPositive = true;\\n        (uint256 currPositionUnits, , , , ) = platform.positions(address(volToken));\\n        if (currPositionUnits != 0) {\\n            (volTokenBalance, isPositive,,,,) = platform.calculatePositionBalance(address(volToken));\\n        }\\n        require(isPositive); // 'Negative balance'\\n\\n        // No need to check skew if pool is still empty\\n        if (dexVolTokensAmount > 0 && dexUSDCAmount > 0) {\\n            // Multiply by vol token decimals to get intrinsic worth in USDC\\n            intrinsicDEXVolTokenBalance =\\n                (dexVolTokensAmount * volTokenBalance) /\\n                IERC20Upgradeable(address(volToken)).totalSupply();\\n            uint256 delta = intrinsicDEXVolTokenBalance > dexUSDCAmount ? intrinsicDEXVolTokenBalance - dexUSDCAmount : dexUSDCAmount - intrinsicDEXVolTokenBalance;\\n\\n            if (delta > (intrinsicDEXVolTokenBalance * minPoolSkewPercentage) / MAX_PERCENTAGE) {\\n                isPoolSkewed = true;\\n            }\\n        }\\n    }\\n\\n    function calculatePoolValueWithArbitrage(uint256 _usdcArbitrageAmount) private returns (uint256 intrinsicDEXVolTokenBalance, uint256 volTokenBalance, uint256 dexUSDCAmount) {\\n        bool isPoolSkewed;\\n        (intrinsicDEXVolTokenBalance, volTokenBalance, dexUSDCAmount,, isPoolSkewed) = calculatePoolValue();\\n\\n        if (isPoolSkewed) {\\n            attemptArbitrage(_usdcArbitrageAmount + totalHoldingsAmount, intrinsicDEXVolTokenBalance, dexUSDCAmount);\\n            (intrinsicDEXVolTokenBalance, volTokenBalance, dexUSDCAmount,, isPoolSkewed) = calculatePoolValue();\\n            require(!isPoolSkewed, 'Too skewed');\\n        }\\n    }\\n\\n    function attemptArbitrage(uint256 _usdcAmount, uint256 _intrinsicDEXVolTokenBalance, uint256 _dexUSDCAmount) private {\\n        uint256 usdcAmountNeeded = _dexUSDCAmount > _intrinsicDEXVolTokenBalance ? (_dexUSDCAmount - _intrinsicDEXVolTokenBalance) / 2 : \\n            (_intrinsicDEXVolTokenBalance - _dexUSDCAmount) / 2; // A good estimation to close arbitrage gap\\n\\n        uint256 withdrawnLiquidity = 0;\\n        if (_usdcAmount < usdcAmountNeeded) {\\n            uint256 leftAmount = usdcAmountNeeded - _usdcAmount;\\n\\n            // Get rest of amount needed from platform liquidity (will revert if not enough collateral)\\n            // Revert is ok here, befcause in that case, there is no way to arbitrage and resolve the skew,\\n            // and no requests will fulfill anyway\\n            (, withdrawnLiquidity) = platform.withdrawLPTokens(\\n                (leftAmount * IERC20Upgradeable(address(platform)).totalSupply()) / platform.totalBalance(true)\\n            );\\n\\n            usdcAmountNeeded = withdrawnLiquidity + _usdcAmount;\\n        }\\n\\n        uint256 updatedUSDCAmount;\\n        if (_dexUSDCAmount > _intrinsicDEXVolTokenBalance) {\\n            // Price is higher than intrinsic value, mint at lower price, then buy on dex\\n            uint256 mintedVolTokenAmount = mintVolTokens(usdcAmountNeeded);\\n\\n            address[] memory path = new address[](2);\\n            path[0] = address(volToken);\\n            path[1] = address(token);\\n\\n            // Note: No need for slippage since we checked the price in this current block\\n            uint256[] memory amounts = router.swapExactTokensForTokens(mintedVolTokenAmount, 0, path, address(this), block.timestamp);\\n\\n            updatedUSDCAmount = amounts[1];\\n        } else {\\n            // Price is lower than intrinsic value, buy on dex, then burn at higher price\\n\\n            address[] memory path = new address[](2);\\n            path[0] = address(token);\\n            path[1] = address(volToken);\\n\\n            // Note: No need for slippage since we checked the price in this current block\\n            uint256[] memory amounts = router.swapExactTokensForTokens(usdcAmountNeeded, 0, path, address(this), block.timestamp);\\n\\n            updatedUSDCAmount = burnVolTokens(amounts[1]);\\n        }\\n\\n        // Make sure we didn't lose by doing arbitrage (for example, mint/burn fees exceeds arbitrage gain)\\n        require(updatedUSDCAmount > usdcAmountNeeded); // 'Arbitrage failed'\\n\\n        // Deposit arbitrage gains back to vault as platform liquidity as well\\n        platform.deposit(updatedUSDCAmount - usdcAmountNeeded + withdrawnLiquidity, 0);\\n    }\\n\\n    function preFulfillRequest(uint256 _requestId, Request memory _request, uint8 _expectedType) private nonReentrant returns (uint168 amountToFulfill, address owner, bool wasLiquidated) {\\n        require(_request.owner != address(0)); // 'Invalid request id'\\n        require(msg.sender == fulfiller || msg.sender == _request.owner); // 'Not allowed'\\n        require(_request.requestType == _expectedType); // 'Wrong request type'\\n        require(block.timestamp >= _request.targetTimestamp, 'Too soon');\\n\\n        if (isLiquidable(_requestId)) {\\n            _liquidateRequest(_requestId);\\n            wasLiquidated = true;\\n        } else {\\n            amountToFulfill = _request.tokenAmount;\\n            owner = _request.owner;\\n        }\\n    }\\n\\n    function submitRequest(uint8 _type, uint168 _tokenAmount, bool _shouldStake) private nonReentrant returns (uint256 requestId) {\\n        require(_tokenAmount > 0); // 'Token amount must be positive'\\n\\n        (uint256 balance,,,,,) = totalBalance();\\n\\n        if (_type == DEPOSIT_REQUEST_TYPE) {\\n            require(balance + _tokenAmount + totalDepositRequestsAmount <= depositCap, 'Cap reached');\\n        }\\n\\n        requestId = nextRequestId;\\n        nextRequestId = nextRequestId + 1; // Overflow allowed to keep id cycling\\n\\n        uint32 targetTimestamp = uint32(block.timestamp + requestDelay);\\n\\n        requests[requestId] = Request(_type, _tokenAmount, targetTimestamp, msg.sender, _shouldStake);\\n\\n        if (_type == DEPOSIT_REQUEST_TYPE) {\\n            totalDepositRequestsAmount += _tokenAmount;\\n        }\\n\\n        collectRelevantTokens(_type, _tokenAmount);\\n\\n        emit SubmitRequest(requestId, _type, _tokenAmount, targetTimestamp, msg.sender, balance, totalSupply());\\n    }\\n\\n    function calculateDepositAmounts(uint256 _totalAmount, uint256 _dexVolTokenPrice, uint256 _intrinsicVolTokenPrice) private view returns (uint256 mintVolTokenUSDCAmount, uint256 platformLiquidityAmount, uint256 holdingsAmount) {\\n        holdingsAmount = _totalAmount * depositHoldingsPercentage / MAX_PERCENTAGE;\\n        uint256 leftAmount = _totalAmount - holdingsAmount;\\n\\n        (uint256 cviValue, , ) = platform.cviOracle().getCVILatestRoundData();\\n\\n        uint256 maxCVIValue = platform.maxCVIValue();\\n        (uint256 currentBalance,,,,,) = platform.calculatePositionBalance(address(volToken));\\n\\n        mintVolTokenUSDCAmount = (cviValue * _intrinsicVolTokenPrice * MAX_PERCENTAGE * leftAmount) /\\n            (_intrinsicVolTokenPrice * extraLiqidityPercentage * maxCVIValue +\\n                (cviValue * _dexVolTokenPrice + _intrinsicVolTokenPrice * maxCVIValue) * MAX_PERCENTAGE);\\n\\n        // Note: must be not-first mint (otherwise dex is empty, and this function won't be called)\\n        uint256 expectedMintedVolTokensAmount = (mintVolTokenUSDCAmount *\\n            IERC20Upgradeable(address(volToken)).totalSupply()) / currentBalance;\\n\\n        (uint256 dexVolTokensAmount, uint256 dexUSDCAmount) = getReserves();\\n        uint256 usdcDEXAmount = (expectedMintedVolTokensAmount * dexUSDCAmount) / dexVolTokensAmount;\\n\\n        platformLiquidityAmount = leftAmount - mintVolTokenUSDCAmount - usdcDEXAmount;\\n    }\\n\\n    function addDEXLiquidity(uint256 _mintVolTokensUSDCAmount) private returns (uint256 addedLiquidityUSDCAmount, uint256 mintedVolTokenAmount) {\\n        mintedVolTokenAmount = mintVolTokens(_mintVolTokensUSDCAmount);\\n\\n        (uint256 dexVolTokenAmount, uint256 dexUSDCAmount) = getReserves();\\n        uint256 _usdcDEXAmount = (mintedVolTokenAmount * dexUSDCAmount) / dexVolTokenAmount;\\n\\n        uint256 addedVolTokenAmount;\\n\\n        (addedVolTokenAmount, addedLiquidityUSDCAmount, ) = router.addLiquidity(address(volToken), address(token), mintedVolTokenAmount, _usdcDEXAmount, \\n            mintedVolTokenAmount, _usdcDEXAmount, address(this), block.timestamp);\\n\\n        require(addedLiquidityUSDCAmount == _usdcDEXAmount);\\n        require(addedVolTokenAmount == mintedVolTokenAmount);\\n\\n        (dexVolTokenAmount, dexUSDCAmount) = getReserves();\\n    }\\n\\n    function withdrawPlatformLiqudity(uint256 _lpTokensAmount, bool _catchRevert) private returns (uint256 withdrawnLiquidity, bool transactionSuccess) {\\n        transactionSuccess = true;\\n\\n        if (_catchRevert) {\\n            (bool success, bytes memory returnData) = \\n                address(platform).call(abi.encodePacked(platform.withdrawLPTokens.selector, abi.encode(_lpTokensAmount)));\\n            \\n            if (success) {\\n                (, withdrawnLiquidity) = abi.decode(returnData, (uint256, uint256));\\n            } else {\\n                transactionSuccess = false;\\n            }\\n        } else {\\n            (, withdrawnLiquidity) = platform.withdrawLPTokens(_lpTokensAmount);\\n        }\\n    }\\n\\n    function burnVolTokens(uint256 _tokensToBurn) private returns (uint256 burnedVolTokensUSDCAmount) {\\n        uint168 __tokensToBurn = uint168(_tokensToBurn);\\n        require(__tokensToBurn == _tokensToBurn); // Sanity, should very rarely fail\\n        burnedVolTokensUSDCAmount = volToken.burnTokens(__tokensToBurn);\\n    }\\n\\n    function mintVolTokens(uint256 _usdcAmount) private returns (uint256 mintedVolTokenAmount) {\\n        uint168 __usdcAmount = uint168(_usdcAmount);\\n        require(__usdcAmount == _usdcAmount); // Sanity, should very rarely fail\\n        mintedVolTokenAmount = volToken.mintTokens(__usdcAmount);\\n    }\\n\\n    function collectRelevantTokens(uint8 _requestType, uint256 _tokenAmount) private {\\n        if (_requestType == WITHDRAW_REQUEST_TYPE) {\\n            require(balanceOf(msg.sender) >= _tokenAmount, 'Not enough tokens');\\n            IERC20Upgradeable(address(this)).safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n        } else {\\n            token.safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n        }\\n    }\\n\\n    function isLiquidable(uint256 _requestId) private view returns (bool) {\\n        return (requests[_requestId].targetTimestamp + liquidationPeriod < block.timestamp);\\n    }\\n\\n    function _liquidateRequest(uint256 _requestId) private {\\n        Request memory request = requests[_requestId];\\n\\n        if (request.requestType == DEPOSIT_REQUEST_TYPE) {\\n            totalDepositRequestsAmount -= request.tokenAmount;\\n        }\\n\\n        deleteRequest(_requestId);\\n\\n        if (request.requestType == WITHDRAW_REQUEST_TYPE) {\\n            IERC20Upgradeable(address(this)).safeTransfer(request.owner, request.tokenAmount);\\n        } else {\\n            token.safeTransfer(request.owner, request.tokenAmount);\\n        }\\n\\n        emit LiquidateRequest(_requestId, request.requestType, request.owner, msg.sender, request.tokenAmount);\\n    }\\n\\n    function deleteRequest(uint256 _requestId) private {\\n        delete requests[_requestId];\\n\\n        uint256 currMinRequestId = minRequestId;\\n        uint256 increments = 0;\\n        bool didIncrement = false;\\n\\n        while (currMinRequestId < nextRequestId && increments < maxMinRequestIncrements && requests[currMinRequestId].owner == address(0)) {\\n            increments++;\\n            currMinRequestId++;\\n            didIncrement = true;\\n        }\\n\\n        if (didIncrement) {\\n            minRequestId = currMinRequestId;\\n        }\\n    }\\n\\n    function getPair() private view returns (IUniswapV2Pair pair) {\\n        return IUniswapV2Pair(IUniswapV2Factory(router.factory()).getPair(address(volToken), address(token)));\\n    }\\n\\n    function getReserves() public view override returns (uint256 volTokenAmount, uint256 usdcAmount) {\\n        (uint256 amount1, uint256 amount2, ) = getPair().getReserves();\\n\\n        if (address(volToken) < address(token)) {\\n            volTokenAmount = amount1;\\n            usdcAmount = amount2;\\n        } else {\\n            volTokenAmount = amount2;\\n            usdcAmount = amount1;\\n        }\\n    }\\n\\n    function getUSDCPlatformLiquidity() private view returns (uint256 usdcPlatformLiquidity) {\\n        uint256 platformLPTokensAmount = IERC20Upgradeable(address(platform)).balanceOf(address(this));\\n\\n        if (platformLPTokensAmount > 0) {\\n            usdcPlatformLiquidity = (platformLPTokensAmount * platform.totalBalance(true)) / IERC20Upgradeable(address(platform)).totalSupply();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6db7d3d4897b692e229e6520659600e2d7f357091c17869a2fde9814dbee53c\",\"license\":\"BUSL-1.1\"},\"@coti-cvi/contracts-cvi/contracts/external/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xad46b9a71b88b9acff9e1cf7ebc3ca4a75e59b11fd521a056d4b6c951d02496b\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/external/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x9f51a1d68f51a13fd456ba3fb73d6fbff58515f21d88f86f2a56af65a9da43af\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/external/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x7bf9a68b5be399ce542367291361819989039cdca993e8d60f4dd9c723ff4740\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/external/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1cb83915099ee065638cb0b2e3820a14b7edc764c1ce6f54f8507cfc367821d3\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/ICVIOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface ICVIOracle {\\n    function getCVIRoundData(uint80 roundId) external view returns (uint32 cviValue, uint256 cviTimestamp);\\n    function getCVILatestRoundData() external view returns (uint32 cviValue, uint80 cviRoundId, uint256 cviTimestamp);\\n\\n    function setDeviationCheck(bool newDeviationCheck) external;\\n    function setMaxDeviation(uint16 newMaxDeviation) external;\\n}\\n\",\"keccak256\":\"0xf1871b2e9219f7a11e63d8e3276b7a0a46d8d726d54e385a6326dbdb2bcb1bad\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IFeesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./ICVIOracle.sol\\\";\\nimport \\\"./IThetaVaultInfo.sol\\\";\\n\\ninterface IFeesCalculator {\\n\\n    struct CVIValue {\\n        uint256 period;\\n        uint32 cviValue;\\n    }\\n\\n    struct SnapshotUpdate {\\n        uint256 latestSnapshot;\\n        uint256 singleUnitFundingFee;\\n        uint256 totalTime;\\n        uint256 totalRounds;\\n        uint256 cviValueTimestamp;\\n        uint80 newLatestRoundId;\\n        uint32 cviValue;\\n        bool updatedSnapshot;\\n        bool updatedLatestRoundId;\\n        bool updatedLatestTimestamp;\\n        bool updatedTurbulenceData;\\n    }\\n\\n    function updateTurbulenceIndicatorPercent(uint256 totalTime, uint256 newRounds, uint32 lastCVIValue, uint32 currCVIValue) external;\\n\\n    function setOracle(ICVIOracle cviOracle) external;\\n    function setThetaVault(IThetaVaultInfo thetaVault) external;\\n\\n    function setStateUpdator(address newUpdator) external;\\n\\n    function setFundingFeeMinRate(uint32 newFundingFeeMinRate) external;\\n    function setFundingFeeMaxRate(uint32 newFundingFeeMaxRate) external;\\n    function setMinFundingFeeCviThreshold(uint32 newMinFundingFeeCviThreshold) external;\\n    function setMaxFundingFeeCviThreshold(uint32 newMaxFundingFeeCviThreshold) external;\\n    function setFundingFeeDivisionFactor(uint32 newFundingFeeDivisionFactor) external;\\n    function setFundingFeeCoefficients(uint32[] calldata newFundingFeeCoefficients) external;\\n\\n    function setDepositFee(uint16 newDepositFeePercentage) external;\\n    function setWithdrawFee(uint16 newWithdrawFeePercentage) external;\\n    function setOpenPositionFee(uint16 newOpenPositionFeePercentage) external;\\n    function setOpenPositionLPFee(uint16 newOpenPositionLPFeePercent) external;\\n    function setClosePositionLPFee(uint16 newClosePositionLPFeePercent) external;\\n    function setClosePositionFee(uint16 newClosePositionFeePercentage) external;\\n    function setClosePositionMaxFee(uint16 newClosePositionMaxFeePercentage) external;\\n    function setClosePositionFeeDecay(uint256 newClosePositionFeeDecayPeriod) external;\\n    \\n    function setOracleHeartbeatPeriod(uint256 newOracleHeartbeatPeriod) external;\\n    function setBuyingPremiumFeeMax(uint16 newBuyingPremiumFeeMaxPercentage) external;\\n    function setBuyingPremiumThreshold(uint16 newBuyingPremiumThreshold) external;\\n    function setClosingPremiumFeeMax(uint16 newClosingPremiumFeeMaxPercentage) external;\\n    function setCollateralToBuyingPremiumMapping(uint16[] calldata newCollateralToBuyingPremiumMapping) external;\\n    function setFundingFeeConstantRate(uint16 newfundingFeeConstantRate) external;\\n    function setCollateralToExtraFundingFeeMapping(uint32[] calldata newCollateralToExtraFundingFeeMapping) external;\\n    function setTurbulenceStep(uint16 newTurbulenceStepPercentage) external;\\n    function setMaxTurbulenceFeePercentToTrim(uint16 newMaxTurbulenceFeePercentToTrim) external;\\n    function setTurbulenceDeviationThresholdPercent(uint16 newTurbulenceDeviationThresholdPercent) external;\\n    function setTurbulenceDeviationPercent(uint16 newTurbulenceDeviationPercentage) external;\\n\\n    function calculateTurbulenceIndicatorPercent(uint256 totalTime, uint256 newRounds, uint32 _lastCVIValue, uint32 _currCVIValue) external view returns (uint16);\\n\\n    function calculateBuyingPremiumFee(uint168 tokenAmount, uint8 leverage, uint256 lastTotalLeveragedTokens, uint256 lastTotalPositionUnits, uint256 totalLeveragedTokens, uint256 totalPositionUnits) external view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage);\\n    function calculateBuyingPremiumFeeWithAddendum(uint168 tokenAmount, uint8 leverage, uint256 lastTotalLeveragedTokens, uint256 lastTotalPositionUnits, uint256 totalLeveragedTokens, uint256 totalPositionUnits, uint16 _turbulenceIndicatorPercent) external view returns (uint168 buyingPremiumFee, uint16 combinedPremiumFeePercentage);\\n\\n    function calculateClosingPremiumFee() external view returns (uint16 combinedPremiumFeePercentage);\\n\\n    function calculateSingleUnitFundingFee(CVIValue[] memory cviValues, uint256 totalLeveragedTokens, uint256 totalPositionUnits) external view returns (uint256 fundingFee);\\n    function calculateSingleUnitPeriodFundingFee(CVIValue memory cviValue, uint256 collateralRatio) external view returns (uint256 fundingFee, uint256 fundingFeeRatePercents);\\n    function updateSnapshots(uint256 latestTimestamp, uint256 blockTimestampSnapshot, uint256 latestTimestampSnapshot, uint80 latestOracleRoundId, uint256 totalLeveragedTokens, uint256 totalPositionUnits) external view returns (SnapshotUpdate memory snapshotUpdate);\\n\\n    function calculateClosePositionFeePercent(uint256 creationTimestamp, bool isNoLockPositionAddress) external view returns (uint16);\\n    function calculateWithdrawFeePercent(uint256 lastDepositTimestamp) external view returns (uint16);\\n\\n    function calculateCollateralRatio(uint256 totalLeveragedTokens, uint256 totalPositionUnits) external view returns (uint256 collateralRatio);\\n\\n    function depositFeePercent() external view returns (uint16);\\n    function withdrawFeePercent() external view returns (uint16);\\n    function openPositionFeePercent() external view returns (uint16);\\n    function closePositionFeePercent() external view returns (uint16);\\n    function openPositionLPFeePercent() external view returns (uint16);\\n    function closePositionLPFeePercent() external view returns (uint16);\\n\\n    function openPositionFees() external view returns (uint16 openPositionFeePercentResult, uint16 buyingPremiumFeeMaxPercentResult);\\n\\n    function turbulenceIndicatorPercent() external view returns (uint16);\\n    function oracleLeverage() external view returns (uint8);\\n\\n    function getCollateralToBuyingPremiumMapping() external view returns(uint16[] memory);\\n    function getCollateralToExtraFundingFeeMapping() external view returns(uint32[] memory);\\n    function getFundingFeeCoefficients() external view returns(uint32[] memory);\\n}\\n\",\"keccak256\":\"0x4a28b87395a2a35ac1152b83f96630ad4fa1b844b5abca4270486c9c08f388ea\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IFeesCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFeesCollector {\\n    function sendProfit(uint256 amount, IERC20 token) external;\\n}\\n\",\"keccak256\":\"0xb16b7c5d985657716ccacf0f1e61de587c06fe4f6591bee6fafc0a3658229b4c\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/ILiquidation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface ILiquidation {\\t\\n\\tfunction setMinLiquidationThresholdPercents(uint16[8] calldata newMinThresholdPercents) external;\\n\\tfunction setMinLiquidationRewardPercent(uint16 newMinRewardPercent) external;\\n\\tfunction setMaxLiquidationRewardPercents(uint16[8] calldata newMaxRewardPercents) external;\\n\\tfunction isLiquidationCandidate(uint256 positionBalance, bool isPositive, uint168 positionUnitsAmount, uint32 openCVIValue, uint8 leverage) external view returns (bool);\\n\\tfunction getLiquidationReward(uint256 positionBalance, bool isPositive, uint168 positionUnitsAmount, uint32 openCVIValue, uint8 leverage) external view returns (uint256 finderFeeAmount);\\n}\\n\",\"keccak256\":\"0x0799656b324ed8d65391313156e1dfe7d99b6dadb08e71cd6a515d19731539bd\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IPlatform.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./ICVIOracle.sol\\\";\\nimport \\\"./IFeesCalculator.sol\\\";\\nimport \\\"./IRewardsCollector.sol\\\";\\nimport \\\"./IFeesCollector.sol\\\";\\nimport \\\"./ILiquidation.sol\\\";\\n\\ninterface IPlatform {\\n\\n    struct Position {\\n        uint168 positionUnitsAmount;\\n        uint8 leverage;\\n        uint32 openCVIValue;\\n        uint32 creationTimestamp;\\n        uint32 originalCreationTimestamp;\\n    }\\n\\n    event Deposit(address indexed account, uint256 tokenAmount, uint256 lpTokensAmount, uint256 feeAmount);\\n    event Withdraw(address indexed account, uint256 tokenAmount, uint256 lpTokensAmount, uint256 feeAmount);\\n    event OpenPosition(address indexed account, uint256 tokenAmount, uint8 leverage, uint256 feeAmount, uint256 positionUnitsAmount, uint256 cviValue);\\n    event ClosePosition(address indexed account, uint256 tokenAmount, uint256 feeAmount, uint256 positionUnitsAmount, uint8 leverage, uint256 cviValue);\\n    event LiquidatePosition(address indexed positionAddress, uint256 currentPositionBalance, bool isBalancePositive, uint256 positionUnitsAmount);\\n\\n    function deposit(uint256 tokenAmount, uint256 minLPTokenAmount) external returns (uint256 lpTokenAmount);\\n    function withdraw(uint256 tokenAmount, uint256 maxLPTokenBurnAmount) external returns (uint256 burntAmount, uint256 withdrawnAmount);\\n    function withdrawLPTokens(uint256 lpTokenAmount) external returns (uint256 burntAmount, uint256 withdrawnAmount);\\n\\n    function increaseSharedPool(uint256 tokenAmount) external;\\n\\n    function openPositionWithoutFee(uint168 tokenAmount, uint32 maxCVI, uint8 leverage) external returns (uint168 positionUnitsAmount, uint168 positionedTokenAmount, uint168 openPositionFee, uint168 buyingPremiumFee);\\n    function openPosition(uint168 tokenAmount, uint32 maxCVI, uint16 maxBuyingPremiumFeePercentage, uint8 leverage) external returns (uint168 positionUnitsAmount, uint168 positionedTokenAmount, uint168 openPositionFee, uint168 buyingPremiumFee);\\n    function closePositionWithoutFee(uint168 positionUnitsAmount, uint32 minCVI) external returns (uint256 tokenAmount, uint256 closePositionFee, uint256 closingPremiumFee);\\n    function closePosition(uint168 positionUnitsAmount, uint32 minCVI) external returns (uint256 tokenAmount, uint256 closePositionFee, uint256 closingPremiumFee);\\n\\n    function liquidatePositions(address[] calldata positionOwners) external returns (uint256 finderFeeAmount);\\n\\n    function setAddressSpecificParameters(address holderAddress, bool shouldLockPosition, bool noPremiumFeeAllowed, bool increaseSharedPoolAllowed, bool isLiquidityProvider) external;\\n\\n    function setRevertLockedTransfers(bool revertLockedTransfers) external;\\n\\n    function setSubContracts(IFeesCollector newCollector, ICVIOracle newOracle, IRewardsCollector newRewards, ILiquidation newLiquidation, address _newStakingContractAddress) external;\\n    function setFeesCalculator(IFeesCalculator newCalculator) external;\\n\\n    function setLatestOracleRoundId(uint80 newOracleRoundId) external;\\n    function setMaxTimeAllowedAfterLatestRound(uint32 newMaxTimeAllowedAfterLatestRound) external;\\n\\n    function setLockupPeriods(uint256 newLPLockupPeriod, uint256 newBuyersLockupPeriod) external;\\n\\n    function setEmergencyParameters(bool newEmergencyWithdrawAllowed, bool newCanPurgeSnapshots) external;\\n\\n    function setMaxAllowedLeverage(uint8 newMaxAllowedLeverage) external;\\n\\n    function calculatePositionBalance(address positionAddress) external view returns (uint256 currentPositionBalance, bool isPositive, uint168 positionUnitsAmount, uint8 leverage, uint256 fundingFees, uint256 marginDebt);\\n    function calculatePositionPendingFees(address positionAddress, uint168 positionUnitsAmount) external view returns (uint256 pendingFees);\\n\\n    function totalBalance(bool _withAddendum) external view returns (uint256 balance);\\n\\n    function calculateLatestTurbulenceIndicatorPercent() external view returns (uint16);\\n\\n    function cviOracle() external view returns (ICVIOracle);\\n    function feesCalculator() external view returns (IFeesCalculator);\\n\\n    function PRECISION_DECIMALS() external view returns (uint256);\\n\\n    function totalPositionUnitsAmount() external view returns (uint256);\\n    function totalLeveragedTokensAmount() external view returns (uint256);\\n    function totalFundingFeesAmount() external view returns (uint256);\\n    function latestFundingFees() external view returns (uint256);\\n\\n    function positions(address positionAddress) external view returns (uint168 positionUnitsAmount, uint8 leverage, uint32 openCVIValue, uint32 creationTimestamp, uint32 originalCreationTimestamp);\\n    function buyersLockupPeriod() external view returns (uint256);\\n    function maxCVIValue() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x11f55f686514975c2dd5adf87856f8df5f85b015621f01e1528addb6b7194686\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IRequestFeesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./IVolatilityToken.sol\\\";\\n\\ninterface IRequestFeesCalculator {\\n    function calculateTimePenaltyFee(IVolatilityToken.Request calldata request) external view returns (uint16 feePercentage);\\n    function calculateTimeDelayFee(uint256 timeDelay) external view returns (uint16 feePercentage);\\n    function calculateFindersFee(uint256 tokensLeftAmount) external view returns (uint256 findersFeeAmount);\\n    function calculateKeepersFee(uint256 tokensAmount) external view returns (uint256 keepersFeeAmount);\\n\\n    function isLiquidable(IVolatilityToken.Request calldata request) external view returns (bool liquidable);\\n\\n    function minWaitTime() external view returns (uint32);\\n\\n    function setTimeWindow(uint32 minTimeWindow, uint32 maxTimeWindow) external;\\n    function setTimeDelayFeesParameters(uint16 minTimeDelayFeePercent, uint16 maxTimeDelayFeePercent) external;\\n    function setMinWaitTime(uint32 newMinWaitTime) external;\\n    function setTimePenaltyFeeParameters(uint16 beforeTargetTimeMaxPenaltyFeePercent, uint32 afterTargetMidTime, uint16 afterTargetMidTimePenaltyFeePercent, uint32 afterTargetMaxTime, uint16 afterTargetMaxTimePenaltyFeePercent) external;\\n    function setFindersFee(uint16 findersFeePercent) external;\\n    function setKeepersFeePercent(uint16 keepersFeePercent) external;\\n    function setKeepersFeeMax(uint256 keepersFeeMax) external;\\n\\n    function getMaxFees() external view returns (uint16 maxFeesPercent);\\n}\\n\",\"keccak256\":\"0xb516083aa9063482c61c12f38b960f017205f2611358dcab31c1197208841611\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IRequestManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface IRequestManager {\\n\\n\\tfunction nextRequestId() external view returns (uint256);\\n    function minRequestId() external view returns (uint256);\\n    function maxMinRequestIncrements() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4271e6200e0675ca19c931cd82dc9243a01d88bc20a4352effb1d66be761b94b\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IRewardsCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface IRewardsCollector {\\n\\tfunction reward(address account, uint256 positionUnits, uint8 leverage) external;\\n}\\n\",\"keccak256\":\"0xaae3f1399202cccfb2e7302f69868a1f9adfbc53c968668e79201692c5724ca5\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IThetaVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport '@coti-cvi/contracts-staking/contracts/interfaces/IRewardRouter.sol';\\n\\nimport \\\"./IThetaVaultInfo.sol\\\";\\nimport \\\"./IVolatilityToken.sol\\\";\\n\\ninterface IThetaVault is IThetaVaultInfo {\\n\\n    event SubmitRequest(uint256 requestId, uint8 requestType, uint256 tokenAmount, uint32 targetTimestamp, address indexed account, uint256 totalUSDCBalance, uint256 totalSupply);\\n    event FulfillDeposit(uint256 requestId, address indexed account, uint256 totalUSDCAmount, uint256 platformLiquidityAmount, uint256 dexVolTokenUSDCAmount, uint256 dexVolTokenAmount, uint256 dexUSDCAmount, uint256 mintedThetaTokens);\\n    event FulfillWithdraw(uint256 requestId, address indexed account, uint256 totalUSDCAmount, uint256 platformLiquidityAmount, uint256 dexVolTokenAmount, uint256 dexUSDCVolTokenAmount, uint256 dexUSDCAmount, uint256 burnedThetaTokens);\\n    event LiquidateRequest(uint256 requestId, uint8 requestType, address indexed account, address indexed liquidator, uint256 tokenAmount);\\n\\n    function submitDepositRequest(uint168 tokenAmount/* , bool shouldStake */) external returns (uint256 requestId);\\n    function submitWithdrawRequest(uint168 thetaTokenAmount) external returns (uint256 requestId);\\n\\n    function fulfillDepositRequest(uint256 requestId) external returns (uint256 thetaTokensMinted);\\n    function fulfillWithdrawRequest(uint256 requestId) external returns (uint256 tokenWithdrawnAmount);\\n\\n    function liquidateRequest(uint256 requestId) external;\\n\\n    function rebalance() external;\\n\\n    function setRewardRouter(IRewardRouter rewardRouter) external;\\n    function setFulfiller(address newFulfiller) external;\\n    function setMinPoolSkew(uint16 newMinPoolSkewPercentage) external;\\n    function setLiquidityPercentages(uint16 newExtraLiquidityPercentage, uint16 minDexPercentageAllowed) external;\\n    function setRequestDelay(uint256 newRequestDelay) external;\\n    function setDepositCap(uint256 newDepositCap) external;\\n    function setPeriods(uint256 newLockupPeriod, uint256 newLiquidationPeriod) external;\\n    function setMinAmounts(uint256 newMinDepositAmount, uint256 newMinWithdrawAmount) external;\\n    function setDepositHoldings(uint16 newDepositHoldingsPercentage) external;\\n    \\n    function volToken() external view returns (IVolatilityToken);\\n\\n    function totalBalance() external view returns (uint256 balance, uint256 usdcPlatformLiquidity, uint256 intrinsicDEXVolTokenBalance, uint256 volTokenPositionBalance, uint256 dexUSDCAmount, uint256 dexVolTokensAmount);\\n    function getReserves() external view returns (uint256 volTokenAmount, uint256 usdcAmount);\\n    function requests(uint256 requestId) external view returns (uint8 requestType, uint168 tokenAmount, uint32 targetTimestamp, address owner, bool shouldStake);\\n}\\n\",\"keccak256\":\"0xbd27cde6652e9e4b9cd783ba25bafb31ab00210fad67f80733e8901f980f0fa1\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IThetaVaultInfo.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\ninterface IThetaVaultInfo {\\n    function totalVaultLeveragedAmount() external view returns (uint256);\\n    function vaultPositionUnits() external view returns (uint256);\\n    function extraLiqidityPercentage() external view returns (uint16);\\n    function minDexPercentageAllowed() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xce2b14eb4cfcf69d7fe194658560dd77ee0f37c913eefa8d60a2d09bdd7683f6\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-cvi/contracts/interfaces/IVolatilityToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport \\\"./IPlatform.sol\\\";\\nimport \\\"./IRequestFeesCalculator.sol\\\";\\nimport \\\"./ICVIOracle.sol\\\";\\n\\ninterface IVolatilityToken {\\n\\n    struct Request {\\n        uint8 requestType; // 1 => mint, 2 => burn\\n        uint168 tokenAmount;\\n        uint16 timeDelayRequestFeesPercent;\\n        uint16 maxRequestFeesPercent;\\n        address owner;\\n        uint32 requestTimestamp;\\n        uint32 targetTimestamp;\\n        bool useKeepers;\\n        uint16 maxBuyingPremiumFeePercentage;\\n    }\\n\\n    event SubmitRequest(uint256 requestId, uint8 requestType, address indexed account, uint256 tokenAmount, uint256 submitFeesAmount, uint32 requestTimestamp, uint32 targetTimestamp, bool useKeepers, uint16 maxBuyingPremiumFeePercentage);\\n    event FulfillRequest(uint256 requestId, uint8 requestType, address indexed account, uint256 fulfillFeesAmount, bool isAborted, bool useKeepers, bool keepersCalled, address indexed fulfiller, uint32 fulfillTimestamp);\\n    event LiquidateRequest(uint256 requestId, uint8 requestType, address indexed account, address indexed liquidator, uint256 findersFeeAmount, bool useKeepers, uint32 liquidateTimestamp);\\n    event Mint(uint256 requestId, address indexed account, uint256 tokenAmount, uint256 positionedTokenAmount, uint256 mintedTokens, uint256 openPositionFee, uint256 buyingPremiumFee);\\n    event Burn(uint256 requestId, address indexed account, uint256 tokenAmountBeforeFees, uint256 tokenAmount, uint256 burnedTokens, uint256 closePositionFee, uint256 closingPremiumFee);\\n\\n    function rebaseCVI() external;\\n\\n    function submitMintRequest(uint168 tokenAmount, uint32 timeDelay) external returns (uint256 requestId);\\n    function submitKeepersMintRequest(uint168 tokenAmount, uint32 timeDelay, uint16 maxBuyingPremiumFeePercentage) external returns (uint256 requestId);\\n    function submitBurnRequest(uint168 tokenAmount, uint32 timeDelay) external returns (uint256 requestId);\\n    function submitKeepersBurnRequest(uint168 tokenAmount, uint32 timeDelay) external returns (uint256 requestId);\\n\\n    function fulfillMintRequest(uint256 requestId, uint16 maxBuyingPremiumFeePercentage, bool keepersCalled) external returns (uint256 tokensMinted, bool success);\\n    function fulfillBurnRequest(uint256 requestId, bool keepersCalled) external returns (uint256 tokensBurned);\\n\\n    function mintTokens(uint168 tokenAmount) external returns (uint256 mintedTokens);\\n    function burnTokens(uint168 burnAmount) external returns (uint256 tokenAmount);\\n\\n    function liquidateRequest(uint256 requestId) external returns (uint256 findersFeeAmount);\\n\\n    function setMinter(address minter) external;\\n    function setPlatform(IPlatform newPlatform) external;\\n    function setFeesCalculator(IFeesCalculator newFeesCalculator) external;\\n    function setFeesCollector(IFeesCollector newCollector) external;\\n    function setRequestFeesCalculator(IRequestFeesCalculator newRequestFeesCalculator) external;\\n    function setCVIOracle(ICVIOracle newCVIOracle) external;\\n    function setDeviationParameters(uint16 newDeviationPercentagePerSingleRebaseLag, uint16 newMinDeviationPercentage, uint16 newMaxDeviationPercentage) external;\\n    function setVerifyTotalRequestsAmount(bool verifyTotalRequestsAmount) external;\\n    function setMaxTotalRequestsAmount(uint256 maxTotalRequestsAmount) external;\\n    function setCappedRebase(bool newCappedRebase) external;\\n\\n    function setMinRequestId(uint256 newMinRequestId) external;\\n    function setMaxMinRequestIncrements(uint256 newMaxMinRequestIncrements) external;\\n\\n    function setFulfiller(address fulfiller) external;\\n\\n    function setKeepersFeeVaultAddress(address newKeepersFeeVaultAddress) external;\\n\\n    function setMinKeepersAmounts(uint256 newMinKeepersMintAmount, uint256 newMinKeepersBurnAmount) external;\\n\\n    function platform() external view returns (IPlatform);\\n    function requestFeesCalculator() external view returns (IRequestFeesCalculator);\\n    function leverage() external view returns (uint8);\\n    function initialTokenToLPTokenRate() external view returns (uint256);\\n\\n    function requests(uint256 requestId) external view returns (uint8 requestType, uint168 tokenAmount, uint16 timeDelayRequestFeesPercent, uint16 maxRequestFeesPercent,\\n        address owner, uint32 requestTimestamp, uint32 targetTimestamp, bool useKeepers, uint16 maxBuyingPremiumFeePercentage);\\n}\\n\",\"keccak256\":\"0x9b195f997265f6401224845c81cba2a3ac6f2e4f2bf65d8be5027ac1ee3fa5b4\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-staking/contracts/interfaces/IRewardRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8;\\n\\nimport './IRewardTracker.sol';\\nimport './IVester.sol';\\n\\nenum StakedTokenName {\\n  THETA_VAULT,\\n  ES_GOVI,\\n  GOVI,\\n  LENGTH\\n}\\n\\ninterface IRewardRouter {\\n  event StakeToken(address indexed account, address indexed tokenName, uint256 amount);\\n  event UnstakeToken(address indexed account, address indexed tokenName, uint256 amount);\\n\\n  function stake(StakedTokenName _token, uint256 _amount) external;\\n\\n  function stakeForAccount(\\n    StakedTokenName _token,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function batchStakeForAccount(\\n    StakedTokenName _tokenName,\\n    address[] memory _accounts,\\n    uint256[] memory _amounts\\n  ) external;\\n\\n  function unstake(StakedTokenName _token, uint256 _amount) external;\\n\\n  function claim(StakedTokenName _token) external;\\n\\n  function compound(StakedTokenName _tokenName) external;\\n\\n  function compoundForAccount(address _account, StakedTokenName _tokenName) external;\\n\\n  function batchCompoundForAccounts(address[] memory _accounts, StakedTokenName _tokenName) external;\\n\\n  function setRewardTrackers(StakedTokenName[] calldata _tokenNames, IRewardTracker[] calldata _rewardTrackers)\\n    external;\\n\\n  function setVesters(StakedTokenName[] calldata _tokenNames, IVester[] calldata _vesters) external;\\n\\n  function setTokens(StakedTokenName[] calldata _tokenNames, address[] calldata _tokens) external;\\n\\n  function rewardTrackers(StakedTokenName _token) external view returns (IRewardTracker);\\n\\n  function vesters(StakedTokenName _token) external view returns (IVester);\\n\\n  function tokens(StakedTokenName _token) external view returns (address);\\n}\\n\",\"keccak256\":\"0x3d947510a8edfa0e2d7119d5e31a63ef9ff4bef153ce5afc67343aa2cc2a7f79\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-staking/contracts/interfaces/IRewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8;\\n\\ninterface IRewardTracker {\\n  event Claim(address indexed receiver, uint256 amount);\\n\\n  function stake(address _depositToken, uint256 _amount) external;\\n\\n  function stakeForAccount(\\n    address _fundingAccount,\\n    address _account,\\n    address _depositToken,\\n    uint256 _amount\\n  ) external;\\n\\n  function unstake(address _depositToken, uint256 _amount) external;\\n\\n  function unstakeForAccount(\\n    address _account,\\n    address _depositToken,\\n    uint256 _amount,\\n    address _receiver\\n  ) external;\\n\\n  function claim(address _receiver) external returns (uint256);\\n\\n  function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n  function updateRewards() external;\\n\\n  function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n\\n  function stakedAmounts(address _account) external view returns (uint256);\\n\\n  function averageStakedAmounts(address _account) external view returns (uint256);\\n\\n  function cumulativeRewards(address _account) external view returns (uint256);\\n\\n  function claimable(address _account) external view returns (uint256);\\n\\n  function tokensPerInterval() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0af272806df1e2440cb18485e6911a67a2a25fe1edadfa602c08a4ef3e2f1f5c\",\"license\":\"GPL-3.0\"},\"@coti-cvi/contracts-staking/contracts/interfaces/IVester.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8;\\n\\nimport './IRewardTracker.sol';\\n\\ninterface IVester {\\n  event Claim(address indexed receiver, uint256 amount);\\n  event Deposit(address indexed account, uint256 amount);\\n  event Withdraw(address indexed account, uint256 claimedAmount, uint256 balance);\\n  event PairTransfer(address indexed from, address indexed to, uint256 value);\\n\\n  function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n  function transferStakeValues(address _sender, address _receiver) external;\\n\\n  function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external;\\n\\n  function setTransferredCumulativeRewards(address _account, uint256 _amount) external;\\n\\n  function setCumulativeRewardDeductions(address _account, uint256 _amount) external;\\n\\n  function setBonusRewards(address _account, uint256 _amount) external;\\n\\n  function rewardTracker() external view returns (IRewardTracker);\\n\\n  function claimable(address _account) external view returns (uint256);\\n\\n  function cumulativeClaimAmounts(address _account) external view returns (uint256);\\n\\n  function claimedAmounts(address _account) external view returns (uint256);\\n\\n  function pairAmounts(address _account) external view returns (uint256);\\n\\n  function getVestedAmount(address _account) external view returns (uint256);\\n\\n  function transferredAverageStakedAmounts(address _account) external view returns (uint256);\\n\\n  function transferredCumulativeRewards(address _account) external view returns (uint256);\\n\\n  function cumulativeRewardDeductions(address _account) external view returns (uint256);\\n\\n  function bonusRewards(address _account) external view returns (uint256);\\n\\n  function getMaxVestableAmount(address _account) external view returns (uint256);\\n\\n  function getCombinedAverageStakedAmount(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x60ef693b02dca48ab14d3f352632065fd8c5cd7a49063e2758eec857bc73ce11\",\"license\":\"GPL-3.0\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/theta-vault/ThetaVaultContracts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8;\\n\\nimport '@coti-cvi/contracts-cvi/contracts/ThetaVault.sol';\\n\\ncontract CVIUSDCThetaVault is ThetaVault {\\n  constructor() ThetaVault() {}\\n}\\n\\ncontract CVIUSDCThetaVault2X is ThetaVault {\\n  constructor() ThetaVault() {}\\n}\\n\",\"keccak256\":\"0xd2102b6b87f44dd194240c6745ff9be532494e0aaf305a21b77a71e9e5a424ee\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506156bf80620000216000396000f3fe608060405234801561001057600080fd5b50600436106103c55760003560e01c806380b4ec9f116101ff578063ad7a672f1161011a578063e5f2eb5f116100ad578063f2fde38b1161007c578063f2fde38b146108b1578063f4b86023146108c4578063f887ea40146108d7578063fc0c546a146108ea57600080fd5b8063e5f2eb5f14610874578063ecd169ae14610887578063ee947a7c14610895578063f21d5bbf1461089e57600080fd5b8063dbd5edc7116100e9578063dbd5edc714610832578063dd62ed3e1461083b578063e1be525d1461084e578063e239e3f81461086157600080fd5b8063ad7a672f146107ce578063af03d9e114610803578063c3c9677214610816578063c98ece901461081f57600080fd5b806398ec20e511610192578063a457c2d711610161578063a457c2d714610796578063a5cfa15c146107a9578063a6eea7f3146107b2578063a9059cbb146107bb57600080fd5b806398ec20e5146107695780639a91ee1e146107715780639c6e009c14610784578063a08102161461078d57600080fd5b80638da5cb5b116101ce5780638da5cb5b1461071357806395d89b41146107245780639673fc4b14610748578063977b91d71461075657600080fd5b806380b4ec9f1461063357806381d12c581461064657806386651203146106ed5780638bf92bbe1461070057600080fd5b80634c255c97116102ef5780636a84a9851161028257806376b27f331161025157806376b27f33146105fb57806379a81656146106045780637b5d6fe3146106175780637d7c2a1c1461062b57600080fd5b80636a84a985146105ae57806370a08231146105b7578063715018a6146105e0578063767ac369146105e857600080fd5b806361176a0e116102be57806361176a0e14610569578063645006ca1461057c578063655d8dec1461058557806368378f86146105a557600080fd5b80634c255c97146105315780635a3bb9891461053a57806360e3fb6c1461055557806360ebfee61461055d57600080fd5b8063313ce567116103675780633e9bc3c9116103365780633e9bc3c9146104ed5780634568b3b1146104f5578063457e1a49146104fd5780634bde38c81461050657600080fd5b8063313ce5671461049d578063342273e4146104b257806339509351146104c55780633d43ef57146104d857600080fd5b80630cd34787116103a35780630cd347871461044457806318160ddd1461045b57806323b872dd14610463578063293d09151461047657600080fd5b806306fdde03146103ca5780630902f1ac14610404578063095ea7b314610421575b600080fd5b60408051808201909152600c81526b0546865746120435649204c560a41b60208201525b6040516103fb9190615256565b60405180910390f35b61040c6108fd565b604080519283526020830191909152016103fb565b61043461042f366004614d74565b6109c0565b60405190151581526020016103fb565b61044d60d15481565b6040519081526020016103fb565b60675461044d565b610434610471366004614d34565b6109da565b60d45461048a9062010000900461ffff1681565b60405161ffff90911681526020016103fb565b60125b60405160ff90911681526020016103fb565b61044d6104c0366004614ebd565b610a00565b6104346104d3366004614d74565b610a5b565b6104eb6104e63660046150c9565b610a7d565b005b6104a0600181565b61044d610ab2565b61044d60dc5481565b60cb54610519906001600160a01b031681565b6040516001600160a01b0390911681526020016103fb565b61048a61271081565b60de546105199064010000000090046001600160a01b031681565b6104a0600281565b61044d6402540be40081565b60cc54610519906001600160a01b031681565b61044d60db5481565b61044d610593366004614cc4565b60d06020526000908152604090205481565b61044d60d65481565b61044d60ce5481565b61044d6105c5366004614cc4565b6001600160a01b031660009081526065602052604090205490565b6104eb610e0f565b6104eb6105f63660046150c9565b610e45565b61044d60d95481565b6104eb610612366004614ea3565b610e7a565b60de5461048a9062010000900461ffff1681565b6104eb610ebc565b6104eb610641366004614f71565b610ef4565b6106a4610654366004614f71565b60cf602052600090815260409020805460019091015460ff8083169261010081046001600160a81b031692600160b01b90910463ffffffff16916001600160a01b03821691600160a01b90041685565b6040805160ff90961686526001600160a81b03909416602086015263ffffffff909216928401929092526001600160a01b0390911660608301521515608082015260a0016103fb565b6104eb6106fb366004614f71565b610ff1565b61044d61070e366004614ebd565b611020565b6033546001600160a01b0316610519565b6040805180820190915260088152670542d4356492d4c560c41b60208201526103ee565b60d45461048a9061ffff1681565b6104eb610764366004614cc4565b6110d3565b61048a600581565b6104eb61077f366004614f71565b61112b565b61044d60d35481565b61044d60d25481565b6104346107a4366004614d74565b61115a565b61044d60da5481565b61044d60d85481565b6104346107c9366004614d74565b6111e0565b6107d66111ee565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016103fb565b6104eb610811366004614f3f565b611223565b61044d60dd5481565b6104eb61082d366004614cc4565b61127d565b61044d60d55481565b61044d610849366004614cfc565b6112c9565b6104eb61085c366004614ea3565b6112f4565b61044d61086f366004614f71565b611336565b6104eb610882366004615001565b6115f5565b60de5461048a9061ffff1681565b61044d60d75481565b61044d6108ac366004614f71565b61185f565b6104eb6108bf366004614cc4565b611cea565b60c954610519906001600160a01b031681565b60cd54610519906001600160a01b031681565b60ca54610519906001600160a01b031681565b60008060008061090b611d85565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561094357600080fd5b505afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190614e61565b5060ca5460cc546001600160701b0393841695509190921692506001600160a01b03918216911610156109b3578193508092506109ba565b8093508192505b50509091565b6000336109ce818585611e8e565b60019150505b92915050565b6000336109e8858285611fb2565b6109f385858561202c565b60019150505b9392505050565b600060db54826001600160a81b03161015610a4e5760405162461bcd60e51b8152602060048201526009602482015268151bdbc81cdb585b1b60ba1b60448201526064015b60405180910390fd5b6109d460018360006121fa565b6000336109ce818585610a6e83836112c9565b610a789190615455565b611e8e565b6033546001600160a01b03163314610aa75760405162461bcd60e51b8152600401610a45906152d7565b60db9190915560dc55565b600080610abd6108fd565b5090506000610aca611d85565b905060cc60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1a57600080fd5b505afa158015610b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b529190614f89565b1580610bcc5750806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9257600080fd5b505afa158015610ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bca9190614f89565b155b15610bda5760009250505090565b6000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1557600080fd5b505afa158015610c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4d9190614f89565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a082319060240160206040518083038186803b158015610c8c57600080fd5b505afa158015610ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc49190614f89565b610cce908561557b565b610cd8919061546d565b60cb5460cc5460405163055f575160e41b81526001600160a01b0391821660048201529293506000929116906355f575109060240160a06040518083038186803b158015610d2557600080fd5b505afa158015610d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5d9190614ed9565b505050506001600160a81b0316905060cc60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dba57600080fd5b505afa158015610dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df29190614f89565b610dfc838361557b565b610e06919061546d565b94505050505090565b6033546001600160a01b03163314610e395760405162461bcd60e51b8152600401610a45906152d7565b610e43600061245d565b565b6033546001600160a01b03163314610e6f5760405162461bcd60e51b8152600401610a45906152d7565b60d79190915560d855565b6033546001600160a01b03163314610ea45760405162461bcd60e51b8152600401610a45906152d7565b60d4805461ffff191661ffff92909216919091179055565b6033546001600160a01b03163314610ee65760405162461bcd60e51b8152600401610a45906152d7565b610ef060006124af565b5050565b60026097541415610f175760405162461bcd60e51b8152600401610a4590615357565b6002609755600081815260cf6020908152604091829020825160a081018452815460ff80821680845261010083046001600160a81b031695840195909552600160b01b90910463ffffffff16948201949094526001909101546001600160a01b0381166060830152600160a01b900490921615156080830152610f9957600080fd5b610fa282612950565b610fdf5760405162461bcd60e51b815260206004820152600e60248201526d4e6f74206c697175696461626c6560901b6044820152606401610a45565b610fe882612984565b50506001609755565b6033546001600160a01b0316331461101b5760405162461bcd60e51b8152600401610a45906152d7565b60d555565b600060dc54826001600160a81b031610156110695760405162461bcd60e51b8152602060048201526009602482015268151bdbc81cdb585b1b60ba1b6044820152606401610a45565b60d75433600090815260d06020526040902054429161108791615455565b11156110c65760405162461bcd60e51b815260206004820152600e60248201526d11195c1bdcda5d081b1bd8dad95960921b6044820152606401610a45565b6109d460028360006121fa565b6033546001600160a01b031633146110fd5760405162461bcd60e51b8152600401610a45906152d7565b60de80546001600160a01b0390921664010000000002640100000000600160c01b0319909216919091179055565b6033546001600160a01b031633146111555760405162461bcd60e51b8152600401610a45906152d7565b60d655565b6000338161116882866112c9565b9050838110156111c85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610a45565b6111d58286868403611e8e565b506001949350505050565b6000336109ce81858561202c565b6000806000806000806111ff612afa565b50929650909450925090506112148483612d4c565b90979096509394509192909190565b6033546001600160a01b0316331461124d5760405162461bcd60e51b8152600401610a45906152d7565b60d4805461ffff9384166201000090810263ffff0000199283161790925560de8054939094169091029116179055565b6033546001600160a01b031633146112a75760405162461bcd60e51b8152600401610a45906152d7565b60c980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b6033546001600160a01b0316331461131e5760405162461bcd60e51b8152600401610a45906152d7565b60de805461ffff191661ffff92909216919091179055565b600081815260cf60209081526040808320600180820154835160a081018552925460ff808216855261010082046001600160a81b031696850196909652600160b01b900463ffffffff16938301939093526001600160a01b0383166060830152600160a01b90920490921680151560808401528392839283929183916113bd918991612faa565b9196509450905080156113d7575060009695505050505050565b6113e0876130bf565b60006113f4866001600160a81b03166124af565b94509050600061140360675490565b1180156114105750600081115b15611443578061141f60675490565b611432906001600160a81b03891661557b565b61143c919061546d565b965061145c565b60d154611459906001600160a81b03881661557b565b96505b50506000851161146b57600080fd5b611475838661315f565b6001600160a01b038316600090815260d06020526040902042905560d2546001600160a81b03851611156114ad57600060d2556114ce565b836001600160a81b031660d260008282546114c8919061559a565b90915550505b60006114e3856001600160a81b03168461323e565b9050811561155a5760de54604051633174ff7d60e21b81526401000000009091046001600160a01b03169063c5d3fdf4906115279060009088908b90600401615217565b600060405180830381600087803b15801561154157600080fd5b505af1158015611555573d6000803e3d6000fd5b505050505b836001600160a01b03167fa7690d0009c94c00bb8bf9ac437b46aa227cf737189169782a3ab5d072bda2ff888784606001518560000151866040015187602001518d6040516115e397969594939291909687526001600160a81b0395909516602087015260408601939093526060850191909152608084015260a083015260c082015260e00190565b60405180910390a25050505050919050565b600061160160016135ec565b90508015611619576000805461ff0019166101001790555b6001600160a01b03881661162c57600080fd5b6001600160a01b03871661163f57600080fd5b6001600160a01b03851661165257600080fd5b6001600160a01b03841661166557600080fd5b6000891161167257600080fd5b600160ce81905560d95560d189905560d4805463ffffffff199081166305dc012c1790915560001960d55561070860d6556201518060d7556203f48060d855601e60da55620186a060db55662386f26fc1000060dc5560de8054909116630bb805dc1790556116df613679565b6116e76136a8565b6116f183836136d7565b60cb80546001600160a01b03808b166001600160a01b0319928316811790935560ca8054898316908416811790915560cc80548c841690851617905560cd805489841694169390931790925560de8054918a1664010000000002640100000000600160c01b031990921691909117905561176d91600019613708565b60cd5460ca5461178c916001600160a01b039182169116600019613708565b60cc5460ca546117ab916001600160a01b039182169116600019613708565b60cd5460cc546117ca916001600160a01b039182169116600019613708565b60cd546117f5906001600160a01b03166000196117e5611d85565b6001600160a01b03169190613708565b60cc5461180e906001600160a01b031680600019613708565b8015611854576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b600081815260cf60209081526040808320815160a081018352815460ff808216835261010082046001600160a81b031695830195909552600160b01b900463ffffffff1692810192909252600101546001600160a01b0381166060830152600160a01b9004909116151560808201528190819081906118e19086906002612faa565b92509250925080611ce2576118f660006124af565b505061192a6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60675460cb546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561197057600080fd5b505afa158015611984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a89190614f89565b6119bb906001600160a81b03871661557b565b6119c5919061546d565b602082015260006119d560675490565b6119dd611d85565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015611a1e57600080fd5b505afa158015611a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a569190614f89565b611a69906001600160a81b03881661557b565b611a73919061546d565b90508015611b2d5760cd5460cc5460ca54604051635d5155ef60e11b81526001600160a01b039384169363baa2abde93611ac1939082169291169086906000908190309042906004016151d7565b6040805180830381600087803b158015611ada57600080fd5b505af1158015611aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1291906150ea565b606084015260408301819052611b2790613864565b60808301525b60cb54602083015160405163452d003f60e01b81526001600160a01b039092169163452d003f91611b649160040190815260200190565b6040805180830381600087803b158015611b7d57600080fd5b505af1158015611b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb591906150ea565b8352506000611bc360675490565b866001600160a81b031660dd54611bda919061557b565b611be4919061546d565b905082608001518360600151846000015183611c009190615455565b611c0a9190615455565b611c149190615455565b96508060dd6000828254611c28919061559a565b90915550611c419050306001600160a81b038816613903565b611c4a886130bf565b60ca54611c61906001600160a01b03168689613a51565b825160408085015160808087015160608089015185518f8152602081018f905280870197909752908601939093529084015260a08301526001600160a81b03881660c0830152516001600160a01b038716917f4574d70f7fcf4382fe2ec80c834752c2addb47b7a07d163dd71ca054be2dd741919081900360e00190a25050505b505050919050565b6033546001600160a01b03163314611d145760405162461bcd60e51b8152600401610a45906152d7565b6001600160a01b038116611d795760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a45565b611d828161245d565b50565b60cd546040805163c45a015560e01b815290516000926001600160a01b03169163c45a0155916004808301926020929190829003018186803b158015611dca57600080fd5b505afa158015611dde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e029190614ce0565b60cc5460ca5460405163e6a4390560e01b81526001600160a01b039283166004820152908216602482015291169063e6a439059060440160206040518083038186803b158015611e5157600080fd5b505afa158015611e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e899190614ce0565b905090565b6001600160a01b038316611ef05760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a45565b6001600160a01b038216611f515760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a45565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000611fbe84846112c9565b9050600019811461202657818110156120195760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610a45565b6120268484848403611e8e565b50505050565b6001600160a01b0383166120905760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610a45565b6001600160a01b0382166120f25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610a45565b6001600160a01b0383166000908152606560205260409020548181101561216a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610a45565b6001600160a01b038085166000908152606560205260408082208585039055918516815290812080548492906121a1908490615455565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516121ed91815260200190565b60405180910390a3612026565b60006002609754141561221f5760405162461bcd60e51b8152600401610a4590615357565b60026097556001600160a81b03831661223757600080fd5b60006122416111ee565b509394505050505060ff8516600114156122b45760d55460d25461226e6001600160a81b03871684615455565b6122789190615455565b11156122b45760405162461bcd60e51b815260206004820152600b60248201526a10d85c081c995858da195960aa1b6044820152606401610a45565b60ce5491506122c4826001615455565b60ce5560d6546000906122d79042615455565b6040805160a08101825260ff808a168083526001600160a81b03808b16602080860191825263ffffffff80891687890190815233606089019081528e151560808a0190815260008f815260cf909552999093209751885494519151909216600160b01b0263ffffffff60b01b1991909516610100026001600160b01b03199094169190961617919091179390931617835590516001928301805494511515600160a01b026001600160a81b03199095166001600160a01b0392909216919091179390931790925591925014156123c857846001600160a81b031660d260008282546123c29190615455565b90915550505b6123db86866001600160a81b0316613a81565b337fbf4d2957ec4d507c14dcbff7e87761bcb7d387e35cab2dcbf05cb283906599ec848888858761240b60675490565b6040805196875260ff9590951660208701526001600160a81b03939093168585015263ffffffff919091166060850152608084015260a0830152519081900360c00190a2505060016097559392505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008060008060006124c086613b04565b60d4549499509097509095509093509150600090612710906124ec9062010000900461ffff168261542f565b61ffff1660cb60009054906101000a90046001600160a01b03166001600160a01b0316632f811c226040518163ffffffff1660e01b815260040160206040518083038186803b15801561253e57600080fd5b505afa158015612552573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125769190614f89565b612580919061557b565b61258a919061546d565b9050600060cb60009054906101000a90046001600160a01b03166001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b1580156125dc57600080fd5b505afa1580156125f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126149190614f89565b905082156129465760db546126299083615455565b8111156126dc57600061263c838361559a565b60cb54604051630441a3e760e41b81526004810183905260001960248201529192506000916001600160a01b039091169063441a3e70906044016040805180830381600087803b15801561268f57600080fd5b505af11580156126a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c791906150ea565b9150506126d4818961323e565b505050612931565b8160db54826126eb9190615455565b10156129315760006126fd828461559a565b90508061270a8588615455565b11801561274f575060de5462010000900461ffff16886127108361272e888b615455565b612738919061559a565b612742919061557b565b61274c919061546d565b10155b1561292f5760006127608588615455565b612768611d85565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127a057600080fd5b505afa1580156127b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d89190614f89565b6127e2908461557b565b6127ec919061546d565b60cd5460cc5460ca54604051635d5155ef60e11b815293945060009384936001600160a01b039081169363baa2abde9361283893918316921690889087908190309042906004016151d7565b6040805180830381600087803b15801561285157600080fd5b505af1158015612865573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288991906150ea565b9150915060008161289984613864565b6128a39190615455565b60cb54604051631c57762b60e31b815260048101839052600060248201529192506001600160a01b03169063e2bbb15890604401602060405180830381600087803b1580156128f157600080fd5b505af1158015612905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129299190614f89565b50505050505b505b6129396111ee565b50939a5098509650909350505b5050505050915091565b60d854600082815260cf60205260408120549091429161297d9190600160b01b900463ffffffff16615455565b1092915050565b600081815260cf6020908152604091829020825160a081018452815460ff80821680845261010083046001600160a81b031695840195909552600160b01b90910463ffffffff16948201949094526001918201546001600160a01b0381166060830152600160a01b9004909316151560808401521415612a235780602001516001600160a81b031660d26000828254612a1d919061559a565b90915550505b612a2c826130bf565b805160ff1660021415612a5c5760608101516020820151612a579130916001600160a81b0316613a51565b612a87565b6060810151602082015160ca54612a87926001600160a01b03909116916001600160a81b0316613a51565b60608101518151602083015160405133936001600160a01b0316927ff6f94f933b96f98ce5b3687b190c131a0c4ede50caec0a7b2f1ea76035eec97292612aee928892919092835260ff9190911660208301526001600160a81b0316604082015260600190565b60405180910390a35050565b6000806000806000612b0a6108fd565b60cb5460cc5460405163055f575160e41b81526001600160a01b0391821660048201529296509294506001926000929116906355f575109060240160a06040518083038186803b158015612b5d57600080fd5b505afa158015612b71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b959190614ed9565b505050506001600160a81b0316905080600014612c365760cb5460cc546040516329b2a60b60e21b81526001600160a01b03918216600482015291169063a6ca982c9060240160c06040518083038186803b158015612bf357600080fd5b505afa158015612c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2b9190614fa1565b509399509194505050505b81612c4057600080fd5b600084118015612c505750600085115b15612d435760cc60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ca357600080fd5b505afa158015612cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdb9190614f89565b612ce5878661557b565b612cef919061546d565b96506000858811612d0957612d04888761559a565b612d13565b612d13868961559a565b60d45490915061271090612d2b9061ffff168a61557b565b612d35919061546d565b811115612d4157600193505b505b50509091929394565b6000806000612d59611d85565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015612d9e57600080fd5b505afa158015612db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd69190614f89565b9050600080600083118015612e5b57506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e2157600080fd5b505afa158015612e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e599190614f89565b115b15612f6f57836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e9957600080fd5b505afa158015612ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ed19190614f89565b612edb848a61557b565b612ee5919061546d565b9150836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f2057600080fd5b505afa158015612f34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f589190614f89565b612f62848961557b565b612f6c919061546d565b90505b612f77613b34565b945080828660dd54612f899190615455565b612f939190615455565b612f9d9190615455565b9550505050509250929050565b600080600060026097541415612fd25760405162461bcd60e51b8152600401610a4590615357565b600260975560608501516001600160a01b0316612fee57600080fd5b60c9546001600160a01b031633148061301c575084606001516001600160a01b0316336001600160a01b0316145b61302557600080fd5b8360ff16856000015160ff161461303b57600080fd5b846040015163ffffffff164210156130805760405162461bcd60e51b81526020600482015260086024820152672a37b79039b7b7b760c11b6044820152606401610a45565b61308986612950565b1561309f5761309786612984565b5060016130ae565b84602001519250846060015191505b600160978190555093509350939050565b600081815260cf6020526040812080546001600160d01b031916815560010180546001600160a81b031916905560d95490805b60ce5483108015613104575060da5482105b80156131285750600083815260cf60205260409020600101546001600160a01b0316155b15613151578161313781615618565b925050828061314590615618565b935050600190506130f2565b801561202657505060d95550565b6001600160a01b0382166131b55760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a45565b80606760008282546131c79190615455565b90915550506001600160a01b038216600090815260656020526040812080548392906131f4908490615455565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6132706040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60008061327b6108fd565b90925090506000806001841580613290575083155b1561329d57506000613473565b60cc60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156132eb57600080fd5b505afa1580156132ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133239190614f89565b60cc60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561337157600080fd5b505afa158015613385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a991906151a1565b6133b490600a6154d0565b6133be908961557b565b6133c8919061546d565b91508460cc60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561341957600080fd5b505afa15801561342d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061345191906151a1565b61345c90600a6154d0565b613466908661557b565b613470919061546d565b92505b801561355357613484888484613cd9565b60808901819052606089019190915290875260dd80546000906134a8908490615455565b909155505060cb546060870151604051631c57762b60e31b81526004810191909152600060248201526001600160a01b039091169063e2bbb15890604401602060405180830381600087803b15801561350057600080fd5b505af1158015613514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135389190614f89565b508551613544906140a9565b604088015260208701526135e1565b6060860188905260cb54604051631c57762b60e31b8152600481018a9052600060248201526001600160a01b039091169063e2bbb15890604401602060405180830381600087803b1580156135a757600080fd5b505af11580156135bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135df9190614f89565b505b505050505092915050565b60008054610100900460ff1615613633578160ff16600114801561360f5750303b155b61362b5760405162461bcd60e51b8152600401610a4590615289565b506000919050565b60005460ff80841691161061365a5760405162461bcd60e51b8152600401610a4590615289565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166136a05760405162461bcd60e51b8152600401610a459061530c565b610e436141cc565b600054610100900460ff166136cf5760405162461bcd60e51b8152600401610a459061530c565b610e436141fa565b600054610100900460ff166136fe5760405162461bcd60e51b8152600401610a459061530c565b610ef0828261422a565b8015806137915750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561375757600080fd5b505afa15801561376b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061378f9190614f89565b155b6137fc5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610a45565b6040516001600160a01b03831660248201526044810182905261385f90849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614278565b505050565b6000816001600160a81b038116811461387c57600080fd5b60cc5460405163ec27050760e01b81526001600160a81b03831660048201526001600160a01b039091169063ec270507906024015b602060405180830381600087803b1580156138cb57600080fd5b505af11580156138df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f99190614f89565b6001600160a01b0382166139635760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610a45565b6001600160a01b038216600090815260656020526040902054818110156139d75760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610a45565b6001600160a01b0383166000908152606560205260408120838303905560678054849290613a0690849061559a565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6040516001600160a01b03831660248201526044810182905261385f90849063a9059cbb60e01b90606401613828565b60ff821660021415613aec5733600090815260656020526040902054811115613ae05760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820746f6b656e7360781b6044820152606401610a45565b610ef03033818461434a565b60ca54610ef0906001600160a01b031633308461434a565b6000806000806000613b1586614382565b91945092509050613b268382612d4c565b909790965092945090925090565b60cb546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015613b7c57600080fd5b505afa158015613b90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bb49190614f89565b90508015613cd55760cb60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c0a57600080fd5b505afa158015613c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c429190614f89565b60cb54604051630d9c362960e41b8152600160048201526001600160a01b039091169063d9c362909060240160206040518083038186803b158015613c8657600080fd5b505afa158015613c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cbe9190614f89565b613cc8908361557b565b613cd2919061546d565b91505b5090565b60de546000908190819061271090613cf59061ffff168861557b565b613cff919061546d565b90506000613d0d828861559a565b9050600060cb60009054906101000a90046001600160a01b03166001600160a01b0316636f7d78286040518163ffffffff1660e01b815260040160206040518083038186803b158015613d5f57600080fd5b505afa158015613d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d979190614ce0565b6001600160a01b031663c1639a2b6040518163ffffffff1660e01b815260040160606040518083038186803b158015613dcf57600080fd5b505afa158015613de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e079190615154565b505063ffffffff169050600060cb60009054906101000a90046001600160a01b03166001600160a01b031663d934c20b6040518163ffffffff1660e01b815260040160206040518083038186803b158015613e6157600080fd5b505afa158015613e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e99919061513a565b60cb5460cc546040516329b2a60b60e21b81526001600160a01b03918216600482015263ffffffff93909316935060009291169063a6ca982c9060240160c06040518083038186803b158015613eee57600080fd5b505afa158015613f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f269190614fa1565b5050505050905061271061ffff168289613f40919061557b565b613f4a8b8661557b565b613f549190615455565b613f5e919061557b565b60d4548390613f779062010000900461ffff168b61557b565b613f81919061557b565b613f8b9190615455565b84612710613f998b8761557b565b613fa3919061557b565b613fad919061557b565b613fb7919061546d565b965060008160cc60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561400a57600080fd5b505afa15801561401e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140429190614f89565b61404c908a61557b565b614056919061546d565b90506000806140636108fd565b9092509050600082614075838661557b565b61407f919061546d565b90508061408c8c8a61559a565b614096919061559a565b9950505050505050505093509350939050565b6000806140b583614411565b90506000806140c26108fd565b90925090506000826140d4838661557b565b6140de919061546d565b60cd5460cc5460ca5460405162e8e33760e81b81526001600160a01b039283166004820152908216602482015260448101889052606481018490526084810188905260a481018490523060c48201524260e482015292935060009291169063e8e337009061010401606060405180830381600087803b15801561416057600080fd5b505af1158015614174573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614198919061510d565b50965090508186146141a957600080fd5b8481146141b557600080fd5b6141bd6108fd565b50959794965093945050505050565b600054610100900460ff166141f35760405162461bcd60e51b8152600401610a459061530c565b6001609755565b600054610100900460ff166142215760405162461bcd60e51b8152600401610a459061530c565b610e433361245d565b600054610100900460ff166142515760405162461bcd60e51b8152600401610a459061530c565b8151614264906068906020850190614b6b565b50805161385f906069906020840190614b6b565b60006142cd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166144629092919063ffffffff16565b80519091501561385f57808060200190518101906142eb9190614e47565b61385f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a45565b6040516001600160a01b03808516602483015283166044820152606481018290526120269085906323b872dd60e01b90608401613828565b600080600080614390612afa565b9397509195509350909150508015614409576143ba60dd54866143b39190615455565b8584614479565b6143c2612afa565b93975091955093509091505080156144095760405162461bcd60e51b815260206004820152600a602482015269151bdbc81cdad95dd95960b21b6044820152606401610a45565b509193909250565b6000816001600160a81b038116811461442957600080fd5b60cc5460405163d4a56af160e01b81526001600160a81b03831660048201526001600160a01b039091169063d4a56af1906024016138b1565b60606144718484600085614a01565b949350505050565b600082821161449d57600261448e838561559a565b614498919061546d565b6144b3565b60026144a9848461559a565b6144b3919061546d565b905060008185101561466b5760006144cb868461559a565b60cb54604051630d9c362960e41b8152600160048201529192506001600160a01b03169063452d003f90829063d9c362909060240160206040518083038186803b15801561451857600080fd5b505afa15801561452c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145509190614f89565b60cb60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561459e57600080fd5b505afa1580156145b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145d69190614f89565b6145e0908561557b565b6145ea919061546d565b6040518263ffffffff1660e01b815260040161460891815260200190565b6040805180830381600087803b15801561462157600080fd5b505af1158015614635573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061465991906150ea565b925061466790508683615455565b9250505b6000848411156147e857600061468084614411565b6040805160028082526060820183529293506000929091602083019080368337505060cc5482519293506001600160a01b0316918391506000906146d457634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260ca5482519116908290600190811061471357634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260cd546040516338ed173960e01b815260009291909116906338ed17399061475d908690859087903090429060040161538e565b600060405180830381600087803b15801561477757600080fd5b505af115801561478b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526147b39190810190614d9f565b9050806001815181106147d657634e487b7160e01b600052603260045260246000fd5b6020026020010151935050505061494e565b604080516002808252606082018352600092602083019080368337505060ca5482519293506001600160a01b03169183915060009061483757634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260cc5482519116908290600190811061487657634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260cd546040516338ed173960e01b815260009291909116906338ed1739906148c0908890859087903090429060040161538e565b600060405180830381600087803b1580156148da57600080fd5b505af11580156148ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526149169190810190614d9f565b90506149498160018151811061493c57634e487b7160e01b600052603260045260246000fd5b6020026020010151613864565b925050505b82811161495a57600080fd5b60cb546001600160a01b031663e2bbb15883614976868561559a565b6149809190615455565b6040516001600160e01b031960e084901b168152600481019190915260006024820152604401602060405180830381600087803b1580156149c057600080fd5b505af11580156149d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149f89190614f89565b50505050505050565b606082471015614a625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a45565b6001600160a01b0385163b614ab95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a45565b600080866001600160a01b03168587604051614ad591906151bb565b60006040518083038185875af1925050503d8060008114614b12576040519150601f19603f3d011682016040523d82523d6000602084013e614b17565b606091505b5091509150614b27828286614b32565b979650505050505050565b60608315614b415750816109f9565b825115614b515782518084602001fd5b8160405162461bcd60e51b8152600401610a459190615256565b828054614b77906155dd565b90600052602060002090601f016020900481019282614b995760008555614bdf565b82601f10614bb257805160ff1916838001178555614bdf565b82800160010185558215614bdf579182015b82811115614bdf578251825591602001919060010190614bc4565b50613cd59291505b80821115613cd55760008155600101614be7565b8051801515811461367457600080fd5b600082601f830112614c1b578081fd5b813567ffffffffffffffff811115614c3557614c35615649565b614c48601f8201601f19166020016153fe565b818152846020838601011115614c5c578283fd5b816020850160208301379081016020019190915292915050565b80516001600160701b038116811461367457600080fd5b803561ffff8116811461367457600080fd5b805163ffffffff8116811461367457600080fd5b805160ff8116811461367457600080fd5b600060208284031215614cd5578081fd5b81356109f98161565f565b600060208284031215614cf1578081fd5b81516109f98161565f565b60008060408385031215614d0e578081fd5b8235614d198161565f565b91506020830135614d298161565f565b809150509250929050565b600080600060608486031215614d48578081fd5b8335614d538161565f565b92506020840135614d638161565f565b929592945050506040919091013590565b60008060408385031215614d86578182fd5b8235614d918161565f565b946020939093013593505050565b60006020808385031215614db1578182fd5b825167ffffffffffffffff80821115614dc8578384fd5b818501915085601f830112614ddb578384fd5b815181811115614ded57614ded615649565b8060051b9150614dfe8483016153fe565b8181528481019084860184860187018a1015614e18578788fd5b8795505b83861015614e3a578051835260019590950194918601918601614e1c565b5098975050505050505050565b600060208284031215614e58578081fd5b6109f982614bfb565b600080600060608486031215614e75578081fd5b614e7e84614c76565b9250614e8c60208501614c76565b9150614e9a60408501614c9f565b90509250925092565b600060208284031215614eb4578081fd5b6109f982614c8d565b600060208284031215614ece578081fd5b81356109f981615674565b600080600080600060a08688031215614ef0578283fd5b8551614efb81615674565b9450614f0960208701614cb3565b9350614f1760408701614c9f565b9250614f2560608701614c9f565b9150614f3360808701614c9f565b90509295509295909350565b60008060408385031215614f51578182fd5b614f5a83614c8d565b9150614f6860208401614c8d565b90509250929050565b600060208284031215614f82578081fd5b5035919050565b600060208284031215614f9a578081fd5b5051919050565b60008060008060008060c08789031215614fb9578384fd5b86519550614fc960208801614bfb565b94506040870151614fd981615674565b9350614fe760608801614cb3565b92506080870151915060a087015190509295509295509295565b600080600080600080600080610100898b03121561501d578586fd5b88359750602089013561502f8161565f565b9650604089013561503f8161565f565b9550606089013561504f8161565f565b9450608089013561505f8161565f565b935060a089013561506f8161565f565b925060c089013567ffffffffffffffff8082111561508b578384fd5b6150978c838d01614c0b565b935060e08b01359150808211156150ac578283fd5b506150b98b828c01614c0b565b9150509295985092959890939650565b600080604083850312156150db578182fd5b50508035926020909101359150565b600080604083850312156150fc578182fd5b505080516020909101519092909150565b600080600060608486031215615121578081fd5b8351925060208401519150604084015190509250925092565b60006020828403121561514b578081fd5b6109f982614c9f565b600080600060608486031215615168578081fd5b61517184614c9f565b9250602084015169ffffffffffffffffffff8116811461518f578182fd5b80925050604084015190509250925092565b6000602082840312156151b2578081fd5b6109f982614cb3565b600082516151cd8184602087016155b1565b9190910192915050565b6001600160a01b039788168152958716602087015260408601949094526060850192909252608084015290921660a082015260c081019190915260e00190565b606081016004851061523957634e487b7160e01b600052602160045260246000fd5b9381526001600160a01b0392909216602083015260409091015290565b60208152600082518060208401526152758160408501602087016155b1565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b818110156153dd5784516001600160a01b0316835293830193918301916001016153b8565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561542757615427615649565b604052919050565b600061ffff80831681851680830382111561544c5761544c615633565b01949350505050565b6000821982111561546857615468615633565b500190565b60008261548857634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156154c85781600019048211156154ae576154ae615633565b808516156154bb57918102915b93841c9390800290615492565b509250929050565b60006109f960ff8416836000826154e9575060016109d4565b816154f6575060006109d4565b816001811461550c576002811461551657615532565b60019150506109d4565b60ff84111561552757615527615633565b50506001821b6109d4565b5060208310610133831016604e8410600b8410161715615555575081810a6109d4565b61555f838361548d565b806000190482111561557357615573615633565b029392505050565b600081600019048311821515161561559557615595615633565b500290565b6000828210156155ac576155ac615633565b500390565b60005b838110156155cc5781810151838201526020016155b4565b838111156120265750506000910152565b600181811c908216806155f157607f821691505b6020821081141561561257634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561562c5761562c615633565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611d8257600080fd5b6001600160a81b0381168114611d8257600080fdfea2646970667358221220708bea4cca1abf983b81d36478a8c5ee8e65ccefde0bfedf5749e826c5520be464736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103c55760003560e01c806380b4ec9f116101ff578063ad7a672f1161011a578063e5f2eb5f116100ad578063f2fde38b1161007c578063f2fde38b146108b1578063f4b86023146108c4578063f887ea40146108d7578063fc0c546a146108ea57600080fd5b8063e5f2eb5f14610874578063ecd169ae14610887578063ee947a7c14610895578063f21d5bbf1461089e57600080fd5b8063dbd5edc7116100e9578063dbd5edc714610832578063dd62ed3e1461083b578063e1be525d1461084e578063e239e3f81461086157600080fd5b8063ad7a672f146107ce578063af03d9e114610803578063c3c9677214610816578063c98ece901461081f57600080fd5b806398ec20e511610192578063a457c2d711610161578063a457c2d714610796578063a5cfa15c146107a9578063a6eea7f3146107b2578063a9059cbb146107bb57600080fd5b806398ec20e5146107695780639a91ee1e146107715780639c6e009c14610784578063a08102161461078d57600080fd5b80638da5cb5b116101ce5780638da5cb5b1461071357806395d89b41146107245780639673fc4b14610748578063977b91d71461075657600080fd5b806380b4ec9f1461063357806381d12c581461064657806386651203146106ed5780638bf92bbe1461070057600080fd5b80634c255c97116102ef5780636a84a9851161028257806376b27f331161025157806376b27f33146105fb57806379a81656146106045780637b5d6fe3146106175780637d7c2a1c1461062b57600080fd5b80636a84a985146105ae57806370a08231146105b7578063715018a6146105e0578063767ac369146105e857600080fd5b806361176a0e116102be57806361176a0e14610569578063645006ca1461057c578063655d8dec1461058557806368378f86146105a557600080fd5b80634c255c97146105315780635a3bb9891461053a57806360e3fb6c1461055557806360ebfee61461055d57600080fd5b8063313ce567116103675780633e9bc3c9116103365780633e9bc3c9146104ed5780634568b3b1146104f5578063457e1a49146104fd5780634bde38c81461050657600080fd5b8063313ce5671461049d578063342273e4146104b257806339509351146104c55780633d43ef57146104d857600080fd5b80630cd34787116103a35780630cd347871461044457806318160ddd1461045b57806323b872dd14610463578063293d09151461047657600080fd5b806306fdde03146103ca5780630902f1ac14610404578063095ea7b314610421575b600080fd5b60408051808201909152600c81526b0546865746120435649204c560a41b60208201525b6040516103fb9190615256565b60405180910390f35b61040c6108fd565b604080519283526020830191909152016103fb565b61043461042f366004614d74565b6109c0565b60405190151581526020016103fb565b61044d60d15481565b6040519081526020016103fb565b60675461044d565b610434610471366004614d34565b6109da565b60d45461048a9062010000900461ffff1681565b60405161ffff90911681526020016103fb565b60125b60405160ff90911681526020016103fb565b61044d6104c0366004614ebd565b610a00565b6104346104d3366004614d74565b610a5b565b6104eb6104e63660046150c9565b610a7d565b005b6104a0600181565b61044d610ab2565b61044d60dc5481565b60cb54610519906001600160a01b031681565b6040516001600160a01b0390911681526020016103fb565b61048a61271081565b60de546105199064010000000090046001600160a01b031681565b6104a0600281565b61044d6402540be40081565b60cc54610519906001600160a01b031681565b61044d60db5481565b61044d610593366004614cc4565b60d06020526000908152604090205481565b61044d60d65481565b61044d60ce5481565b61044d6105c5366004614cc4565b6001600160a01b031660009081526065602052604090205490565b6104eb610e0f565b6104eb6105f63660046150c9565b610e45565b61044d60d95481565b6104eb610612366004614ea3565b610e7a565b60de5461048a9062010000900461ffff1681565b6104eb610ebc565b6104eb610641366004614f71565b610ef4565b6106a4610654366004614f71565b60cf602052600090815260409020805460019091015460ff8083169261010081046001600160a81b031692600160b01b90910463ffffffff16916001600160a01b03821691600160a01b90041685565b6040805160ff90961686526001600160a81b03909416602086015263ffffffff909216928401929092526001600160a01b0390911660608301521515608082015260a0016103fb565b6104eb6106fb366004614f71565b610ff1565b61044d61070e366004614ebd565b611020565b6033546001600160a01b0316610519565b6040805180820190915260088152670542d4356492d4c560c41b60208201526103ee565b60d45461048a9061ffff1681565b6104eb610764366004614cc4565b6110d3565b61048a600581565b6104eb61077f366004614f71565b61112b565b61044d60d35481565b61044d60d25481565b6104346107a4366004614d74565b61115a565b61044d60da5481565b61044d60d85481565b6104346107c9366004614d74565b6111e0565b6107d66111ee565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016103fb565b6104eb610811366004614f3f565b611223565b61044d60dd5481565b6104eb61082d366004614cc4565b61127d565b61044d60d55481565b61044d610849366004614cfc565b6112c9565b6104eb61085c366004614ea3565b6112f4565b61044d61086f366004614f71565b611336565b6104eb610882366004615001565b6115f5565b60de5461048a9061ffff1681565b61044d60d75481565b61044d6108ac366004614f71565b61185f565b6104eb6108bf366004614cc4565b611cea565b60c954610519906001600160a01b031681565b60cd54610519906001600160a01b031681565b60ca54610519906001600160a01b031681565b60008060008061090b611d85565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561094357600080fd5b505afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190614e61565b5060ca5460cc546001600160701b0393841695509190921692506001600160a01b03918216911610156109b3578193508092506109ba565b8093508192505b50509091565b6000336109ce818585611e8e565b60019150505b92915050565b6000336109e8858285611fb2565b6109f385858561202c565b60019150505b9392505050565b600060db54826001600160a81b03161015610a4e5760405162461bcd60e51b8152602060048201526009602482015268151bdbc81cdb585b1b60ba1b60448201526064015b60405180910390fd5b6109d460018360006121fa565b6000336109ce818585610a6e83836112c9565b610a789190615455565b611e8e565b6033546001600160a01b03163314610aa75760405162461bcd60e51b8152600401610a45906152d7565b60db9190915560dc55565b600080610abd6108fd565b5090506000610aca611d85565b905060cc60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1a57600080fd5b505afa158015610b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b529190614f89565b1580610bcc5750806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9257600080fd5b505afa158015610ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bca9190614f89565b155b15610bda5760009250505090565b6000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1557600080fd5b505afa158015610c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4d9190614f89565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a082319060240160206040518083038186803b158015610c8c57600080fd5b505afa158015610ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc49190614f89565b610cce908561557b565b610cd8919061546d565b60cb5460cc5460405163055f575160e41b81526001600160a01b0391821660048201529293506000929116906355f575109060240160a06040518083038186803b158015610d2557600080fd5b505afa158015610d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5d9190614ed9565b505050506001600160a81b0316905060cc60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dba57600080fd5b505afa158015610dce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df29190614f89565b610dfc838361557b565b610e06919061546d565b94505050505090565b6033546001600160a01b03163314610e395760405162461bcd60e51b8152600401610a45906152d7565b610e43600061245d565b565b6033546001600160a01b03163314610e6f5760405162461bcd60e51b8152600401610a45906152d7565b60d79190915560d855565b6033546001600160a01b03163314610ea45760405162461bcd60e51b8152600401610a45906152d7565b60d4805461ffff191661ffff92909216919091179055565b6033546001600160a01b03163314610ee65760405162461bcd60e51b8152600401610a45906152d7565b610ef060006124af565b5050565b60026097541415610f175760405162461bcd60e51b8152600401610a4590615357565b6002609755600081815260cf6020908152604091829020825160a081018452815460ff80821680845261010083046001600160a81b031695840195909552600160b01b90910463ffffffff16948201949094526001909101546001600160a01b0381166060830152600160a01b900490921615156080830152610f9957600080fd5b610fa282612950565b610fdf5760405162461bcd60e51b815260206004820152600e60248201526d4e6f74206c697175696461626c6560901b6044820152606401610a45565b610fe882612984565b50506001609755565b6033546001600160a01b0316331461101b5760405162461bcd60e51b8152600401610a45906152d7565b60d555565b600060dc54826001600160a81b031610156110695760405162461bcd60e51b8152602060048201526009602482015268151bdbc81cdb585b1b60ba1b6044820152606401610a45565b60d75433600090815260d06020526040902054429161108791615455565b11156110c65760405162461bcd60e51b815260206004820152600e60248201526d11195c1bdcda5d081b1bd8dad95960921b6044820152606401610a45565b6109d460028360006121fa565b6033546001600160a01b031633146110fd5760405162461bcd60e51b8152600401610a45906152d7565b60de80546001600160a01b0390921664010000000002640100000000600160c01b0319909216919091179055565b6033546001600160a01b031633146111555760405162461bcd60e51b8152600401610a45906152d7565b60d655565b6000338161116882866112c9565b9050838110156111c85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610a45565b6111d58286868403611e8e565b506001949350505050565b6000336109ce81858561202c565b6000806000806000806111ff612afa565b50929650909450925090506112148483612d4c565b90979096509394509192909190565b6033546001600160a01b0316331461124d5760405162461bcd60e51b8152600401610a45906152d7565b60d4805461ffff9384166201000090810263ffff0000199283161790925560de8054939094169091029116179055565b6033546001600160a01b031633146112a75760405162461bcd60e51b8152600401610a45906152d7565b60c980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b6033546001600160a01b0316331461131e5760405162461bcd60e51b8152600401610a45906152d7565b60de805461ffff191661ffff92909216919091179055565b600081815260cf60209081526040808320600180820154835160a081018552925460ff808216855261010082046001600160a81b031696850196909652600160b01b900463ffffffff16938301939093526001600160a01b0383166060830152600160a01b90920490921680151560808401528392839283929183916113bd918991612faa565b9196509450905080156113d7575060009695505050505050565b6113e0876130bf565b60006113f4866001600160a81b03166124af565b94509050600061140360675490565b1180156114105750600081115b15611443578061141f60675490565b611432906001600160a81b03891661557b565b61143c919061546d565b965061145c565b60d154611459906001600160a81b03881661557b565b96505b50506000851161146b57600080fd5b611475838661315f565b6001600160a01b038316600090815260d06020526040902042905560d2546001600160a81b03851611156114ad57600060d2556114ce565b836001600160a81b031660d260008282546114c8919061559a565b90915550505b60006114e3856001600160a81b03168461323e565b9050811561155a5760de54604051633174ff7d60e21b81526401000000009091046001600160a01b03169063c5d3fdf4906115279060009088908b90600401615217565b600060405180830381600087803b15801561154157600080fd5b505af1158015611555573d6000803e3d6000fd5b505050505b836001600160a01b03167fa7690d0009c94c00bb8bf9ac437b46aa227cf737189169782a3ab5d072bda2ff888784606001518560000151866040015187602001518d6040516115e397969594939291909687526001600160a81b0395909516602087015260408601939093526060850191909152608084015260a083015260c082015260e00190565b60405180910390a25050505050919050565b600061160160016135ec565b90508015611619576000805461ff0019166101001790555b6001600160a01b03881661162c57600080fd5b6001600160a01b03871661163f57600080fd5b6001600160a01b03851661165257600080fd5b6001600160a01b03841661166557600080fd5b6000891161167257600080fd5b600160ce81905560d95560d189905560d4805463ffffffff199081166305dc012c1790915560001960d55561070860d6556201518060d7556203f48060d855601e60da55620186a060db55662386f26fc1000060dc5560de8054909116630bb805dc1790556116df613679565b6116e76136a8565b6116f183836136d7565b60cb80546001600160a01b03808b166001600160a01b0319928316811790935560ca8054898316908416811790915560cc80548c841690851617905560cd805489841694169390931790925560de8054918a1664010000000002640100000000600160c01b031990921691909117905561176d91600019613708565b60cd5460ca5461178c916001600160a01b039182169116600019613708565b60cc5460ca546117ab916001600160a01b039182169116600019613708565b60cd5460cc546117ca916001600160a01b039182169116600019613708565b60cd546117f5906001600160a01b03166000196117e5611d85565b6001600160a01b03169190613708565b60cc5461180e906001600160a01b031680600019613708565b8015611854576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b600081815260cf60209081526040808320815160a081018352815460ff808216835261010082046001600160a81b031695830195909552600160b01b900463ffffffff1692810192909252600101546001600160a01b0381166060830152600160a01b9004909116151560808201528190819081906118e19086906002612faa565b92509250925080611ce2576118f660006124af565b505061192a6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60675460cb546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561197057600080fd5b505afa158015611984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a89190614f89565b6119bb906001600160a81b03871661557b565b6119c5919061546d565b602082015260006119d560675490565b6119dd611d85565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b158015611a1e57600080fd5b505afa158015611a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a569190614f89565b611a69906001600160a81b03881661557b565b611a73919061546d565b90508015611b2d5760cd5460cc5460ca54604051635d5155ef60e11b81526001600160a01b039384169363baa2abde93611ac1939082169291169086906000908190309042906004016151d7565b6040805180830381600087803b158015611ada57600080fd5b505af1158015611aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1291906150ea565b606084015260408301819052611b2790613864565b60808301525b60cb54602083015160405163452d003f60e01b81526001600160a01b039092169163452d003f91611b649160040190815260200190565b6040805180830381600087803b158015611b7d57600080fd5b505af1158015611b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb591906150ea565b8352506000611bc360675490565b866001600160a81b031660dd54611bda919061557b565b611be4919061546d565b905082608001518360600151846000015183611c009190615455565b611c0a9190615455565b611c149190615455565b96508060dd6000828254611c28919061559a565b90915550611c419050306001600160a81b038816613903565b611c4a886130bf565b60ca54611c61906001600160a01b03168689613a51565b825160408085015160808087015160608089015185518f8152602081018f905280870197909752908601939093529084015260a08301526001600160a81b03881660c0830152516001600160a01b038716917f4574d70f7fcf4382fe2ec80c834752c2addb47b7a07d163dd71ca054be2dd741919081900360e00190a25050505b505050919050565b6033546001600160a01b03163314611d145760405162461bcd60e51b8152600401610a45906152d7565b6001600160a01b038116611d795760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a45565b611d828161245d565b50565b60cd546040805163c45a015560e01b815290516000926001600160a01b03169163c45a0155916004808301926020929190829003018186803b158015611dca57600080fd5b505afa158015611dde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e029190614ce0565b60cc5460ca5460405163e6a4390560e01b81526001600160a01b039283166004820152908216602482015291169063e6a439059060440160206040518083038186803b158015611e5157600080fd5b505afa158015611e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e899190614ce0565b905090565b6001600160a01b038316611ef05760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a45565b6001600160a01b038216611f515760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a45565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000611fbe84846112c9565b9050600019811461202657818110156120195760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610a45565b6120268484848403611e8e565b50505050565b6001600160a01b0383166120905760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610a45565b6001600160a01b0382166120f25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610a45565b6001600160a01b0383166000908152606560205260409020548181101561216a5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610a45565b6001600160a01b038085166000908152606560205260408082208585039055918516815290812080548492906121a1908490615455565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516121ed91815260200190565b60405180910390a3612026565b60006002609754141561221f5760405162461bcd60e51b8152600401610a4590615357565b60026097556001600160a81b03831661223757600080fd5b60006122416111ee565b509394505050505060ff8516600114156122b45760d55460d25461226e6001600160a81b03871684615455565b6122789190615455565b11156122b45760405162461bcd60e51b815260206004820152600b60248201526a10d85c081c995858da195960aa1b6044820152606401610a45565b60ce5491506122c4826001615455565b60ce5560d6546000906122d79042615455565b6040805160a08101825260ff808a168083526001600160a81b03808b16602080860191825263ffffffff80891687890190815233606089019081528e151560808a0190815260008f815260cf909552999093209751885494519151909216600160b01b0263ffffffff60b01b1991909516610100026001600160b01b03199094169190961617919091179390931617835590516001928301805494511515600160a01b026001600160a81b03199095166001600160a01b0392909216919091179390931790925591925014156123c857846001600160a81b031660d260008282546123c29190615455565b90915550505b6123db86866001600160a81b0316613a81565b337fbf4d2957ec4d507c14dcbff7e87761bcb7d387e35cab2dcbf05cb283906599ec848888858761240b60675490565b6040805196875260ff9590951660208701526001600160a81b03939093168585015263ffffffff919091166060850152608084015260a0830152519081900360c00190a2505060016097559392505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008060008060006124c086613b04565b60d4549499509097509095509093509150600090612710906124ec9062010000900461ffff168261542f565b61ffff1660cb60009054906101000a90046001600160a01b03166001600160a01b0316632f811c226040518163ffffffff1660e01b815260040160206040518083038186803b15801561253e57600080fd5b505afa158015612552573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125769190614f89565b612580919061557b565b61258a919061546d565b9050600060cb60009054906101000a90046001600160a01b03166001600160a01b0316638d4d7e316040518163ffffffff1660e01b815260040160206040518083038186803b1580156125dc57600080fd5b505afa1580156125f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126149190614f89565b905082156129465760db546126299083615455565b8111156126dc57600061263c838361559a565b60cb54604051630441a3e760e41b81526004810183905260001960248201529192506000916001600160a01b039091169063441a3e70906044016040805180830381600087803b15801561268f57600080fd5b505af11580156126a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126c791906150ea565b9150506126d4818961323e565b505050612931565b8160db54826126eb9190615455565b10156129315760006126fd828461559a565b90508061270a8588615455565b11801561274f575060de5462010000900461ffff16886127108361272e888b615455565b612738919061559a565b612742919061557b565b61274c919061546d565b10155b1561292f5760006127608588615455565b612768611d85565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127a057600080fd5b505afa1580156127b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d89190614f89565b6127e2908461557b565b6127ec919061546d565b60cd5460cc5460ca54604051635d5155ef60e11b815293945060009384936001600160a01b039081169363baa2abde9361283893918316921690889087908190309042906004016151d7565b6040805180830381600087803b15801561285157600080fd5b505af1158015612865573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288991906150ea565b9150915060008161289984613864565b6128a39190615455565b60cb54604051631c57762b60e31b815260048101839052600060248201529192506001600160a01b03169063e2bbb15890604401602060405180830381600087803b1580156128f157600080fd5b505af1158015612905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129299190614f89565b50505050505b505b6129396111ee565b50939a5098509650909350505b5050505050915091565b60d854600082815260cf60205260408120549091429161297d9190600160b01b900463ffffffff16615455565b1092915050565b600081815260cf6020908152604091829020825160a081018452815460ff80821680845261010083046001600160a81b031695840195909552600160b01b90910463ffffffff16948201949094526001918201546001600160a01b0381166060830152600160a01b9004909316151560808401521415612a235780602001516001600160a81b031660d26000828254612a1d919061559a565b90915550505b612a2c826130bf565b805160ff1660021415612a5c5760608101516020820151612a579130916001600160a81b0316613a51565b612a87565b6060810151602082015160ca54612a87926001600160a01b03909116916001600160a81b0316613a51565b60608101518151602083015160405133936001600160a01b0316927ff6f94f933b96f98ce5b3687b190c131a0c4ede50caec0a7b2f1ea76035eec97292612aee928892919092835260ff9190911660208301526001600160a81b0316604082015260600190565b60405180910390a35050565b6000806000806000612b0a6108fd565b60cb5460cc5460405163055f575160e41b81526001600160a01b0391821660048201529296509294506001926000929116906355f575109060240160a06040518083038186803b158015612b5d57600080fd5b505afa158015612b71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b959190614ed9565b505050506001600160a81b0316905080600014612c365760cb5460cc546040516329b2a60b60e21b81526001600160a01b03918216600482015291169063a6ca982c9060240160c06040518083038186803b158015612bf357600080fd5b505afa158015612c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2b9190614fa1565b509399509194505050505b81612c4057600080fd5b600084118015612c505750600085115b15612d435760cc60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ca357600080fd5b505afa158015612cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdb9190614f89565b612ce5878661557b565b612cef919061546d565b96506000858811612d0957612d04888761559a565b612d13565b612d13868961559a565b60d45490915061271090612d2b9061ffff168a61557b565b612d35919061546d565b811115612d4157600193505b505b50509091929394565b6000806000612d59611d85565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015612d9e57600080fd5b505afa158015612db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd69190614f89565b9050600080600083118015612e5b57506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e2157600080fd5b505afa158015612e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e599190614f89565b115b15612f6f57836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e9957600080fd5b505afa158015612ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ed19190614f89565b612edb848a61557b565b612ee5919061546d565b9150836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f2057600080fd5b505afa158015612f34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f589190614f89565b612f62848961557b565b612f6c919061546d565b90505b612f77613b34565b945080828660dd54612f899190615455565b612f939190615455565b612f9d9190615455565b9550505050509250929050565b600080600060026097541415612fd25760405162461bcd60e51b8152600401610a4590615357565b600260975560608501516001600160a01b0316612fee57600080fd5b60c9546001600160a01b031633148061301c575084606001516001600160a01b0316336001600160a01b0316145b61302557600080fd5b8360ff16856000015160ff161461303b57600080fd5b846040015163ffffffff164210156130805760405162461bcd60e51b81526020600482015260086024820152672a37b79039b7b7b760c11b6044820152606401610a45565b61308986612950565b1561309f5761309786612984565b5060016130ae565b84602001519250846060015191505b600160978190555093509350939050565b600081815260cf6020526040812080546001600160d01b031916815560010180546001600160a81b031916905560d95490805b60ce5483108015613104575060da5482105b80156131285750600083815260cf60205260409020600101546001600160a01b0316155b15613151578161313781615618565b925050828061314590615618565b935050600190506130f2565b801561202657505060d95550565b6001600160a01b0382166131b55760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a45565b80606760008282546131c79190615455565b90915550506001600160a01b038216600090815260656020526040812080548392906131f4908490615455565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6132706040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60008061327b6108fd565b90925090506000806001841580613290575083155b1561329d57506000613473565b60cc60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156132eb57600080fd5b505afa1580156132ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133239190614f89565b60cc60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561337157600080fd5b505afa158015613385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a991906151a1565b6133b490600a6154d0565b6133be908961557b565b6133c8919061546d565b91508460cc60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561341957600080fd5b505afa15801561342d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061345191906151a1565b61345c90600a6154d0565b613466908661557b565b613470919061546d565b92505b801561355357613484888484613cd9565b60808901819052606089019190915290875260dd80546000906134a8908490615455565b909155505060cb546060870151604051631c57762b60e31b81526004810191909152600060248201526001600160a01b039091169063e2bbb15890604401602060405180830381600087803b15801561350057600080fd5b505af1158015613514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135389190614f89565b508551613544906140a9565b604088015260208701526135e1565b6060860188905260cb54604051631c57762b60e31b8152600481018a9052600060248201526001600160a01b039091169063e2bbb15890604401602060405180830381600087803b1580156135a757600080fd5b505af11580156135bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135df9190614f89565b505b505050505092915050565b60008054610100900460ff1615613633578160ff16600114801561360f5750303b155b61362b5760405162461bcd60e51b8152600401610a4590615289565b506000919050565b60005460ff80841691161061365a5760405162461bcd60e51b8152600401610a4590615289565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166136a05760405162461bcd60e51b8152600401610a459061530c565b610e436141cc565b600054610100900460ff166136cf5760405162461bcd60e51b8152600401610a459061530c565b610e436141fa565b600054610100900460ff166136fe5760405162461bcd60e51b8152600401610a459061530c565b610ef0828261422a565b8015806137915750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561375757600080fd5b505afa15801561376b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061378f9190614f89565b155b6137fc5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610a45565b6040516001600160a01b03831660248201526044810182905261385f90849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614278565b505050565b6000816001600160a81b038116811461387c57600080fd5b60cc5460405163ec27050760e01b81526001600160a81b03831660048201526001600160a01b039091169063ec270507906024015b602060405180830381600087803b1580156138cb57600080fd5b505af11580156138df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f99190614f89565b6001600160a01b0382166139635760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610a45565b6001600160a01b038216600090815260656020526040902054818110156139d75760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610a45565b6001600160a01b0383166000908152606560205260408120838303905560678054849290613a0690849061559a565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6040516001600160a01b03831660248201526044810182905261385f90849063a9059cbb60e01b90606401613828565b60ff821660021415613aec5733600090815260656020526040902054811115613ae05760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820746f6b656e7360781b6044820152606401610a45565b610ef03033818461434a565b60ca54610ef0906001600160a01b031633308461434a565b6000806000806000613b1586614382565b91945092509050613b268382612d4c565b909790965092945090925090565b60cb546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a082319060240160206040518083038186803b158015613b7c57600080fd5b505afa158015613b90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bb49190614f89565b90508015613cd55760cb60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c0a57600080fd5b505afa158015613c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c429190614f89565b60cb54604051630d9c362960e41b8152600160048201526001600160a01b039091169063d9c362909060240160206040518083038186803b158015613c8657600080fd5b505afa158015613c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cbe9190614f89565b613cc8908361557b565b613cd2919061546d565b91505b5090565b60de546000908190819061271090613cf59061ffff168861557b565b613cff919061546d565b90506000613d0d828861559a565b9050600060cb60009054906101000a90046001600160a01b03166001600160a01b0316636f7d78286040518163ffffffff1660e01b815260040160206040518083038186803b158015613d5f57600080fd5b505afa158015613d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d979190614ce0565b6001600160a01b031663c1639a2b6040518163ffffffff1660e01b815260040160606040518083038186803b158015613dcf57600080fd5b505afa158015613de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e079190615154565b505063ffffffff169050600060cb60009054906101000a90046001600160a01b03166001600160a01b031663d934c20b6040518163ffffffff1660e01b815260040160206040518083038186803b158015613e6157600080fd5b505afa158015613e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e99919061513a565b60cb5460cc546040516329b2a60b60e21b81526001600160a01b03918216600482015263ffffffff93909316935060009291169063a6ca982c9060240160c06040518083038186803b158015613eee57600080fd5b505afa158015613f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f269190614fa1565b5050505050905061271061ffff168289613f40919061557b565b613f4a8b8661557b565b613f549190615455565b613f5e919061557b565b60d4548390613f779062010000900461ffff168b61557b565b613f81919061557b565b613f8b9190615455565b84612710613f998b8761557b565b613fa3919061557b565b613fad919061557b565b613fb7919061546d565b965060008160cc60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561400a57600080fd5b505afa15801561401e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140429190614f89565b61404c908a61557b565b614056919061546d565b90506000806140636108fd565b9092509050600082614075838661557b565b61407f919061546d565b90508061408c8c8a61559a565b614096919061559a565b9950505050505050505093509350939050565b6000806140b583614411565b90506000806140c26108fd565b90925090506000826140d4838661557b565b6140de919061546d565b60cd5460cc5460ca5460405162e8e33760e81b81526001600160a01b039283166004820152908216602482015260448101889052606481018490526084810188905260a481018490523060c48201524260e482015292935060009291169063e8e337009061010401606060405180830381600087803b15801561416057600080fd5b505af1158015614174573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614198919061510d565b50965090508186146141a957600080fd5b8481146141b557600080fd5b6141bd6108fd565b50959794965093945050505050565b600054610100900460ff166141f35760405162461bcd60e51b8152600401610a459061530c565b6001609755565b600054610100900460ff166142215760405162461bcd60e51b8152600401610a459061530c565b610e433361245d565b600054610100900460ff166142515760405162461bcd60e51b8152600401610a459061530c565b8151614264906068906020850190614b6b565b50805161385f906069906020840190614b6b565b60006142cd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166144629092919063ffffffff16565b80519091501561385f57808060200190518101906142eb9190614e47565b61385f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a45565b6040516001600160a01b03808516602483015283166044820152606481018290526120269085906323b872dd60e01b90608401613828565b600080600080614390612afa565b9397509195509350909150508015614409576143ba60dd54866143b39190615455565b8584614479565b6143c2612afa565b93975091955093509091505080156144095760405162461bcd60e51b815260206004820152600a602482015269151bdbc81cdad95dd95960b21b6044820152606401610a45565b509193909250565b6000816001600160a81b038116811461442957600080fd5b60cc5460405163d4a56af160e01b81526001600160a81b03831660048201526001600160a01b039091169063d4a56af1906024016138b1565b60606144718484600085614a01565b949350505050565b600082821161449d57600261448e838561559a565b614498919061546d565b6144b3565b60026144a9848461559a565b6144b3919061546d565b905060008185101561466b5760006144cb868461559a565b60cb54604051630d9c362960e41b8152600160048201529192506001600160a01b03169063452d003f90829063d9c362909060240160206040518083038186803b15801561451857600080fd5b505afa15801561452c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145509190614f89565b60cb60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561459e57600080fd5b505afa1580156145b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145d69190614f89565b6145e0908561557b565b6145ea919061546d565b6040518263ffffffff1660e01b815260040161460891815260200190565b6040805180830381600087803b15801561462157600080fd5b505af1158015614635573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061465991906150ea565b925061466790508683615455565b9250505b6000848411156147e857600061468084614411565b6040805160028082526060820183529293506000929091602083019080368337505060cc5482519293506001600160a01b0316918391506000906146d457634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260ca5482519116908290600190811061471357634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260cd546040516338ed173960e01b815260009291909116906338ed17399061475d908690859087903090429060040161538e565b600060405180830381600087803b15801561477757600080fd5b505af115801561478b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526147b39190810190614d9f565b9050806001815181106147d657634e487b7160e01b600052603260045260246000fd5b6020026020010151935050505061494e565b604080516002808252606082018352600092602083019080368337505060ca5482519293506001600160a01b03169183915060009061483757634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260cc5482519116908290600190811061487657634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260cd546040516338ed173960e01b815260009291909116906338ed1739906148c0908890859087903090429060040161538e565b600060405180830381600087803b1580156148da57600080fd5b505af11580156148ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526149169190810190614d9f565b90506149498160018151811061493c57634e487b7160e01b600052603260045260246000fd5b6020026020010151613864565b925050505b82811161495a57600080fd5b60cb546001600160a01b031663e2bbb15883614976868561559a565b6149809190615455565b6040516001600160e01b031960e084901b168152600481019190915260006024820152604401602060405180830381600087803b1580156149c057600080fd5b505af11580156149d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149f89190614f89565b50505050505050565b606082471015614a625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a45565b6001600160a01b0385163b614ab95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a45565b600080866001600160a01b03168587604051614ad591906151bb565b60006040518083038185875af1925050503d8060008114614b12576040519150601f19603f3d011682016040523d82523d6000602084013e614b17565b606091505b5091509150614b27828286614b32565b979650505050505050565b60608315614b415750816109f9565b825115614b515782518084602001fd5b8160405162461bcd60e51b8152600401610a459190615256565b828054614b77906155dd565b90600052602060002090601f016020900481019282614b995760008555614bdf565b82601f10614bb257805160ff1916838001178555614bdf565b82800160010185558215614bdf579182015b82811115614bdf578251825591602001919060010190614bc4565b50613cd59291505b80821115613cd55760008155600101614be7565b8051801515811461367457600080fd5b600082601f830112614c1b578081fd5b813567ffffffffffffffff811115614c3557614c35615649565b614c48601f8201601f19166020016153fe565b818152846020838601011115614c5c578283fd5b816020850160208301379081016020019190915292915050565b80516001600160701b038116811461367457600080fd5b803561ffff8116811461367457600080fd5b805163ffffffff8116811461367457600080fd5b805160ff8116811461367457600080fd5b600060208284031215614cd5578081fd5b81356109f98161565f565b600060208284031215614cf1578081fd5b81516109f98161565f565b60008060408385031215614d0e578081fd5b8235614d198161565f565b91506020830135614d298161565f565b809150509250929050565b600080600060608486031215614d48578081fd5b8335614d538161565f565b92506020840135614d638161565f565b929592945050506040919091013590565b60008060408385031215614d86578182fd5b8235614d918161565f565b946020939093013593505050565b60006020808385031215614db1578182fd5b825167ffffffffffffffff80821115614dc8578384fd5b818501915085601f830112614ddb578384fd5b815181811115614ded57614ded615649565b8060051b9150614dfe8483016153fe565b8181528481019084860184860187018a1015614e18578788fd5b8795505b83861015614e3a578051835260019590950194918601918601614e1c565b5098975050505050505050565b600060208284031215614e58578081fd5b6109f982614bfb565b600080600060608486031215614e75578081fd5b614e7e84614c76565b9250614e8c60208501614c76565b9150614e9a60408501614c9f565b90509250925092565b600060208284031215614eb4578081fd5b6109f982614c8d565b600060208284031215614ece578081fd5b81356109f981615674565b600080600080600060a08688031215614ef0578283fd5b8551614efb81615674565b9450614f0960208701614cb3565b9350614f1760408701614c9f565b9250614f2560608701614c9f565b9150614f3360808701614c9f565b90509295509295909350565b60008060408385031215614f51578182fd5b614f5a83614c8d565b9150614f6860208401614c8d565b90509250929050565b600060208284031215614f82578081fd5b5035919050565b600060208284031215614f9a578081fd5b5051919050565b60008060008060008060c08789031215614fb9578384fd5b86519550614fc960208801614bfb565b94506040870151614fd981615674565b9350614fe760608801614cb3565b92506080870151915060a087015190509295509295509295565b600080600080600080600080610100898b03121561501d578586fd5b88359750602089013561502f8161565f565b9650604089013561503f8161565f565b9550606089013561504f8161565f565b9450608089013561505f8161565f565b935060a089013561506f8161565f565b925060c089013567ffffffffffffffff8082111561508b578384fd5b6150978c838d01614c0b565b935060e08b01359150808211156150ac578283fd5b506150b98b828c01614c0b565b9150509295985092959890939650565b600080604083850312156150db578182fd5b50508035926020909101359150565b600080604083850312156150fc578182fd5b505080516020909101519092909150565b600080600060608486031215615121578081fd5b8351925060208401519150604084015190509250925092565b60006020828403121561514b578081fd5b6109f982614c9f565b600080600060608486031215615168578081fd5b61517184614c9f565b9250602084015169ffffffffffffffffffff8116811461518f578182fd5b80925050604084015190509250925092565b6000602082840312156151b2578081fd5b6109f982614cb3565b600082516151cd8184602087016155b1565b9190910192915050565b6001600160a01b039788168152958716602087015260408601949094526060850192909252608084015290921660a082015260c081019190915260e00190565b606081016004851061523957634e487b7160e01b600052602160045260246000fd5b9381526001600160a01b0392909216602083015260409091015290565b60208152600082518060208401526152758160408501602087016155b1565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b818110156153dd5784516001600160a01b0316835293830193918301916001016153b8565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561542757615427615649565b604052919050565b600061ffff80831681851680830382111561544c5761544c615633565b01949350505050565b6000821982111561546857615468615633565b500190565b60008261548857634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156154c85781600019048211156154ae576154ae615633565b808516156154bb57918102915b93841c9390800290615492565b509250929050565b60006109f960ff8416836000826154e9575060016109d4565b816154f6575060006109d4565b816001811461550c576002811461551657615532565b60019150506109d4565b60ff84111561552757615527615633565b50506001821b6109d4565b5060208310610133831016604e8410600b8410161715615555575081810a6109d4565b61555f838361548d565b806000190482111561557357615573615633565b029392505050565b600081600019048311821515161561559557615595615633565b500290565b6000828210156155ac576155ac615633565b500390565b60005b838110156155cc5781810151838201526020016155b4565b838111156120265750506000910152565b600181811c908216806155f157607f821691505b6020821081141561561257634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561562c5761562c615633565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611d8257600080fd5b6001600160a81b0381168114611d8257600080fdfea2646970667358221220708bea4cca1abf983b81d36478a8c5ee8e65ccefde0bfedf5749e826c5520be464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 34444,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 34447,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 37301,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 34324,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 34436,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 34657,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 34663,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 34665,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 34667,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "_name",
        "offset": 0,
        "slot": "104",
        "type": "t_string_storage"
      },
      {
        "astId": 34669,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "105",
        "type": "t_string_storage"
      },
      {
        "astId": 35248,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "__gap",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 34593,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 34637,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10478,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "fulfiller",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 10481,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "token",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IERC20Upgradeable)35327"
      },
      {
        "astId": 10484,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "platform",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IPlatform)18123"
      },
      {
        "astId": 10488,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "volToken",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(IVolatilityToken)19308"
      },
      {
        "astId": 10491,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "router",
        "offset": 0,
        "slot": "205",
        "type": "t_contract(IUniswapV2Router02)16665"
      },
      {
        "astId": 10494,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "nextRequestId",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 10500,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "requests",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_uint256,t_struct(Request)10461_storage)"
      },
      {
        "astId": 10504,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "lastDepositTimestamp",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10506,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "initialTokenToThetaTokenRate",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 10508,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "totalDepositRequestsAmount",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 10511,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "totalVaultLeveragedAmount",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 10513,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "minPoolSkewPercentage",
        "offset": 0,
        "slot": "212",
        "type": "t_uint16"
      },
      {
        "astId": 10516,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "extraLiqidityPercentage",
        "offset": 2,
        "slot": "212",
        "type": "t_uint16"
      },
      {
        "astId": 10518,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "depositCap",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 10520,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "requestDelay",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 10522,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "lockupPeriod",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 10524,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "liquidationPeriod",
        "offset": 0,
        "slot": "216",
        "type": "t_uint256"
      },
      {
        "astId": 10527,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "minRequestId",
        "offset": 0,
        "slot": "217",
        "type": "t_uint256"
      },
      {
        "astId": 10530,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "maxMinRequestIncrements",
        "offset": 0,
        "slot": "218",
        "type": "t_uint256"
      },
      {
        "astId": 10532,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "minDepositAmount",
        "offset": 0,
        "slot": "219",
        "type": "t_uint256"
      },
      {
        "astId": 10534,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "minWithdrawAmount",
        "offset": 0,
        "slot": "220",
        "type": "t_uint256"
      },
      {
        "astId": 10536,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "totalHoldingsAmount",
        "offset": 0,
        "slot": "221",
        "type": "t_uint256"
      },
      {
        "astId": 10538,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "depositHoldingsPercentage",
        "offset": 0,
        "slot": "222",
        "type": "t_uint16"
      },
      {
        "astId": 10541,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "minDexPercentageAllowed",
        "offset": 2,
        "slot": "222",
        "type": "t_uint16"
      },
      {
        "astId": 10544,
        "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
        "label": "rewardRouter",
        "offset": 4,
        "slot": "222",
        "type": "t_contract(IRewardRouter)33575"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)35327": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IPlatform)18123": {
        "encoding": "inplace",
        "label": "contract IPlatform",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardRouter)33575": {
        "encoding": "inplace",
        "label": "contract IRewardRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)16665": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_contract(IVolatilityToken)19308": {
        "encoding": "inplace",
        "label": "contract IVolatilityToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Request)10461_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ThetaVault.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)10461_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Request)10461_storage": {
        "encoding": "inplace",
        "label": "struct ThetaVault.Request",
        "members": [
          {
            "astId": 10452,
            "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
            "label": "requestType",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 10454,
            "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
            "label": "tokenAmount",
            "offset": 1,
            "slot": "0",
            "type": "t_uint168"
          },
          {
            "astId": 10456,
            "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
            "label": "targetTimestamp",
            "offset": 22,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 10458,
            "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10460,
            "contract": "contracts/theta-vault/ThetaVaultContracts.sol:CVIUSDCThetaVault",
            "label": "shouldStake",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint168": {
        "encoding": "inplace",
        "label": "uint168",
        "numberOfBytes": "21"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}